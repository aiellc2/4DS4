
experiment1b.elf:     file format elf32-littlenios2
experiment1b.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000cf6c memsz 0x0000cf6c flags r-x
    LOAD off    0x0000df8c vaddr 0x0008cf8c paddr 0x0008e9e8 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010444 vaddr 0x00090444 paddr 0x00090444 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c9d8  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000400  0008cb8c  0008cb8c  0000db8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0008cf8c  0008e9e8  0000df8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00090444  00090444  00010444  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000f9e8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  0000fa10  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001444  00000000  00000000  000106c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000231b2  00000000  00000000  00011b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007a17  00000000  00000000  00034cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013f13  00000000  00000000  0003c6d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001988  00000000  00000000  000505e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000226e  00000000  00000000  00051f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bf61  00000000  00000000  000541de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00060140  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00060150  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063ad4  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00063ad7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00063adc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063add  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00063ade  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00063ae9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00063af4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  00063aff  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00063b0b  2**0
                  CONTENTS, READONLY
 26 .jdi          00000143  00000000  00000000  00063b44  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003ba8d  00000000  00000000  00063c87  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
0008cb8c l    d  .rodata	00000000 .rodata
0008cf8c l    d  .rwdata	00000000 .rwdata
00090444 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PB_button.c
00000000 l    df *ABS*	00000000 custom_counter.c
00000000 l    df *ABS*	00000000 experiment1b.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000807a4 l     F .text	00000058 __sprint_r
0008ccba l     O .rodata	00000010 blanks.3452
0008ccaa l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00082820 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084248 l     F .text	00000058 std
00084354 l     F .text	00000008 __fp_lock
0008435c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008cf8c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008e9b4 l     O .rwdata	00000004 charset
0008ccf0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008ce38 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00088708 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00089834 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008a138 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008a198 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008a29c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008a580 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008a660 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008a7c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008a9f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008e9dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008aca8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008d948 l     O .rwdata	00001060 jtag_uart_0
0008ad80 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008afc0 l     F .text	00000228 altera_avalon_jtag_uart_irq
0008b1e8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008ba88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008be98 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0008bfe8 l     F .text	000000f8 alt_file_locked
0008c26c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008c908 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0008cabc l     F .text	00000040 alt_sim_halt
00086038 g     F .text	00000094 _mprec_log10
00086124 g     F .text	00000088 __any_on
000878dc g     F .text	00000070 _isatty_r
0008ce10 g     O .rodata	00000028 __mprec_tinytens
0008a820 g     F .text	0000006c alt_main
0008067c g     F .text	000000a0 _puts_r
000904a0 g     O .bss	00000100 alt_irq
0008794c g     F .text	00000078 _lseek_r
0008e9e8 g       *ABS*	00000000 __flash_rwdata_start
00089228 g     F .text	00000088 __eqdf2
00090730 g       *ABS*	00000000 __alt_heap_start
00080604 g     F .text	00000044 printf
00087394 g     F .text	00000068 __sseek
000842b0 g     F .text	000000a4 __sinit
00084fbc g     F .text	00000084 _setlocale_r
000843b0 g     F .text	0000009c __sfmoreglue
0008a8ac g     F .text	00000020 __malloc_unlock
00080294 g     F .text	00000038 KEY3_Pressed
00085ab4 g     F .text	000000e0 memmove
000843a0 g     F .text	00000010 _cleanup
000861ac g     F .text	000000bc _Balloc
000804a8 g     F .text	00000028 read_counter_interrupt
00089338 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00087868 g     F .text	00000074 _fstat_r
0009045c g     O .bss	00000004 errno
00090468 g     O .bss	00000004 alt_argv
000969a8 g       *ABS*	00000000 _gp
0008d7c8 g     O .rwdata	00000180 alt_fd_list
0008c490 g     F .text	00000094 alt_find_dev
00085a14 g     F .text	000000a0 memcpy
00084394 g     F .text	0000000c _cleanup_r
000894d0 g     F .text	000000f8 __floatsidf
0008bf70 g     F .text	00000078 alt_io_redirect
00089448 g     F .text	00000088 __ltdf2
000803ec g     F .text	0000003c handle_counter_expire_interrupts
0008cb8c g       *ABS*	00000000 __DTOR_END__
0008071c g     F .text	00000014 puts
00085f88 g     F .text	000000b0 __ratio
0008b400 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080648 g     F .text	00000034 _printf_r
00089970 g     F .text	00000008 __udivsi3
0008a4bc g     F .text	000000c4 isatty
0008cd20 g     O .rodata	000000c8 __mprec_tens
00084f98 g     F .text	00000008 __locale_charset
00090450 g     O .bss	00000004 __malloc_top_pad
0008e9b0 g     O .rwdata	00000004 __mb_cur_max
00084fa0 g     F .text	0000000c _localeconv_r
00086910 g     F .text	0000003c __i2b
0008497c g     F .text	0000049c __sfvwrite_r
0008731c g     F .text	00000070 _sbrk_r
000879c4 g     F .text	00000078 _read_r
0008d38c g     O .rwdata	0000000c __lc_ctype
0008e9d0 g     O .rwdata	00000004 alt_max_fd
00089e38 g     F .text	00000138 __unpack_d
00087744 g     F .text	00000110 _fclose_r
00084214 g     F .text	00000034 fflush
00090454 g     O .bss	00000004 __malloc_max_sbrked_mem
0008a2fc g     F .text	000001c0 alt_irq_register
00088b98 g     F .text	00000074 __adddf3
00085e68 g     F .text	00000120 __b2d
000880a8 g     F .text	00000660 __umoddi3
0008a6cc g     F .text	000000f4 lseek
0008e9ac g     O .rwdata	00000004 _global_impure_ptr
00086cb8 g     F .text	000005f4 _realloc_r
00090730 g       *ABS*	00000000 __bss_end
0008bda0 g     F .text	000000f8 alt_iic_isr_register
0008c364 g     F .text	0000010c alt_tick
00087a3c g     F .text	0000066c __udivdi3
0008cde8 g     O .rodata	00000028 __mprec_bigtens
00086b98 g     F .text	00000120 __s2b
000896a0 g     F .text	00000194 __floatunsidf
00085d88 g     F .text	00000060 __mcmp
0008437c g     F .text	00000018 __fp_lock_all
0008bd58 g     F .text	00000048 alt_ic_irq_enabled
0008c2cc g     F .text	00000098 alt_alarm_stop
00090460 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
0008d7a0 g     O .rwdata	00000028 alt_dev_null
0008025c g     F .text	00000038 KEY2_Pressed
0008b9b8 g     F .text	0000001c alt_dcache_flush_all
00085c54 g     F .text	00000070 __hi0bits
000895c8 g     F .text	000000d8 __fixdfsi
0008e9e8 g       *ABS*	00000000 __ram_rwdata_end
0008e9c8 g     O .rwdata	00000008 alt_dev_list
0008ab84 g     F .text	00000124 write
0008cf8c g       *ABS*	00000000 __ram_rodata_end
0008a1c4 g     F .text	000000d8 fstat
00086a78 g     F .text	00000120 __pow5mult
00090444 g     O .bss	00000004 __nlocale_changed
00089978 g     F .text	00000008 __umodsi3
00090730 g       *ABS*	00000000 end
0008af00 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008cb88 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
00089aa4 g     F .text	00000080 __clzsi2
0008b624 g     F .text	00000240 altera_avalon_jtag_uart_write
000842a0 g     F .text	00000004 __sfp_lock_acquire
00085930 g     F .text	000000e4 memchr
000807fc g     F .text	00001ec4 ___vfprintf_internal_r
00084668 g     F .text	00000314 _free_r
0008c90c g     F .text	000001b0 __call_exitprocs
00090448 g     O .bss	00000004 __mlocale_changed
0008e9bc g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
00090470 g     O .bss	00000004 _alt_tick_rate
00086570 g     F .text	0000014c __lshift
00090474 g     O .bss	00000004 _alt_nticks
0008a8cc g     F .text	00000124 read
0008ad3c g     F .text	00000044 alt_sys_init
0008c7d4 g     F .text	00000134 __register_exitproc
000866bc g     F .text	00000254 __multiply
0008b298 g     F .text	00000074 altera_avalon_jtag_uart_close
000805cc g     F .text	00000038 __mulsi3
0008cf8c g       *ABS*	00000000 __ram_rwdata_start
0008cb8c g       *ABS*	00000000 __ram_rodata_start
00090478 g     O .bss	00000028 __malloc_current_mallinfo
00086268 g     F .text	0000017c __d2b
00080218 g     F .text	00000044 KEY1_Pressed
0008adb8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008c644 g     F .text	000000d0 alt_get_fd
00089f70 g     F .text	000000c8 __fpcmp_parts_d
000876d4 g     F .text	00000070 _close_r
0008c760 g     F .text	00000074 memcmp
0008ae68 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00090730 g       *ABS*	00000000 __alt_stack_base
0008aeb0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000826e4 g     F .text	0000013c __swsetup_r
00088fd0 g     F .text	00000258 __divdf3
0008444c g     F .text	000000f0 __sfp
000860cc g     F .text	00000058 __copybits
0008d398 g     O .rwdata	00000408 __malloc_av_
000842ac g     F .text	00000004 __sinit_lock_release
00088c0c g     F .text	000003c4 __muldf3
00087478 g     F .text	00000060 __sread
0008c524 g     F .text	00000120 alt_find_file
0008b9d4 g     F .text	000000b4 alt_dev_llist_insert
0008a88c g     F .text	00000020 __malloc_lock
0008aac8 g     F .text	000000bc sbrk
00084018 g     F .text	000001fc _fflush_r
0008760c g     F .text	000000c8 _calloc_r
00090444 g       *ABS*	00000000 __bss_start
00085b94 g     F .text	00000098 memset
0008055c g     F .text	00000070 main
0009046c g     O .bss	00000004 alt_envp
00090458 g     O .bss	00000004 __malloc_max_total_mem
0008ae10 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0008738c g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
00080518 g     F .text	00000044 init_counter_irq
00087854 g     F .text	00000014 fclose
000905a0 g     O .bss	00000190 _atexit0
00082a64 g     F .text	000015b4 _dtoa_r
000851f0 g     F .text	00000740 _malloc_r
0008e9d4 g     O .rwdata	00000004 alt_errno
00084ee0 g     F .text	000000b8 _fwalk
000898b0 g     F .text	00000060 __divsi3
0008ce44 g     O .rodata	00000014 __thenan_df
0008453c g     F .text	0000012c _malloc_trim_r
0008cb8c g       *ABS*	00000000 __CTOR_END__
000874d8 g     F .text	000000bc strcmp
0008cb8c g       *ABS*	00000000 __flash_rodata_start
0008cb8c g       *ABS*	00000000 __DTOR_LIST__
000892b0 g     F .text	00000088 __nedf2
00080000 g       *ABS*	00000000 __alt_mem_sram_0
0008ad08 g     F .text	00000034 alt_irq_init
0008aa50 g     F .text	00000078 alt_release_fd
00080398 g     F .text	00000054 init_button_irq
0008ce58 g     O .rodata	00000100 __clz_tab
0009044c g     O .bss	00000004 _PathLocale
00080428 g     F .text	00000058 reset_counter
0008c714 g     F .text	00000014 atexit
00087594 g     F .text	00000078 _write_r
00085040 g     F .text	0000001c setlocale
0008e9a8 g     O .rwdata	00000004 _impure_ptr
00090464 g     O .bss	00000004 alt_argc
0008bb4c g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00085de8 g     F .text	00000080 __ulp
000872ac g     F .text	00000040 __isinfd
00084364 g     F .text	00000018 __fp_unlock_all
0008e9c0 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00084fac g     F .text	00000010 localeconv
0008bbcc g     F .text	00000050 alt_ic_isr_register
0008e9e8 g       *ABS*	00000000 _edata
000801f0 g     F .text	00000028 KEY0_Pressed
00090730 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
0008b30c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008bcb8 g     F .text	000000a0 alt_ic_irq_disable
000873fc g     F .text	0000007c __swrite
0008e9b8 g     O .rwdata	00000004 __malloc_trim_threshold
0008c470 g     F .text	00000020 altera_nios2_qsys_irq_init
0008c728 g     F .text	00000038 exit
00084e18 g     F .text	000000c8 _fwalk_reent
000804d0 g     F .text	00000048 load_counter_config
000863e4 g     F .text	0000018c __mdiff
00089910 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000842a4 g     F .text	00000004 __sfp_lock_release
0008cafc g     F .text	00000020 _exit
000872ec g     F .text	00000030 __isnand
0008b864 g     F .text	00000154 alt_alarm_start
00080480 g     F .text	00000028 read_counter
00089980 g     F .text	00000124 __muldi3
0008505c g     F .text	00000194 __smakebuf_r
00080730 g     F .text	00000074 strlen
0008c0e0 g     F .text	0000018c open
000893c0 g     F .text	00000088 __gedf2
0008bbb0 g     F .text	0000001c alt_icache_flush_all
0008e9d8 g     O .rwdata	00000004 alt_priority_mask
0008bc1c g     F .text	0000009c alt_ic_irq_enable
000826c0 g     F .text	00000024 __vfprintf_internal
00088b18 g     F .text	00000080 __subdf3
00085cc4 g     F .text	000000c4 __lo0bits
0008e9e0 g     O .rwdata	00000008 alt_alarm_list
0008bae8 g     F .text	00000064 _do_ctors
000802cc g     F .text	000000cc handle_button_interrupts
0008a038 g     F .text	00000100 close
0008a5e0 g     F .text	00000080 alt_load
00089b24 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000842a8 g     F .text	00000004 __sinit_lock_acquire
0008694c g     F .text	0000012c __multadd
00085c2c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18c12804 	addi	r3,r3,1184
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18c12804 	addi	r3,r3,1184
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d69a6a14 	ori	gp,gp,27048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801c8:	10811114 	ori	r2,r2,1092

    movhi r3, %hi(__bss_end)
   801cc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d0:	18c1cc14 	ori	r3,r3,1840

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008a5e00 	call	8a5e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008a8200 	call	8a820 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <KEY0_Pressed>:
// McMaster University
// Ontario, Canada

#include "define.h"

void KEY0_Pressed() {
   801f0:	defffe04 	addi	sp,sp,-8
   801f4:	dfc00115 	stw	ra,4(sp)
   801f8:	df000015 	stw	fp,0(sp)
   801fc:	d839883a 	mov	fp,sp
	reset_counter();
   80200:	00804280 	call	80428 <reset_counter>
}
   80204:	e037883a 	mov	sp,fp
   80208:	dfc00117 	ldw	ra,4(sp)
   8020c:	df000017 	ldw	fp,0(sp)
   80210:	dec00204 	addi	sp,sp,8
   80214:	f800283a 	ret

00080218 <KEY1_Pressed>:

void KEY1_Pressed() {
   80218:	defffe04 	addi	sp,sp,-8
   8021c:	dfc00115 	stw	ra,4(sp)
   80220:	df000015 	stw	fp,0(sp)
   80224:	d839883a 	mov	fp,sp
	load_counter_config((IORD(SWITCH_I_BASE, 0) & 0x18000) >> 15);
   80228:	00800434 	movhi	r2,16
   8022c:	10840004 	addi	r2,r2,4096
   80230:	10c00037 	ldwio	r3,0(r2)
   80234:	008000b4 	movhi	r2,2
   80238:	10a00004 	addi	r2,r2,-32768
   8023c:	1884703a 	and	r2,r3,r2
   80240:	1009d3fa 	srai	r4,r2,15
   80244:	00804d00 	call	804d0 <load_counter_config>
}
   80248:	e037883a 	mov	sp,fp
   8024c:	dfc00117 	ldw	ra,4(sp)
   80250:	df000017 	ldw	fp,0(sp)
   80254:	dec00204 	addi	sp,sp,8
   80258:	f800283a 	ret

0008025c <KEY2_Pressed>:

void KEY2_Pressed() {
   8025c:	defffe04 	addi	sp,sp,-8
   80260:	dfc00115 	stw	ra,4(sp)
   80264:	df000015 	stw	fp,0(sp)
   80268:	d839883a 	mov	fp,sp
	printf("Counter value = %d\n", read_counter());
   8026c:	00804800 	call	80480 <read_counter>
   80270:	100b883a 	mov	r5,r2
   80274:	01000274 	movhi	r4,9
   80278:	2132e304 	addi	r4,r4,-13428
   8027c:	00806040 	call	80604 <printf>
}
   80280:	e037883a 	mov	sp,fp
   80284:	dfc00117 	ldw	ra,4(sp)
   80288:	df000017 	ldw	fp,0(sp)
   8028c:	dec00204 	addi	sp,sp,8
   80290:	f800283a 	ret

00080294 <KEY3_Pressed>:

void KEY3_Pressed() {
   80294:	defffe04 	addi	sp,sp,-8
   80298:	dfc00115 	stw	ra,4(sp)
   8029c:	df000015 	stw	fp,0(sp)
   802a0:	d839883a 	mov	fp,sp
	printf("IRQ value: %d\n", read_counter_interrupt());
   802a4:	00804a80 	call	804a8 <read_counter_interrupt>
   802a8:	100b883a 	mov	r5,r2
   802ac:	01000274 	movhi	r4,9
   802b0:	2132e804 	addi	r4,r4,-13408
   802b4:	00806040 	call	80604 <printf>
}
   802b8:	e037883a 	mov	sp,fp
   802bc:	dfc00117 	ldw	ra,4(sp)
   802c0:	df000017 	ldw	fp,0(sp)
   802c4:	dec00204 	addi	sp,sp,8
   802c8:	f800283a 	ret

000802cc <handle_button_interrupts>:

// ISR when any PB is pressed
void handle_button_interrupts()
{
   802cc:	defffd04 	addi	sp,sp,-12
   802d0:	dfc00215 	stw	ra,8(sp)
   802d4:	df000115 	stw	fp,4(sp)
   802d8:	df000104 	addi	fp,sp,4
	IOWR(LED_GREEN_0_BASE, 0, IORD(PUSH_BUTTON_I_BASE, 3)*IORD(PUSH_BUTTON_I_BASE, 3));
   802dc:	00800434 	movhi	r2,16
   802e0:	10841304 	addi	r2,r2,4172
   802e4:	11000037 	ldwio	r4,0(r2)
   802e8:	00800434 	movhi	r2,16
   802ec:	10841304 	addi	r2,r2,4172
   802f0:	11400037 	ldwio	r5,0(r2)
   802f4:	00805cc0 	call	805cc <__mulsi3>
   802f8:	1007883a 	mov	r3,r2
   802fc:	00800434 	movhi	r2,16
   80300:	10840804 	addi	r2,r2,4128
   80304:	10c00035 	stwio	r3,0(r2)
	
	switch(IORD(PUSH_BUTTON_I_BASE, 3)) {
   80308:	00800434 	movhi	r2,16
   8030c:	10841304 	addi	r2,r2,4172
   80310:	10800037 	ldwio	r2,0(r2)
   80314:	e0bfff15 	stw	r2,-4(fp)
   80318:	e0ffff17 	ldw	r3,-4(fp)
   8031c:	188000a0 	cmpeqi	r2,r3,2
   80320:	1000101e 	bne	r2,zero,80364 <handle_button_interrupts+0x98>
   80324:	e0ffff17 	ldw	r3,-4(fp)
   80328:	188000c8 	cmpgei	r2,r3,3
   8032c:	1000041e 	bne	r2,zero,80340 <handle_button_interrupts+0x74>
   80330:	e0ffff17 	ldw	r3,-4(fp)
   80334:	18800060 	cmpeqi	r2,r3,1
   80338:	1000081e 	bne	r2,zero,8035c <handle_button_interrupts+0x90>
   8033c:	00000e06 	br	80378 <handle_button_interrupts+0xac>
   80340:	e0ffff17 	ldw	r3,-4(fp)
   80344:	18800120 	cmpeqi	r2,r3,4
   80348:	1000081e 	bne	r2,zero,8036c <handle_button_interrupts+0xa0>
   8034c:	e0ffff17 	ldw	r3,-4(fp)
   80350:	18800220 	cmpeqi	r2,r3,8
   80354:	1000071e 	bne	r2,zero,80374 <handle_button_interrupts+0xa8>
   80358:	00000706 	br	80378 <handle_button_interrupts+0xac>
	case 1: KEY0_Pressed(); break;
   8035c:	00801f00 	call	801f0 <KEY0_Pressed>
   80360:	00000506 	br	80378 <handle_button_interrupts+0xac>
	case 2: KEY1_Pressed(); break;
   80364:	00802180 	call	80218 <KEY1_Pressed>
   80368:	00000306 	br	80378 <handle_button_interrupts+0xac>
	case 4: KEY2_Pressed(); break;
   8036c:	008025c0 	call	8025c <KEY2_Pressed>
   80370:	00000106 	br	80378 <handle_button_interrupts+0xac>
	case 8: KEY3_Pressed(); break;
   80374:	00802940 	call	80294 <KEY3_Pressed>
	}
	IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   80378:	00800434 	movhi	r2,16
   8037c:	10841304 	addi	r2,r2,4172
   80380:	10000035 	stwio	zero,0(r2)
}
   80384:	e037883a 	mov	sp,fp
   80388:	dfc00117 	ldw	ra,4(sp)
   8038c:	df000017 	ldw	fp,0(sp)
   80390:	dec00204 	addi	sp,sp,8
   80394:	f800283a 	ret

00080398 <init_button_irq>:

// Function for initializing the ISR of the PBs
// The PBs are setup to generate interrupt on falling edge,
// and the interrupt is captured when the edge comes
void init_button_irq() {
   80398:	defffe04 	addi	sp,sp,-8
   8039c:	dfc00115 	stw	ra,4(sp)
   803a0:	df000015 	stw	fp,0(sp)
   803a4:	d839883a 	mov	fp,sp
  // Enable all 4 button interrupts
  IOWR(PUSH_BUTTON_I_BASE, 2, BUTTON_INT_MASK);
   803a8:	00800434 	movhi	r2,16
   803ac:	10841204 	addi	r2,r2,4168
   803b0:	00c003c4 	movi	r3,15
   803b4:	10c00035 	stwio	r3,0(r2)

  // Reset the edge capture register
  IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   803b8:	00800434 	movhi	r2,16
   803bc:	10841304 	addi	r2,r2,4172
   803c0:	10000035 	stwio	zero,0(r2)

  // Register the interrupt handler
  alt_irq_register(PUSH_BUTTON_I_IRQ, NULL, (void*)handle_button_interrupts );
   803c4:	01000044 	movi	r4,1
   803c8:	000b883a 	mov	r5,zero
   803cc:	01800234 	movhi	r6,8
   803d0:	3180b304 	addi	r6,r6,716
   803d4:	008a2fc0 	call	8a2fc <alt_irq_register>
}
   803d8:	e037883a 	mov	sp,fp
   803dc:	dfc00117 	ldw	ra,4(sp)
   803e0:	df000017 	ldw	fp,0(sp)
   803e4:	dec00204 	addi	sp,sp,8
   803e8:	f800283a 	ret

000803ec <handle_counter_expire_interrupts>:
#include "define.h"

// ISR when the counter is expired
void handle_counter_expire_interrupts()
{
   803ec:	defffe04 	addi	sp,sp,-8
   803f0:	dfc00115 	stw	ra,4(sp)
   803f4:	df000015 	stw	fp,0(sp)
   803f8:	d839883a 	mov	fp,sp
	printf("Counter expires\n");
   803fc:	01000274 	movhi	r4,9
   80400:	2132ec04 	addi	r4,r4,-13392
   80404:	008071c0 	call	8071c <puts>

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80408:	00800434 	movhi	r2,16
   8040c:	10840e04 	addi	r2,r2,4152
   80410:	10000035 	stwio	zero,0(r2)
}
   80414:	e037883a 	mov	sp,fp
   80418:	dfc00117 	ldw	ra,4(sp)
   8041c:	df000017 	ldw	fp,0(sp)
   80420:	dec00204 	addi	sp,sp,8
   80424:	f800283a 	ret

00080428 <reset_counter>:

void reset_counter() {
   80428:	defffe04 	addi	sp,sp,-8
   8042c:	dfc00115 	stw	ra,4(sp)
   80430:	df000015 	stw	fp,0(sp)
   80434:	d839883a 	mov	fp,sp
	printf("Resetting counter value\n");
   80438:	01000274 	movhi	r4,9
   8043c:	2132f004 	addi	r4,r4,-13376
   80440:	008071c0 	call	8071c <puts>

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 1);
   80444:	00c00434 	movhi	r3,16
   80448:	18c40d04 	addi	r3,r3,4148
   8044c:	00800044 	movi	r2,1
   80450:	18800035 	stwio	r2,0(r3)
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 0);
   80454:	00800434 	movhi	r2,16
   80458:	10840d04 	addi	r2,r2,4148
   8045c:	10000035 	stwio	zero,0(r2)

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80460:	00800434 	movhi	r2,16
   80464:	10840e04 	addi	r2,r2,4152
   80468:	10000035 	stwio	zero,0(r2)
}
   8046c:	e037883a 	mov	sp,fp
   80470:	dfc00117 	ldw	ra,4(sp)
   80474:	df000017 	ldw	fp,0(sp)
   80478:	dec00204 	addi	sp,sp,8
   8047c:	f800283a 	ret

00080480 <read_counter>:

int read_counter() {
   80480:	deffff04 	addi	sp,sp,-4
   80484:	df000015 	stw	fp,0(sp)
   80488:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 0);
   8048c:	00800434 	movhi	r2,16
   80490:	10840c04 	addi	r2,r2,4144
   80494:	10800037 	ldwio	r2,0(r2)
}
   80498:	e037883a 	mov	sp,fp
   8049c:	df000017 	ldw	fp,0(sp)
   804a0:	dec00104 	addi	sp,sp,4
   804a4:	f800283a 	ret

000804a8 <read_counter_interrupt>:

int read_counter_interrupt() {
   804a8:	deffff04 	addi	sp,sp,-4
   804ac:	df000015 	stw	fp,0(sp)
   804b0:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 2);
   804b4:	00800434 	movhi	r2,16
   804b8:	10840e04 	addi	r2,r2,4152
   804bc:	10800037 	ldwio	r2,0(r2)
}
   804c0:	e037883a 	mov	sp,fp
   804c4:	df000017 	ldw	fp,0(sp)
   804c8:	dec00104 	addi	sp,sp,4
   804cc:	f800283a 	ret

000804d0 <load_counter_config>:

void load_counter_config(int config) {
   804d0:	defffd04 	addi	sp,sp,-12
   804d4:	dfc00215 	stw	ra,8(sp)
   804d8:	df000115 	stw	fp,4(sp)
   804dc:	df000104 	addi	fp,sp,4
   804e0:	e13fff15 	stw	r4,-4(fp)
	printf("Loading counter config %d\n", config);
   804e4:	01000274 	movhi	r4,9
   804e8:	2132f604 	addi	r4,r4,-13352
   804ec:	e17fff17 	ldw	r5,-4(fp)
   804f0:	00806040 	call	80604 <printf>

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 3, config);
   804f4:	00c00434 	movhi	r3,16
   804f8:	18c40f04 	addi	r3,r3,4156
   804fc:	e0bfff17 	ldw	r2,-4(fp)
   80500:	18800035 	stwio	r2,0(r3)
}
   80504:	e037883a 	mov	sp,fp
   80508:	dfc00117 	ldw	ra,4(sp)
   8050c:	df000017 	ldw	fp,0(sp)
   80510:	dec00204 	addi	sp,sp,8
   80514:	f800283a 	ret

00080518 <init_counter_irq>:

// Function for initializing the ISR of the Counter
void init_counter_irq() {
   80518:	defffe04 	addi	sp,sp,-8
   8051c:	dfc00115 	stw	ra,4(sp)
   80520:	df000015 	stw	fp,0(sp)
   80524:	d839883a 	mov	fp,sp
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80528:	00800434 	movhi	r2,16
   8052c:	10840e04 	addi	r2,r2,4152
   80530:	10000035 	stwio	zero,0(r2)

	alt_irq_register(CUSTOM_COUNTER_COMPONENT_0_IRQ, NULL, (void*)handle_counter_expire_interrupts );
   80534:	01000084 	movi	r4,2
   80538:	000b883a 	mov	r5,zero
   8053c:	01800234 	movhi	r6,8
   80540:	3180fb04 	addi	r6,r6,1004
   80544:	008a2fc0 	call	8a2fc <alt_irq_register>
}
   80548:	e037883a 	mov	sp,fp
   8054c:	dfc00117 	ldw	ra,4(sp)
   80550:	df000017 	ldw	fp,0(sp)
   80554:	dec00204 	addi	sp,sp,8
   80558:	f800283a 	ret

0008055c <main>:
// Ontario, Canada

#include "define.h"

int main()
{
   8055c:	defffe04 	addi	sp,sp,-8
   80560:	dfc00115 	stw	ra,4(sp)
   80564:	df000015 	stw	fp,0(sp)
   80568:	d839883a 	mov	fp,sp
	printf("Start main...\n");
   8056c:	01000274 	movhi	r4,9
   80570:	2132fd04 	addi	r4,r4,-13324
   80574:	008071c0 	call	8071c <puts>

	init_button_irq();
   80578:	00803980 	call	80398 <init_button_irq>
	printf("PB initialized...\n");
   8057c:	01000274 	movhi	r4,9
   80580:	21330104 	addi	r4,r4,-13308
   80584:	008071c0 	call	8071c <puts>

	init_counter_irq();
   80588:	00805180 	call	80518 <init_counter_irq>
	printf("Counter IRQ initialized...\n");
   8058c:	01000274 	movhi	r4,9
   80590:	21330604 	addi	r4,r4,-13288
   80594:	008071c0 	call	8071c <puts>

	IOWR(LED_GREEN_0_BASE, 0, 0x0);
   80598:	00800434 	movhi	r2,16
   8059c:	10840804 	addi	r2,r2,4128
   805a0:	10000035 	stwio	zero,0(r2)
	IOWR(LED_RED_0_BASE, 0, 0x0);
   805a4:	00800434 	movhi	r2,16
   805a8:	10840404 	addi	r2,r2,4112
   805ac:	10000035 	stwio	zero,0(r2)

	printf("Switch value: %X\n", IORD(SWITCH_I_BASE, 0));
   805b0:	00800434 	movhi	r2,16
   805b4:	10840004 	addi	r2,r2,4096
   805b8:	11400037 	ldwio	r5,0(r2)
   805bc:	01000274 	movhi	r4,9
   805c0:	21330d04 	addi	r4,r4,-13260
   805c4:	00806040 	call	80604 <printf>

	while (1);
   805c8:	003fff06 	br	805c8 <main+0x6c>

000805cc <__mulsi3>:
   805cc:	20000a26 	beq	r4,zero,805f8 <__mulsi3+0x2c>
   805d0:	0007883a 	mov	r3,zero
   805d4:	2080004c 	andi	r2,r4,1
   805d8:	1005003a 	cmpeq	r2,r2,zero
   805dc:	2008d07a 	srli	r4,r4,1
   805e0:	1000011e 	bne	r2,zero,805e8 <__mulsi3+0x1c>
   805e4:	1947883a 	add	r3,r3,r5
   805e8:	294b883a 	add	r5,r5,r5
   805ec:	203ff91e 	bne	r4,zero,805d4 <__mulsi3+0x8>
   805f0:	1805883a 	mov	r2,r3
   805f4:	f800283a 	ret
   805f8:	0007883a 	mov	r3,zero
   805fc:	1805883a 	mov	r2,r3
   80600:	f800283a 	ret

00080604 <printf>:
   80604:	defffb04 	addi	sp,sp,-20
   80608:	dfc00115 	stw	ra,4(sp)
   8060c:	d9400215 	stw	r5,8(sp)
   80610:	d9800315 	stw	r6,12(sp)
   80614:	d9c00415 	stw	r7,16(sp)
   80618:	00800274 	movhi	r2,9
   8061c:	10ba6a04 	addi	r2,r2,-5720
   80620:	10c00017 	ldw	r3,0(r2)
   80624:	200b883a 	mov	r5,r4
   80628:	d8800204 	addi	r2,sp,8
   8062c:	19000217 	ldw	r4,8(r3)
   80630:	100d883a 	mov	r6,r2
   80634:	d8800015 	stw	r2,0(sp)
   80638:	00826c00 	call	826c0 <__vfprintf_internal>
   8063c:	dfc00117 	ldw	ra,4(sp)
   80640:	dec00504 	addi	sp,sp,20
   80644:	f800283a 	ret

00080648 <_printf_r>:
   80648:	defffc04 	addi	sp,sp,-16
   8064c:	dfc00115 	stw	ra,4(sp)
   80650:	d9800215 	stw	r6,8(sp)
   80654:	d9c00315 	stw	r7,12(sp)
   80658:	280d883a 	mov	r6,r5
   8065c:	21400217 	ldw	r5,8(r4)
   80660:	d8c00204 	addi	r3,sp,8
   80664:	180f883a 	mov	r7,r3
   80668:	d8c00015 	stw	r3,0(sp)
   8066c:	00807fc0 	call	807fc <___vfprintf_internal_r>
   80670:	dfc00117 	ldw	ra,4(sp)
   80674:	dec00404 	addi	sp,sp,16
   80678:	f800283a 	ret

0008067c <_puts_r>:
   8067c:	defff604 	addi	sp,sp,-40
   80680:	dc400715 	stw	r17,28(sp)
   80684:	2023883a 	mov	r17,r4
   80688:	2809883a 	mov	r4,r5
   8068c:	dfc00915 	stw	ra,36(sp)
   80690:	dcc00815 	stw	r19,32(sp)
   80694:	2827883a 	mov	r19,r5
   80698:	00807300 	call	80730 <strlen>
   8069c:	89400217 	ldw	r5,8(r17)
   806a0:	00c00274 	movhi	r3,9
   806a4:	18f31204 	addi	r3,r3,-13240
   806a8:	01c00044 	movi	r7,1
   806ac:	12000044 	addi	r8,r2,1
   806b0:	d8c00515 	stw	r3,20(sp)
   806b4:	d9c00615 	stw	r7,24(sp)
   806b8:	d8c00304 	addi	r3,sp,12
   806bc:	01c00084 	movi	r7,2
   806c0:	8809883a 	mov	r4,r17
   806c4:	d80d883a 	mov	r6,sp
   806c8:	d8c00015 	stw	r3,0(sp)
   806cc:	dcc00315 	stw	r19,12(sp)
   806d0:	da000215 	stw	r8,8(sp)
   806d4:	d9c00115 	stw	r7,4(sp)
   806d8:	d8800415 	stw	r2,16(sp)
   806dc:	008497c0 	call	8497c <__sfvwrite_r>
   806e0:	00ffffc4 	movi	r3,-1
   806e4:	10000626 	beq	r2,zero,80700 <_puts_r+0x84>
   806e8:	1805883a 	mov	r2,r3
   806ec:	dfc00917 	ldw	ra,36(sp)
   806f0:	dcc00817 	ldw	r19,32(sp)
   806f4:	dc400717 	ldw	r17,28(sp)
   806f8:	dec00a04 	addi	sp,sp,40
   806fc:	f800283a 	ret
   80700:	00c00284 	movi	r3,10
   80704:	1805883a 	mov	r2,r3
   80708:	dfc00917 	ldw	ra,36(sp)
   8070c:	dcc00817 	ldw	r19,32(sp)
   80710:	dc400717 	ldw	r17,28(sp)
   80714:	dec00a04 	addi	sp,sp,40
   80718:	f800283a 	ret

0008071c <puts>:
   8071c:	00800274 	movhi	r2,9
   80720:	10ba6a04 	addi	r2,r2,-5720
   80724:	200b883a 	mov	r5,r4
   80728:	11000017 	ldw	r4,0(r2)
   8072c:	008067c1 	jmpi	8067c <_puts_r>

00080730 <strlen>:
   80730:	208000cc 	andi	r2,r4,3
   80734:	2011883a 	mov	r8,r4
   80738:	1000161e 	bne	r2,zero,80794 <strlen+0x64>
   8073c:	20c00017 	ldw	r3,0(r4)
   80740:	017fbff4 	movhi	r5,65279
   80744:	297fbfc4 	addi	r5,r5,-257
   80748:	01e02074 	movhi	r7,32897
   8074c:	39e02004 	addi	r7,r7,-32640
   80750:	1945883a 	add	r2,r3,r5
   80754:	11c4703a 	and	r2,r2,r7
   80758:	00c6303a 	nor	r3,zero,r3
   8075c:	1886703a 	and	r3,r3,r2
   80760:	18000c1e 	bne	r3,zero,80794 <strlen+0x64>
   80764:	280d883a 	mov	r6,r5
   80768:	380b883a 	mov	r5,r7
   8076c:	21000104 	addi	r4,r4,4
   80770:	20800017 	ldw	r2,0(r4)
   80774:	1187883a 	add	r3,r2,r6
   80778:	1946703a 	and	r3,r3,r5
   8077c:	0084303a 	nor	r2,zero,r2
   80780:	10c4703a 	and	r2,r2,r3
   80784:	103ff926 	beq	r2,zero,8076c <strlen+0x3c>
   80788:	20800007 	ldb	r2,0(r4)
   8078c:	10000326 	beq	r2,zero,8079c <strlen+0x6c>
   80790:	21000044 	addi	r4,r4,1
   80794:	20800007 	ldb	r2,0(r4)
   80798:	103ffd1e 	bne	r2,zero,80790 <strlen+0x60>
   8079c:	2205c83a 	sub	r2,r4,r8
   807a0:	f800283a 	ret

000807a4 <__sprint_r>:
   807a4:	30800217 	ldw	r2,8(r6)
   807a8:	defffe04 	addi	sp,sp,-8
   807ac:	dc000015 	stw	r16,0(sp)
   807b0:	dfc00115 	stw	ra,4(sp)
   807b4:	3021883a 	mov	r16,r6
   807b8:	0007883a 	mov	r3,zero
   807bc:	1000061e 	bne	r2,zero,807d8 <__sprint_r+0x34>
   807c0:	1805883a 	mov	r2,r3
   807c4:	30000115 	stw	zero,4(r6)
   807c8:	dfc00117 	ldw	ra,4(sp)
   807cc:	dc000017 	ldw	r16,0(sp)
   807d0:	dec00204 	addi	sp,sp,8
   807d4:	f800283a 	ret
   807d8:	008497c0 	call	8497c <__sfvwrite_r>
   807dc:	1007883a 	mov	r3,r2
   807e0:	1805883a 	mov	r2,r3
   807e4:	80000115 	stw	zero,4(r16)
   807e8:	80000215 	stw	zero,8(r16)
   807ec:	dfc00117 	ldw	ra,4(sp)
   807f0:	dc000017 	ldw	r16,0(sp)
   807f4:	dec00204 	addi	sp,sp,8
   807f8:	f800283a 	ret

000807fc <___vfprintf_internal_r>:
   807fc:	defea404 	addi	sp,sp,-1392
   80800:	dd815815 	stw	r22,1376(sp)
   80804:	dc015215 	stw	r16,1352(sp)
   80808:	d9c15115 	stw	r7,1348(sp)
   8080c:	dfc15b15 	stw	ra,1388(sp)
   80810:	df015a15 	stw	fp,1384(sp)
   80814:	ddc15915 	stw	r23,1380(sp)
   80818:	dd415715 	stw	r21,1372(sp)
   8081c:	dd015615 	stw	r20,1368(sp)
   80820:	dcc15515 	stw	r19,1364(sp)
   80824:	dc815415 	stw	r18,1360(sp)
   80828:	dc415315 	stw	r17,1356(sp)
   8082c:	282d883a 	mov	r22,r5
   80830:	3021883a 	mov	r16,r6
   80834:	d9014f15 	stw	r4,1340(sp)
   80838:	0084fa00 	call	84fa0 <_localeconv_r>
   8083c:	10800017 	ldw	r2,0(r2)
   80840:	d9c15117 	ldw	r7,1348(sp)
   80844:	d8814915 	stw	r2,1316(sp)
   80848:	d8814f17 	ldw	r2,1340(sp)
   8084c:	10000226 	beq	r2,zero,80858 <___vfprintf_internal_r+0x5c>
   80850:	10800e17 	ldw	r2,56(r2)
   80854:	10020d26 	beq	r2,zero,8108c <___vfprintf_internal_r+0x890>
   80858:	b080030b 	ldhu	r2,12(r22)
   8085c:	1080020c 	andi	r2,r2,8
   80860:	10020e26 	beq	r2,zero,8109c <___vfprintf_internal_r+0x8a0>
   80864:	b0800417 	ldw	r2,16(r22)
   80868:	10020c26 	beq	r2,zero,8109c <___vfprintf_internal_r+0x8a0>
   8086c:	b200030b 	ldhu	r8,12(r22)
   80870:	00800284 	movi	r2,10
   80874:	40c0068c 	andi	r3,r8,26
   80878:	18802f1e 	bne	r3,r2,80938 <___vfprintf_internal_r+0x13c>
   8087c:	b080038f 	ldh	r2,14(r22)
   80880:	10002d16 	blt	r2,zero,80938 <___vfprintf_internal_r+0x13c>
   80884:	b240038b 	ldhu	r9,14(r22)
   80888:	b2800717 	ldw	r10,28(r22)
   8088c:	b2c00917 	ldw	r11,36(r22)
   80890:	d9014f17 	ldw	r4,1340(sp)
   80894:	dc402904 	addi	r17,sp,164
   80898:	d8804004 	addi	r2,sp,256
   8089c:	00c10004 	movi	r3,1024
   808a0:	423fff4c 	andi	r8,r8,65533
   808a4:	800d883a 	mov	r6,r16
   808a8:	880b883a 	mov	r5,r17
   808ac:	da002c0d 	sth	r8,176(sp)
   808b0:	da402c8d 	sth	r9,178(sp)
   808b4:	da803015 	stw	r10,192(sp)
   808b8:	dac03215 	stw	r11,200(sp)
   808bc:	d8802d15 	stw	r2,180(sp)
   808c0:	d8c02e15 	stw	r3,184(sp)
   808c4:	d8802915 	stw	r2,164(sp)
   808c8:	d8c02b15 	stw	r3,172(sp)
   808cc:	d8002f15 	stw	zero,188(sp)
   808d0:	00807fc0 	call	807fc <___vfprintf_internal_r>
   808d4:	d8814b15 	stw	r2,1324(sp)
   808d8:	10000416 	blt	r2,zero,808ec <___vfprintf_internal_r+0xf0>
   808dc:	d9014f17 	ldw	r4,1340(sp)
   808e0:	880b883a 	mov	r5,r17
   808e4:	00840180 	call	84018 <_fflush_r>
   808e8:	1002321e 	bne	r2,zero,811b4 <___vfprintf_internal_r+0x9b8>
   808ec:	d8802c0b 	ldhu	r2,176(sp)
   808f0:	1080100c 	andi	r2,r2,64
   808f4:	10000326 	beq	r2,zero,80904 <___vfprintf_internal_r+0x108>
   808f8:	b080030b 	ldhu	r2,12(r22)
   808fc:	10801014 	ori	r2,r2,64
   80900:	b080030d 	sth	r2,12(r22)
   80904:	d8814b17 	ldw	r2,1324(sp)
   80908:	dfc15b17 	ldw	ra,1388(sp)
   8090c:	df015a17 	ldw	fp,1384(sp)
   80910:	ddc15917 	ldw	r23,1380(sp)
   80914:	dd815817 	ldw	r22,1376(sp)
   80918:	dd415717 	ldw	r21,1372(sp)
   8091c:	dd015617 	ldw	r20,1368(sp)
   80920:	dcc15517 	ldw	r19,1364(sp)
   80924:	dc815417 	ldw	r18,1360(sp)
   80928:	dc415317 	ldw	r17,1356(sp)
   8092c:	dc015217 	ldw	r16,1352(sp)
   80930:	dec15c04 	addi	sp,sp,1392
   80934:	f800283a 	ret
   80938:	0005883a 	mov	r2,zero
   8093c:	0007883a 	mov	r3,zero
   80940:	dd401904 	addi	r21,sp,100
   80944:	d8814215 	stw	r2,1288(sp)
   80948:	802f883a 	mov	r23,r16
   8094c:	d8c14315 	stw	r3,1292(sp)
   80950:	d8014b15 	stw	zero,1324(sp)
   80954:	d8014815 	stw	zero,1312(sp)
   80958:	d8014415 	stw	zero,1296(sp)
   8095c:	d8014715 	stw	zero,1308(sp)
   80960:	dd400c15 	stw	r21,48(sp)
   80964:	d8000e15 	stw	zero,56(sp)
   80968:	d8000d15 	stw	zero,52(sp)
   8096c:	b8800007 	ldb	r2,0(r23)
   80970:	10001926 	beq	r2,zero,809d8 <___vfprintf_internal_r+0x1dc>
   80974:	00c00944 	movi	r3,37
   80978:	10c01726 	beq	r2,r3,809d8 <___vfprintf_internal_r+0x1dc>
   8097c:	b821883a 	mov	r16,r23
   80980:	00000106 	br	80988 <___vfprintf_internal_r+0x18c>
   80984:	10c00326 	beq	r2,r3,80994 <___vfprintf_internal_r+0x198>
   80988:	84000044 	addi	r16,r16,1
   8098c:	80800007 	ldb	r2,0(r16)
   80990:	103ffc1e 	bne	r2,zero,80984 <___vfprintf_internal_r+0x188>
   80994:	85e7c83a 	sub	r19,r16,r23
   80998:	98000e26 	beq	r19,zero,809d4 <___vfprintf_internal_r+0x1d8>
   8099c:	dc800e17 	ldw	r18,56(sp)
   809a0:	dc400d17 	ldw	r17,52(sp)
   809a4:	008001c4 	movi	r2,7
   809a8:	94e5883a 	add	r18,r18,r19
   809ac:	8c400044 	addi	r17,r17,1
   809b0:	adc00015 	stw	r23,0(r21)
   809b4:	dc800e15 	stw	r18,56(sp)
   809b8:	acc00115 	stw	r19,4(r21)
   809bc:	dc400d15 	stw	r17,52(sp)
   809c0:	14428b16 	blt	r2,r17,813f0 <___vfprintf_internal_r+0xbf4>
   809c4:	ad400204 	addi	r21,r21,8
   809c8:	d9014b17 	ldw	r4,1324(sp)
   809cc:	24c9883a 	add	r4,r4,r19
   809d0:	d9014b15 	stw	r4,1324(sp)
   809d4:	802f883a 	mov	r23,r16
   809d8:	b8800007 	ldb	r2,0(r23)
   809dc:	10013c26 	beq	r2,zero,80ed0 <___vfprintf_internal_r+0x6d4>
   809e0:	bdc00044 	addi	r23,r23,1
   809e4:	d8000405 	stb	zero,16(sp)
   809e8:	b8c00007 	ldb	r3,0(r23)
   809ec:	04ffffc4 	movi	r19,-1
   809f0:	d8014c15 	stw	zero,1328(sp)
   809f4:	d8014a15 	stw	zero,1320(sp)
   809f8:	d8c14d15 	stw	r3,1332(sp)
   809fc:	bdc00044 	addi	r23,r23,1
   80a00:	d9414d17 	ldw	r5,1332(sp)
   80a04:	00801604 	movi	r2,88
   80a08:	28fff804 	addi	r3,r5,-32
   80a0c:	10c06036 	bltu	r2,r3,80b90 <___vfprintf_internal_r+0x394>
   80a10:	18c5883a 	add	r2,r3,r3
   80a14:	1085883a 	add	r2,r2,r2
   80a18:	00c00234 	movhi	r3,8
   80a1c:	18c28b04 	addi	r3,r3,2604
   80a20:	10c5883a 	add	r2,r2,r3
   80a24:	11000017 	ldw	r4,0(r2)
   80a28:	2000683a 	jmp	r4
   80a2c:	000819a0 	cmpeqi	zero,zero,8294
   80a30:	00080b90 	cmplti	zero,zero,8238
   80a34:	00080b90 	cmplti	zero,zero,8238
   80a38:	0008198c 	andi	zero,zero,8294
   80a3c:	00080b90 	cmplti	zero,zero,8238
   80a40:	00080b90 	cmplti	zero,zero,8238
   80a44:	00080b90 	cmplti	zero,zero,8238
   80a48:	00080b90 	cmplti	zero,zero,8238
   80a4c:	00080b90 	cmplti	zero,zero,8238
   80a50:	00080b90 	cmplti	zero,zero,8238
   80a54:	0008176c 	andhi	zero,zero,8285
   80a58:	0008197c 	xorhi	zero,zero,8293
   80a5c:	00080b90 	cmplti	zero,zero,8238
   80a60:	00081784 	movi	zero,8286
   80a64:	00081a24 	muli	zero,zero,8296
   80a68:	00080b90 	cmplti	zero,zero,8238
   80a6c:	00081a10 	cmplti	zero,zero,8296
   80a70:	000819cc 	andi	zero,zero,8295
   80a74:	000819cc 	andi	zero,zero,8295
   80a78:	000819cc 	andi	zero,zero,8295
   80a7c:	000819cc 	andi	zero,zero,8295
   80a80:	000819cc 	andi	zero,zero,8295
   80a84:	000819cc 	andi	zero,zero,8295
   80a88:	000819cc 	andi	zero,zero,8295
   80a8c:	000819cc 	andi	zero,zero,8295
   80a90:	000819cc 	andi	zero,zero,8295
   80a94:	00080b90 	cmplti	zero,zero,8238
   80a98:	00080b90 	cmplti	zero,zero,8238
   80a9c:	00080b90 	cmplti	zero,zero,8238
   80aa0:	00080b90 	cmplti	zero,zero,8238
   80aa4:	00080b90 	cmplti	zero,zero,8238
   80aa8:	00080b90 	cmplti	zero,zero,8238
   80aac:	00080b90 	cmplti	zero,zero,8238
   80ab0:	00080b90 	cmplti	zero,zero,8238
   80ab4:	00080b90 	cmplti	zero,zero,8238
   80ab8:	00080b90 	cmplti	zero,zero,8238
   80abc:	000811e8 	cmpgeui	zero,zero,8263
   80ac0:	00081854 	movui	zero,8289
   80ac4:	00080b90 	cmplti	zero,zero,8238
   80ac8:	00081854 	movui	zero,8289
   80acc:	00080b90 	cmplti	zero,zero,8238
   80ad0:	00080b90 	cmplti	zero,zero,8238
   80ad4:	00080b90 	cmplti	zero,zero,8238
   80ad8:	00080b90 	cmplti	zero,zero,8238
   80adc:	000819b8 	rdprs	zero,zero,8294
   80ae0:	00080b90 	cmplti	zero,zero,8238
   80ae4:	00080b90 	cmplti	zero,zero,8238
   80ae8:	0008129c 	xori	zero,zero,8266
   80aec:	00080b90 	cmplti	zero,zero,8238
   80af0:	00080b90 	cmplti	zero,zero,8238
   80af4:	00080b90 	cmplti	zero,zero,8238
   80af8:	00080b90 	cmplti	zero,zero,8238
   80afc:	00080b90 	cmplti	zero,zero,8238
   80b00:	000812e8 	cmpgeui	zero,zero,8267
   80b04:	00080b90 	cmplti	zero,zero,8238
   80b08:	00080b90 	cmplti	zero,zero,8238
   80b0c:	00081908 	cmpgei	zero,zero,8292
   80b10:	00080b90 	cmplti	zero,zero,8238
   80b14:	00080b90 	cmplti	zero,zero,8238
   80b18:	00080b90 	cmplti	zero,zero,8238
   80b1c:	00080b90 	cmplti	zero,zero,8238
   80b20:	00080b90 	cmplti	zero,zero,8238
   80b24:	00080b90 	cmplti	zero,zero,8238
   80b28:	00080b90 	cmplti	zero,zero,8238
   80b2c:	00080b90 	cmplti	zero,zero,8238
   80b30:	00080b90 	cmplti	zero,zero,8238
   80b34:	00080b90 	cmplti	zero,zero,8238
   80b38:	000818dc 	xori	zero,zero,8291
   80b3c:	000811f4 	movhi	zero,8263
   80b40:	00081854 	movui	zero,8289
   80b44:	00081854 	movui	zero,8289
   80b48:	00081854 	movui	zero,8289
   80b4c:	00081840 	call	8184 <__alt_mem_sram_0-0x77e7c>
   80b50:	000811f4 	movhi	zero,8263
   80b54:	00080b90 	cmplti	zero,zero,8238
   80b58:	00080b90 	cmplti	zero,zero,8238
   80b5c:	000817c8 	cmpgei	zero,zero,8287
   80b60:	00080b90 	cmplti	zero,zero,8238
   80b64:	00081798 	cmpnei	zero,zero,8286
   80b68:	000812a8 	cmpgeui	zero,zero,8266
   80b6c:	000817f8 	rdprs	zero,zero,8287
   80b70:	000817e4 	muli	zero,zero,8287
   80b74:	00080b90 	cmplti	zero,zero,8238
   80b78:	00081a8c 	andi	zero,zero,8298
   80b7c:	00080b90 	cmplti	zero,zero,8238
   80b80:	000812f4 	movhi	zero,8267
   80b84:	00080b90 	cmplti	zero,zero,8238
   80b88:	00080b90 	cmplti	zero,zero,8238
   80b8c:	0008196c 	andhi	zero,zero,8293
   80b90:	d9014d17 	ldw	r4,1332(sp)
   80b94:	2000ce26 	beq	r4,zero,80ed0 <___vfprintf_internal_r+0x6d4>
   80b98:	01400044 	movi	r5,1
   80b9c:	d9800f04 	addi	r6,sp,60
   80ba0:	d9c14015 	stw	r7,1280(sp)
   80ba4:	d9414515 	stw	r5,1300(sp)
   80ba8:	d9814115 	stw	r6,1284(sp)
   80bac:	280f883a 	mov	r7,r5
   80bb0:	d9000f05 	stb	r4,60(sp)
   80bb4:	d8000405 	stb	zero,16(sp)
   80bb8:	d8014615 	stw	zero,1304(sp)
   80bbc:	d8c14c17 	ldw	r3,1328(sp)
   80bc0:	1880008c 	andi	r2,r3,2
   80bc4:	1005003a 	cmpeq	r2,r2,zero
   80bc8:	d8815015 	stw	r2,1344(sp)
   80bcc:	1000031e 	bne	r2,zero,80bdc <___vfprintf_internal_r+0x3e0>
   80bd0:	d9014517 	ldw	r4,1300(sp)
   80bd4:	21000084 	addi	r4,r4,2
   80bd8:	d9014515 	stw	r4,1300(sp)
   80bdc:	d9414c17 	ldw	r5,1328(sp)
   80be0:	2940210c 	andi	r5,r5,132
   80be4:	d9414e15 	stw	r5,1336(sp)
   80be8:	28002d1e 	bne	r5,zero,80ca0 <___vfprintf_internal_r+0x4a4>
   80bec:	d9814a17 	ldw	r6,1320(sp)
   80bf0:	d8814517 	ldw	r2,1300(sp)
   80bf4:	30a1c83a 	sub	r16,r6,r2
   80bf8:	0400290e 	bge	zero,r16,80ca0 <___vfprintf_internal_r+0x4a4>
   80bfc:	00800404 	movi	r2,16
   80c00:	14045e0e 	bge	r2,r16,81d7c <___vfprintf_internal_r+0x1580>
   80c04:	dc800e17 	ldw	r18,56(sp)
   80c08:	dc400d17 	ldw	r17,52(sp)
   80c0c:	1027883a 	mov	r19,r2
   80c10:	07000274 	movhi	fp,9
   80c14:	e7332e84 	addi	fp,fp,-13126
   80c18:	050001c4 	movi	r20,7
   80c1c:	00000306 	br	80c2c <___vfprintf_internal_r+0x430>
   80c20:	843ffc04 	addi	r16,r16,-16
   80c24:	ad400204 	addi	r21,r21,8
   80c28:	9c00130e 	bge	r19,r16,80c78 <___vfprintf_internal_r+0x47c>
   80c2c:	94800404 	addi	r18,r18,16
   80c30:	8c400044 	addi	r17,r17,1
   80c34:	af000015 	stw	fp,0(r21)
   80c38:	acc00115 	stw	r19,4(r21)
   80c3c:	dc800e15 	stw	r18,56(sp)
   80c40:	dc400d15 	stw	r17,52(sp)
   80c44:	a47ff60e 	bge	r20,r17,80c20 <___vfprintf_internal_r+0x424>
   80c48:	d9014f17 	ldw	r4,1340(sp)
   80c4c:	b00b883a 	mov	r5,r22
   80c50:	d9800c04 	addi	r6,sp,48
   80c54:	d9c15115 	stw	r7,1348(sp)
   80c58:	00807a40 	call	807a4 <__sprint_r>
   80c5c:	d9c15117 	ldw	r7,1348(sp)
   80c60:	10009e1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   80c64:	843ffc04 	addi	r16,r16,-16
   80c68:	dc800e17 	ldw	r18,56(sp)
   80c6c:	dc400d17 	ldw	r17,52(sp)
   80c70:	dd401904 	addi	r21,sp,100
   80c74:	9c3fed16 	blt	r19,r16,80c2c <___vfprintf_internal_r+0x430>
   80c78:	9425883a 	add	r18,r18,r16
   80c7c:	8c400044 	addi	r17,r17,1
   80c80:	008001c4 	movi	r2,7
   80c84:	af000015 	stw	fp,0(r21)
   80c88:	ac000115 	stw	r16,4(r21)
   80c8c:	dc800e15 	stw	r18,56(sp)
   80c90:	dc400d15 	stw	r17,52(sp)
   80c94:	1441f516 	blt	r2,r17,8146c <___vfprintf_internal_r+0xc70>
   80c98:	ad400204 	addi	r21,r21,8
   80c9c:	00000206 	br	80ca8 <___vfprintf_internal_r+0x4ac>
   80ca0:	dc800e17 	ldw	r18,56(sp)
   80ca4:	dc400d17 	ldw	r17,52(sp)
   80ca8:	d8800407 	ldb	r2,16(sp)
   80cac:	10000b26 	beq	r2,zero,80cdc <___vfprintf_internal_r+0x4e0>
   80cb0:	00800044 	movi	r2,1
   80cb4:	94800044 	addi	r18,r18,1
   80cb8:	8c400044 	addi	r17,r17,1
   80cbc:	a8800115 	stw	r2,4(r21)
   80cc0:	d8c00404 	addi	r3,sp,16
   80cc4:	008001c4 	movi	r2,7
   80cc8:	a8c00015 	stw	r3,0(r21)
   80ccc:	dc800e15 	stw	r18,56(sp)
   80cd0:	dc400d15 	stw	r17,52(sp)
   80cd4:	1441da16 	blt	r2,r17,81440 <___vfprintf_internal_r+0xc44>
   80cd8:	ad400204 	addi	r21,r21,8
   80cdc:	d9015017 	ldw	r4,1344(sp)
   80ce0:	20000b1e 	bne	r4,zero,80d10 <___vfprintf_internal_r+0x514>
   80ce4:	d8800444 	addi	r2,sp,17
   80ce8:	94800084 	addi	r18,r18,2
   80cec:	8c400044 	addi	r17,r17,1
   80cf0:	a8800015 	stw	r2,0(r21)
   80cf4:	00c00084 	movi	r3,2
   80cf8:	008001c4 	movi	r2,7
   80cfc:	a8c00115 	stw	r3,4(r21)
   80d00:	dc800e15 	stw	r18,56(sp)
   80d04:	dc400d15 	stw	r17,52(sp)
   80d08:	1441c216 	blt	r2,r17,81414 <___vfprintf_internal_r+0xc18>
   80d0c:	ad400204 	addi	r21,r21,8
   80d10:	d9414e17 	ldw	r5,1336(sp)
   80d14:	00802004 	movi	r2,128
   80d18:	2880b126 	beq	r5,r2,80fe0 <___vfprintf_internal_r+0x7e4>
   80d1c:	d8c14617 	ldw	r3,1304(sp)
   80d20:	19e1c83a 	sub	r16,r3,r7
   80d24:	0400260e 	bge	zero,r16,80dc0 <___vfprintf_internal_r+0x5c4>
   80d28:	00800404 	movi	r2,16
   80d2c:	1403cf0e 	bge	r2,r16,81c6c <___vfprintf_internal_r+0x1470>
   80d30:	1027883a 	mov	r19,r2
   80d34:	07000274 	movhi	fp,9
   80d38:	e7332a84 	addi	fp,fp,-13142
   80d3c:	050001c4 	movi	r20,7
   80d40:	00000306 	br	80d50 <___vfprintf_internal_r+0x554>
   80d44:	843ffc04 	addi	r16,r16,-16
   80d48:	ad400204 	addi	r21,r21,8
   80d4c:	9c00130e 	bge	r19,r16,80d9c <___vfprintf_internal_r+0x5a0>
   80d50:	94800404 	addi	r18,r18,16
   80d54:	8c400044 	addi	r17,r17,1
   80d58:	af000015 	stw	fp,0(r21)
   80d5c:	acc00115 	stw	r19,4(r21)
   80d60:	dc800e15 	stw	r18,56(sp)
   80d64:	dc400d15 	stw	r17,52(sp)
   80d68:	a47ff60e 	bge	r20,r17,80d44 <___vfprintf_internal_r+0x548>
   80d6c:	d9014f17 	ldw	r4,1340(sp)
   80d70:	b00b883a 	mov	r5,r22
   80d74:	d9800c04 	addi	r6,sp,48
   80d78:	d9c15115 	stw	r7,1348(sp)
   80d7c:	00807a40 	call	807a4 <__sprint_r>
   80d80:	d9c15117 	ldw	r7,1348(sp)
   80d84:	1000551e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   80d88:	843ffc04 	addi	r16,r16,-16
   80d8c:	dc800e17 	ldw	r18,56(sp)
   80d90:	dc400d17 	ldw	r17,52(sp)
   80d94:	dd401904 	addi	r21,sp,100
   80d98:	9c3fed16 	blt	r19,r16,80d50 <___vfprintf_internal_r+0x554>
   80d9c:	9425883a 	add	r18,r18,r16
   80da0:	8c400044 	addi	r17,r17,1
   80da4:	008001c4 	movi	r2,7
   80da8:	af000015 	stw	fp,0(r21)
   80dac:	ac000115 	stw	r16,4(r21)
   80db0:	dc800e15 	stw	r18,56(sp)
   80db4:	dc400d15 	stw	r17,52(sp)
   80db8:	14418216 	blt	r2,r17,813c4 <___vfprintf_internal_r+0xbc8>
   80dbc:	ad400204 	addi	r21,r21,8
   80dc0:	d9014c17 	ldw	r4,1328(sp)
   80dc4:	2080400c 	andi	r2,r4,256
   80dc8:	10004a1e 	bne	r2,zero,80ef4 <___vfprintf_internal_r+0x6f8>
   80dcc:	d9414117 	ldw	r5,1284(sp)
   80dd0:	91e5883a 	add	r18,r18,r7
   80dd4:	8c400044 	addi	r17,r17,1
   80dd8:	008001c4 	movi	r2,7
   80ddc:	a9400015 	stw	r5,0(r21)
   80de0:	a9c00115 	stw	r7,4(r21)
   80de4:	dc800e15 	stw	r18,56(sp)
   80de8:	dc400d15 	stw	r17,52(sp)
   80dec:	14416716 	blt	r2,r17,8138c <___vfprintf_internal_r+0xb90>
   80df0:	a8c00204 	addi	r3,r21,8
   80df4:	d9814c17 	ldw	r6,1328(sp)
   80df8:	3080010c 	andi	r2,r6,4
   80dfc:	10002826 	beq	r2,zero,80ea0 <___vfprintf_internal_r+0x6a4>
   80e00:	d8814a17 	ldw	r2,1320(sp)
   80e04:	d9014517 	ldw	r4,1300(sp)
   80e08:	1121c83a 	sub	r16,r2,r4
   80e0c:	0400240e 	bge	zero,r16,80ea0 <___vfprintf_internal_r+0x6a4>
   80e10:	00800404 	movi	r2,16
   80e14:	1404550e 	bge	r2,r16,81f6c <___vfprintf_internal_r+0x1770>
   80e18:	dc400d17 	ldw	r17,52(sp)
   80e1c:	1027883a 	mov	r19,r2
   80e20:	07000274 	movhi	fp,9
   80e24:	e7332e84 	addi	fp,fp,-13126
   80e28:	050001c4 	movi	r20,7
   80e2c:	00000306 	br	80e3c <___vfprintf_internal_r+0x640>
   80e30:	843ffc04 	addi	r16,r16,-16
   80e34:	18c00204 	addi	r3,r3,8
   80e38:	9c00110e 	bge	r19,r16,80e80 <___vfprintf_internal_r+0x684>
   80e3c:	94800404 	addi	r18,r18,16
   80e40:	8c400044 	addi	r17,r17,1
   80e44:	1f000015 	stw	fp,0(r3)
   80e48:	1cc00115 	stw	r19,4(r3)
   80e4c:	dc800e15 	stw	r18,56(sp)
   80e50:	dc400d15 	stw	r17,52(sp)
   80e54:	a47ff60e 	bge	r20,r17,80e30 <___vfprintf_internal_r+0x634>
   80e58:	d9014f17 	ldw	r4,1340(sp)
   80e5c:	b00b883a 	mov	r5,r22
   80e60:	d9800c04 	addi	r6,sp,48
   80e64:	00807a40 	call	807a4 <__sprint_r>
   80e68:	10001c1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   80e6c:	843ffc04 	addi	r16,r16,-16
   80e70:	dc800e17 	ldw	r18,56(sp)
   80e74:	dc400d17 	ldw	r17,52(sp)
   80e78:	d8c01904 	addi	r3,sp,100
   80e7c:	9c3fef16 	blt	r19,r16,80e3c <___vfprintf_internal_r+0x640>
   80e80:	9425883a 	add	r18,r18,r16
   80e84:	8c400044 	addi	r17,r17,1
   80e88:	008001c4 	movi	r2,7
   80e8c:	1f000015 	stw	fp,0(r3)
   80e90:	1c000115 	stw	r16,4(r3)
   80e94:	dc800e15 	stw	r18,56(sp)
   80e98:	dc400d15 	stw	r17,52(sp)
   80e9c:	1440cb16 	blt	r2,r17,811cc <___vfprintf_internal_r+0x9d0>
   80ea0:	d8814a17 	ldw	r2,1320(sp)
   80ea4:	d9414517 	ldw	r5,1300(sp)
   80ea8:	1140010e 	bge	r2,r5,80eb0 <___vfprintf_internal_r+0x6b4>
   80eac:	2805883a 	mov	r2,r5
   80eb0:	d9814b17 	ldw	r6,1324(sp)
   80eb4:	308d883a 	add	r6,r6,r2
   80eb8:	d9814b15 	stw	r6,1324(sp)
   80ebc:	90013b1e 	bne	r18,zero,813ac <___vfprintf_internal_r+0xbb0>
   80ec0:	d9c14017 	ldw	r7,1280(sp)
   80ec4:	dd401904 	addi	r21,sp,100
   80ec8:	d8000d15 	stw	zero,52(sp)
   80ecc:	003ea706 	br	8096c <___vfprintf_internal_r+0x170>
   80ed0:	d8800e17 	ldw	r2,56(sp)
   80ed4:	1005451e 	bne	r2,zero,823ec <___vfprintf_internal_r+0x1bf0>
   80ed8:	d8000d15 	stw	zero,52(sp)
   80edc:	b080030b 	ldhu	r2,12(r22)
   80ee0:	1080100c 	andi	r2,r2,64
   80ee4:	103e8726 	beq	r2,zero,80904 <___vfprintf_internal_r+0x108>
   80ee8:	00bfffc4 	movi	r2,-1
   80eec:	d8814b15 	stw	r2,1324(sp)
   80ef0:	003e8406 	br	80904 <___vfprintf_internal_r+0x108>
   80ef4:	d9814d17 	ldw	r6,1332(sp)
   80ef8:	00801944 	movi	r2,101
   80efc:	11806e16 	blt	r2,r6,810b8 <___vfprintf_internal_r+0x8bc>
   80f00:	d9414717 	ldw	r5,1308(sp)
   80f04:	00c00044 	movi	r3,1
   80f08:	1943490e 	bge	r3,r5,81c30 <___vfprintf_internal_r+0x1434>
   80f0c:	d8814117 	ldw	r2,1284(sp)
   80f10:	94800044 	addi	r18,r18,1
   80f14:	8c400044 	addi	r17,r17,1
   80f18:	a8800015 	stw	r2,0(r21)
   80f1c:	008001c4 	movi	r2,7
   80f20:	a8c00115 	stw	r3,4(r21)
   80f24:	dc800e15 	stw	r18,56(sp)
   80f28:	dc400d15 	stw	r17,52(sp)
   80f2c:	1441ca16 	blt	r2,r17,81658 <___vfprintf_internal_r+0xe5c>
   80f30:	a8c00204 	addi	r3,r21,8
   80f34:	d9014917 	ldw	r4,1316(sp)
   80f38:	00800044 	movi	r2,1
   80f3c:	94800044 	addi	r18,r18,1
   80f40:	8c400044 	addi	r17,r17,1
   80f44:	18800115 	stw	r2,4(r3)
   80f48:	008001c4 	movi	r2,7
   80f4c:	19000015 	stw	r4,0(r3)
   80f50:	dc800e15 	stw	r18,56(sp)
   80f54:	dc400d15 	stw	r17,52(sp)
   80f58:	1441b616 	blt	r2,r17,81634 <___vfprintf_internal_r+0xe38>
   80f5c:	1cc00204 	addi	r19,r3,8
   80f60:	d9014217 	ldw	r4,1288(sp)
   80f64:	d9414317 	ldw	r5,1292(sp)
   80f68:	000d883a 	mov	r6,zero
   80f6c:	000f883a 	mov	r7,zero
   80f70:	00892b00 	call	892b0 <__nedf2>
   80f74:	10017426 	beq	r2,zero,81548 <___vfprintf_internal_r+0xd4c>
   80f78:	d9414717 	ldw	r5,1308(sp)
   80f7c:	d9814117 	ldw	r6,1284(sp)
   80f80:	8c400044 	addi	r17,r17,1
   80f84:	2c85883a 	add	r2,r5,r18
   80f88:	14bfffc4 	addi	r18,r2,-1
   80f8c:	28bfffc4 	addi	r2,r5,-1
   80f90:	30c00044 	addi	r3,r6,1
   80f94:	98800115 	stw	r2,4(r19)
   80f98:	008001c4 	movi	r2,7
   80f9c:	98c00015 	stw	r3,0(r19)
   80fa0:	dc800e15 	stw	r18,56(sp)
   80fa4:	dc400d15 	stw	r17,52(sp)
   80fa8:	14418e16 	blt	r2,r17,815e4 <___vfprintf_internal_r+0xde8>
   80fac:	9cc00204 	addi	r19,r19,8
   80fb0:	d9414817 	ldw	r5,1312(sp)
   80fb4:	d8800804 	addi	r2,sp,32
   80fb8:	8c400044 	addi	r17,r17,1
   80fbc:	9165883a 	add	r18,r18,r5
   80fc0:	98800015 	stw	r2,0(r19)
   80fc4:	008001c4 	movi	r2,7
   80fc8:	99400115 	stw	r5,4(r19)
   80fcc:	dc800e15 	stw	r18,56(sp)
   80fd0:	dc400d15 	stw	r17,52(sp)
   80fd4:	1440ed16 	blt	r2,r17,8138c <___vfprintf_internal_r+0xb90>
   80fd8:	98c00204 	addi	r3,r19,8
   80fdc:	003f8506 	br	80df4 <___vfprintf_internal_r+0x5f8>
   80fe0:	d9814a17 	ldw	r6,1320(sp)
   80fe4:	d8814517 	ldw	r2,1300(sp)
   80fe8:	30a1c83a 	sub	r16,r6,r2
   80fec:	043f4b0e 	bge	zero,r16,80d1c <___vfprintf_internal_r+0x520>
   80ff0:	00800404 	movi	r2,16
   80ff4:	14043a0e 	bge	r2,r16,820e0 <___vfprintf_internal_r+0x18e4>
   80ff8:	1027883a 	mov	r19,r2
   80ffc:	07000274 	movhi	fp,9
   81000:	e7332a84 	addi	fp,fp,-13142
   81004:	050001c4 	movi	r20,7
   81008:	00000306 	br	81018 <___vfprintf_internal_r+0x81c>
   8100c:	843ffc04 	addi	r16,r16,-16
   81010:	ad400204 	addi	r21,r21,8
   81014:	9c00130e 	bge	r19,r16,81064 <___vfprintf_internal_r+0x868>
   81018:	94800404 	addi	r18,r18,16
   8101c:	8c400044 	addi	r17,r17,1
   81020:	af000015 	stw	fp,0(r21)
   81024:	acc00115 	stw	r19,4(r21)
   81028:	dc800e15 	stw	r18,56(sp)
   8102c:	dc400d15 	stw	r17,52(sp)
   81030:	a47ff60e 	bge	r20,r17,8100c <___vfprintf_internal_r+0x810>
   81034:	d9014f17 	ldw	r4,1340(sp)
   81038:	b00b883a 	mov	r5,r22
   8103c:	d9800c04 	addi	r6,sp,48
   81040:	d9c15115 	stw	r7,1348(sp)
   81044:	00807a40 	call	807a4 <__sprint_r>
   81048:	d9c15117 	ldw	r7,1348(sp)
   8104c:	103fa31e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   81050:	843ffc04 	addi	r16,r16,-16
   81054:	dc800e17 	ldw	r18,56(sp)
   81058:	dc400d17 	ldw	r17,52(sp)
   8105c:	dd401904 	addi	r21,sp,100
   81060:	9c3fed16 	blt	r19,r16,81018 <___vfprintf_internal_r+0x81c>
   81064:	9425883a 	add	r18,r18,r16
   81068:	8c400044 	addi	r17,r17,1
   8106c:	008001c4 	movi	r2,7
   81070:	af000015 	stw	fp,0(r21)
   81074:	ac000115 	stw	r16,4(r21)
   81078:	dc800e15 	stw	r18,56(sp)
   8107c:	dc400d15 	stw	r17,52(sp)
   81080:	14416116 	blt	r2,r17,81608 <___vfprintf_internal_r+0xe0c>
   81084:	ad400204 	addi	r21,r21,8
   81088:	003f2406 	br	80d1c <___vfprintf_internal_r+0x520>
   8108c:	d9014f17 	ldw	r4,1340(sp)
   81090:	00842b00 	call	842b0 <__sinit>
   81094:	d9c15117 	ldw	r7,1348(sp)
   81098:	003def06 	br	80858 <___vfprintf_internal_r+0x5c>
   8109c:	d9014f17 	ldw	r4,1340(sp)
   810a0:	b00b883a 	mov	r5,r22
   810a4:	d9c15115 	stw	r7,1348(sp)
   810a8:	00826e40 	call	826e4 <__swsetup_r>
   810ac:	d9c15117 	ldw	r7,1348(sp)
   810b0:	103dee26 	beq	r2,zero,8086c <___vfprintf_internal_r+0x70>
   810b4:	003f8c06 	br	80ee8 <___vfprintf_internal_r+0x6ec>
   810b8:	d9014217 	ldw	r4,1288(sp)
   810bc:	d9414317 	ldw	r5,1292(sp)
   810c0:	000d883a 	mov	r6,zero
   810c4:	000f883a 	mov	r7,zero
   810c8:	00892280 	call	89228 <__eqdf2>
   810cc:	1000f21e 	bne	r2,zero,81498 <___vfprintf_internal_r+0xc9c>
   810d0:	00800274 	movhi	r2,9
   810d4:	10b32a04 	addi	r2,r2,-13144
   810d8:	94800044 	addi	r18,r18,1
   810dc:	8c400044 	addi	r17,r17,1
   810e0:	a8800015 	stw	r2,0(r21)
   810e4:	00c00044 	movi	r3,1
   810e8:	008001c4 	movi	r2,7
   810ec:	a8c00115 	stw	r3,4(r21)
   810f0:	dc800e15 	stw	r18,56(sp)
   810f4:	dc400d15 	stw	r17,52(sp)
   810f8:	14430016 	blt	r2,r17,81cfc <___vfprintf_internal_r+0x1500>
   810fc:	a8c00204 	addi	r3,r21,8
   81100:	d8800517 	ldw	r2,20(sp)
   81104:	d9014717 	ldw	r4,1308(sp)
   81108:	11015c0e 	bge	r2,r4,8167c <___vfprintf_internal_r+0xe80>
   8110c:	dc400d17 	ldw	r17,52(sp)
   81110:	d9814917 	ldw	r6,1316(sp)
   81114:	00800044 	movi	r2,1
   81118:	94800044 	addi	r18,r18,1
   8111c:	8c400044 	addi	r17,r17,1
   81120:	18800115 	stw	r2,4(r3)
   81124:	008001c4 	movi	r2,7
   81128:	19800015 	stw	r6,0(r3)
   8112c:	dc800e15 	stw	r18,56(sp)
   81130:	dc400d15 	stw	r17,52(sp)
   81134:	14431616 	blt	r2,r17,81d90 <___vfprintf_internal_r+0x1594>
   81138:	18c00204 	addi	r3,r3,8
   8113c:	d8814717 	ldw	r2,1308(sp)
   81140:	143fffc4 	addi	r16,r2,-1
   81144:	043f2b0e 	bge	zero,r16,80df4 <___vfprintf_internal_r+0x5f8>
   81148:	00800404 	movi	r2,16
   8114c:	1402a80e 	bge	r2,r16,81bf0 <___vfprintf_internal_r+0x13f4>
   81150:	dc400d17 	ldw	r17,52(sp)
   81154:	1027883a 	mov	r19,r2
   81158:	07000274 	movhi	fp,9
   8115c:	e7332a84 	addi	fp,fp,-13142
   81160:	050001c4 	movi	r20,7
   81164:	00000306 	br	81174 <___vfprintf_internal_r+0x978>
   81168:	18c00204 	addi	r3,r3,8
   8116c:	843ffc04 	addi	r16,r16,-16
   81170:	9c02a20e 	bge	r19,r16,81bfc <___vfprintf_internal_r+0x1400>
   81174:	94800404 	addi	r18,r18,16
   81178:	8c400044 	addi	r17,r17,1
   8117c:	1f000015 	stw	fp,0(r3)
   81180:	1cc00115 	stw	r19,4(r3)
   81184:	dc800e15 	stw	r18,56(sp)
   81188:	dc400d15 	stw	r17,52(sp)
   8118c:	a47ff60e 	bge	r20,r17,81168 <___vfprintf_internal_r+0x96c>
   81190:	d9014f17 	ldw	r4,1340(sp)
   81194:	b00b883a 	mov	r5,r22
   81198:	d9800c04 	addi	r6,sp,48
   8119c:	00807a40 	call	807a4 <__sprint_r>
   811a0:	103f4e1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   811a4:	dc800e17 	ldw	r18,56(sp)
   811a8:	dc400d17 	ldw	r17,52(sp)
   811ac:	d8c01904 	addi	r3,sp,100
   811b0:	003fee06 	br	8116c <___vfprintf_internal_r+0x970>
   811b4:	d8802c0b 	ldhu	r2,176(sp)
   811b8:	00ffffc4 	movi	r3,-1
   811bc:	d8c14b15 	stw	r3,1324(sp)
   811c0:	1080100c 	andi	r2,r2,64
   811c4:	103dcc1e 	bne	r2,zero,808f8 <___vfprintf_internal_r+0xfc>
   811c8:	003dce06 	br	80904 <___vfprintf_internal_r+0x108>
   811cc:	d9014f17 	ldw	r4,1340(sp)
   811d0:	b00b883a 	mov	r5,r22
   811d4:	d9800c04 	addi	r6,sp,48
   811d8:	00807a40 	call	807a4 <__sprint_r>
   811dc:	103f3f1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   811e0:	dc800e17 	ldw	r18,56(sp)
   811e4:	003f2e06 	br	80ea0 <___vfprintf_internal_r+0x6a4>
   811e8:	d9414c17 	ldw	r5,1328(sp)
   811ec:	29400414 	ori	r5,r5,16
   811f0:	d9414c15 	stw	r5,1328(sp)
   811f4:	d9814c17 	ldw	r6,1328(sp)
   811f8:	3080080c 	andi	r2,r6,32
   811fc:	10014f1e 	bne	r2,zero,8173c <___vfprintf_internal_r+0xf40>
   81200:	d8c14c17 	ldw	r3,1328(sp)
   81204:	1880040c 	andi	r2,r3,16
   81208:	1002f01e 	bne	r2,zero,81dcc <___vfprintf_internal_r+0x15d0>
   8120c:	d9014c17 	ldw	r4,1328(sp)
   81210:	2080100c 	andi	r2,r4,64
   81214:	1002ed26 	beq	r2,zero,81dcc <___vfprintf_internal_r+0x15d0>
   81218:	3880000f 	ldh	r2,0(r7)
   8121c:	39c00104 	addi	r7,r7,4
   81220:	d9c14015 	stw	r7,1280(sp)
   81224:	1023d7fa 	srai	r17,r2,31
   81228:	1021883a 	mov	r16,r2
   8122c:	88037816 	blt	r17,zero,82010 <___vfprintf_internal_r+0x1814>
   81230:	01000044 	movi	r4,1
   81234:	98000416 	blt	r19,zero,81248 <___vfprintf_internal_r+0xa4c>
   81238:	d8c14c17 	ldw	r3,1328(sp)
   8123c:	00bfdfc4 	movi	r2,-129
   81240:	1886703a 	and	r3,r3,r2
   81244:	d8c14c15 	stw	r3,1328(sp)
   81248:	8444b03a 	or	r2,r16,r17
   8124c:	10022c1e 	bne	r2,zero,81b00 <___vfprintf_internal_r+0x1304>
   81250:	98022b1e 	bne	r19,zero,81b00 <___vfprintf_internal_r+0x1304>
   81254:	20803fcc 	andi	r2,r4,255
   81258:	1002a126 	beq	r2,zero,81ce0 <___vfprintf_internal_r+0x14e4>
   8125c:	d8c01904 	addi	r3,sp,100
   81260:	dd000f04 	addi	r20,sp,60
   81264:	d8c14115 	stw	r3,1284(sp)
   81268:	d8c14117 	ldw	r3,1284(sp)
   8126c:	dcc14515 	stw	r19,1300(sp)
   81270:	a0c5c83a 	sub	r2,r20,r3
   81274:	11c00a04 	addi	r7,r2,40
   81278:	99c0010e 	bge	r19,r7,81280 <___vfprintf_internal_r+0xa84>
   8127c:	d9c14515 	stw	r7,1300(sp)
   81280:	dcc14615 	stw	r19,1304(sp)
   81284:	d8800407 	ldb	r2,16(sp)
   81288:	103e4c26 	beq	r2,zero,80bbc <___vfprintf_internal_r+0x3c0>
   8128c:	d8814517 	ldw	r2,1300(sp)
   81290:	10800044 	addi	r2,r2,1
   81294:	d8814515 	stw	r2,1300(sp)
   81298:	003e4806 	br	80bbc <___vfprintf_internal_r+0x3c0>
   8129c:	d9814c17 	ldw	r6,1328(sp)
   812a0:	31800414 	ori	r6,r6,16
   812a4:	d9814c15 	stw	r6,1328(sp)
   812a8:	d8c14c17 	ldw	r3,1328(sp)
   812ac:	1880080c 	andi	r2,r3,32
   812b0:	1001271e 	bne	r2,zero,81750 <___vfprintf_internal_r+0xf54>
   812b4:	d9414c17 	ldw	r5,1328(sp)
   812b8:	2880040c 	andi	r2,r5,16
   812bc:	1002bc1e 	bne	r2,zero,81db0 <___vfprintf_internal_r+0x15b4>
   812c0:	d9814c17 	ldw	r6,1328(sp)
   812c4:	3080100c 	andi	r2,r6,64
   812c8:	1002b926 	beq	r2,zero,81db0 <___vfprintf_internal_r+0x15b4>
   812cc:	3c00000b 	ldhu	r16,0(r7)
   812d0:	0009883a 	mov	r4,zero
   812d4:	39c00104 	addi	r7,r7,4
   812d8:	0023883a 	mov	r17,zero
   812dc:	d9c14015 	stw	r7,1280(sp)
   812e0:	d8000405 	stb	zero,16(sp)
   812e4:	003fd306 	br	81234 <___vfprintf_internal_r+0xa38>
   812e8:	d9014c17 	ldw	r4,1328(sp)
   812ec:	21000414 	ori	r4,r4,16
   812f0:	d9014c15 	stw	r4,1328(sp)
   812f4:	d9414c17 	ldw	r5,1328(sp)
   812f8:	2880080c 	andi	r2,r5,32
   812fc:	1001081e 	bne	r2,zero,81720 <___vfprintf_internal_r+0xf24>
   81300:	d8c14c17 	ldw	r3,1328(sp)
   81304:	1880040c 	andi	r2,r3,16
   81308:	1002b61e 	bne	r2,zero,81de4 <___vfprintf_internal_r+0x15e8>
   8130c:	d9014c17 	ldw	r4,1328(sp)
   81310:	2080100c 	andi	r2,r4,64
   81314:	1002b326 	beq	r2,zero,81de4 <___vfprintf_internal_r+0x15e8>
   81318:	3c00000b 	ldhu	r16,0(r7)
   8131c:	01000044 	movi	r4,1
   81320:	39c00104 	addi	r7,r7,4
   81324:	0023883a 	mov	r17,zero
   81328:	d9c14015 	stw	r7,1280(sp)
   8132c:	d8000405 	stb	zero,16(sp)
   81330:	003fc006 	br	81234 <___vfprintf_internal_r+0xa38>
   81334:	d9014f17 	ldw	r4,1340(sp)
   81338:	b00b883a 	mov	r5,r22
   8133c:	d9800c04 	addi	r6,sp,48
   81340:	00807a40 	call	807a4 <__sprint_r>
   81344:	103ee51e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   81348:	dc800e17 	ldw	r18,56(sp)
   8134c:	d8c01904 	addi	r3,sp,100
   81350:	d9814c17 	ldw	r6,1328(sp)
   81354:	3080004c 	andi	r2,r6,1
   81358:	1005003a 	cmpeq	r2,r2,zero
   8135c:	103ea51e 	bne	r2,zero,80df4 <___vfprintf_internal_r+0x5f8>
   81360:	00800044 	movi	r2,1
   81364:	dc400d17 	ldw	r17,52(sp)
   81368:	18800115 	stw	r2,4(r3)
   8136c:	d8814917 	ldw	r2,1316(sp)
   81370:	94800044 	addi	r18,r18,1
   81374:	8c400044 	addi	r17,r17,1
   81378:	18800015 	stw	r2,0(r3)
   8137c:	008001c4 	movi	r2,7
   81380:	dc800e15 	stw	r18,56(sp)
   81384:	dc400d15 	stw	r17,52(sp)
   81388:	1442240e 	bge	r2,r17,81c1c <___vfprintf_internal_r+0x1420>
   8138c:	d9014f17 	ldw	r4,1340(sp)
   81390:	b00b883a 	mov	r5,r22
   81394:	d9800c04 	addi	r6,sp,48
   81398:	00807a40 	call	807a4 <__sprint_r>
   8139c:	103ecf1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   813a0:	dc800e17 	ldw	r18,56(sp)
   813a4:	d8c01904 	addi	r3,sp,100
   813a8:	003e9206 	br	80df4 <___vfprintf_internal_r+0x5f8>
   813ac:	d9014f17 	ldw	r4,1340(sp)
   813b0:	b00b883a 	mov	r5,r22
   813b4:	d9800c04 	addi	r6,sp,48
   813b8:	00807a40 	call	807a4 <__sprint_r>
   813bc:	103ec026 	beq	r2,zero,80ec0 <___vfprintf_internal_r+0x6c4>
   813c0:	003ec606 	br	80edc <___vfprintf_internal_r+0x6e0>
   813c4:	d9014f17 	ldw	r4,1340(sp)
   813c8:	b00b883a 	mov	r5,r22
   813cc:	d9800c04 	addi	r6,sp,48
   813d0:	d9c15115 	stw	r7,1348(sp)
   813d4:	00807a40 	call	807a4 <__sprint_r>
   813d8:	d9c15117 	ldw	r7,1348(sp)
   813dc:	103ebf1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   813e0:	dc800e17 	ldw	r18,56(sp)
   813e4:	dc400d17 	ldw	r17,52(sp)
   813e8:	dd401904 	addi	r21,sp,100
   813ec:	003e7406 	br	80dc0 <___vfprintf_internal_r+0x5c4>
   813f0:	d9014f17 	ldw	r4,1340(sp)
   813f4:	b00b883a 	mov	r5,r22
   813f8:	d9800c04 	addi	r6,sp,48
   813fc:	d9c15115 	stw	r7,1348(sp)
   81400:	00807a40 	call	807a4 <__sprint_r>
   81404:	d9c15117 	ldw	r7,1348(sp)
   81408:	103eb41e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   8140c:	dd401904 	addi	r21,sp,100
   81410:	003d6d06 	br	809c8 <___vfprintf_internal_r+0x1cc>
   81414:	d9014f17 	ldw	r4,1340(sp)
   81418:	b00b883a 	mov	r5,r22
   8141c:	d9800c04 	addi	r6,sp,48
   81420:	d9c15115 	stw	r7,1348(sp)
   81424:	00807a40 	call	807a4 <__sprint_r>
   81428:	d9c15117 	ldw	r7,1348(sp)
   8142c:	103eab1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   81430:	dc800e17 	ldw	r18,56(sp)
   81434:	dc400d17 	ldw	r17,52(sp)
   81438:	dd401904 	addi	r21,sp,100
   8143c:	003e3406 	br	80d10 <___vfprintf_internal_r+0x514>
   81440:	d9014f17 	ldw	r4,1340(sp)
   81444:	b00b883a 	mov	r5,r22
   81448:	d9800c04 	addi	r6,sp,48
   8144c:	d9c15115 	stw	r7,1348(sp)
   81450:	00807a40 	call	807a4 <__sprint_r>
   81454:	d9c15117 	ldw	r7,1348(sp)
   81458:	103ea01e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   8145c:	dc800e17 	ldw	r18,56(sp)
   81460:	dc400d17 	ldw	r17,52(sp)
   81464:	dd401904 	addi	r21,sp,100
   81468:	003e1c06 	br	80cdc <___vfprintf_internal_r+0x4e0>
   8146c:	d9014f17 	ldw	r4,1340(sp)
   81470:	b00b883a 	mov	r5,r22
   81474:	d9800c04 	addi	r6,sp,48
   81478:	d9c15115 	stw	r7,1348(sp)
   8147c:	00807a40 	call	807a4 <__sprint_r>
   81480:	d9c15117 	ldw	r7,1348(sp)
   81484:	103e951e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   81488:	dc800e17 	ldw	r18,56(sp)
   8148c:	dc400d17 	ldw	r17,52(sp)
   81490:	dd401904 	addi	r21,sp,100
   81494:	003e0406 	br	80ca8 <___vfprintf_internal_r+0x4ac>
   81498:	d9000517 	ldw	r4,20(sp)
   8149c:	0102580e 	bge	zero,r4,81e00 <___vfprintf_internal_r+0x1604>
   814a0:	d9814717 	ldw	r6,1308(sp)
   814a4:	21807a16 	blt	r4,r6,81690 <___vfprintf_internal_r+0xe94>
   814a8:	d8814117 	ldw	r2,1284(sp)
   814ac:	91a5883a 	add	r18,r18,r6
   814b0:	8c400044 	addi	r17,r17,1
   814b4:	a8800015 	stw	r2,0(r21)
   814b8:	008001c4 	movi	r2,7
   814bc:	a9800115 	stw	r6,4(r21)
   814c0:	dc800e15 	stw	r18,56(sp)
   814c4:	dc400d15 	stw	r17,52(sp)
   814c8:	1442fc16 	blt	r2,r17,820bc <___vfprintf_internal_r+0x18c0>
   814cc:	a8c00204 	addi	r3,r21,8
   814d0:	d9414717 	ldw	r5,1308(sp)
   814d4:	2161c83a 	sub	r16,r4,r5
   814d8:	043f9d0e 	bge	zero,r16,81350 <___vfprintf_internal_r+0xb54>
   814dc:	00800404 	movi	r2,16
   814e0:	1402190e 	bge	r2,r16,81d48 <___vfprintf_internal_r+0x154c>
   814e4:	dc400d17 	ldw	r17,52(sp)
   814e8:	1027883a 	mov	r19,r2
   814ec:	07000274 	movhi	fp,9
   814f0:	e7332a84 	addi	fp,fp,-13142
   814f4:	050001c4 	movi	r20,7
   814f8:	00000306 	br	81508 <___vfprintf_internal_r+0xd0c>
   814fc:	18c00204 	addi	r3,r3,8
   81500:	843ffc04 	addi	r16,r16,-16
   81504:	9c02130e 	bge	r19,r16,81d54 <___vfprintf_internal_r+0x1558>
   81508:	94800404 	addi	r18,r18,16
   8150c:	8c400044 	addi	r17,r17,1
   81510:	1f000015 	stw	fp,0(r3)
   81514:	1cc00115 	stw	r19,4(r3)
   81518:	dc800e15 	stw	r18,56(sp)
   8151c:	dc400d15 	stw	r17,52(sp)
   81520:	a47ff60e 	bge	r20,r17,814fc <___vfprintf_internal_r+0xd00>
   81524:	d9014f17 	ldw	r4,1340(sp)
   81528:	b00b883a 	mov	r5,r22
   8152c:	d9800c04 	addi	r6,sp,48
   81530:	00807a40 	call	807a4 <__sprint_r>
   81534:	103e691e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   81538:	dc800e17 	ldw	r18,56(sp)
   8153c:	dc400d17 	ldw	r17,52(sp)
   81540:	d8c01904 	addi	r3,sp,100
   81544:	003fee06 	br	81500 <___vfprintf_internal_r+0xd04>
   81548:	d8814717 	ldw	r2,1308(sp)
   8154c:	143fffc4 	addi	r16,r2,-1
   81550:	043e970e 	bge	zero,r16,80fb0 <___vfprintf_internal_r+0x7b4>
   81554:	00800404 	movi	r2,16
   81558:	1400180e 	bge	r2,r16,815bc <___vfprintf_internal_r+0xdc0>
   8155c:	1029883a 	mov	r20,r2
   81560:	07000274 	movhi	fp,9
   81564:	e7332a84 	addi	fp,fp,-13142
   81568:	054001c4 	movi	r21,7
   8156c:	00000306 	br	8157c <___vfprintf_internal_r+0xd80>
   81570:	9cc00204 	addi	r19,r19,8
   81574:	843ffc04 	addi	r16,r16,-16
   81578:	a400120e 	bge	r20,r16,815c4 <___vfprintf_internal_r+0xdc8>
   8157c:	94800404 	addi	r18,r18,16
   81580:	8c400044 	addi	r17,r17,1
   81584:	9f000015 	stw	fp,0(r19)
   81588:	9d000115 	stw	r20,4(r19)
   8158c:	dc800e15 	stw	r18,56(sp)
   81590:	dc400d15 	stw	r17,52(sp)
   81594:	ac7ff60e 	bge	r21,r17,81570 <___vfprintf_internal_r+0xd74>
   81598:	d9014f17 	ldw	r4,1340(sp)
   8159c:	b00b883a 	mov	r5,r22
   815a0:	d9800c04 	addi	r6,sp,48
   815a4:	00807a40 	call	807a4 <__sprint_r>
   815a8:	103e4c1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   815ac:	dc800e17 	ldw	r18,56(sp)
   815b0:	dc400d17 	ldw	r17,52(sp)
   815b4:	dcc01904 	addi	r19,sp,100
   815b8:	003fee06 	br	81574 <___vfprintf_internal_r+0xd78>
   815bc:	07000274 	movhi	fp,9
   815c0:	e7332a84 	addi	fp,fp,-13142
   815c4:	9425883a 	add	r18,r18,r16
   815c8:	8c400044 	addi	r17,r17,1
   815cc:	008001c4 	movi	r2,7
   815d0:	9f000015 	stw	fp,0(r19)
   815d4:	9c000115 	stw	r16,4(r19)
   815d8:	dc800e15 	stw	r18,56(sp)
   815dc:	dc400d15 	stw	r17,52(sp)
   815e0:	147e720e 	bge	r2,r17,80fac <___vfprintf_internal_r+0x7b0>
   815e4:	d9014f17 	ldw	r4,1340(sp)
   815e8:	b00b883a 	mov	r5,r22
   815ec:	d9800c04 	addi	r6,sp,48
   815f0:	00807a40 	call	807a4 <__sprint_r>
   815f4:	103e391e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   815f8:	dc800e17 	ldw	r18,56(sp)
   815fc:	dc400d17 	ldw	r17,52(sp)
   81600:	dcc01904 	addi	r19,sp,100
   81604:	003e6a06 	br	80fb0 <___vfprintf_internal_r+0x7b4>
   81608:	d9014f17 	ldw	r4,1340(sp)
   8160c:	b00b883a 	mov	r5,r22
   81610:	d9800c04 	addi	r6,sp,48
   81614:	d9c15115 	stw	r7,1348(sp)
   81618:	00807a40 	call	807a4 <__sprint_r>
   8161c:	d9c15117 	ldw	r7,1348(sp)
   81620:	103e2e1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   81624:	dc800e17 	ldw	r18,56(sp)
   81628:	dc400d17 	ldw	r17,52(sp)
   8162c:	dd401904 	addi	r21,sp,100
   81630:	003dba06 	br	80d1c <___vfprintf_internal_r+0x520>
   81634:	d9014f17 	ldw	r4,1340(sp)
   81638:	b00b883a 	mov	r5,r22
   8163c:	d9800c04 	addi	r6,sp,48
   81640:	00807a40 	call	807a4 <__sprint_r>
   81644:	103e251e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   81648:	dc800e17 	ldw	r18,56(sp)
   8164c:	dc400d17 	ldw	r17,52(sp)
   81650:	dcc01904 	addi	r19,sp,100
   81654:	003e4206 	br	80f60 <___vfprintf_internal_r+0x764>
   81658:	d9014f17 	ldw	r4,1340(sp)
   8165c:	b00b883a 	mov	r5,r22
   81660:	d9800c04 	addi	r6,sp,48
   81664:	00807a40 	call	807a4 <__sprint_r>
   81668:	103e1c1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   8166c:	dc800e17 	ldw	r18,56(sp)
   81670:	dc400d17 	ldw	r17,52(sp)
   81674:	d8c01904 	addi	r3,sp,100
   81678:	003e2e06 	br	80f34 <___vfprintf_internal_r+0x738>
   8167c:	d9414c17 	ldw	r5,1328(sp)
   81680:	2880004c 	andi	r2,r5,1
   81684:	1005003a 	cmpeq	r2,r2,zero
   81688:	103dda1e 	bne	r2,zero,80df4 <___vfprintf_internal_r+0x5f8>
   8168c:	003e9f06 	br	8110c <___vfprintf_internal_r+0x910>
   81690:	d8c14117 	ldw	r3,1284(sp)
   81694:	9125883a 	add	r18,r18,r4
   81698:	8c400044 	addi	r17,r17,1
   8169c:	008001c4 	movi	r2,7
   816a0:	a8c00015 	stw	r3,0(r21)
   816a4:	a9000115 	stw	r4,4(r21)
   816a8:	dc800e15 	stw	r18,56(sp)
   816ac:	dc400d15 	stw	r17,52(sp)
   816b0:	14426c16 	blt	r2,r17,82064 <___vfprintf_internal_r+0x1868>
   816b4:	a8c00204 	addi	r3,r21,8
   816b8:	d9414917 	ldw	r5,1316(sp)
   816bc:	00800044 	movi	r2,1
   816c0:	94800044 	addi	r18,r18,1
   816c4:	8c400044 	addi	r17,r17,1
   816c8:	18800115 	stw	r2,4(r3)
   816cc:	008001c4 	movi	r2,7
   816d0:	19400015 	stw	r5,0(r3)
   816d4:	dc800e15 	stw	r18,56(sp)
   816d8:	dc400d15 	stw	r17,52(sp)
   816dc:	2021883a 	mov	r16,r4
   816e0:	14425616 	blt	r2,r17,8203c <___vfprintf_internal_r+0x1840>
   816e4:	19400204 	addi	r5,r3,8
   816e8:	d9814717 	ldw	r6,1308(sp)
   816ec:	8c400044 	addi	r17,r17,1
   816f0:	dc400d15 	stw	r17,52(sp)
   816f4:	3107c83a 	sub	r3,r6,r4
   816f8:	d9014117 	ldw	r4,1284(sp)
   816fc:	90e5883a 	add	r18,r18,r3
   81700:	28c00115 	stw	r3,4(r5)
   81704:	8105883a 	add	r2,r16,r4
   81708:	28800015 	stw	r2,0(r5)
   8170c:	008001c4 	movi	r2,7
   81710:	dc800e15 	stw	r18,56(sp)
   81714:	147f1d16 	blt	r2,r17,8138c <___vfprintf_internal_r+0xb90>
   81718:	28c00204 	addi	r3,r5,8
   8171c:	003db506 	br	80df4 <___vfprintf_internal_r+0x5f8>
   81720:	3c000017 	ldw	r16,0(r7)
   81724:	3c400117 	ldw	r17,4(r7)
   81728:	39800204 	addi	r6,r7,8
   8172c:	01000044 	movi	r4,1
   81730:	d9814015 	stw	r6,1280(sp)
   81734:	d8000405 	stb	zero,16(sp)
   81738:	003ebe06 	br	81234 <___vfprintf_internal_r+0xa38>
   8173c:	3c000017 	ldw	r16,0(r7)
   81740:	3c400117 	ldw	r17,4(r7)
   81744:	38800204 	addi	r2,r7,8
   81748:	d8814015 	stw	r2,1280(sp)
   8174c:	003eb706 	br	8122c <___vfprintf_internal_r+0xa30>
   81750:	3c000017 	ldw	r16,0(r7)
   81754:	3c400117 	ldw	r17,4(r7)
   81758:	39000204 	addi	r4,r7,8
   8175c:	d9014015 	stw	r4,1280(sp)
   81760:	0009883a 	mov	r4,zero
   81764:	d8000405 	stb	zero,16(sp)
   81768:	003eb206 	br	81234 <___vfprintf_internal_r+0xa38>
   8176c:	38c00017 	ldw	r3,0(r7)
   81770:	39c00104 	addi	r7,r7,4
   81774:	d8c14a15 	stw	r3,1320(sp)
   81778:	1800d70e 	bge	r3,zero,81ad8 <___vfprintf_internal_r+0x12dc>
   8177c:	00c7c83a 	sub	r3,zero,r3
   81780:	d8c14a15 	stw	r3,1320(sp)
   81784:	d9014c17 	ldw	r4,1328(sp)
   81788:	b8c00007 	ldb	r3,0(r23)
   8178c:	21000114 	ori	r4,r4,4
   81790:	d9014c15 	stw	r4,1328(sp)
   81794:	003c9806 	br	809f8 <___vfprintf_internal_r+0x1fc>
   81798:	d9814c17 	ldw	r6,1328(sp)
   8179c:	3080080c 	andi	r2,r6,32
   817a0:	1001f626 	beq	r2,zero,81f7c <___vfprintf_internal_r+0x1780>
   817a4:	d9014b17 	ldw	r4,1324(sp)
   817a8:	38800017 	ldw	r2,0(r7)
   817ac:	39c00104 	addi	r7,r7,4
   817b0:	d9c14015 	stw	r7,1280(sp)
   817b4:	2007d7fa 	srai	r3,r4,31
   817b8:	d9c14017 	ldw	r7,1280(sp)
   817bc:	11000015 	stw	r4,0(r2)
   817c0:	10c00115 	stw	r3,4(r2)
   817c4:	003c6906 	br	8096c <___vfprintf_internal_r+0x170>
   817c8:	b8c00007 	ldb	r3,0(r23)
   817cc:	00801b04 	movi	r2,108
   817d0:	18825526 	beq	r3,r2,82128 <___vfprintf_internal_r+0x192c>
   817d4:	d9414c17 	ldw	r5,1328(sp)
   817d8:	29400414 	ori	r5,r5,16
   817dc:	d9414c15 	stw	r5,1328(sp)
   817e0:	003c8506 	br	809f8 <___vfprintf_internal_r+0x1fc>
   817e4:	d9814c17 	ldw	r6,1328(sp)
   817e8:	b8c00007 	ldb	r3,0(r23)
   817ec:	31800814 	ori	r6,r6,32
   817f0:	d9814c15 	stw	r6,1328(sp)
   817f4:	003c8006 	br	809f8 <___vfprintf_internal_r+0x1fc>
   817f8:	d8814c17 	ldw	r2,1328(sp)
   817fc:	3c000017 	ldw	r16,0(r7)
   81800:	00c01e04 	movi	r3,120
   81804:	10800094 	ori	r2,r2,2
   81808:	d8814c15 	stw	r2,1328(sp)
   8180c:	39c00104 	addi	r7,r7,4
   81810:	01400274 	movhi	r5,9
   81814:	29731304 	addi	r5,r5,-13236
   81818:	00800c04 	movi	r2,48
   8181c:	0023883a 	mov	r17,zero
   81820:	01000084 	movi	r4,2
   81824:	d9c14015 	stw	r7,1280(sp)
   81828:	d8c14d15 	stw	r3,1332(sp)
   8182c:	d9414415 	stw	r5,1296(sp)
   81830:	d8800445 	stb	r2,17(sp)
   81834:	d8c00485 	stb	r3,18(sp)
   81838:	d8000405 	stb	zero,16(sp)
   8183c:	003e7d06 	br	81234 <___vfprintf_internal_r+0xa38>
   81840:	d8814c17 	ldw	r2,1328(sp)
   81844:	b8c00007 	ldb	r3,0(r23)
   81848:	10801014 	ori	r2,r2,64
   8184c:	d8814c15 	stw	r2,1328(sp)
   81850:	003c6906 	br	809f8 <___vfprintf_internal_r+0x1fc>
   81854:	d9414c17 	ldw	r5,1328(sp)
   81858:	2880020c 	andi	r2,r5,8
   8185c:	1001e526 	beq	r2,zero,81ff4 <___vfprintf_internal_r+0x17f8>
   81860:	39800017 	ldw	r6,0(r7)
   81864:	38800204 	addi	r2,r7,8
   81868:	d8814015 	stw	r2,1280(sp)
   8186c:	d9814215 	stw	r6,1288(sp)
   81870:	39c00117 	ldw	r7,4(r7)
   81874:	d9c14315 	stw	r7,1292(sp)
   81878:	d9014217 	ldw	r4,1288(sp)
   8187c:	d9414317 	ldw	r5,1292(sp)
   81880:	00872ac0 	call	872ac <__isinfd>
   81884:	10021d26 	beq	r2,zero,820fc <___vfprintf_internal_r+0x1900>
   81888:	d9014217 	ldw	r4,1288(sp)
   8188c:	d9414317 	ldw	r5,1292(sp)
   81890:	000d883a 	mov	r6,zero
   81894:	000f883a 	mov	r7,zero
   81898:	00894480 	call	89448 <__ltdf2>
   8189c:	1002d016 	blt	r2,zero,823e0 <___vfprintf_internal_r+0x1be4>
   818a0:	d9414d17 	ldw	r5,1332(sp)
   818a4:	008011c4 	movi	r2,71
   818a8:	11421016 	blt	r2,r5,820ec <___vfprintf_internal_r+0x18f0>
   818ac:	01800274 	movhi	r6,9
   818b0:	31b31804 	addi	r6,r6,-13216
   818b4:	d9814115 	stw	r6,1284(sp)
   818b8:	d9014c17 	ldw	r4,1328(sp)
   818bc:	00c000c4 	movi	r3,3
   818c0:	00bfdfc4 	movi	r2,-129
   818c4:	2088703a 	and	r4,r4,r2
   818c8:	180f883a 	mov	r7,r3
   818cc:	d8c14515 	stw	r3,1300(sp)
   818d0:	d9014c15 	stw	r4,1328(sp)
   818d4:	d8014615 	stw	zero,1304(sp)
   818d8:	003e6a06 	br	81284 <___vfprintf_internal_r+0xa88>
   818dc:	38800017 	ldw	r2,0(r7)
   818e0:	00c00044 	movi	r3,1
   818e4:	39c00104 	addi	r7,r7,4
   818e8:	d9c14015 	stw	r7,1280(sp)
   818ec:	d9000f04 	addi	r4,sp,60
   818f0:	180f883a 	mov	r7,r3
   818f4:	d8c14515 	stw	r3,1300(sp)
   818f8:	d9014115 	stw	r4,1284(sp)
   818fc:	d8800f05 	stb	r2,60(sp)
   81900:	d8000405 	stb	zero,16(sp)
   81904:	003cac06 	br	80bb8 <___vfprintf_internal_r+0x3bc>
   81908:	01400274 	movhi	r5,9
   8190c:	29731e04 	addi	r5,r5,-13192
   81910:	d9414415 	stw	r5,1296(sp)
   81914:	d9814c17 	ldw	r6,1328(sp)
   81918:	3080080c 	andi	r2,r6,32
   8191c:	1000ff26 	beq	r2,zero,81d1c <___vfprintf_internal_r+0x1520>
   81920:	3c000017 	ldw	r16,0(r7)
   81924:	3c400117 	ldw	r17,4(r7)
   81928:	38800204 	addi	r2,r7,8
   8192c:	d8814015 	stw	r2,1280(sp)
   81930:	d9414c17 	ldw	r5,1328(sp)
   81934:	2880004c 	andi	r2,r5,1
   81938:	1005003a 	cmpeq	r2,r2,zero
   8193c:	1000b91e 	bne	r2,zero,81c24 <___vfprintf_internal_r+0x1428>
   81940:	8444b03a 	or	r2,r16,r17
   81944:	1000b726 	beq	r2,zero,81c24 <___vfprintf_internal_r+0x1428>
   81948:	d9814d17 	ldw	r6,1332(sp)
   8194c:	29400094 	ori	r5,r5,2
   81950:	00800c04 	movi	r2,48
   81954:	01000084 	movi	r4,2
   81958:	d9414c15 	stw	r5,1328(sp)
   8195c:	d8800445 	stb	r2,17(sp)
   81960:	d9800485 	stb	r6,18(sp)
   81964:	d8000405 	stb	zero,16(sp)
   81968:	003e3206 	br	81234 <___vfprintf_internal_r+0xa38>
   8196c:	01800274 	movhi	r6,9
   81970:	31b31304 	addi	r6,r6,-13236
   81974:	d9814415 	stw	r6,1296(sp)
   81978:	003fe606 	br	81914 <___vfprintf_internal_r+0x1118>
   8197c:	00800ac4 	movi	r2,43
   81980:	d8800405 	stb	r2,16(sp)
   81984:	b8c00007 	ldb	r3,0(r23)
   81988:	003c1b06 	br	809f8 <___vfprintf_internal_r+0x1fc>
   8198c:	d8814c17 	ldw	r2,1328(sp)
   81990:	b8c00007 	ldb	r3,0(r23)
   81994:	10800054 	ori	r2,r2,1
   81998:	d8814c15 	stw	r2,1328(sp)
   8199c:	003c1606 	br	809f8 <___vfprintf_internal_r+0x1fc>
   819a0:	d8800407 	ldb	r2,16(sp)
   819a4:	10004c1e 	bne	r2,zero,81ad8 <___vfprintf_internal_r+0x12dc>
   819a8:	00800804 	movi	r2,32
   819ac:	d8800405 	stb	r2,16(sp)
   819b0:	b8c00007 	ldb	r3,0(r23)
   819b4:	003c1006 	br	809f8 <___vfprintf_internal_r+0x1fc>
   819b8:	d9814c17 	ldw	r6,1328(sp)
   819bc:	b8c00007 	ldb	r3,0(r23)
   819c0:	31800214 	ori	r6,r6,8
   819c4:	d9814c15 	stw	r6,1328(sp)
   819c8:	003c0b06 	br	809f8 <___vfprintf_internal_r+0x1fc>
   819cc:	0009883a 	mov	r4,zero
   819d0:	04000244 	movi	r16,9
   819d4:	01400284 	movi	r5,10
   819d8:	d9c15115 	stw	r7,1348(sp)
   819dc:	00805cc0 	call	805cc <__mulsi3>
   819e0:	b9000007 	ldb	r4,0(r23)
   819e4:	d8c14d17 	ldw	r3,1332(sp)
   819e8:	bdc00044 	addi	r23,r23,1
   819ec:	d9014d15 	stw	r4,1332(sp)
   819f0:	d9414d17 	ldw	r5,1332(sp)
   819f4:	1885883a 	add	r2,r3,r2
   819f8:	113ff404 	addi	r4,r2,-48
   819fc:	28bff404 	addi	r2,r5,-48
   81a00:	d9c15117 	ldw	r7,1348(sp)
   81a04:	80bff32e 	bgeu	r16,r2,819d4 <___vfprintf_internal_r+0x11d8>
   81a08:	d9014a15 	stw	r4,1320(sp)
   81a0c:	003bfc06 	br	80a00 <___vfprintf_internal_r+0x204>
   81a10:	d8814c17 	ldw	r2,1328(sp)
   81a14:	b8c00007 	ldb	r3,0(r23)
   81a18:	10802014 	ori	r2,r2,128
   81a1c:	d8814c15 	stw	r2,1328(sp)
   81a20:	003bf506 	br	809f8 <___vfprintf_internal_r+0x1fc>
   81a24:	b8c00007 	ldb	r3,0(r23)
   81a28:	00800a84 	movi	r2,42
   81a2c:	bdc00044 	addi	r23,r23,1
   81a30:	18831826 	beq	r3,r2,82694 <___vfprintf_internal_r+0x1e98>
   81a34:	d8c14d15 	stw	r3,1332(sp)
   81a38:	18bff404 	addi	r2,r3,-48
   81a3c:	00c00244 	movi	r3,9
   81a40:	18827b36 	bltu	r3,r2,82430 <___vfprintf_internal_r+0x1c34>
   81a44:	1821883a 	mov	r16,r3
   81a48:	0009883a 	mov	r4,zero
   81a4c:	01400284 	movi	r5,10
   81a50:	d9c15115 	stw	r7,1348(sp)
   81a54:	00805cc0 	call	805cc <__mulsi3>
   81a58:	d9414d17 	ldw	r5,1332(sp)
   81a5c:	b9800007 	ldb	r6,0(r23)
   81a60:	d9c15117 	ldw	r7,1348(sp)
   81a64:	1145883a 	add	r2,r2,r5
   81a68:	113ff404 	addi	r4,r2,-48
   81a6c:	30bff404 	addi	r2,r6,-48
   81a70:	d9814d15 	stw	r6,1332(sp)
   81a74:	bdc00044 	addi	r23,r23,1
   81a78:	80bff42e 	bgeu	r16,r2,81a4c <___vfprintf_internal_r+0x1250>
   81a7c:	2027883a 	mov	r19,r4
   81a80:	203bdf0e 	bge	r4,zero,80a00 <___vfprintf_internal_r+0x204>
   81a84:	04ffffc4 	movi	r19,-1
   81a88:	003bdd06 	br	80a00 <___vfprintf_internal_r+0x204>
   81a8c:	d8000405 	stb	zero,16(sp)
   81a90:	39800017 	ldw	r6,0(r7)
   81a94:	39c00104 	addi	r7,r7,4
   81a98:	d9c14015 	stw	r7,1280(sp)
   81a9c:	d9814115 	stw	r6,1284(sp)
   81aa0:	3001c926 	beq	r6,zero,821c8 <___vfprintf_internal_r+0x19cc>
   81aa4:	98000e16 	blt	r19,zero,81ae0 <___vfprintf_internal_r+0x12e4>
   81aa8:	d9014117 	ldw	r4,1284(sp)
   81aac:	000b883a 	mov	r5,zero
   81ab0:	980d883a 	mov	r6,r19
   81ab4:	00859300 	call	85930 <memchr>
   81ab8:	10025926 	beq	r2,zero,82420 <___vfprintf_internal_r+0x1c24>
   81abc:	d8c14117 	ldw	r3,1284(sp)
   81ac0:	10cfc83a 	sub	r7,r2,r3
   81ac4:	99c19e16 	blt	r19,r7,82140 <___vfprintf_internal_r+0x1944>
   81ac8:	d9c14515 	stw	r7,1300(sp)
   81acc:	38000916 	blt	r7,zero,81af4 <___vfprintf_internal_r+0x12f8>
   81ad0:	d8014615 	stw	zero,1304(sp)
   81ad4:	003deb06 	br	81284 <___vfprintf_internal_r+0xa88>
   81ad8:	b8c00007 	ldb	r3,0(r23)
   81adc:	003bc606 	br	809f8 <___vfprintf_internal_r+0x1fc>
   81ae0:	d9014117 	ldw	r4,1284(sp)
   81ae4:	00807300 	call	80730 <strlen>
   81ae8:	d8814515 	stw	r2,1300(sp)
   81aec:	100f883a 	mov	r7,r2
   81af0:	103ff70e 	bge	r2,zero,81ad0 <___vfprintf_internal_r+0x12d4>
   81af4:	d8014515 	stw	zero,1300(sp)
   81af8:	d8014615 	stw	zero,1304(sp)
   81afc:	003de106 	br	81284 <___vfprintf_internal_r+0xa88>
   81b00:	20c03fcc 	andi	r3,r4,255
   81b04:	00800044 	movi	r2,1
   81b08:	18802d26 	beq	r3,r2,81bc0 <___vfprintf_internal_r+0x13c4>
   81b0c:	18800e36 	bltu	r3,r2,81b48 <___vfprintf_internal_r+0x134c>
   81b10:	00800084 	movi	r2,2
   81b14:	1880fa26 	beq	r3,r2,81f00 <___vfprintf_internal_r+0x1704>
   81b18:	01000274 	movhi	r4,9
   81b1c:	21332304 	addi	r4,r4,-13172
   81b20:	00807300 	call	80730 <strlen>
   81b24:	100f883a 	mov	r7,r2
   81b28:	dcc14515 	stw	r19,1300(sp)
   81b2c:	9880010e 	bge	r19,r2,81b34 <___vfprintf_internal_r+0x1338>
   81b30:	d8814515 	stw	r2,1300(sp)
   81b34:	00800274 	movhi	r2,9
   81b38:	10b32304 	addi	r2,r2,-13172
   81b3c:	dcc14615 	stw	r19,1304(sp)
   81b40:	d8814115 	stw	r2,1284(sp)
   81b44:	003dcf06 	br	81284 <___vfprintf_internal_r+0xa88>
   81b48:	d9401904 	addi	r5,sp,100
   81b4c:	dd000f04 	addi	r20,sp,60
   81b50:	d9414115 	stw	r5,1284(sp)
   81b54:	880a977a 	slli	r5,r17,29
   81b58:	d9814117 	ldw	r6,1284(sp)
   81b5c:	8004d0fa 	srli	r2,r16,3
   81b60:	8806d0fa 	srli	r3,r17,3
   81b64:	810001cc 	andi	r4,r16,7
   81b68:	2884b03a 	or	r2,r5,r2
   81b6c:	31bfffc4 	addi	r6,r6,-1
   81b70:	21000c04 	addi	r4,r4,48
   81b74:	d9814115 	stw	r6,1284(sp)
   81b78:	10cab03a 	or	r5,r2,r3
   81b7c:	31000005 	stb	r4,0(r6)
   81b80:	1021883a 	mov	r16,r2
   81b84:	1823883a 	mov	r17,r3
   81b88:	283ff21e 	bne	r5,zero,81b54 <___vfprintf_internal_r+0x1358>
   81b8c:	d8c14c17 	ldw	r3,1328(sp)
   81b90:	1880004c 	andi	r2,r3,1
   81b94:	1005003a 	cmpeq	r2,r2,zero
   81b98:	103db31e 	bne	r2,zero,81268 <___vfprintf_internal_r+0xa6c>
   81b9c:	20803fcc 	andi	r2,r4,255
   81ba0:	1080201c 	xori	r2,r2,128
   81ba4:	10bfe004 	addi	r2,r2,-128
   81ba8:	00c00c04 	movi	r3,48
   81bac:	10fdae26 	beq	r2,r3,81268 <___vfprintf_internal_r+0xa6c>
   81bb0:	31bfffc4 	addi	r6,r6,-1
   81bb4:	d9814115 	stw	r6,1284(sp)
   81bb8:	30c00005 	stb	r3,0(r6)
   81bbc:	003daa06 	br	81268 <___vfprintf_internal_r+0xa6c>
   81bc0:	88800068 	cmpgeui	r2,r17,1
   81bc4:	10002c1e 	bne	r2,zero,81c78 <___vfprintf_internal_r+0x147c>
   81bc8:	8800021e 	bne	r17,zero,81bd4 <___vfprintf_internal_r+0x13d8>
   81bcc:	00800244 	movi	r2,9
   81bd0:	14002936 	bltu	r2,r16,81c78 <___vfprintf_internal_r+0x147c>
   81bd4:	d90018c4 	addi	r4,sp,99
   81bd8:	dd000f04 	addi	r20,sp,60
   81bdc:	d9014115 	stw	r4,1284(sp)
   81be0:	d9014117 	ldw	r4,1284(sp)
   81be4:	80800c04 	addi	r2,r16,48
   81be8:	20800005 	stb	r2,0(r4)
   81bec:	003d9e06 	br	81268 <___vfprintf_internal_r+0xa6c>
   81bf0:	dc400d17 	ldw	r17,52(sp)
   81bf4:	07000274 	movhi	fp,9
   81bf8:	e7332a84 	addi	fp,fp,-13142
   81bfc:	9425883a 	add	r18,r18,r16
   81c00:	8c400044 	addi	r17,r17,1
   81c04:	008001c4 	movi	r2,7
   81c08:	1f000015 	stw	fp,0(r3)
   81c0c:	1c000115 	stw	r16,4(r3)
   81c10:	dc800e15 	stw	r18,56(sp)
   81c14:	dc400d15 	stw	r17,52(sp)
   81c18:	147ddc16 	blt	r2,r17,8138c <___vfprintf_internal_r+0xb90>
   81c1c:	18c00204 	addi	r3,r3,8
   81c20:	003c7406 	br	80df4 <___vfprintf_internal_r+0x5f8>
   81c24:	01000084 	movi	r4,2
   81c28:	d8000405 	stb	zero,16(sp)
   81c2c:	003d8106 	br	81234 <___vfprintf_internal_r+0xa38>
   81c30:	d9814c17 	ldw	r6,1328(sp)
   81c34:	30c4703a 	and	r2,r6,r3
   81c38:	1005003a 	cmpeq	r2,r2,zero
   81c3c:	103cb326 	beq	r2,zero,80f0c <___vfprintf_internal_r+0x710>
   81c40:	d9014117 	ldw	r4,1284(sp)
   81c44:	94800044 	addi	r18,r18,1
   81c48:	8c400044 	addi	r17,r17,1
   81c4c:	008001c4 	movi	r2,7
   81c50:	a9000015 	stw	r4,0(r21)
   81c54:	a8c00115 	stw	r3,4(r21)
   81c58:	dc800e15 	stw	r18,56(sp)
   81c5c:	dc400d15 	stw	r17,52(sp)
   81c60:	147e6016 	blt	r2,r17,815e4 <___vfprintf_internal_r+0xde8>
   81c64:	acc00204 	addi	r19,r21,8
   81c68:	003cd106 	br	80fb0 <___vfprintf_internal_r+0x7b4>
   81c6c:	07000274 	movhi	fp,9
   81c70:	e7332a84 	addi	fp,fp,-13142
   81c74:	003c4906 	br	80d9c <___vfprintf_internal_r+0x5a0>
   81c78:	dd000f04 	addi	r20,sp,60
   81c7c:	dc801904 	addi	r18,sp,100
   81c80:	8009883a 	mov	r4,r16
   81c84:	880b883a 	mov	r5,r17
   81c88:	01800284 	movi	r6,10
   81c8c:	000f883a 	mov	r7,zero
   81c90:	00880a80 	call	880a8 <__umoddi3>
   81c94:	12000c04 	addi	r8,r2,48
   81c98:	94bfffc4 	addi	r18,r18,-1
   81c9c:	8009883a 	mov	r4,r16
   81ca0:	880b883a 	mov	r5,r17
   81ca4:	01800284 	movi	r6,10
   81ca8:	000f883a 	mov	r7,zero
   81cac:	92000005 	stb	r8,0(r18)
   81cb0:	0087a3c0 	call	87a3c <__udivdi3>
   81cb4:	1009883a 	mov	r4,r2
   81cb8:	1021883a 	mov	r16,r2
   81cbc:	18800068 	cmpgeui	r2,r3,1
   81cc0:	1823883a 	mov	r17,r3
   81cc4:	103fee1e 	bne	r2,zero,81c80 <___vfprintf_internal_r+0x1484>
   81cc8:	1800021e 	bne	r3,zero,81cd4 <___vfprintf_internal_r+0x14d8>
   81ccc:	00800244 	movi	r2,9
   81cd0:	113feb36 	bltu	r2,r4,81c80 <___vfprintf_internal_r+0x1484>
   81cd4:	94bfffc4 	addi	r18,r18,-1
   81cd8:	dc814115 	stw	r18,1284(sp)
   81cdc:	003fc006 	br	81be0 <___vfprintf_internal_r+0x13e4>
   81ce0:	d9014c17 	ldw	r4,1328(sp)
   81ce4:	2080004c 	andi	r2,r4,1
   81ce8:	10009a1e 	bne	r2,zero,81f54 <___vfprintf_internal_r+0x1758>
   81cec:	d9401904 	addi	r5,sp,100
   81cf0:	dd000f04 	addi	r20,sp,60
   81cf4:	d9414115 	stw	r5,1284(sp)
   81cf8:	003d5b06 	br	81268 <___vfprintf_internal_r+0xa6c>
   81cfc:	d9014f17 	ldw	r4,1340(sp)
   81d00:	b00b883a 	mov	r5,r22
   81d04:	d9800c04 	addi	r6,sp,48
   81d08:	00807a40 	call	807a4 <__sprint_r>
   81d0c:	103c731e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   81d10:	dc800e17 	ldw	r18,56(sp)
   81d14:	d8c01904 	addi	r3,sp,100
   81d18:	003cf906 	br	81100 <___vfprintf_internal_r+0x904>
   81d1c:	d8c14c17 	ldw	r3,1328(sp)
   81d20:	1880040c 	andi	r2,r3,16
   81d24:	1000711e 	bne	r2,zero,81eec <___vfprintf_internal_r+0x16f0>
   81d28:	d9014c17 	ldw	r4,1328(sp)
   81d2c:	2080100c 	andi	r2,r4,64
   81d30:	10006e26 	beq	r2,zero,81eec <___vfprintf_internal_r+0x16f0>
   81d34:	3c00000b 	ldhu	r16,0(r7)
   81d38:	0023883a 	mov	r17,zero
   81d3c:	39c00104 	addi	r7,r7,4
   81d40:	d9c14015 	stw	r7,1280(sp)
   81d44:	003efa06 	br	81930 <___vfprintf_internal_r+0x1134>
   81d48:	dc400d17 	ldw	r17,52(sp)
   81d4c:	07000274 	movhi	fp,9
   81d50:	e7332a84 	addi	fp,fp,-13142
   81d54:	9425883a 	add	r18,r18,r16
   81d58:	8c400044 	addi	r17,r17,1
   81d5c:	008001c4 	movi	r2,7
   81d60:	1f000015 	stw	fp,0(r3)
   81d64:	1c000115 	stw	r16,4(r3)
   81d68:	dc800e15 	stw	r18,56(sp)
   81d6c:	dc400d15 	stw	r17,52(sp)
   81d70:	147d7016 	blt	r2,r17,81334 <___vfprintf_internal_r+0xb38>
   81d74:	18c00204 	addi	r3,r3,8
   81d78:	003d7506 	br	81350 <___vfprintf_internal_r+0xb54>
   81d7c:	dc800e17 	ldw	r18,56(sp)
   81d80:	dc400d17 	ldw	r17,52(sp)
   81d84:	07000274 	movhi	fp,9
   81d88:	e7332e84 	addi	fp,fp,-13126
   81d8c:	003bba06 	br	80c78 <___vfprintf_internal_r+0x47c>
   81d90:	d9014f17 	ldw	r4,1340(sp)
   81d94:	b00b883a 	mov	r5,r22
   81d98:	d9800c04 	addi	r6,sp,48
   81d9c:	00807a40 	call	807a4 <__sprint_r>
   81da0:	103c4e1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   81da4:	dc800e17 	ldw	r18,56(sp)
   81da8:	d8c01904 	addi	r3,sp,100
   81dac:	003ce306 	br	8113c <___vfprintf_internal_r+0x940>
   81db0:	3c000017 	ldw	r16,0(r7)
   81db4:	0009883a 	mov	r4,zero
   81db8:	39c00104 	addi	r7,r7,4
   81dbc:	0023883a 	mov	r17,zero
   81dc0:	d9c14015 	stw	r7,1280(sp)
   81dc4:	d8000405 	stb	zero,16(sp)
   81dc8:	003d1a06 	br	81234 <___vfprintf_internal_r+0xa38>
   81dcc:	38800017 	ldw	r2,0(r7)
   81dd0:	39c00104 	addi	r7,r7,4
   81dd4:	d9c14015 	stw	r7,1280(sp)
   81dd8:	1023d7fa 	srai	r17,r2,31
   81ddc:	1021883a 	mov	r16,r2
   81de0:	003d1206 	br	8122c <___vfprintf_internal_r+0xa30>
   81de4:	3c000017 	ldw	r16,0(r7)
   81de8:	01000044 	movi	r4,1
   81dec:	39c00104 	addi	r7,r7,4
   81df0:	0023883a 	mov	r17,zero
   81df4:	d9c14015 	stw	r7,1280(sp)
   81df8:	d8000405 	stb	zero,16(sp)
   81dfc:	003d0d06 	br	81234 <___vfprintf_internal_r+0xa38>
   81e00:	00800274 	movhi	r2,9
   81e04:	10b32a04 	addi	r2,r2,-13144
   81e08:	94800044 	addi	r18,r18,1
   81e0c:	8c400044 	addi	r17,r17,1
   81e10:	a8800015 	stw	r2,0(r21)
   81e14:	00c00044 	movi	r3,1
   81e18:	008001c4 	movi	r2,7
   81e1c:	a8c00115 	stw	r3,4(r21)
   81e20:	dc800e15 	stw	r18,56(sp)
   81e24:	dc400d15 	stw	r17,52(sp)
   81e28:	1440ca16 	blt	r2,r17,82154 <___vfprintf_internal_r+0x1958>
   81e2c:	a8c00204 	addi	r3,r21,8
   81e30:	2000061e 	bne	r4,zero,81e4c <___vfprintf_internal_r+0x1650>
   81e34:	d9414717 	ldw	r5,1308(sp)
   81e38:	2800041e 	bne	r5,zero,81e4c <___vfprintf_internal_r+0x1650>
   81e3c:	d9814c17 	ldw	r6,1328(sp)
   81e40:	3080004c 	andi	r2,r6,1
   81e44:	1005003a 	cmpeq	r2,r2,zero
   81e48:	103bea1e 	bne	r2,zero,80df4 <___vfprintf_internal_r+0x5f8>
   81e4c:	00800044 	movi	r2,1
   81e50:	dc400d17 	ldw	r17,52(sp)
   81e54:	18800115 	stw	r2,4(r3)
   81e58:	d8814917 	ldw	r2,1316(sp)
   81e5c:	94800044 	addi	r18,r18,1
   81e60:	8c400044 	addi	r17,r17,1
   81e64:	18800015 	stw	r2,0(r3)
   81e68:	008001c4 	movi	r2,7
   81e6c:	dc800e15 	stw	r18,56(sp)
   81e70:	dc400d15 	stw	r17,52(sp)
   81e74:	1440ca16 	blt	r2,r17,821a0 <___vfprintf_internal_r+0x19a4>
   81e78:	18c00204 	addi	r3,r3,8
   81e7c:	0121c83a 	sub	r16,zero,r4
   81e80:	0400500e 	bge	zero,r16,81fc4 <___vfprintf_internal_r+0x17c8>
   81e84:	00800404 	movi	r2,16
   81e88:	1400800e 	bge	r2,r16,8208c <___vfprintf_internal_r+0x1890>
   81e8c:	1027883a 	mov	r19,r2
   81e90:	07000274 	movhi	fp,9
   81e94:	e7332a84 	addi	fp,fp,-13142
   81e98:	050001c4 	movi	r20,7
   81e9c:	00000306 	br	81eac <___vfprintf_internal_r+0x16b0>
   81ea0:	18c00204 	addi	r3,r3,8
   81ea4:	843ffc04 	addi	r16,r16,-16
   81ea8:	9c007a0e 	bge	r19,r16,82094 <___vfprintf_internal_r+0x1898>
   81eac:	94800404 	addi	r18,r18,16
   81eb0:	8c400044 	addi	r17,r17,1
   81eb4:	1f000015 	stw	fp,0(r3)
   81eb8:	1cc00115 	stw	r19,4(r3)
   81ebc:	dc800e15 	stw	r18,56(sp)
   81ec0:	dc400d15 	stw	r17,52(sp)
   81ec4:	a47ff60e 	bge	r20,r17,81ea0 <___vfprintf_internal_r+0x16a4>
   81ec8:	d9014f17 	ldw	r4,1340(sp)
   81ecc:	b00b883a 	mov	r5,r22
   81ed0:	d9800c04 	addi	r6,sp,48
   81ed4:	00807a40 	call	807a4 <__sprint_r>
   81ed8:	103c001e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   81edc:	dc800e17 	ldw	r18,56(sp)
   81ee0:	dc400d17 	ldw	r17,52(sp)
   81ee4:	d8c01904 	addi	r3,sp,100
   81ee8:	003fee06 	br	81ea4 <___vfprintf_internal_r+0x16a8>
   81eec:	3c000017 	ldw	r16,0(r7)
   81ef0:	0023883a 	mov	r17,zero
   81ef4:	39c00104 	addi	r7,r7,4
   81ef8:	d9c14015 	stw	r7,1280(sp)
   81efc:	003e8c06 	br	81930 <___vfprintf_internal_r+0x1134>
   81f00:	d9401904 	addi	r5,sp,100
   81f04:	dd000f04 	addi	r20,sp,60
   81f08:	d9414115 	stw	r5,1284(sp)
   81f0c:	d9814417 	ldw	r6,1296(sp)
   81f10:	880a973a 	slli	r5,r17,28
   81f14:	8004d13a 	srli	r2,r16,4
   81f18:	810003cc 	andi	r4,r16,15
   81f1c:	3109883a 	add	r4,r6,r4
   81f20:	2884b03a 	or	r2,r5,r2
   81f24:	21400003 	ldbu	r5,0(r4)
   81f28:	d9014117 	ldw	r4,1284(sp)
   81f2c:	8806d13a 	srli	r3,r17,4
   81f30:	1021883a 	mov	r16,r2
   81f34:	213fffc4 	addi	r4,r4,-1
   81f38:	d9014115 	stw	r4,1284(sp)
   81f3c:	d9814117 	ldw	r6,1284(sp)
   81f40:	10c8b03a 	or	r4,r2,r3
   81f44:	1823883a 	mov	r17,r3
   81f48:	31400005 	stb	r5,0(r6)
   81f4c:	203fef1e 	bne	r4,zero,81f0c <___vfprintf_internal_r+0x1710>
   81f50:	003cc506 	br	81268 <___vfprintf_internal_r+0xa6c>
   81f54:	00800c04 	movi	r2,48
   81f58:	d98018c4 	addi	r6,sp,99
   81f5c:	dd000f04 	addi	r20,sp,60
   81f60:	d88018c5 	stb	r2,99(sp)
   81f64:	d9814115 	stw	r6,1284(sp)
   81f68:	003cbf06 	br	81268 <___vfprintf_internal_r+0xa6c>
   81f6c:	dc400d17 	ldw	r17,52(sp)
   81f70:	07000274 	movhi	fp,9
   81f74:	e7332e84 	addi	fp,fp,-13126
   81f78:	003bc106 	br	80e80 <___vfprintf_internal_r+0x684>
   81f7c:	d9414c17 	ldw	r5,1328(sp)
   81f80:	2880040c 	andi	r2,r5,16
   81f84:	10007c26 	beq	r2,zero,82178 <___vfprintf_internal_r+0x197c>
   81f88:	38800017 	ldw	r2,0(r7)
   81f8c:	39c00104 	addi	r7,r7,4
   81f90:	d9c14015 	stw	r7,1280(sp)
   81f94:	d9814b17 	ldw	r6,1324(sp)
   81f98:	d9c14017 	ldw	r7,1280(sp)
   81f9c:	11800015 	stw	r6,0(r2)
   81fa0:	003a7206 	br	8096c <___vfprintf_internal_r+0x170>
   81fa4:	d9014f17 	ldw	r4,1340(sp)
   81fa8:	b00b883a 	mov	r5,r22
   81fac:	d9800c04 	addi	r6,sp,48
   81fb0:	00807a40 	call	807a4 <__sprint_r>
   81fb4:	103bc91e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   81fb8:	dc800e17 	ldw	r18,56(sp)
   81fbc:	dc400d17 	ldw	r17,52(sp)
   81fc0:	d8c01904 	addi	r3,sp,100
   81fc4:	d9014717 	ldw	r4,1308(sp)
   81fc8:	d9414117 	ldw	r5,1284(sp)
   81fcc:	8c400044 	addi	r17,r17,1
   81fd0:	9125883a 	add	r18,r18,r4
   81fd4:	008001c4 	movi	r2,7
   81fd8:	19400015 	stw	r5,0(r3)
   81fdc:	19000115 	stw	r4,4(r3)
   81fe0:	dc800e15 	stw	r18,56(sp)
   81fe4:	dc400d15 	stw	r17,52(sp)
   81fe8:	147ce816 	blt	r2,r17,8138c <___vfprintf_internal_r+0xb90>
   81fec:	18c00204 	addi	r3,r3,8
   81ff0:	003b8006 	br	80df4 <___vfprintf_internal_r+0x5f8>
   81ff4:	38c00017 	ldw	r3,0(r7)
   81ff8:	39000204 	addi	r4,r7,8
   81ffc:	d9014015 	stw	r4,1280(sp)
   82000:	d8c14215 	stw	r3,1288(sp)
   82004:	39c00117 	ldw	r7,4(r7)
   82008:	d9c14315 	stw	r7,1292(sp)
   8200c:	003e1a06 	br	81878 <___vfprintf_internal_r+0x107c>
   82010:	0005883a 	mov	r2,zero
   82014:	1409c83a 	sub	r4,r2,r16
   82018:	1105803a 	cmpltu	r2,r2,r4
   8201c:	044bc83a 	sub	r5,zero,r17
   82020:	2885c83a 	sub	r2,r5,r2
   82024:	2021883a 	mov	r16,r4
   82028:	1023883a 	mov	r17,r2
   8202c:	01000044 	movi	r4,1
   82030:	00800b44 	movi	r2,45
   82034:	d8800405 	stb	r2,16(sp)
   82038:	003c7e06 	br	81234 <___vfprintf_internal_r+0xa38>
   8203c:	d9014f17 	ldw	r4,1340(sp)
   82040:	b00b883a 	mov	r5,r22
   82044:	d9800c04 	addi	r6,sp,48
   82048:	00807a40 	call	807a4 <__sprint_r>
   8204c:	103ba31e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   82050:	dc800e17 	ldw	r18,56(sp)
   82054:	dc400d17 	ldw	r17,52(sp)
   82058:	d9000517 	ldw	r4,20(sp)
   8205c:	d9401904 	addi	r5,sp,100
   82060:	003da106 	br	816e8 <___vfprintf_internal_r+0xeec>
   82064:	d9014f17 	ldw	r4,1340(sp)
   82068:	b00b883a 	mov	r5,r22
   8206c:	d9800c04 	addi	r6,sp,48
   82070:	00807a40 	call	807a4 <__sprint_r>
   82074:	103b991e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   82078:	dc800e17 	ldw	r18,56(sp)
   8207c:	dc400d17 	ldw	r17,52(sp)
   82080:	d9000517 	ldw	r4,20(sp)
   82084:	d8c01904 	addi	r3,sp,100
   82088:	003d8b06 	br	816b8 <___vfprintf_internal_r+0xebc>
   8208c:	07000274 	movhi	fp,9
   82090:	e7332a84 	addi	fp,fp,-13142
   82094:	9425883a 	add	r18,r18,r16
   82098:	8c400044 	addi	r17,r17,1
   8209c:	008001c4 	movi	r2,7
   820a0:	1f000015 	stw	fp,0(r3)
   820a4:	1c000115 	stw	r16,4(r3)
   820a8:	dc800e15 	stw	r18,56(sp)
   820ac:	dc400d15 	stw	r17,52(sp)
   820b0:	147fbc16 	blt	r2,r17,81fa4 <___vfprintf_internal_r+0x17a8>
   820b4:	18c00204 	addi	r3,r3,8
   820b8:	003fc206 	br	81fc4 <___vfprintf_internal_r+0x17c8>
   820bc:	d9014f17 	ldw	r4,1340(sp)
   820c0:	b00b883a 	mov	r5,r22
   820c4:	d9800c04 	addi	r6,sp,48
   820c8:	00807a40 	call	807a4 <__sprint_r>
   820cc:	103b831e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   820d0:	dc800e17 	ldw	r18,56(sp)
   820d4:	d9000517 	ldw	r4,20(sp)
   820d8:	d8c01904 	addi	r3,sp,100
   820dc:	003cfc06 	br	814d0 <___vfprintf_internal_r+0xcd4>
   820e0:	07000274 	movhi	fp,9
   820e4:	e7332a84 	addi	fp,fp,-13142
   820e8:	003bde06 	br	81064 <___vfprintf_internal_r+0x868>
   820ec:	00800274 	movhi	r2,9
   820f0:	10b31904 	addi	r2,r2,-13212
   820f4:	d8814115 	stw	r2,1284(sp)
   820f8:	003def06 	br	818b8 <___vfprintf_internal_r+0x10bc>
   820fc:	d9014217 	ldw	r4,1288(sp)
   82100:	d9414317 	ldw	r5,1292(sp)
   82104:	00872ec0 	call	872ec <__isnand>
   82108:	10003926 	beq	r2,zero,821f0 <___vfprintf_internal_r+0x19f4>
   8210c:	d9414d17 	ldw	r5,1332(sp)
   82110:	008011c4 	movi	r2,71
   82114:	1140ce16 	blt	r2,r5,82450 <___vfprintf_internal_r+0x1c54>
   82118:	01800274 	movhi	r6,9
   8211c:	31b31a04 	addi	r6,r6,-13208
   82120:	d9814115 	stw	r6,1284(sp)
   82124:	003de406 	br	818b8 <___vfprintf_internal_r+0x10bc>
   82128:	d9014c17 	ldw	r4,1328(sp)
   8212c:	bdc00044 	addi	r23,r23,1
   82130:	b8c00007 	ldb	r3,0(r23)
   82134:	21000814 	ori	r4,r4,32
   82138:	d9014c15 	stw	r4,1328(sp)
   8213c:	003a2e06 	br	809f8 <___vfprintf_internal_r+0x1fc>
   82140:	dcc14515 	stw	r19,1300(sp)
   82144:	98011016 	blt	r19,zero,82588 <___vfprintf_internal_r+0x1d8c>
   82148:	980f883a 	mov	r7,r19
   8214c:	d8014615 	stw	zero,1304(sp)
   82150:	003c4c06 	br	81284 <___vfprintf_internal_r+0xa88>
   82154:	d9014f17 	ldw	r4,1340(sp)
   82158:	b00b883a 	mov	r5,r22
   8215c:	d9800c04 	addi	r6,sp,48
   82160:	00807a40 	call	807a4 <__sprint_r>
   82164:	103b5d1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   82168:	dc800e17 	ldw	r18,56(sp)
   8216c:	d9000517 	ldw	r4,20(sp)
   82170:	d8c01904 	addi	r3,sp,100
   82174:	003f2e06 	br	81e30 <___vfprintf_internal_r+0x1634>
   82178:	d8c14c17 	ldw	r3,1328(sp)
   8217c:	1880100c 	andi	r2,r3,64
   82180:	1000a026 	beq	r2,zero,82404 <___vfprintf_internal_r+0x1c08>
   82184:	38800017 	ldw	r2,0(r7)
   82188:	39c00104 	addi	r7,r7,4
   8218c:	d9c14015 	stw	r7,1280(sp)
   82190:	d9014b17 	ldw	r4,1324(sp)
   82194:	d9c14017 	ldw	r7,1280(sp)
   82198:	1100000d 	sth	r4,0(r2)
   8219c:	0039f306 	br	8096c <___vfprintf_internal_r+0x170>
   821a0:	d9014f17 	ldw	r4,1340(sp)
   821a4:	b00b883a 	mov	r5,r22
   821a8:	d9800c04 	addi	r6,sp,48
   821ac:	00807a40 	call	807a4 <__sprint_r>
   821b0:	103b4a1e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   821b4:	dc800e17 	ldw	r18,56(sp)
   821b8:	dc400d17 	ldw	r17,52(sp)
   821bc:	d9000517 	ldw	r4,20(sp)
   821c0:	d8c01904 	addi	r3,sp,100
   821c4:	003f2d06 	br	81e7c <___vfprintf_internal_r+0x1680>
   821c8:	00800184 	movi	r2,6
   821cc:	14c09a36 	bltu	r2,r19,82438 <___vfprintf_internal_r+0x1c3c>
   821d0:	dcc14515 	stw	r19,1300(sp)
   821d4:	9800010e 	bge	r19,zero,821dc <___vfprintf_internal_r+0x19e0>
   821d8:	d8014515 	stw	zero,1300(sp)
   821dc:	00800274 	movhi	r2,9
   821e0:	10b31c04 	addi	r2,r2,-13200
   821e4:	980f883a 	mov	r7,r19
   821e8:	d8814115 	stw	r2,1284(sp)
   821ec:	003a7206 	br	80bb8 <___vfprintf_internal_r+0x3bc>
   821f0:	00bfffc4 	movi	r2,-1
   821f4:	9880e226 	beq	r19,r2,82580 <___vfprintf_internal_r+0x1d84>
   821f8:	d9414d17 	ldw	r5,1332(sp)
   821fc:	008019c4 	movi	r2,103
   82200:	2880dc26 	beq	r5,r2,82574 <___vfprintf_internal_r+0x1d78>
   82204:	008011c4 	movi	r2,71
   82208:	2880da26 	beq	r5,r2,82574 <___vfprintf_internal_r+0x1d78>
   8220c:	d9414c17 	ldw	r5,1328(sp)
   82210:	d9014317 	ldw	r4,1292(sp)
   82214:	d9814217 	ldw	r6,1288(sp)
   82218:	29404014 	ori	r5,r5,256
   8221c:	d9414c15 	stw	r5,1328(sp)
   82220:	2000cc16 	blt	r4,zero,82554 <___vfprintf_internal_r+0x1d58>
   82224:	3021883a 	mov	r16,r6
   82228:	2023883a 	mov	r17,r4
   8222c:	0039883a 	mov	fp,zero
   82230:	d9414d17 	ldw	r5,1332(sp)
   82234:	00801984 	movi	r2,102
   82238:	2880b726 	beq	r5,r2,82518 <___vfprintf_internal_r+0x1d1c>
   8223c:	00801184 	movi	r2,70
   82240:	2880b526 	beq	r5,r2,82518 <___vfprintf_internal_r+0x1d1c>
   82244:	00801944 	movi	r2,101
   82248:	2880c826 	beq	r5,r2,8256c <___vfprintf_internal_r+0x1d70>
   8224c:	00801144 	movi	r2,69
   82250:	2880c626 	beq	r5,r2,8256c <___vfprintf_internal_r+0x1d70>
   82254:	9829883a 	mov	r20,r19
   82258:	d9014f17 	ldw	r4,1340(sp)
   8225c:	d8800504 	addi	r2,sp,20
   82260:	880d883a 	mov	r6,r17
   82264:	d8800115 	stw	r2,4(sp)
   82268:	d8c00604 	addi	r3,sp,24
   8226c:	d8800704 	addi	r2,sp,28
   82270:	800b883a 	mov	r5,r16
   82274:	01c00084 	movi	r7,2
   82278:	d8c00215 	stw	r3,8(sp)
   8227c:	d8800315 	stw	r2,12(sp)
   82280:	dd000015 	stw	r20,0(sp)
   82284:	0082a640 	call	82a64 <_dtoa_r>
   82288:	d9814d17 	ldw	r6,1332(sp)
   8228c:	d8814115 	stw	r2,1284(sp)
   82290:	008019c4 	movi	r2,103
   82294:	30809526 	beq	r6,r2,824ec <___vfprintf_internal_r+0x1cf0>
   82298:	d8c14d17 	ldw	r3,1332(sp)
   8229c:	008011c4 	movi	r2,71
   822a0:	18809226 	beq	r3,r2,824ec <___vfprintf_internal_r+0x1cf0>
   822a4:	d9414117 	ldw	r5,1284(sp)
   822a8:	d9814d17 	ldw	r6,1332(sp)
   822ac:	00801984 	movi	r2,102
   822b0:	2d25883a 	add	r18,r5,r20
   822b4:	30808626 	beq	r6,r2,824d0 <___vfprintf_internal_r+0x1cd4>
   822b8:	00801184 	movi	r2,70
   822bc:	30808426 	beq	r6,r2,824d0 <___vfprintf_internal_r+0x1cd4>
   822c0:	000d883a 	mov	r6,zero
   822c4:	000f883a 	mov	r7,zero
   822c8:	880b883a 	mov	r5,r17
   822cc:	8009883a 	mov	r4,r16
   822d0:	00892280 	call	89228 <__eqdf2>
   822d4:	1000751e 	bne	r2,zero,824ac <___vfprintf_internal_r+0x1cb0>
   822d8:	9005883a 	mov	r2,r18
   822dc:	dc800715 	stw	r18,28(sp)
   822e0:	d9014117 	ldw	r4,1284(sp)
   822e4:	d9414d17 	ldw	r5,1332(sp)
   822e8:	00c019c4 	movi	r3,103
   822ec:	1125c83a 	sub	r18,r2,r4
   822f0:	28c06826 	beq	r5,r3,82494 <___vfprintf_internal_r+0x1c98>
   822f4:	008011c4 	movi	r2,71
   822f8:	28806626 	beq	r5,r2,82494 <___vfprintf_internal_r+0x1c98>
   822fc:	d9000517 	ldw	r4,20(sp)
   82300:	d8c14d17 	ldw	r3,1332(sp)
   82304:	00801944 	movi	r2,101
   82308:	10c05516 	blt	r2,r3,82460 <___vfprintf_internal_r+0x1c64>
   8230c:	213fffc4 	addi	r4,r4,-1
   82310:	d9000515 	stw	r4,20(sp)
   82314:	d8c00805 	stb	r3,32(sp)
   82318:	2021883a 	mov	r16,r4
   8231c:	2000c116 	blt	r4,zero,82624 <___vfprintf_internal_r+0x1e28>
   82320:	00800ac4 	movi	r2,43
   82324:	d8800845 	stb	r2,33(sp)
   82328:	00800244 	movi	r2,9
   8232c:	1400af0e 	bge	r2,r16,825ec <___vfprintf_internal_r+0x1df0>
   82330:	1027883a 	mov	r19,r2
   82334:	dc400b84 	addi	r17,sp,46
   82338:	8009883a 	mov	r4,r16
   8233c:	01400284 	movi	r5,10
   82340:	00899100 	call	89910 <__modsi3>
   82344:	10800c04 	addi	r2,r2,48
   82348:	8c7fffc4 	addi	r17,r17,-1
   8234c:	8009883a 	mov	r4,r16
   82350:	01400284 	movi	r5,10
   82354:	88800005 	stb	r2,0(r17)
   82358:	00898b00 	call	898b0 <__divsi3>
   8235c:	1021883a 	mov	r16,r2
   82360:	98bff516 	blt	r19,r2,82338 <___vfprintf_internal_r+0x1b3c>
   82364:	10c00c04 	addi	r3,r2,48
   82368:	d88009c4 	addi	r2,sp,39
   8236c:	108001c4 	addi	r2,r2,7
   82370:	897fffc4 	addi	r5,r17,-1
   82374:	88ffffc5 	stb	r3,-1(r17)
   82378:	2880a72e 	bgeu	r5,r2,82618 <___vfprintf_internal_r+0x1e1c>
   8237c:	1009883a 	mov	r4,r2
   82380:	d9800804 	addi	r6,sp,32
   82384:	d8c00884 	addi	r3,sp,34
   82388:	28800003 	ldbu	r2,0(r5)
   8238c:	29400044 	addi	r5,r5,1
   82390:	18800005 	stb	r2,0(r3)
   82394:	18c00044 	addi	r3,r3,1
   82398:	293ffb36 	bltu	r5,r4,82388 <___vfprintf_internal_r+0x1b8c>
   8239c:	1987c83a 	sub	r3,r3,r6
   823a0:	00800044 	movi	r2,1
   823a4:	d8c14815 	stw	r3,1312(sp)
   823a8:	90cf883a 	add	r7,r18,r3
   823ac:	1480960e 	bge	r2,r18,82608 <___vfprintf_internal_r+0x1e0c>
   823b0:	39c00044 	addi	r7,r7,1
   823b4:	d9c14515 	stw	r7,1300(sp)
   823b8:	38003416 	blt	r7,zero,8248c <___vfprintf_internal_r+0x1c90>
   823bc:	e0803fcc 	andi	r2,fp,255
   823c0:	1080201c 	xori	r2,r2,128
   823c4:	10bfe004 	addi	r2,r2,-128
   823c8:	10004e26 	beq	r2,zero,82504 <___vfprintf_internal_r+0x1d08>
   823cc:	00800b44 	movi	r2,45
   823d0:	dc814715 	stw	r18,1308(sp)
   823d4:	d8014615 	stw	zero,1304(sp)
   823d8:	d8800405 	stb	r2,16(sp)
   823dc:	003bab06 	br	8128c <___vfprintf_internal_r+0xa90>
   823e0:	00800b44 	movi	r2,45
   823e4:	d8800405 	stb	r2,16(sp)
   823e8:	003d2d06 	br	818a0 <___vfprintf_internal_r+0x10a4>
   823ec:	d9014f17 	ldw	r4,1340(sp)
   823f0:	b00b883a 	mov	r5,r22
   823f4:	d9800c04 	addi	r6,sp,48
   823f8:	00807a40 	call	807a4 <__sprint_r>
   823fc:	103ab71e 	bne	r2,zero,80edc <___vfprintf_internal_r+0x6e0>
   82400:	003ab506 	br	80ed8 <___vfprintf_internal_r+0x6dc>
   82404:	38800017 	ldw	r2,0(r7)
   82408:	39c00104 	addi	r7,r7,4
   8240c:	d9c14015 	stw	r7,1280(sp)
   82410:	d9414b17 	ldw	r5,1324(sp)
   82414:	d9c14017 	ldw	r7,1280(sp)
   82418:	11400015 	stw	r5,0(r2)
   8241c:	00395306 	br	8096c <___vfprintf_internal_r+0x170>
   82420:	980f883a 	mov	r7,r19
   82424:	dcc14515 	stw	r19,1300(sp)
   82428:	d8014615 	stw	zero,1304(sp)
   8242c:	003b9506 	br	81284 <___vfprintf_internal_r+0xa88>
   82430:	0027883a 	mov	r19,zero
   82434:	00397206 	br	80a00 <___vfprintf_internal_r+0x204>
   82438:	00c00274 	movhi	r3,9
   8243c:	18f31c04 	addi	r3,r3,-13200
   82440:	100f883a 	mov	r7,r2
   82444:	d8814515 	stw	r2,1300(sp)
   82448:	d8c14115 	stw	r3,1284(sp)
   8244c:	0039da06 	br	80bb8 <___vfprintf_internal_r+0x3bc>
   82450:	00800274 	movhi	r2,9
   82454:	10b31b04 	addi	r2,r2,-13204
   82458:	d8814115 	stw	r2,1284(sp)
   8245c:	003d1606 	br	818b8 <___vfprintf_internal_r+0x10bc>
   82460:	d9414d17 	ldw	r5,1332(sp)
   82464:	00801984 	movi	r2,102
   82468:	28804926 	beq	r5,r2,82590 <___vfprintf_internal_r+0x1d94>
   8246c:	200f883a 	mov	r7,r4
   82470:	24805716 	blt	r4,r18,825d0 <___vfprintf_internal_r+0x1dd4>
   82474:	d9414c17 	ldw	r5,1328(sp)
   82478:	2880004c 	andi	r2,r5,1
   8247c:	10000126 	beq	r2,zero,82484 <___vfprintf_internal_r+0x1c88>
   82480:	21c00044 	addi	r7,r4,1
   82484:	d9c14515 	stw	r7,1300(sp)
   82488:	383fcc0e 	bge	r7,zero,823bc <___vfprintf_internal_r+0x1bc0>
   8248c:	d8014515 	stw	zero,1300(sp)
   82490:	003fca06 	br	823bc <___vfprintf_internal_r+0x1bc0>
   82494:	d9000517 	ldw	r4,20(sp)
   82498:	00bfff04 	movi	r2,-4
   8249c:	1100480e 	bge	r2,r4,825c0 <___vfprintf_internal_r+0x1dc4>
   824a0:	99004716 	blt	r19,r4,825c0 <___vfprintf_internal_r+0x1dc4>
   824a4:	d8c14d15 	stw	r3,1332(sp)
   824a8:	003ff006 	br	8246c <___vfprintf_internal_r+0x1c70>
   824ac:	d8800717 	ldw	r2,28(sp)
   824b0:	14bf8b2e 	bgeu	r2,r18,822e0 <___vfprintf_internal_r+0x1ae4>
   824b4:	9007883a 	mov	r3,r18
   824b8:	01000c04 	movi	r4,48
   824bc:	11000005 	stb	r4,0(r2)
   824c0:	10800044 	addi	r2,r2,1
   824c4:	d8800715 	stw	r2,28(sp)
   824c8:	18bffc1e 	bne	r3,r2,824bc <___vfprintf_internal_r+0x1cc0>
   824cc:	003f8406 	br	822e0 <___vfprintf_internal_r+0x1ae4>
   824d0:	d8814117 	ldw	r2,1284(sp)
   824d4:	10c00007 	ldb	r3,0(r2)
   824d8:	00800c04 	movi	r2,48
   824dc:	18805b26 	beq	r3,r2,8264c <___vfprintf_internal_r+0x1e50>
   824e0:	d9000517 	ldw	r4,20(sp)
   824e4:	9125883a 	add	r18,r18,r4
   824e8:	003f7506 	br	822c0 <___vfprintf_internal_r+0x1ac4>
   824ec:	d9014c17 	ldw	r4,1328(sp)
   824f0:	2080004c 	andi	r2,r4,1
   824f4:	1005003a 	cmpeq	r2,r2,zero
   824f8:	103f6a26 	beq	r2,zero,822a4 <___vfprintf_internal_r+0x1aa8>
   824fc:	d8800717 	ldw	r2,28(sp)
   82500:	003f7706 	br	822e0 <___vfprintf_internal_r+0x1ae4>
   82504:	d9c14515 	stw	r7,1300(sp)
   82508:	38004d16 	blt	r7,zero,82640 <___vfprintf_internal_r+0x1e44>
   8250c:	dc814715 	stw	r18,1308(sp)
   82510:	d8014615 	stw	zero,1304(sp)
   82514:	003b5b06 	br	81284 <___vfprintf_internal_r+0xa88>
   82518:	d9014f17 	ldw	r4,1340(sp)
   8251c:	d8800504 	addi	r2,sp,20
   82520:	d8800115 	stw	r2,4(sp)
   82524:	d8c00604 	addi	r3,sp,24
   82528:	d8800704 	addi	r2,sp,28
   8252c:	800b883a 	mov	r5,r16
   82530:	880d883a 	mov	r6,r17
   82534:	01c000c4 	movi	r7,3
   82538:	d8c00215 	stw	r3,8(sp)
   8253c:	d8800315 	stw	r2,12(sp)
   82540:	dcc00015 	stw	r19,0(sp)
   82544:	9829883a 	mov	r20,r19
   82548:	0082a640 	call	82a64 <_dtoa_r>
   8254c:	d8814115 	stw	r2,1284(sp)
   82550:	003f5106 	br	82298 <___vfprintf_internal_r+0x1a9c>
   82554:	d8c14217 	ldw	r3,1288(sp)
   82558:	d9014317 	ldw	r4,1292(sp)
   8255c:	07000b44 	movi	fp,45
   82560:	1821883a 	mov	r16,r3
   82564:	2460003c 	xorhi	r17,r4,32768
   82568:	003f3106 	br	82230 <___vfprintf_internal_r+0x1a34>
   8256c:	9d000044 	addi	r20,r19,1
   82570:	003f3906 	br	82258 <___vfprintf_internal_r+0x1a5c>
   82574:	983f251e 	bne	r19,zero,8220c <___vfprintf_internal_r+0x1a10>
   82578:	04c00044 	movi	r19,1
   8257c:	003f2306 	br	8220c <___vfprintf_internal_r+0x1a10>
   82580:	04c00184 	movi	r19,6
   82584:	003f2106 	br	8220c <___vfprintf_internal_r+0x1a10>
   82588:	d8014515 	stw	zero,1300(sp)
   8258c:	003eee06 	br	82148 <___vfprintf_internal_r+0x194c>
   82590:	200f883a 	mov	r7,r4
   82594:	0100370e 	bge	zero,r4,82674 <___vfprintf_internal_r+0x1e78>
   82598:	9800031e 	bne	r19,zero,825a8 <___vfprintf_internal_r+0x1dac>
   8259c:	d9814c17 	ldw	r6,1328(sp)
   825a0:	3080004c 	andi	r2,r6,1
   825a4:	103fb726 	beq	r2,zero,82484 <___vfprintf_internal_r+0x1c88>
   825a8:	20800044 	addi	r2,r4,1
   825ac:	98a7883a 	add	r19,r19,r2
   825b0:	dcc14515 	stw	r19,1300(sp)
   825b4:	980f883a 	mov	r7,r19
   825b8:	983f800e 	bge	r19,zero,823bc <___vfprintf_internal_r+0x1bc0>
   825bc:	003fb306 	br	8248c <___vfprintf_internal_r+0x1c90>
   825c0:	d9814d17 	ldw	r6,1332(sp)
   825c4:	31bfff84 	addi	r6,r6,-2
   825c8:	d9814d15 	stw	r6,1332(sp)
   825cc:	003f4c06 	br	82300 <___vfprintf_internal_r+0x1b04>
   825d0:	0100180e 	bge	zero,r4,82634 <___vfprintf_internal_r+0x1e38>
   825d4:	00800044 	movi	r2,1
   825d8:	1485883a 	add	r2,r2,r18
   825dc:	d8814515 	stw	r2,1300(sp)
   825e0:	100f883a 	mov	r7,r2
   825e4:	103f750e 	bge	r2,zero,823bc <___vfprintf_internal_r+0x1bc0>
   825e8:	003fa806 	br	8248c <___vfprintf_internal_r+0x1c90>
   825ec:	80c00c04 	addi	r3,r16,48
   825f0:	00800c04 	movi	r2,48
   825f4:	d8c008c5 	stb	r3,35(sp)
   825f8:	d9800804 	addi	r6,sp,32
   825fc:	d8c00904 	addi	r3,sp,36
   82600:	d8800885 	stb	r2,34(sp)
   82604:	003f6506 	br	8239c <___vfprintf_internal_r+0x1ba0>
   82608:	d9014c17 	ldw	r4,1328(sp)
   8260c:	2084703a 	and	r2,r4,r2
   82610:	103f9c26 	beq	r2,zero,82484 <___vfprintf_internal_r+0x1c88>
   82614:	003f6606 	br	823b0 <___vfprintf_internal_r+0x1bb4>
   82618:	d9800804 	addi	r6,sp,32
   8261c:	d8c00884 	addi	r3,sp,34
   82620:	003f5e06 	br	8239c <___vfprintf_internal_r+0x1ba0>
   82624:	00800b44 	movi	r2,45
   82628:	0121c83a 	sub	r16,zero,r4
   8262c:	d8800845 	stb	r2,33(sp)
   82630:	003f3d06 	br	82328 <___vfprintf_internal_r+0x1b2c>
   82634:	00800084 	movi	r2,2
   82638:	1105c83a 	sub	r2,r2,r4
   8263c:	003fe606 	br	825d8 <___vfprintf_internal_r+0x1ddc>
   82640:	d8014515 	stw	zero,1300(sp)
   82644:	dc814715 	stw	r18,1308(sp)
   82648:	003fb106 	br	82510 <___vfprintf_internal_r+0x1d14>
   8264c:	000d883a 	mov	r6,zero
   82650:	000f883a 	mov	r7,zero
   82654:	8009883a 	mov	r4,r16
   82658:	880b883a 	mov	r5,r17
   8265c:	00892b00 	call	892b0 <__nedf2>
   82660:	103f9f26 	beq	r2,zero,824e0 <___vfprintf_internal_r+0x1ce4>
   82664:	00800044 	movi	r2,1
   82668:	1509c83a 	sub	r4,r2,r20
   8266c:	d9000515 	stw	r4,20(sp)
   82670:	003f9b06 	br	824e0 <___vfprintf_internal_r+0x1ce4>
   82674:	98000d1e 	bne	r19,zero,826ac <___vfprintf_internal_r+0x1eb0>
   82678:	d8c14c17 	ldw	r3,1328(sp)
   8267c:	1880004c 	andi	r2,r3,1
   82680:	10000a1e 	bne	r2,zero,826ac <___vfprintf_internal_r+0x1eb0>
   82684:	01000044 	movi	r4,1
   82688:	200f883a 	mov	r7,r4
   8268c:	d9014515 	stw	r4,1300(sp)
   82690:	003f4a06 	br	823bc <___vfprintf_internal_r+0x1bc0>
   82694:	3cc00017 	ldw	r19,0(r7)
   82698:	39c00104 	addi	r7,r7,4
   8269c:	983d0e0e 	bge	r19,zero,81ad8 <___vfprintf_internal_r+0x12dc>
   826a0:	b8c00007 	ldb	r3,0(r23)
   826a4:	04ffffc4 	movi	r19,-1
   826a8:	0038d306 	br	809f8 <___vfprintf_internal_r+0x1fc>
   826ac:	9cc00084 	addi	r19,r19,2
   826b0:	dcc14515 	stw	r19,1300(sp)
   826b4:	980f883a 	mov	r7,r19
   826b8:	983f400e 	bge	r19,zero,823bc <___vfprintf_internal_r+0x1bc0>
   826bc:	003f7306 	br	8248c <___vfprintf_internal_r+0x1c90>

000826c0 <__vfprintf_internal>:
   826c0:	00800274 	movhi	r2,9
   826c4:	10ba6a04 	addi	r2,r2,-5720
   826c8:	2013883a 	mov	r9,r4
   826cc:	11000017 	ldw	r4,0(r2)
   826d0:	2805883a 	mov	r2,r5
   826d4:	300f883a 	mov	r7,r6
   826d8:	480b883a 	mov	r5,r9
   826dc:	100d883a 	mov	r6,r2
   826e0:	00807fc1 	jmpi	807fc <___vfprintf_internal_r>

000826e4 <__swsetup_r>:
   826e4:	00800274 	movhi	r2,9
   826e8:	10ba6a04 	addi	r2,r2,-5720
   826ec:	10c00017 	ldw	r3,0(r2)
   826f0:	defffd04 	addi	sp,sp,-12
   826f4:	dc400115 	stw	r17,4(sp)
   826f8:	dc000015 	stw	r16,0(sp)
   826fc:	dfc00215 	stw	ra,8(sp)
   82700:	2023883a 	mov	r17,r4
   82704:	2821883a 	mov	r16,r5
   82708:	18000226 	beq	r3,zero,82714 <__swsetup_r+0x30>
   8270c:	18800e17 	ldw	r2,56(r3)
   82710:	10001f26 	beq	r2,zero,82790 <__swsetup_r+0xac>
   82714:	8100030b 	ldhu	r4,12(r16)
   82718:	2080020c 	andi	r2,r4,8
   8271c:	10002826 	beq	r2,zero,827c0 <__swsetup_r+0xdc>
   82720:	81400417 	ldw	r5,16(r16)
   82724:	28001d26 	beq	r5,zero,8279c <__swsetup_r+0xb8>
   82728:	2080004c 	andi	r2,r4,1
   8272c:	1005003a 	cmpeq	r2,r2,zero
   82730:	10000b26 	beq	r2,zero,82760 <__swsetup_r+0x7c>
   82734:	2080008c 	andi	r2,r4,2
   82738:	10001226 	beq	r2,zero,82784 <__swsetup_r+0xa0>
   8273c:	0005883a 	mov	r2,zero
   82740:	80800215 	stw	r2,8(r16)
   82744:	28000b26 	beq	r5,zero,82774 <__swsetup_r+0x90>
   82748:	0005883a 	mov	r2,zero
   8274c:	dfc00217 	ldw	ra,8(sp)
   82750:	dc400117 	ldw	r17,4(sp)
   82754:	dc000017 	ldw	r16,0(sp)
   82758:	dec00304 	addi	sp,sp,12
   8275c:	f800283a 	ret
   82760:	80800517 	ldw	r2,20(r16)
   82764:	80000215 	stw	zero,8(r16)
   82768:	0085c83a 	sub	r2,zero,r2
   8276c:	80800615 	stw	r2,24(r16)
   82770:	283ff51e 	bne	r5,zero,82748 <__swsetup_r+0x64>
   82774:	2080200c 	andi	r2,r4,128
   82778:	103ff326 	beq	r2,zero,82748 <__swsetup_r+0x64>
   8277c:	00bfffc4 	movi	r2,-1
   82780:	003ff206 	br	8274c <__swsetup_r+0x68>
   82784:	80800517 	ldw	r2,20(r16)
   82788:	80800215 	stw	r2,8(r16)
   8278c:	003fed06 	br	82744 <__swsetup_r+0x60>
   82790:	1809883a 	mov	r4,r3
   82794:	00842b00 	call	842b0 <__sinit>
   82798:	003fde06 	br	82714 <__swsetup_r+0x30>
   8279c:	20c0a00c 	andi	r3,r4,640
   827a0:	00808004 	movi	r2,512
   827a4:	18bfe026 	beq	r3,r2,82728 <__swsetup_r+0x44>
   827a8:	8809883a 	mov	r4,r17
   827ac:	800b883a 	mov	r5,r16
   827b0:	008505c0 	call	8505c <__smakebuf_r>
   827b4:	8100030b 	ldhu	r4,12(r16)
   827b8:	81400417 	ldw	r5,16(r16)
   827bc:	003fda06 	br	82728 <__swsetup_r+0x44>
   827c0:	2080040c 	andi	r2,r4,16
   827c4:	103fed26 	beq	r2,zero,8277c <__swsetup_r+0x98>
   827c8:	2080010c 	andi	r2,r4,4
   827cc:	10001226 	beq	r2,zero,82818 <__swsetup_r+0x134>
   827d0:	81400c17 	ldw	r5,48(r16)
   827d4:	28000526 	beq	r5,zero,827ec <__swsetup_r+0x108>
   827d8:	80801004 	addi	r2,r16,64
   827dc:	28800226 	beq	r5,r2,827e8 <__swsetup_r+0x104>
   827e0:	8809883a 	mov	r4,r17
   827e4:	00846680 	call	84668 <_free_r>
   827e8:	80000c15 	stw	zero,48(r16)
   827ec:	8080030b 	ldhu	r2,12(r16)
   827f0:	81400417 	ldw	r5,16(r16)
   827f4:	80000115 	stw	zero,4(r16)
   827f8:	10bff6cc 	andi	r2,r2,65499
   827fc:	8080030d 	sth	r2,12(r16)
   82800:	81400015 	stw	r5,0(r16)
   82804:	8080030b 	ldhu	r2,12(r16)
   82808:	10800214 	ori	r2,r2,8
   8280c:	113fffcc 	andi	r4,r2,65535
   82810:	8080030d 	sth	r2,12(r16)
   82814:	003fc306 	br	82724 <__swsetup_r+0x40>
   82818:	81400417 	ldw	r5,16(r16)
   8281c:	003ff906 	br	82804 <__swsetup_r+0x120>

00082820 <quorem>:
   82820:	28c00417 	ldw	r3,16(r5)
   82824:	20800417 	ldw	r2,16(r4)
   82828:	defff104 	addi	sp,sp,-60
   8282c:	dfc00e15 	stw	ra,56(sp)
   82830:	df000d15 	stw	fp,52(sp)
   82834:	ddc00c15 	stw	r23,48(sp)
   82838:	dd800b15 	stw	r22,44(sp)
   8283c:	dd400a15 	stw	r21,40(sp)
   82840:	dd000915 	stw	r20,36(sp)
   82844:	dcc00815 	stw	r19,32(sp)
   82848:	dc800715 	stw	r18,28(sp)
   8284c:	dc400615 	stw	r17,24(sp)
   82850:	dc000515 	stw	r16,20(sp)
   82854:	d9000315 	stw	r4,12(sp)
   82858:	d9400415 	stw	r5,16(sp)
   8285c:	10c07f16 	blt	r2,r3,82a5c <quorem+0x23c>
   82860:	1d3fffc4 	addi	r20,r3,-1
   82864:	d8c00417 	ldw	r3,16(sp)
   82868:	d9000317 	ldw	r4,12(sp)
   8286c:	a505883a 	add	r2,r20,r20
   82870:	1085883a 	add	r2,r2,r2
   82874:	1cc00504 	addi	r19,r3,20
   82878:	25c00504 	addi	r23,r4,20
   8287c:	98ad883a 	add	r22,r19,r2
   82880:	15c7883a 	add	r3,r2,r23
   82884:	b1400017 	ldw	r5,0(r22)
   82888:	19000017 	ldw	r4,0(r3)
   8288c:	d8c00015 	stw	r3,0(sp)
   82890:	29400044 	addi	r5,r5,1
   82894:	d9000215 	stw	r4,8(sp)
   82898:	00899700 	call	89970 <__udivsi3>
   8289c:	1039883a 	mov	fp,r2
   828a0:	10003d1e 	bne	r2,zero,82998 <quorem+0x178>
   828a4:	d9400417 	ldw	r5,16(sp)
   828a8:	d9000317 	ldw	r4,12(sp)
   828ac:	0085d880 	call	85d88 <__mcmp>
   828b0:	10002c16 	blt	r2,zero,82964 <quorem+0x144>
   828b4:	e7000044 	addi	fp,fp,1
   828b8:	b80f883a 	mov	r7,r23
   828bc:	0011883a 	mov	r8,zero
   828c0:	0009883a 	mov	r4,zero
   828c4:	99400017 	ldw	r5,0(r19)
   828c8:	38c00017 	ldw	r3,0(r7)
   828cc:	9cc00104 	addi	r19,r19,4
   828d0:	28bfffcc 	andi	r2,r5,65535
   828d4:	2085883a 	add	r2,r4,r2
   828d8:	11bfffcc 	andi	r6,r2,65535
   828dc:	193fffcc 	andi	r4,r3,65535
   828e0:	1004d43a 	srli	r2,r2,16
   828e4:	280ad43a 	srli	r5,r5,16
   828e8:	2189c83a 	sub	r4,r4,r6
   828ec:	2209883a 	add	r4,r4,r8
   828f0:	1806d43a 	srli	r3,r3,16
   828f4:	288b883a 	add	r5,r5,r2
   828f8:	200dd43a 	srai	r6,r4,16
   828fc:	28bfffcc 	andi	r2,r5,65535
   82900:	1887c83a 	sub	r3,r3,r2
   82904:	1987883a 	add	r3,r3,r6
   82908:	3900000d 	sth	r4,0(r7)
   8290c:	38c0008d 	sth	r3,2(r7)
   82910:	2808d43a 	srli	r4,r5,16
   82914:	39c00104 	addi	r7,r7,4
   82918:	1811d43a 	srai	r8,r3,16
   8291c:	b4ffe92e 	bgeu	r22,r19,828c4 <quorem+0xa4>
   82920:	a505883a 	add	r2,r20,r20
   82924:	1085883a 	add	r2,r2,r2
   82928:	b885883a 	add	r2,r23,r2
   8292c:	10c00017 	ldw	r3,0(r2)
   82930:	18000c1e 	bne	r3,zero,82964 <quorem+0x144>
   82934:	113fff04 	addi	r4,r2,-4
   82938:	b900082e 	bgeu	r23,r4,8295c <quorem+0x13c>
   8293c:	10bfff17 	ldw	r2,-4(r2)
   82940:	10000326 	beq	r2,zero,82950 <quorem+0x130>
   82944:	00000506 	br	8295c <quorem+0x13c>
   82948:	20800017 	ldw	r2,0(r4)
   8294c:	1000031e 	bne	r2,zero,8295c <quorem+0x13c>
   82950:	213fff04 	addi	r4,r4,-4
   82954:	a53fffc4 	addi	r20,r20,-1
   82958:	b93ffb36 	bltu	r23,r4,82948 <quorem+0x128>
   8295c:	d9000317 	ldw	r4,12(sp)
   82960:	25000415 	stw	r20,16(r4)
   82964:	e005883a 	mov	r2,fp
   82968:	dfc00e17 	ldw	ra,56(sp)
   8296c:	df000d17 	ldw	fp,52(sp)
   82970:	ddc00c17 	ldw	r23,48(sp)
   82974:	dd800b17 	ldw	r22,44(sp)
   82978:	dd400a17 	ldw	r21,40(sp)
   8297c:	dd000917 	ldw	r20,36(sp)
   82980:	dcc00817 	ldw	r19,32(sp)
   82984:	dc800717 	ldw	r18,28(sp)
   82988:	dc400617 	ldw	r17,24(sp)
   8298c:	dc000517 	ldw	r16,20(sp)
   82990:	dec00f04 	addi	sp,sp,60
   82994:	f800283a 	ret
   82998:	b823883a 	mov	r17,r23
   8299c:	9825883a 	mov	r18,r19
   829a0:	d8000115 	stw	zero,4(sp)
   829a4:	002b883a 	mov	r21,zero
   829a8:	94000017 	ldw	r16,0(r18)
   829ac:	e009883a 	mov	r4,fp
   829b0:	94800104 	addi	r18,r18,4
   829b4:	817fffcc 	andi	r5,r16,65535
   829b8:	00805cc0 	call	805cc <__mulsi3>
   829bc:	800ad43a 	srli	r5,r16,16
   829c0:	e009883a 	mov	r4,fp
   829c4:	a8a1883a 	add	r16,r21,r2
   829c8:	00805cc0 	call	805cc <__mulsi3>
   829cc:	89000017 	ldw	r4,0(r17)
   829d0:	80ffffcc 	andi	r3,r16,65535
   829d4:	8020d43a 	srli	r16,r16,16
   829d8:	217fffcc 	andi	r5,r4,65535
   829dc:	28cbc83a 	sub	r5,r5,r3
   829e0:	d8c00117 	ldw	r3,4(sp)
   829e4:	2008d43a 	srli	r4,r4,16
   829e8:	1405883a 	add	r2,r2,r16
   829ec:	28cb883a 	add	r5,r5,r3
   829f0:	280dd43a 	srai	r6,r5,16
   829f4:	10ffffcc 	andi	r3,r2,65535
   829f8:	20c9c83a 	sub	r4,r4,r3
   829fc:	2189883a 	add	r4,r4,r6
   82a00:	8900008d 	sth	r4,2(r17)
   82a04:	2009d43a 	srai	r4,r4,16
   82a08:	8940000d 	sth	r5,0(r17)
   82a0c:	102ad43a 	srli	r21,r2,16
   82a10:	8c400104 	addi	r17,r17,4
   82a14:	d9000115 	stw	r4,4(sp)
   82a18:	b4bfe32e 	bgeu	r22,r18,829a8 <quorem+0x188>
   82a1c:	d9000217 	ldw	r4,8(sp)
   82a20:	203fa01e 	bne	r4,zero,828a4 <quorem+0x84>
   82a24:	d8800017 	ldw	r2,0(sp)
   82a28:	10ffff04 	addi	r3,r2,-4
   82a2c:	b8c0082e 	bgeu	r23,r3,82a50 <quorem+0x230>
   82a30:	10bfff17 	ldw	r2,-4(r2)
   82a34:	10000326 	beq	r2,zero,82a44 <quorem+0x224>
   82a38:	00000506 	br	82a50 <quorem+0x230>
   82a3c:	18800017 	ldw	r2,0(r3)
   82a40:	1000031e 	bne	r2,zero,82a50 <quorem+0x230>
   82a44:	18ffff04 	addi	r3,r3,-4
   82a48:	a53fffc4 	addi	r20,r20,-1
   82a4c:	b8fffb36 	bltu	r23,r3,82a3c <quorem+0x21c>
   82a50:	d8c00317 	ldw	r3,12(sp)
   82a54:	1d000415 	stw	r20,16(r3)
   82a58:	003f9206 	br	828a4 <quorem+0x84>
   82a5c:	0005883a 	mov	r2,zero
   82a60:	003fc106 	br	82968 <quorem+0x148>

00082a64 <_dtoa_r>:
   82a64:	22001017 	ldw	r8,64(r4)
   82a68:	deffda04 	addi	sp,sp,-152
   82a6c:	dd402115 	stw	r21,132(sp)
   82a70:	dd002015 	stw	r20,128(sp)
   82a74:	dc801e15 	stw	r18,120(sp)
   82a78:	dc401d15 	stw	r17,116(sp)
   82a7c:	dfc02515 	stw	ra,148(sp)
   82a80:	df002415 	stw	fp,144(sp)
   82a84:	ddc02315 	stw	r23,140(sp)
   82a88:	dd802215 	stw	r22,136(sp)
   82a8c:	dcc01f15 	stw	r19,124(sp)
   82a90:	dc001c15 	stw	r16,112(sp)
   82a94:	d9001615 	stw	r4,88(sp)
   82a98:	3023883a 	mov	r17,r6
   82a9c:	2829883a 	mov	r20,r5
   82aa0:	d9c01715 	stw	r7,92(sp)
   82aa4:	dc802817 	ldw	r18,160(sp)
   82aa8:	302b883a 	mov	r21,r6
   82aac:	40000a26 	beq	r8,zero,82ad8 <_dtoa_r+0x74>
   82ab0:	20801117 	ldw	r2,68(r4)
   82ab4:	400b883a 	mov	r5,r8
   82ab8:	40800115 	stw	r2,4(r8)
   82abc:	20c01117 	ldw	r3,68(r4)
   82ac0:	00800044 	movi	r2,1
   82ac4:	10c4983a 	sll	r2,r2,r3
   82ac8:	40800215 	stw	r2,8(r8)
   82acc:	0085c2c0 	call	85c2c <_Bfree>
   82ad0:	d8c01617 	ldw	r3,88(sp)
   82ad4:	18001015 	stw	zero,64(r3)
   82ad8:	8800a316 	blt	r17,zero,82d68 <_dtoa_r+0x304>
   82adc:	90000015 	stw	zero,0(r18)
   82ae0:	a8dffc2c 	andhi	r3,r21,32752
   82ae4:	009ffc34 	movhi	r2,32752
   82ae8:	18809126 	beq	r3,r2,82d30 <_dtoa_r+0x2cc>
   82aec:	000d883a 	mov	r6,zero
   82af0:	000f883a 	mov	r7,zero
   82af4:	a009883a 	mov	r4,r20
   82af8:	a80b883a 	mov	r5,r21
   82afc:	dd001215 	stw	r20,72(sp)
   82b00:	dd401315 	stw	r21,76(sp)
   82b04:	00892b00 	call	892b0 <__nedf2>
   82b08:	1000171e 	bne	r2,zero,82b68 <_dtoa_r+0x104>
   82b0c:	d9802717 	ldw	r6,156(sp)
   82b10:	00800044 	movi	r2,1
   82b14:	30800015 	stw	r2,0(r6)
   82b18:	d8802917 	ldw	r2,164(sp)
   82b1c:	10029b26 	beq	r2,zero,8358c <_dtoa_r+0xb28>
   82b20:	d9002917 	ldw	r4,164(sp)
   82b24:	00800274 	movhi	r2,9
   82b28:	10b32a44 	addi	r2,r2,-13143
   82b2c:	10ffffc4 	addi	r3,r2,-1
   82b30:	20800015 	stw	r2,0(r4)
   82b34:	1805883a 	mov	r2,r3
   82b38:	dfc02517 	ldw	ra,148(sp)
   82b3c:	df002417 	ldw	fp,144(sp)
   82b40:	ddc02317 	ldw	r23,140(sp)
   82b44:	dd802217 	ldw	r22,136(sp)
   82b48:	dd402117 	ldw	r21,132(sp)
   82b4c:	dd002017 	ldw	r20,128(sp)
   82b50:	dcc01f17 	ldw	r19,124(sp)
   82b54:	dc801e17 	ldw	r18,120(sp)
   82b58:	dc401d17 	ldw	r17,116(sp)
   82b5c:	dc001c17 	ldw	r16,112(sp)
   82b60:	dec02604 	addi	sp,sp,152
   82b64:	f800283a 	ret
   82b68:	d9001617 	ldw	r4,88(sp)
   82b6c:	d9401217 	ldw	r5,72(sp)
   82b70:	d8800104 	addi	r2,sp,4
   82b74:	a80d883a 	mov	r6,r21
   82b78:	d9c00204 	addi	r7,sp,8
   82b7c:	d8800015 	stw	r2,0(sp)
   82b80:	00862680 	call	86268 <__d2b>
   82b84:	d8800715 	stw	r2,28(sp)
   82b88:	a804d53a 	srli	r2,r21,20
   82b8c:	1101ffcc 	andi	r4,r2,2047
   82b90:	20008626 	beq	r4,zero,82dac <_dtoa_r+0x348>
   82b94:	d8c01217 	ldw	r3,72(sp)
   82b98:	00800434 	movhi	r2,16
   82b9c:	10bfffc4 	addi	r2,r2,-1
   82ba0:	ddc00117 	ldw	r23,4(sp)
   82ba4:	a884703a 	and	r2,r21,r2
   82ba8:	1811883a 	mov	r8,r3
   82bac:	124ffc34 	orhi	r9,r2,16368
   82bb0:	25bf0044 	addi	r22,r4,-1023
   82bb4:	d8000815 	stw	zero,32(sp)
   82bb8:	0005883a 	mov	r2,zero
   82bbc:	00cffe34 	movhi	r3,16376
   82bc0:	480b883a 	mov	r5,r9
   82bc4:	4009883a 	mov	r4,r8
   82bc8:	180f883a 	mov	r7,r3
   82bcc:	100d883a 	mov	r6,r2
   82bd0:	0088b180 	call	88b18 <__subdf3>
   82bd4:	0218dbf4 	movhi	r8,25455
   82bd8:	4210d844 	addi	r8,r8,17249
   82bdc:	024ff4f4 	movhi	r9,16339
   82be0:	4a61e9c4 	addi	r9,r9,-30809
   82be4:	480f883a 	mov	r7,r9
   82be8:	400d883a 	mov	r6,r8
   82bec:	180b883a 	mov	r5,r3
   82bf0:	1009883a 	mov	r4,r2
   82bf4:	0088c0c0 	call	88c0c <__muldf3>
   82bf8:	0222d874 	movhi	r8,35681
   82bfc:	42322cc4 	addi	r8,r8,-14157
   82c00:	024ff1f4 	movhi	r9,16327
   82c04:	4a628a04 	addi	r9,r9,-30168
   82c08:	480f883a 	mov	r7,r9
   82c0c:	400d883a 	mov	r6,r8
   82c10:	180b883a 	mov	r5,r3
   82c14:	1009883a 	mov	r4,r2
   82c18:	0088b980 	call	88b98 <__adddf3>
   82c1c:	b009883a 	mov	r4,r22
   82c20:	1021883a 	mov	r16,r2
   82c24:	1823883a 	mov	r17,r3
   82c28:	00894d00 	call	894d0 <__floatsidf>
   82c2c:	021427f4 	movhi	r8,20639
   82c30:	421e7ec4 	addi	r8,r8,31227
   82c34:	024ff4f4 	movhi	r9,16339
   82c38:	4a5104c4 	addi	r9,r9,17427
   82c3c:	480f883a 	mov	r7,r9
   82c40:	400d883a 	mov	r6,r8
   82c44:	180b883a 	mov	r5,r3
   82c48:	1009883a 	mov	r4,r2
   82c4c:	0088c0c0 	call	88c0c <__muldf3>
   82c50:	180f883a 	mov	r7,r3
   82c54:	880b883a 	mov	r5,r17
   82c58:	100d883a 	mov	r6,r2
   82c5c:	8009883a 	mov	r4,r16
   82c60:	0088b980 	call	88b98 <__adddf3>
   82c64:	1009883a 	mov	r4,r2
   82c68:	180b883a 	mov	r5,r3
   82c6c:	1021883a 	mov	r16,r2
   82c70:	1823883a 	mov	r17,r3
   82c74:	00895c80 	call	895c8 <__fixdfsi>
   82c78:	000d883a 	mov	r6,zero
   82c7c:	000f883a 	mov	r7,zero
   82c80:	8009883a 	mov	r4,r16
   82c84:	880b883a 	mov	r5,r17
   82c88:	d8800d15 	stw	r2,52(sp)
   82c8c:	00894480 	call	89448 <__ltdf2>
   82c90:	10031716 	blt	r2,zero,838f0 <_dtoa_r+0xe8c>
   82c94:	d8c00d17 	ldw	r3,52(sp)
   82c98:	00800584 	movi	r2,22
   82c9c:	10c1482e 	bgeu	r2,r3,831c0 <_dtoa_r+0x75c>
   82ca0:	01000044 	movi	r4,1
   82ca4:	d9000c15 	stw	r4,48(sp)
   82ca8:	bd85c83a 	sub	r2,r23,r22
   82cac:	11bfffc4 	addi	r6,r2,-1
   82cb0:	30030b16 	blt	r6,zero,838e0 <_dtoa_r+0xe7c>
   82cb4:	d9800a15 	stw	r6,40(sp)
   82cb8:	d8001115 	stw	zero,68(sp)
   82cbc:	d8c00d17 	ldw	r3,52(sp)
   82cc0:	1802ff16 	blt	r3,zero,838c0 <_dtoa_r+0xe5c>
   82cc4:	d9000a17 	ldw	r4,40(sp)
   82cc8:	d8c00915 	stw	r3,36(sp)
   82ccc:	d8001015 	stw	zero,64(sp)
   82cd0:	20c9883a 	add	r4,r4,r3
   82cd4:	d9000a15 	stw	r4,40(sp)
   82cd8:	d9001717 	ldw	r4,92(sp)
   82cdc:	00800244 	movi	r2,9
   82ce0:	11004636 	bltu	r2,r4,82dfc <_dtoa_r+0x398>
   82ce4:	00800144 	movi	r2,5
   82ce8:	11020416 	blt	r2,r4,834fc <_dtoa_r+0xa98>
   82cec:	04400044 	movi	r17,1
   82cf0:	d8c01717 	ldw	r3,92(sp)
   82cf4:	00800144 	movi	r2,5
   82cf8:	10c1ed36 	bltu	r2,r3,834b0 <_dtoa_r+0xa4c>
   82cfc:	18c5883a 	add	r2,r3,r3
   82d00:	1085883a 	add	r2,r2,r2
   82d04:	00c00234 	movhi	r3,8
   82d08:	18cb4604 	addi	r3,r3,11544
   82d0c:	10c5883a 	add	r2,r2,r3
   82d10:	11000017 	ldw	r4,0(r2)
   82d14:	2000683a 	jmp	r4
   82d18:	00082e04 	movi	zero,8376
   82d1c:	00082e04 	movi	zero,8376
   82d20:	00083804 	movi	zero,8416
   82d24:	000837dc 	xori	zero,zero,8415
   82d28:	00083820 	cmpeqi	zero,zero,8416
   82d2c:	0008382c 	andhi	zero,zero,8416
   82d30:	d9002717 	ldw	r4,156(sp)
   82d34:	0089c3c4 	movi	r2,9999
   82d38:	20800015 	stw	r2,0(r4)
   82d3c:	a0001026 	beq	r20,zero,82d80 <_dtoa_r+0x31c>
   82d40:	00c00274 	movhi	r3,9
   82d44:	18f33604 	addi	r3,r3,-13096
   82d48:	d9802917 	ldw	r6,164(sp)
   82d4c:	303f7926 	beq	r6,zero,82b34 <_dtoa_r+0xd0>
   82d50:	188000c7 	ldb	r2,3(r3)
   82d54:	190000c4 	addi	r4,r3,3
   82d58:	1000101e 	bne	r2,zero,82d9c <_dtoa_r+0x338>
   82d5c:	d8802917 	ldw	r2,164(sp)
   82d60:	11000015 	stw	r4,0(r2)
   82d64:	003f7306 	br	82b34 <_dtoa_r+0xd0>
   82d68:	00a00034 	movhi	r2,32768
   82d6c:	10bfffc4 	addi	r2,r2,-1
   82d70:	00c00044 	movi	r3,1
   82d74:	88aa703a 	and	r21,r17,r2
   82d78:	90c00015 	stw	r3,0(r18)
   82d7c:	003f5806 	br	82ae0 <_dtoa_r+0x7c>
   82d80:	00800434 	movhi	r2,16
   82d84:	10bfffc4 	addi	r2,r2,-1
   82d88:	a884703a 	and	r2,r21,r2
   82d8c:	103fec1e 	bne	r2,zero,82d40 <_dtoa_r+0x2dc>
   82d90:	00c00274 	movhi	r3,9
   82d94:	18f33304 	addi	r3,r3,-13108
   82d98:	003feb06 	br	82d48 <_dtoa_r+0x2e4>
   82d9c:	d8802917 	ldw	r2,164(sp)
   82da0:	19000204 	addi	r4,r3,8
   82da4:	11000015 	stw	r4,0(r2)
   82da8:	003f6206 	br	82b34 <_dtoa_r+0xd0>
   82dac:	ddc00117 	ldw	r23,4(sp)
   82db0:	d8800217 	ldw	r2,8(sp)
   82db4:	01000804 	movi	r4,32
   82db8:	b8c10c84 	addi	r3,r23,1074
   82dbc:	18a3883a 	add	r17,r3,r2
   82dc0:	2441b80e 	bge	r4,r17,834a4 <_dtoa_r+0xa40>
   82dc4:	00c01004 	movi	r3,64
   82dc8:	1c47c83a 	sub	r3,r3,r17
   82dcc:	88bff804 	addi	r2,r17,-32
   82dd0:	a8c6983a 	sll	r3,r21,r3
   82dd4:	a084d83a 	srl	r2,r20,r2
   82dd8:	1888b03a 	or	r4,r3,r2
   82ddc:	00896a00 	call	896a0 <__floatunsidf>
   82de0:	1011883a 	mov	r8,r2
   82de4:	00bf8434 	movhi	r2,65040
   82de8:	01000044 	movi	r4,1
   82dec:	10d3883a 	add	r9,r2,r3
   82df0:	8dbef344 	addi	r22,r17,-1075
   82df4:	d9000815 	stw	r4,32(sp)
   82df8:	003f6f06 	br	82bb8 <_dtoa_r+0x154>
   82dfc:	d8001715 	stw	zero,92(sp)
   82e00:	04400044 	movi	r17,1
   82e04:	00bfffc4 	movi	r2,-1
   82e08:	00c00044 	movi	r3,1
   82e0c:	d8800e15 	stw	r2,56(sp)
   82e10:	d8002615 	stw	zero,152(sp)
   82e14:	d8800f15 	stw	r2,60(sp)
   82e18:	d8c00b15 	stw	r3,44(sp)
   82e1c:	1021883a 	mov	r16,r2
   82e20:	d8801617 	ldw	r2,88(sp)
   82e24:	10001115 	stw	zero,68(r2)
   82e28:	d8801617 	ldw	r2,88(sp)
   82e2c:	11401117 	ldw	r5,68(r2)
   82e30:	1009883a 	mov	r4,r2
   82e34:	00861ac0 	call	861ac <_Balloc>
   82e38:	d8c01617 	ldw	r3,88(sp)
   82e3c:	d8800515 	stw	r2,20(sp)
   82e40:	18801015 	stw	r2,64(r3)
   82e44:	00800384 	movi	r2,14
   82e48:	14006836 	bltu	r2,r16,82fec <_dtoa_r+0x588>
   82e4c:	8805003a 	cmpeq	r2,r17,zero
   82e50:	1000661e 	bne	r2,zero,82fec <_dtoa_r+0x588>
   82e54:	d9000d17 	ldw	r4,52(sp)
   82e58:	0102300e 	bge	zero,r4,8371c <_dtoa_r+0xcb8>
   82e5c:	208003cc 	andi	r2,r4,15
   82e60:	100490fa 	slli	r2,r2,3
   82e64:	2025d13a 	srai	r18,r4,4
   82e68:	00c00274 	movhi	r3,9
   82e6c:	18f34804 	addi	r3,r3,-13024
   82e70:	10c5883a 	add	r2,r2,r3
   82e74:	90c0040c 	andi	r3,r18,16
   82e78:	14000017 	ldw	r16,0(r2)
   82e7c:	14400117 	ldw	r17,4(r2)
   82e80:	18036a1e 	bne	r3,zero,83c2c <_dtoa_r+0x11c8>
   82e84:	05800084 	movi	r22,2
   82e88:	90001026 	beq	r18,zero,82ecc <_dtoa_r+0x468>
   82e8c:	04c00274 	movhi	r19,9
   82e90:	9cf37a04 	addi	r19,r19,-12824
   82e94:	9080004c 	andi	r2,r18,1
   82e98:	1005003a 	cmpeq	r2,r2,zero
   82e9c:	1000081e 	bne	r2,zero,82ec0 <_dtoa_r+0x45c>
   82ea0:	99800017 	ldw	r6,0(r19)
   82ea4:	99c00117 	ldw	r7,4(r19)
   82ea8:	880b883a 	mov	r5,r17
   82eac:	8009883a 	mov	r4,r16
   82eb0:	0088c0c0 	call	88c0c <__muldf3>
   82eb4:	1021883a 	mov	r16,r2
   82eb8:	b5800044 	addi	r22,r22,1
   82ebc:	1823883a 	mov	r17,r3
   82ec0:	9025d07a 	srai	r18,r18,1
   82ec4:	9cc00204 	addi	r19,r19,8
   82ec8:	903ff21e 	bne	r18,zero,82e94 <_dtoa_r+0x430>
   82ecc:	a80b883a 	mov	r5,r21
   82ed0:	a009883a 	mov	r4,r20
   82ed4:	880f883a 	mov	r7,r17
   82ed8:	800d883a 	mov	r6,r16
   82edc:	0088fd00 	call	88fd0 <__divdf3>
   82ee0:	1029883a 	mov	r20,r2
   82ee4:	182b883a 	mov	r21,r3
   82ee8:	d8c00c17 	ldw	r3,48(sp)
   82eec:	1805003a 	cmpeq	r2,r3,zero
   82ef0:	1000081e 	bne	r2,zero,82f14 <_dtoa_r+0x4b0>
   82ef4:	0005883a 	mov	r2,zero
   82ef8:	00cffc34 	movhi	r3,16368
   82efc:	180f883a 	mov	r7,r3
   82f00:	a009883a 	mov	r4,r20
   82f04:	a80b883a 	mov	r5,r21
   82f08:	100d883a 	mov	r6,r2
   82f0c:	00894480 	call	89448 <__ltdf2>
   82f10:	1003fe16 	blt	r2,zero,83f0c <_dtoa_r+0x14a8>
   82f14:	b009883a 	mov	r4,r22
   82f18:	00894d00 	call	894d0 <__floatsidf>
   82f1c:	180b883a 	mov	r5,r3
   82f20:	1009883a 	mov	r4,r2
   82f24:	a00d883a 	mov	r6,r20
   82f28:	a80f883a 	mov	r7,r21
   82f2c:	0088c0c0 	call	88c0c <__muldf3>
   82f30:	0011883a 	mov	r8,zero
   82f34:	02500734 	movhi	r9,16412
   82f38:	1009883a 	mov	r4,r2
   82f3c:	180b883a 	mov	r5,r3
   82f40:	480f883a 	mov	r7,r9
   82f44:	400d883a 	mov	r6,r8
   82f48:	0088b980 	call	88b98 <__adddf3>
   82f4c:	d9000f17 	ldw	r4,60(sp)
   82f50:	102d883a 	mov	r22,r2
   82f54:	00bf3034 	movhi	r2,64704
   82f58:	18b9883a 	add	fp,r3,r2
   82f5c:	e02f883a 	mov	r23,fp
   82f60:	20028f1e 	bne	r4,zero,839a0 <_dtoa_r+0xf3c>
   82f64:	0005883a 	mov	r2,zero
   82f68:	00d00534 	movhi	r3,16404
   82f6c:	a009883a 	mov	r4,r20
   82f70:	a80b883a 	mov	r5,r21
   82f74:	180f883a 	mov	r7,r3
   82f78:	100d883a 	mov	r6,r2
   82f7c:	0088b180 	call	88b18 <__subdf3>
   82f80:	1009883a 	mov	r4,r2
   82f84:	e00f883a 	mov	r7,fp
   82f88:	180b883a 	mov	r5,r3
   82f8c:	b00d883a 	mov	r6,r22
   82f90:	1025883a 	mov	r18,r2
   82f94:	1827883a 	mov	r19,r3
   82f98:	00893380 	call	89338 <__gtdf2>
   82f9c:	00834f16 	blt	zero,r2,83cdc <_dtoa_r+0x1278>
   82fa0:	e0e0003c 	xorhi	r3,fp,32768
   82fa4:	9009883a 	mov	r4,r18
   82fa8:	980b883a 	mov	r5,r19
   82fac:	180f883a 	mov	r7,r3
   82fb0:	b00d883a 	mov	r6,r22
   82fb4:	00894480 	call	89448 <__ltdf2>
   82fb8:	1000080e 	bge	r2,zero,82fdc <_dtoa_r+0x578>
   82fbc:	0027883a 	mov	r19,zero
   82fc0:	0025883a 	mov	r18,zero
   82fc4:	d8802617 	ldw	r2,152(sp)
   82fc8:	df000517 	ldw	fp,20(sp)
   82fcc:	d8000615 	stw	zero,24(sp)
   82fd0:	0084303a 	nor	r2,zero,r2
   82fd4:	d8800d15 	stw	r2,52(sp)
   82fd8:	00019b06 	br	83648 <_dtoa_r+0xbe4>
   82fdc:	d9801217 	ldw	r6,72(sp)
   82fe0:	d8801317 	ldw	r2,76(sp)
   82fe4:	3029883a 	mov	r20,r6
   82fe8:	102b883a 	mov	r21,r2
   82fec:	d8c00217 	ldw	r3,8(sp)
   82ff0:	18008516 	blt	r3,zero,83208 <_dtoa_r+0x7a4>
   82ff4:	d9000d17 	ldw	r4,52(sp)
   82ff8:	00800384 	movi	r2,14
   82ffc:	11008216 	blt	r2,r4,83208 <_dtoa_r+0x7a4>
   83000:	200490fa 	slli	r2,r4,3
   83004:	d9802617 	ldw	r6,152(sp)
   83008:	00c00274 	movhi	r3,9
   8300c:	18f34804 	addi	r3,r3,-13024
   83010:	10c5883a 	add	r2,r2,r3
   83014:	14800017 	ldw	r18,0(r2)
   83018:	14c00117 	ldw	r19,4(r2)
   8301c:	30031e16 	blt	r6,zero,83c98 <_dtoa_r+0x1234>
   83020:	d9000517 	ldw	r4,20(sp)
   83024:	d8c00f17 	ldw	r3,60(sp)
   83028:	a823883a 	mov	r17,r21
   8302c:	a021883a 	mov	r16,r20
   83030:	192b883a 	add	r21,r3,r4
   83034:	2039883a 	mov	fp,r4
   83038:	00000f06 	br	83078 <_dtoa_r+0x614>
   8303c:	0005883a 	mov	r2,zero
   83040:	00d00934 	movhi	r3,16420
   83044:	5009883a 	mov	r4,r10
   83048:	580b883a 	mov	r5,r11
   8304c:	180f883a 	mov	r7,r3
   83050:	100d883a 	mov	r6,r2
   83054:	0088c0c0 	call	88c0c <__muldf3>
   83058:	180b883a 	mov	r5,r3
   8305c:	000d883a 	mov	r6,zero
   83060:	000f883a 	mov	r7,zero
   83064:	1009883a 	mov	r4,r2
   83068:	1021883a 	mov	r16,r2
   8306c:	1823883a 	mov	r17,r3
   83070:	00892b00 	call	892b0 <__nedf2>
   83074:	10004526 	beq	r2,zero,8318c <_dtoa_r+0x728>
   83078:	900d883a 	mov	r6,r18
   8307c:	980f883a 	mov	r7,r19
   83080:	8009883a 	mov	r4,r16
   83084:	880b883a 	mov	r5,r17
   83088:	0088fd00 	call	88fd0 <__divdf3>
   8308c:	180b883a 	mov	r5,r3
   83090:	1009883a 	mov	r4,r2
   83094:	00895c80 	call	895c8 <__fixdfsi>
   83098:	1009883a 	mov	r4,r2
   8309c:	1029883a 	mov	r20,r2
   830a0:	00894d00 	call	894d0 <__floatsidf>
   830a4:	180f883a 	mov	r7,r3
   830a8:	9009883a 	mov	r4,r18
   830ac:	980b883a 	mov	r5,r19
   830b0:	100d883a 	mov	r6,r2
   830b4:	0088c0c0 	call	88c0c <__muldf3>
   830b8:	180f883a 	mov	r7,r3
   830bc:	880b883a 	mov	r5,r17
   830c0:	8009883a 	mov	r4,r16
   830c4:	100d883a 	mov	r6,r2
   830c8:	0088b180 	call	88b18 <__subdf3>
   830cc:	1015883a 	mov	r10,r2
   830d0:	a0800c04 	addi	r2,r20,48
   830d4:	e0800005 	stb	r2,0(fp)
   830d8:	e7000044 	addi	fp,fp,1
   830dc:	1817883a 	mov	r11,r3
   830e0:	e57fd61e 	bne	fp,r21,8303c <_dtoa_r+0x5d8>
   830e4:	500d883a 	mov	r6,r10
   830e8:	180f883a 	mov	r7,r3
   830ec:	5009883a 	mov	r4,r10
   830f0:	180b883a 	mov	r5,r3
   830f4:	0088b980 	call	88b98 <__adddf3>
   830f8:	100d883a 	mov	r6,r2
   830fc:	9009883a 	mov	r4,r18
   83100:	980b883a 	mov	r5,r19
   83104:	180f883a 	mov	r7,r3
   83108:	1021883a 	mov	r16,r2
   8310c:	1823883a 	mov	r17,r3
   83110:	00894480 	call	89448 <__ltdf2>
   83114:	10000816 	blt	r2,zero,83138 <_dtoa_r+0x6d4>
   83118:	980b883a 	mov	r5,r19
   8311c:	800d883a 	mov	r6,r16
   83120:	880f883a 	mov	r7,r17
   83124:	9009883a 	mov	r4,r18
   83128:	00892280 	call	89228 <__eqdf2>
   8312c:	1000171e 	bne	r2,zero,8318c <_dtoa_r+0x728>
   83130:	a080004c 	andi	r2,r20,1
   83134:	10001526 	beq	r2,zero,8318c <_dtoa_r+0x728>
   83138:	d8800d17 	ldw	r2,52(sp)
   8313c:	d8800415 	stw	r2,16(sp)
   83140:	e009883a 	mov	r4,fp
   83144:	213fffc4 	addi	r4,r4,-1
   83148:	20c00007 	ldb	r3,0(r4)
   8314c:	00800e44 	movi	r2,57
   83150:	1880081e 	bne	r3,r2,83174 <_dtoa_r+0x710>
   83154:	d8800517 	ldw	r2,20(sp)
   83158:	113ffa1e 	bne	r2,r4,83144 <_dtoa_r+0x6e0>
   8315c:	d8c00417 	ldw	r3,16(sp)
   83160:	d9800517 	ldw	r6,20(sp)
   83164:	00800c04 	movi	r2,48
   83168:	18c00044 	addi	r3,r3,1
   8316c:	d8c00415 	stw	r3,16(sp)
   83170:	30800005 	stb	r2,0(r6)
   83174:	20800003 	ldbu	r2,0(r4)
   83178:	d8c00417 	ldw	r3,16(sp)
   8317c:	27000044 	addi	fp,r4,1
   83180:	10800044 	addi	r2,r2,1
   83184:	d8c00d15 	stw	r3,52(sp)
   83188:	20800005 	stb	r2,0(r4)
   8318c:	d9001617 	ldw	r4,88(sp)
   83190:	d9400717 	ldw	r5,28(sp)
   83194:	0085c2c0 	call	85c2c <_Bfree>
   83198:	e0000005 	stb	zero,0(fp)
   8319c:	d9800d17 	ldw	r6,52(sp)
   831a0:	d8c02717 	ldw	r3,156(sp)
   831a4:	d9002917 	ldw	r4,164(sp)
   831a8:	30800044 	addi	r2,r6,1
   831ac:	18800015 	stw	r2,0(r3)
   831b0:	20029c26 	beq	r4,zero,83c24 <_dtoa_r+0x11c0>
   831b4:	d8c00517 	ldw	r3,20(sp)
   831b8:	27000015 	stw	fp,0(r4)
   831bc:	003e5d06 	br	82b34 <_dtoa_r+0xd0>
   831c0:	d9800d17 	ldw	r6,52(sp)
   831c4:	00c00274 	movhi	r3,9
   831c8:	18f34804 	addi	r3,r3,-13024
   831cc:	d9001217 	ldw	r4,72(sp)
   831d0:	300490fa 	slli	r2,r6,3
   831d4:	d9401317 	ldw	r5,76(sp)
   831d8:	10c5883a 	add	r2,r2,r3
   831dc:	12000017 	ldw	r8,0(r2)
   831e0:	12400117 	ldw	r9,4(r2)
   831e4:	400d883a 	mov	r6,r8
   831e8:	480f883a 	mov	r7,r9
   831ec:	00894480 	call	89448 <__ltdf2>
   831f0:	1000030e 	bge	r2,zero,83200 <_dtoa_r+0x79c>
   831f4:	d8800d17 	ldw	r2,52(sp)
   831f8:	10bfffc4 	addi	r2,r2,-1
   831fc:	d8800d15 	stw	r2,52(sp)
   83200:	d8000c15 	stw	zero,48(sp)
   83204:	003ea806 	br	82ca8 <_dtoa_r+0x244>
   83208:	d9000b17 	ldw	r4,44(sp)
   8320c:	202cc03a 	cmpne	r22,r4,zero
   83210:	b000c71e 	bne	r22,zero,83530 <_dtoa_r+0xacc>
   83214:	dc001117 	ldw	r16,68(sp)
   83218:	dc801017 	ldw	r18,64(sp)
   8321c:	0027883a 	mov	r19,zero
   83220:	04000b0e 	bge	zero,r16,83250 <_dtoa_r+0x7ec>
   83224:	d8c00a17 	ldw	r3,40(sp)
   83228:	00c0090e 	bge	zero,r3,83250 <_dtoa_r+0x7ec>
   8322c:	8005883a 	mov	r2,r16
   83230:	1c011316 	blt	r3,r16,83680 <_dtoa_r+0xc1c>
   83234:	d9000a17 	ldw	r4,40(sp)
   83238:	d9801117 	ldw	r6,68(sp)
   8323c:	80a1c83a 	sub	r16,r16,r2
   83240:	2089c83a 	sub	r4,r4,r2
   83244:	308dc83a 	sub	r6,r6,r2
   83248:	d9000a15 	stw	r4,40(sp)
   8324c:	d9801115 	stw	r6,68(sp)
   83250:	d8801017 	ldw	r2,64(sp)
   83254:	0080150e 	bge	zero,r2,832ac <_dtoa_r+0x848>
   83258:	d8c00b17 	ldw	r3,44(sp)
   8325c:	1805003a 	cmpeq	r2,r3,zero
   83260:	1001c91e 	bne	r2,zero,83988 <_dtoa_r+0xf24>
   83264:	04800e0e 	bge	zero,r18,832a0 <_dtoa_r+0x83c>
   83268:	d9001617 	ldw	r4,88(sp)
   8326c:	980b883a 	mov	r5,r19
   83270:	900d883a 	mov	r6,r18
   83274:	0086a780 	call	86a78 <__pow5mult>
   83278:	d9001617 	ldw	r4,88(sp)
   8327c:	d9800717 	ldw	r6,28(sp)
   83280:	100b883a 	mov	r5,r2
   83284:	1027883a 	mov	r19,r2
   83288:	00866bc0 	call	866bc <__multiply>
   8328c:	d9001617 	ldw	r4,88(sp)
   83290:	d9400717 	ldw	r5,28(sp)
   83294:	1023883a 	mov	r17,r2
   83298:	0085c2c0 	call	85c2c <_Bfree>
   8329c:	dc400715 	stw	r17,28(sp)
   832a0:	d9001017 	ldw	r4,64(sp)
   832a4:	248dc83a 	sub	r6,r4,r18
   832a8:	30010e1e 	bne	r6,zero,836e4 <_dtoa_r+0xc80>
   832ac:	d9001617 	ldw	r4,88(sp)
   832b0:	04400044 	movi	r17,1
   832b4:	880b883a 	mov	r5,r17
   832b8:	00869100 	call	86910 <__i2b>
   832bc:	d9800917 	ldw	r6,36(sp)
   832c0:	1025883a 	mov	r18,r2
   832c4:	0180040e 	bge	zero,r6,832d8 <_dtoa_r+0x874>
   832c8:	d9001617 	ldw	r4,88(sp)
   832cc:	100b883a 	mov	r5,r2
   832d0:	0086a780 	call	86a78 <__pow5mult>
   832d4:	1025883a 	mov	r18,r2
   832d8:	d8801717 	ldw	r2,92(sp)
   832dc:	8880f30e 	bge	r17,r2,836ac <_dtoa_r+0xc48>
   832e0:	0023883a 	mov	r17,zero
   832e4:	d9800917 	ldw	r6,36(sp)
   832e8:	30019e1e 	bne	r6,zero,83964 <_dtoa_r+0xf00>
   832ec:	00c00044 	movi	r3,1
   832f0:	d9000a17 	ldw	r4,40(sp)
   832f4:	20c5883a 	add	r2,r4,r3
   832f8:	10c007cc 	andi	r3,r2,31
   832fc:	1800841e 	bne	r3,zero,83510 <_dtoa_r+0xaac>
   83300:	00800704 	movi	r2,28
   83304:	d9000a17 	ldw	r4,40(sp)
   83308:	d9801117 	ldw	r6,68(sp)
   8330c:	80a1883a 	add	r16,r16,r2
   83310:	2089883a 	add	r4,r4,r2
   83314:	308d883a 	add	r6,r6,r2
   83318:	d9000a15 	stw	r4,40(sp)
   8331c:	d9801115 	stw	r6,68(sp)
   83320:	d8801117 	ldw	r2,68(sp)
   83324:	0080050e 	bge	zero,r2,8333c <_dtoa_r+0x8d8>
   83328:	d9400717 	ldw	r5,28(sp)
   8332c:	d9001617 	ldw	r4,88(sp)
   83330:	100d883a 	mov	r6,r2
   83334:	00865700 	call	86570 <__lshift>
   83338:	d8800715 	stw	r2,28(sp)
   8333c:	d8c00a17 	ldw	r3,40(sp)
   83340:	00c0050e 	bge	zero,r3,83358 <_dtoa_r+0x8f4>
   83344:	d9001617 	ldw	r4,88(sp)
   83348:	900b883a 	mov	r5,r18
   8334c:	180d883a 	mov	r6,r3
   83350:	00865700 	call	86570 <__lshift>
   83354:	1025883a 	mov	r18,r2
   83358:	d9000c17 	ldw	r4,48(sp)
   8335c:	2005003a 	cmpeq	r2,r4,zero
   83360:	10016f26 	beq	r2,zero,83920 <_dtoa_r+0xebc>
   83364:	d9000f17 	ldw	r4,60(sp)
   83368:	0102170e 	bge	zero,r4,83bc8 <_dtoa_r+0x1164>
   8336c:	d9800b17 	ldw	r6,44(sp)
   83370:	3005003a 	cmpeq	r2,r6,zero
   83374:	1000881e 	bne	r2,zero,83598 <_dtoa_r+0xb34>
   83378:	0400050e 	bge	zero,r16,83390 <_dtoa_r+0x92c>
   8337c:	d9001617 	ldw	r4,88(sp)
   83380:	980b883a 	mov	r5,r19
   83384:	800d883a 	mov	r6,r16
   83388:	00865700 	call	86570 <__lshift>
   8338c:	1027883a 	mov	r19,r2
   83390:	8804c03a 	cmpne	r2,r17,zero
   83394:	1002541e 	bne	r2,zero,83ce8 <_dtoa_r+0x1284>
   83398:	980b883a 	mov	r5,r19
   8339c:	dd800517 	ldw	r22,20(sp)
   833a0:	dcc00615 	stw	r19,24(sp)
   833a4:	a700004c 	andi	fp,r20,1
   833a8:	2827883a 	mov	r19,r5
   833ac:	d9000717 	ldw	r4,28(sp)
   833b0:	900b883a 	mov	r5,r18
   833b4:	00828200 	call	82820 <quorem>
   833b8:	d9000717 	ldw	r4,28(sp)
   833bc:	d9400617 	ldw	r5,24(sp)
   833c0:	1023883a 	mov	r17,r2
   833c4:	8dc00c04 	addi	r23,r17,48
   833c8:	0085d880 	call	85d88 <__mcmp>
   833cc:	d9001617 	ldw	r4,88(sp)
   833d0:	900b883a 	mov	r5,r18
   833d4:	980d883a 	mov	r6,r19
   833d8:	1029883a 	mov	r20,r2
   833dc:	00863e40 	call	863e4 <__mdiff>
   833e0:	102b883a 	mov	r21,r2
   833e4:	10800317 	ldw	r2,12(r2)
   833e8:	1001281e 	bne	r2,zero,8388c <_dtoa_r+0xe28>
   833ec:	d9000717 	ldw	r4,28(sp)
   833f0:	a80b883a 	mov	r5,r21
   833f4:	0085d880 	call	85d88 <__mcmp>
   833f8:	d9001617 	ldw	r4,88(sp)
   833fc:	1021883a 	mov	r16,r2
   83400:	a80b883a 	mov	r5,r21
   83404:	0085c2c0 	call	85c2c <_Bfree>
   83408:	8000041e 	bne	r16,zero,8341c <_dtoa_r+0x9b8>
   8340c:	d8801717 	ldw	r2,92(sp)
   83410:	1000021e 	bne	r2,zero,8341c <_dtoa_r+0x9b8>
   83414:	e004c03a 	cmpne	r2,fp,zero
   83418:	10011726 	beq	r2,zero,83878 <_dtoa_r+0xe14>
   8341c:	a0010616 	blt	r20,zero,83838 <_dtoa_r+0xdd4>
   83420:	a000041e 	bne	r20,zero,83434 <_dtoa_r+0x9d0>
   83424:	d8c01717 	ldw	r3,92(sp)
   83428:	1800021e 	bne	r3,zero,83434 <_dtoa_r+0x9d0>
   8342c:	e004c03a 	cmpne	r2,fp,zero
   83430:	10010126 	beq	r2,zero,83838 <_dtoa_r+0xdd4>
   83434:	04023d16 	blt	zero,r16,83d2c <_dtoa_r+0x12c8>
   83438:	b5c00005 	stb	r23,0(r22)
   8343c:	d9800517 	ldw	r6,20(sp)
   83440:	d9000f17 	ldw	r4,60(sp)
   83444:	b5800044 	addi	r22,r22,1
   83448:	3105883a 	add	r2,r6,r4
   8344c:	b0806526 	beq	r22,r2,835e4 <_dtoa_r+0xb80>
   83450:	d9400717 	ldw	r5,28(sp)
   83454:	d9001617 	ldw	r4,88(sp)
   83458:	01800284 	movi	r6,10
   8345c:	000f883a 	mov	r7,zero
   83460:	008694c0 	call	8694c <__multadd>
   83464:	d8800715 	stw	r2,28(sp)
   83468:	d8800617 	ldw	r2,24(sp)
   8346c:	14c10c26 	beq	r2,r19,838a0 <_dtoa_r+0xe3c>
   83470:	d9400617 	ldw	r5,24(sp)
   83474:	d9001617 	ldw	r4,88(sp)
   83478:	01800284 	movi	r6,10
   8347c:	000f883a 	mov	r7,zero
   83480:	008694c0 	call	8694c <__multadd>
   83484:	d9001617 	ldw	r4,88(sp)
   83488:	980b883a 	mov	r5,r19
   8348c:	01800284 	movi	r6,10
   83490:	000f883a 	mov	r7,zero
   83494:	d8800615 	stw	r2,24(sp)
   83498:	008694c0 	call	8694c <__multadd>
   8349c:	1027883a 	mov	r19,r2
   834a0:	003fc206 	br	833ac <_dtoa_r+0x948>
   834a4:	2445c83a 	sub	r2,r4,r17
   834a8:	a088983a 	sll	r4,r20,r2
   834ac:	003e4b06 	br	82ddc <_dtoa_r+0x378>
   834b0:	01bfffc4 	movi	r6,-1
   834b4:	00800044 	movi	r2,1
   834b8:	d9800e15 	stw	r6,56(sp)
   834bc:	d9800f15 	stw	r6,60(sp)
   834c0:	d8800b15 	stw	r2,44(sp)
   834c4:	d8c01617 	ldw	r3,88(sp)
   834c8:	008005c4 	movi	r2,23
   834cc:	18001115 	stw	zero,68(r3)
   834d0:	1580082e 	bgeu	r2,r22,834f4 <_dtoa_r+0xa90>
   834d4:	00c00104 	movi	r3,4
   834d8:	0009883a 	mov	r4,zero
   834dc:	18c7883a 	add	r3,r3,r3
   834e0:	18800504 	addi	r2,r3,20
   834e4:	21000044 	addi	r4,r4,1
   834e8:	b0bffc2e 	bgeu	r22,r2,834dc <_dtoa_r+0xa78>
   834ec:	d9801617 	ldw	r6,88(sp)
   834f0:	31001115 	stw	r4,68(r6)
   834f4:	dc000f17 	ldw	r16,60(sp)
   834f8:	003e4b06 	br	82e28 <_dtoa_r+0x3c4>
   834fc:	d9801717 	ldw	r6,92(sp)
   83500:	0023883a 	mov	r17,zero
   83504:	31bfff04 	addi	r6,r6,-4
   83508:	d9801715 	stw	r6,92(sp)
   8350c:	003df806 	br	82cf0 <_dtoa_r+0x28c>
   83510:	00800804 	movi	r2,32
   83514:	10c9c83a 	sub	r4,r2,r3
   83518:	00c00104 	movi	r3,4
   8351c:	19005a16 	blt	r3,r4,83688 <_dtoa_r+0xc24>
   83520:	008000c4 	movi	r2,3
   83524:	113f7e16 	blt	r2,r4,83320 <_dtoa_r+0x8bc>
   83528:	20800704 	addi	r2,r4,28
   8352c:	003f7506 	br	83304 <_dtoa_r+0x8a0>
   83530:	d9801717 	ldw	r6,92(sp)
   83534:	00800044 	movi	r2,1
   83538:	1180a10e 	bge	r2,r6,837c0 <_dtoa_r+0xd5c>
   8353c:	d9800f17 	ldw	r6,60(sp)
   83540:	d8c01017 	ldw	r3,64(sp)
   83544:	30bfffc4 	addi	r2,r6,-1
   83548:	1881c616 	blt	r3,r2,83c64 <_dtoa_r+0x1200>
   8354c:	18a5c83a 	sub	r18,r3,r2
   83550:	d8800f17 	ldw	r2,60(sp)
   83554:	10026216 	blt	r2,zero,83ee0 <_dtoa_r+0x147c>
   83558:	dc001117 	ldw	r16,68(sp)
   8355c:	1007883a 	mov	r3,r2
   83560:	d9800a17 	ldw	r6,40(sp)
   83564:	d8801117 	ldw	r2,68(sp)
   83568:	d9001617 	ldw	r4,88(sp)
   8356c:	30cd883a 	add	r6,r6,r3
   83570:	10c5883a 	add	r2,r2,r3
   83574:	01400044 	movi	r5,1
   83578:	d9800a15 	stw	r6,40(sp)
   8357c:	d8801115 	stw	r2,68(sp)
   83580:	00869100 	call	86910 <__i2b>
   83584:	1027883a 	mov	r19,r2
   83588:	003f2506 	br	83220 <_dtoa_r+0x7bc>
   8358c:	00c00274 	movhi	r3,9
   83590:	18f32a04 	addi	r3,r3,-13144
   83594:	003d6706 	br	82b34 <_dtoa_r+0xd0>
   83598:	dd800517 	ldw	r22,20(sp)
   8359c:	04000044 	movi	r16,1
   835a0:	00000706 	br	835c0 <_dtoa_r+0xb5c>
   835a4:	d9400717 	ldw	r5,28(sp)
   835a8:	d9001617 	ldw	r4,88(sp)
   835ac:	01800284 	movi	r6,10
   835b0:	000f883a 	mov	r7,zero
   835b4:	008694c0 	call	8694c <__multadd>
   835b8:	d8800715 	stw	r2,28(sp)
   835bc:	84000044 	addi	r16,r16,1
   835c0:	d9000717 	ldw	r4,28(sp)
   835c4:	900b883a 	mov	r5,r18
   835c8:	00828200 	call	82820 <quorem>
   835cc:	15c00c04 	addi	r23,r2,48
   835d0:	b5c00005 	stb	r23,0(r22)
   835d4:	d8c00f17 	ldw	r3,60(sp)
   835d8:	b5800044 	addi	r22,r22,1
   835dc:	80fff116 	blt	r16,r3,835a4 <_dtoa_r+0xb40>
   835e0:	d8000615 	stw	zero,24(sp)
   835e4:	d9400717 	ldw	r5,28(sp)
   835e8:	d9001617 	ldw	r4,88(sp)
   835ec:	01800044 	movi	r6,1
   835f0:	00865700 	call	86570 <__lshift>
   835f4:	1009883a 	mov	r4,r2
   835f8:	900b883a 	mov	r5,r18
   835fc:	d8800715 	stw	r2,28(sp)
   83600:	0085d880 	call	85d88 <__mcmp>
   83604:	00803c0e 	bge	zero,r2,836f8 <_dtoa_r+0xc94>
   83608:	b009883a 	mov	r4,r22
   8360c:	213fffc4 	addi	r4,r4,-1
   83610:	21400003 	ldbu	r5,0(r4)
   83614:	00800e44 	movi	r2,57
   83618:	28c03fcc 	andi	r3,r5,255
   8361c:	18c0201c 	xori	r3,r3,128
   83620:	18ffe004 	addi	r3,r3,-128
   83624:	1881981e 	bne	r3,r2,83c88 <_dtoa_r+0x1224>
   83628:	d9800517 	ldw	r6,20(sp)
   8362c:	21bff71e 	bne	r4,r6,8360c <_dtoa_r+0xba8>
   83630:	d8800d17 	ldw	r2,52(sp)
   83634:	37000044 	addi	fp,r6,1
   83638:	10800044 	addi	r2,r2,1
   8363c:	d8800d15 	stw	r2,52(sp)
   83640:	00800c44 	movi	r2,49
   83644:	30800005 	stb	r2,0(r6)
   83648:	d9001617 	ldw	r4,88(sp)
   8364c:	900b883a 	mov	r5,r18
   83650:	0085c2c0 	call	85c2c <_Bfree>
   83654:	983ecd26 	beq	r19,zero,8318c <_dtoa_r+0x728>
   83658:	d8c00617 	ldw	r3,24(sp)
   8365c:	18000426 	beq	r3,zero,83670 <_dtoa_r+0xc0c>
   83660:	1cc00326 	beq	r3,r19,83670 <_dtoa_r+0xc0c>
   83664:	d9001617 	ldw	r4,88(sp)
   83668:	180b883a 	mov	r5,r3
   8366c:	0085c2c0 	call	85c2c <_Bfree>
   83670:	d9001617 	ldw	r4,88(sp)
   83674:	980b883a 	mov	r5,r19
   83678:	0085c2c0 	call	85c2c <_Bfree>
   8367c:	003ec306 	br	8318c <_dtoa_r+0x728>
   83680:	1805883a 	mov	r2,r3
   83684:	003eeb06 	br	83234 <_dtoa_r+0x7d0>
   83688:	d9800a17 	ldw	r6,40(sp)
   8368c:	d8c01117 	ldw	r3,68(sp)
   83690:	20bfff04 	addi	r2,r4,-4
   83694:	308d883a 	add	r6,r6,r2
   83698:	1887883a 	add	r3,r3,r2
   8369c:	80a1883a 	add	r16,r16,r2
   836a0:	d9800a15 	stw	r6,40(sp)
   836a4:	d8c01115 	stw	r3,68(sp)
   836a8:	003f1d06 	br	83320 <_dtoa_r+0x8bc>
   836ac:	a03f0c1e 	bne	r20,zero,832e0 <_dtoa_r+0x87c>
   836b0:	00800434 	movhi	r2,16
   836b4:	10bfffc4 	addi	r2,r2,-1
   836b8:	a884703a 	and	r2,r21,r2
   836bc:	103f081e 	bne	r2,zero,832e0 <_dtoa_r+0x87c>
   836c0:	a89ffc2c 	andhi	r2,r21,32752
   836c4:	103f0626 	beq	r2,zero,832e0 <_dtoa_r+0x87c>
   836c8:	d8c01117 	ldw	r3,68(sp)
   836cc:	d9000a17 	ldw	r4,40(sp)
   836d0:	18c00044 	addi	r3,r3,1
   836d4:	21000044 	addi	r4,r4,1
   836d8:	d8c01115 	stw	r3,68(sp)
   836dc:	d9000a15 	stw	r4,40(sp)
   836e0:	003f0006 	br	832e4 <_dtoa_r+0x880>
   836e4:	d9400717 	ldw	r5,28(sp)
   836e8:	d9001617 	ldw	r4,88(sp)
   836ec:	0086a780 	call	86a78 <__pow5mult>
   836f0:	d8800715 	stw	r2,28(sp)
   836f4:	003eed06 	br	832ac <_dtoa_r+0x848>
   836f8:	1000021e 	bne	r2,zero,83704 <_dtoa_r+0xca0>
   836fc:	b880004c 	andi	r2,r23,1
   83700:	103fc11e 	bne	r2,zero,83608 <_dtoa_r+0xba4>
   83704:	b5bfffc4 	addi	r22,r22,-1
   83708:	b0c00007 	ldb	r3,0(r22)
   8370c:	00800c04 	movi	r2,48
   83710:	18bffc26 	beq	r3,r2,83704 <_dtoa_r+0xca0>
   83714:	b7000044 	addi	fp,r22,1
   83718:	003fcb06 	br	83648 <_dtoa_r+0xbe4>
   8371c:	d9800d17 	ldw	r6,52(sp)
   83720:	018fc83a 	sub	r7,zero,r6
   83724:	3801f726 	beq	r7,zero,83f04 <_dtoa_r+0x14a0>
   83728:	398003cc 	andi	r6,r7,15
   8372c:	300c90fa 	slli	r6,r6,3
   83730:	01400274 	movhi	r5,9
   83734:	29734804 	addi	r5,r5,-13024
   83738:	d9001217 	ldw	r4,72(sp)
   8373c:	314d883a 	add	r6,r6,r5
   83740:	30c00117 	ldw	r3,4(r6)
   83744:	30800017 	ldw	r2,0(r6)
   83748:	d9401317 	ldw	r5,76(sp)
   8374c:	3821d13a 	srai	r16,r7,4
   83750:	100d883a 	mov	r6,r2
   83754:	180f883a 	mov	r7,r3
   83758:	0088c0c0 	call	88c0c <__muldf3>
   8375c:	1011883a 	mov	r8,r2
   83760:	1813883a 	mov	r9,r3
   83764:	1029883a 	mov	r20,r2
   83768:	182b883a 	mov	r21,r3
   8376c:	8001e526 	beq	r16,zero,83f04 <_dtoa_r+0x14a0>
   83770:	05800084 	movi	r22,2
   83774:	04400274 	movhi	r17,9
   83778:	8c737a04 	addi	r17,r17,-12824
   8377c:	8080004c 	andi	r2,r16,1
   83780:	1005003a 	cmpeq	r2,r2,zero
   83784:	1000081e 	bne	r2,zero,837a8 <_dtoa_r+0xd44>
   83788:	89800017 	ldw	r6,0(r17)
   8378c:	89c00117 	ldw	r7,4(r17)
   83790:	480b883a 	mov	r5,r9
   83794:	4009883a 	mov	r4,r8
   83798:	0088c0c0 	call	88c0c <__muldf3>
   8379c:	1011883a 	mov	r8,r2
   837a0:	b5800044 	addi	r22,r22,1
   837a4:	1813883a 	mov	r9,r3
   837a8:	8021d07a 	srai	r16,r16,1
   837ac:	8c400204 	addi	r17,r17,8
   837b0:	803ff21e 	bne	r16,zero,8377c <_dtoa_r+0xd18>
   837b4:	4029883a 	mov	r20,r8
   837b8:	482b883a 	mov	r21,r9
   837bc:	003dca06 	br	82ee8 <_dtoa_r+0x484>
   837c0:	d9000817 	ldw	r4,32(sp)
   837c4:	2005003a 	cmpeq	r2,r4,zero
   837c8:	1001f61e 	bne	r2,zero,83fa4 <_dtoa_r+0x1540>
   837cc:	dc001117 	ldw	r16,68(sp)
   837d0:	dc801017 	ldw	r18,64(sp)
   837d4:	18c10cc4 	addi	r3,r3,1075
   837d8:	003f6106 	br	83560 <_dtoa_r+0xafc>
   837dc:	d8000b15 	stw	zero,44(sp)
   837e0:	d9802617 	ldw	r6,152(sp)
   837e4:	d8c00d17 	ldw	r3,52(sp)
   837e8:	30800044 	addi	r2,r6,1
   837ec:	18ad883a 	add	r22,r3,r2
   837f0:	b13fffc4 	addi	r4,r22,-1
   837f4:	d9000e15 	stw	r4,56(sp)
   837f8:	0581f60e 	bge	zero,r22,83fd4 <_dtoa_r+0x1570>
   837fc:	dd800f15 	stw	r22,60(sp)
   83800:	003f3006 	br	834c4 <_dtoa_r+0xa60>
   83804:	d8000b15 	stw	zero,44(sp)
   83808:	d9002617 	ldw	r4,152(sp)
   8380c:	0101eb0e 	bge	zero,r4,83fbc <_dtoa_r+0x1558>
   83810:	202d883a 	mov	r22,r4
   83814:	d9000e15 	stw	r4,56(sp)
   83818:	d9000f15 	stw	r4,60(sp)
   8381c:	003f2906 	br	834c4 <_dtoa_r+0xa60>
   83820:	01800044 	movi	r6,1
   83824:	d9800b15 	stw	r6,44(sp)
   83828:	003ff706 	br	83808 <_dtoa_r+0xda4>
   8382c:	01000044 	movi	r4,1
   83830:	d9000b15 	stw	r4,44(sp)
   83834:	003fea06 	br	837e0 <_dtoa_r+0xd7c>
   83838:	04000c0e 	bge	zero,r16,8386c <_dtoa_r+0xe08>
   8383c:	d9400717 	ldw	r5,28(sp)
   83840:	d9001617 	ldw	r4,88(sp)
   83844:	01800044 	movi	r6,1
   83848:	00865700 	call	86570 <__lshift>
   8384c:	1009883a 	mov	r4,r2
   83850:	900b883a 	mov	r5,r18
   83854:	d8800715 	stw	r2,28(sp)
   83858:	0085d880 	call	85d88 <__mcmp>
   8385c:	0081e00e 	bge	zero,r2,83fe0 <_dtoa_r+0x157c>
   83860:	bdc00044 	addi	r23,r23,1
   83864:	00800e84 	movi	r2,58
   83868:	b881a226 	beq	r23,r2,83ef4 <_dtoa_r+0x1490>
   8386c:	b7000044 	addi	fp,r22,1
   83870:	b5c00005 	stb	r23,0(r22)
   83874:	003f7406 	br	83648 <_dtoa_r+0xbe4>
   83878:	00800e44 	movi	r2,57
   8387c:	b8819d26 	beq	r23,r2,83ef4 <_dtoa_r+0x1490>
   83880:	053ffa0e 	bge	zero,r20,8386c <_dtoa_r+0xe08>
   83884:	8dc00c44 	addi	r23,r17,49
   83888:	003ff806 	br	8386c <_dtoa_r+0xe08>
   8388c:	d9001617 	ldw	r4,88(sp)
   83890:	a80b883a 	mov	r5,r21
   83894:	04000044 	movi	r16,1
   83898:	0085c2c0 	call	85c2c <_Bfree>
   8389c:	003edf06 	br	8341c <_dtoa_r+0x9b8>
   838a0:	d9001617 	ldw	r4,88(sp)
   838a4:	980b883a 	mov	r5,r19
   838a8:	01800284 	movi	r6,10
   838ac:	000f883a 	mov	r7,zero
   838b0:	008694c0 	call	8694c <__multadd>
   838b4:	1027883a 	mov	r19,r2
   838b8:	d8800615 	stw	r2,24(sp)
   838bc:	003ebb06 	br	833ac <_dtoa_r+0x948>
   838c0:	d9801117 	ldw	r6,68(sp)
   838c4:	d8800d17 	ldw	r2,52(sp)
   838c8:	d8000915 	stw	zero,36(sp)
   838cc:	308dc83a 	sub	r6,r6,r2
   838d0:	0087c83a 	sub	r3,zero,r2
   838d4:	d9801115 	stw	r6,68(sp)
   838d8:	d8c01015 	stw	r3,64(sp)
   838dc:	003cfe06 	br	82cd8 <_dtoa_r+0x274>
   838e0:	018dc83a 	sub	r6,zero,r6
   838e4:	d9801115 	stw	r6,68(sp)
   838e8:	d8000a15 	stw	zero,40(sp)
   838ec:	003cf306 	br	82cbc <_dtoa_r+0x258>
   838f0:	d9000d17 	ldw	r4,52(sp)
   838f4:	00894d00 	call	894d0 <__floatsidf>
   838f8:	880b883a 	mov	r5,r17
   838fc:	8009883a 	mov	r4,r16
   83900:	180f883a 	mov	r7,r3
   83904:	100d883a 	mov	r6,r2
   83908:	00892b00 	call	892b0 <__nedf2>
   8390c:	103ce126 	beq	r2,zero,82c94 <_dtoa_r+0x230>
   83910:	d9800d17 	ldw	r6,52(sp)
   83914:	31bfffc4 	addi	r6,r6,-1
   83918:	d9800d15 	stw	r6,52(sp)
   8391c:	003cdd06 	br	82c94 <_dtoa_r+0x230>
   83920:	d9000717 	ldw	r4,28(sp)
   83924:	900b883a 	mov	r5,r18
   83928:	0085d880 	call	85d88 <__mcmp>
   8392c:	103e8d0e 	bge	r2,zero,83364 <_dtoa_r+0x900>
   83930:	d9400717 	ldw	r5,28(sp)
   83934:	d9001617 	ldw	r4,88(sp)
   83938:	01800284 	movi	r6,10
   8393c:	000f883a 	mov	r7,zero
   83940:	008694c0 	call	8694c <__multadd>
   83944:	d9800d17 	ldw	r6,52(sp)
   83948:	d8800715 	stw	r2,28(sp)
   8394c:	31bfffc4 	addi	r6,r6,-1
   83950:	d9800d15 	stw	r6,52(sp)
   83954:	b001a71e 	bne	r22,zero,83ff4 <_dtoa_r+0x1590>
   83958:	d8800e17 	ldw	r2,56(sp)
   8395c:	d8800f15 	stw	r2,60(sp)
   83960:	003e8006 	br	83364 <_dtoa_r+0x900>
   83964:	90800417 	ldw	r2,16(r18)
   83968:	1085883a 	add	r2,r2,r2
   8396c:	1085883a 	add	r2,r2,r2
   83970:	1485883a 	add	r2,r2,r18
   83974:	11000417 	ldw	r4,16(r2)
   83978:	0085c540 	call	85c54 <__hi0bits>
   8397c:	00c00804 	movi	r3,32
   83980:	1887c83a 	sub	r3,r3,r2
   83984:	003e5a06 	br	832f0 <_dtoa_r+0x88c>
   83988:	d9400717 	ldw	r5,28(sp)
   8398c:	d9801017 	ldw	r6,64(sp)
   83990:	d9001617 	ldw	r4,88(sp)
   83994:	0086a780 	call	86a78 <__pow5mult>
   83998:	d8800715 	stw	r2,28(sp)
   8399c:	003e4306 	br	832ac <_dtoa_r+0x848>
   839a0:	d9800f17 	ldw	r6,60(sp)
   839a4:	d8800d17 	ldw	r2,52(sp)
   839a8:	d9800315 	stw	r6,12(sp)
   839ac:	d8800415 	stw	r2,16(sp)
   839b0:	d8c00b17 	ldw	r3,44(sp)
   839b4:	1805003a 	cmpeq	r2,r3,zero
   839b8:	1000e21e 	bne	r2,zero,83d44 <_dtoa_r+0x12e0>
   839bc:	d9000317 	ldw	r4,12(sp)
   839c0:	0005883a 	mov	r2,zero
   839c4:	00cff834 	movhi	r3,16352
   839c8:	200c90fa 	slli	r6,r4,3
   839cc:	01000274 	movhi	r4,9
   839d0:	21334804 	addi	r4,r4,-13024
   839d4:	180b883a 	mov	r5,r3
   839d8:	310d883a 	add	r6,r6,r4
   839dc:	327fff17 	ldw	r9,-4(r6)
   839e0:	323ffe17 	ldw	r8,-8(r6)
   839e4:	1009883a 	mov	r4,r2
   839e8:	480f883a 	mov	r7,r9
   839ec:	400d883a 	mov	r6,r8
   839f0:	0088fd00 	call	88fd0 <__divdf3>
   839f4:	180b883a 	mov	r5,r3
   839f8:	b00d883a 	mov	r6,r22
   839fc:	b80f883a 	mov	r7,r23
   83a00:	1009883a 	mov	r4,r2
   83a04:	0088b180 	call	88b18 <__subdf3>
   83a08:	a80b883a 	mov	r5,r21
   83a0c:	a009883a 	mov	r4,r20
   83a10:	d8c01915 	stw	r3,100(sp)
   83a14:	d8801815 	stw	r2,96(sp)
   83a18:	00895c80 	call	895c8 <__fixdfsi>
   83a1c:	1009883a 	mov	r4,r2
   83a20:	1027883a 	mov	r19,r2
   83a24:	00894d00 	call	894d0 <__floatsidf>
   83a28:	a80b883a 	mov	r5,r21
   83a2c:	a009883a 	mov	r4,r20
   83a30:	180f883a 	mov	r7,r3
   83a34:	100d883a 	mov	r6,r2
   83a38:	0088b180 	call	88b18 <__subdf3>
   83a3c:	d9801817 	ldw	r6,96(sp)
   83a40:	1823883a 	mov	r17,r3
   83a44:	d8801415 	stw	r2,80(sp)
   83a48:	302d883a 	mov	r22,r6
   83a4c:	d9800517 	ldw	r6,20(sp)
   83a50:	9cc00c04 	addi	r19,r19,48
   83a54:	dc401515 	stw	r17,84(sp)
   83a58:	d8c01917 	ldw	r3,100(sp)
   83a5c:	34c00005 	stb	r19,0(r6)
   83a60:	d8800517 	ldw	r2,20(sp)
   83a64:	d9401917 	ldw	r5,100(sp)
   83a68:	d9801417 	ldw	r6,80(sp)
   83a6c:	b009883a 	mov	r4,r22
   83a70:	880f883a 	mov	r7,r17
   83a74:	182f883a 	mov	r23,r3
   83a78:	17000044 	addi	fp,r2,1
   83a7c:	00893380 	call	89338 <__gtdf2>
   83a80:	00804e16 	blt	zero,r2,83bbc <_dtoa_r+0x1158>
   83a84:	d9801417 	ldw	r6,80(sp)
   83a88:	0005883a 	mov	r2,zero
   83a8c:	00cffc34 	movhi	r3,16368
   83a90:	180b883a 	mov	r5,r3
   83a94:	880f883a 	mov	r7,r17
   83a98:	1009883a 	mov	r4,r2
   83a9c:	0088b180 	call	88b18 <__subdf3>
   83aa0:	d9401917 	ldw	r5,100(sp)
   83aa4:	180f883a 	mov	r7,r3
   83aa8:	b009883a 	mov	r4,r22
   83aac:	100d883a 	mov	r6,r2
   83ab0:	00893380 	call	89338 <__gtdf2>
   83ab4:	00bda216 	blt	zero,r2,83140 <_dtoa_r+0x6dc>
   83ab8:	d8c00317 	ldw	r3,12(sp)
   83abc:	00800044 	movi	r2,1
   83ac0:	10c01216 	blt	r2,r3,83b0c <_dtoa_r+0x10a8>
   83ac4:	003d4506 	br	82fdc <_dtoa_r+0x578>
   83ac8:	d9801417 	ldw	r6,80(sp)
   83acc:	0005883a 	mov	r2,zero
   83ad0:	00cffc34 	movhi	r3,16368
   83ad4:	180b883a 	mov	r5,r3
   83ad8:	880f883a 	mov	r7,r17
   83adc:	1009883a 	mov	r4,r2
   83ae0:	0088b180 	call	88b18 <__subdf3>
   83ae4:	d9c01b17 	ldw	r7,108(sp)
   83ae8:	180b883a 	mov	r5,r3
   83aec:	1009883a 	mov	r4,r2
   83af0:	b00d883a 	mov	r6,r22
   83af4:	00894480 	call	89448 <__ltdf2>
   83af8:	103d9116 	blt	r2,zero,83140 <_dtoa_r+0x6dc>
   83afc:	d9800517 	ldw	r6,20(sp)
   83b00:	d9000317 	ldw	r4,12(sp)
   83b04:	3105883a 	add	r2,r6,r4
   83b08:	e0bd3426 	beq	fp,r2,82fdc <_dtoa_r+0x578>
   83b0c:	04500934 	movhi	r17,16420
   83b10:	0021883a 	mov	r16,zero
   83b14:	b80b883a 	mov	r5,r23
   83b18:	b009883a 	mov	r4,r22
   83b1c:	800d883a 	mov	r6,r16
   83b20:	880f883a 	mov	r7,r17
   83b24:	0088c0c0 	call	88c0c <__muldf3>
   83b28:	d9401517 	ldw	r5,84(sp)
   83b2c:	d9001417 	ldw	r4,80(sp)
   83b30:	880f883a 	mov	r7,r17
   83b34:	000d883a 	mov	r6,zero
   83b38:	d8801a15 	stw	r2,104(sp)
   83b3c:	d8c01b15 	stw	r3,108(sp)
   83b40:	0088c0c0 	call	88c0c <__muldf3>
   83b44:	180b883a 	mov	r5,r3
   83b48:	1009883a 	mov	r4,r2
   83b4c:	1823883a 	mov	r17,r3
   83b50:	1021883a 	mov	r16,r2
   83b54:	00895c80 	call	895c8 <__fixdfsi>
   83b58:	1009883a 	mov	r4,r2
   83b5c:	102b883a 	mov	r21,r2
   83b60:	00894d00 	call	894d0 <__floatsidf>
   83b64:	880b883a 	mov	r5,r17
   83b68:	8009883a 	mov	r4,r16
   83b6c:	180f883a 	mov	r7,r3
   83b70:	100d883a 	mov	r6,r2
   83b74:	0088b180 	call	88b18 <__subdf3>
   83b78:	1021883a 	mov	r16,r2
   83b7c:	d9001b17 	ldw	r4,108(sp)
   83b80:	1823883a 	mov	r17,r3
   83b84:	dc001415 	stw	r16,80(sp)
   83b88:	ad400c04 	addi	r21,r21,48
   83b8c:	dc401515 	stw	r17,84(sp)
   83b90:	d8801a17 	ldw	r2,104(sp)
   83b94:	e5400005 	stb	r21,0(fp)
   83b98:	202f883a 	mov	r23,r4
   83b9c:	d9c01b17 	ldw	r7,108(sp)
   83ba0:	d9001417 	ldw	r4,80(sp)
   83ba4:	880b883a 	mov	r5,r17
   83ba8:	100d883a 	mov	r6,r2
   83bac:	102d883a 	mov	r22,r2
   83bb0:	e7000044 	addi	fp,fp,1
   83bb4:	00894480 	call	89448 <__ltdf2>
   83bb8:	103fc30e 	bge	r2,zero,83ac8 <_dtoa_r+0x1064>
   83bbc:	d9000417 	ldw	r4,16(sp)
   83bc0:	d9000d15 	stw	r4,52(sp)
   83bc4:	003d7106 	br	8318c <_dtoa_r+0x728>
   83bc8:	d9801717 	ldw	r6,92(sp)
   83bcc:	00800084 	movi	r2,2
   83bd0:	11bde60e 	bge	r2,r6,8336c <_dtoa_r+0x908>
   83bd4:	203cfb1e 	bne	r4,zero,82fc4 <_dtoa_r+0x560>
   83bd8:	d9001617 	ldw	r4,88(sp)
   83bdc:	900b883a 	mov	r5,r18
   83be0:	01800144 	movi	r6,5
   83be4:	000f883a 	mov	r7,zero
   83be8:	008694c0 	call	8694c <__multadd>
   83bec:	d9000717 	ldw	r4,28(sp)
   83bf0:	100b883a 	mov	r5,r2
   83bf4:	1025883a 	mov	r18,r2
   83bf8:	0085d880 	call	85d88 <__mcmp>
   83bfc:	00bcf10e 	bge	zero,r2,82fc4 <_dtoa_r+0x560>
   83c00:	d8c00d17 	ldw	r3,52(sp)
   83c04:	d9000517 	ldw	r4,20(sp)
   83c08:	d8000615 	stw	zero,24(sp)
   83c0c:	18c00044 	addi	r3,r3,1
   83c10:	d8c00d15 	stw	r3,52(sp)
   83c14:	00800c44 	movi	r2,49
   83c18:	27000044 	addi	fp,r4,1
   83c1c:	20800005 	stb	r2,0(r4)
   83c20:	003e8906 	br	83648 <_dtoa_r+0xbe4>
   83c24:	d8c00517 	ldw	r3,20(sp)
   83c28:	003bc206 	br	82b34 <_dtoa_r+0xd0>
   83c2c:	01800274 	movhi	r6,9
   83c30:	31b37a04 	addi	r6,r6,-12824
   83c34:	30c00917 	ldw	r3,36(r6)
   83c38:	30800817 	ldw	r2,32(r6)
   83c3c:	d9001217 	ldw	r4,72(sp)
   83c40:	d9401317 	ldw	r5,76(sp)
   83c44:	180f883a 	mov	r7,r3
   83c48:	100d883a 	mov	r6,r2
   83c4c:	0088fd00 	call	88fd0 <__divdf3>
   83c50:	948003cc 	andi	r18,r18,15
   83c54:	058000c4 	movi	r22,3
   83c58:	1029883a 	mov	r20,r2
   83c5c:	182b883a 	mov	r21,r3
   83c60:	003c8906 	br	82e88 <_dtoa_r+0x424>
   83c64:	d9001017 	ldw	r4,64(sp)
   83c68:	d9800917 	ldw	r6,36(sp)
   83c6c:	0025883a 	mov	r18,zero
   83c70:	1105c83a 	sub	r2,r2,r4
   83c74:	2089883a 	add	r4,r4,r2
   83c78:	308d883a 	add	r6,r6,r2
   83c7c:	d9001015 	stw	r4,64(sp)
   83c80:	d9800915 	stw	r6,36(sp)
   83c84:	003e3206 	br	83550 <_dtoa_r+0xaec>
   83c88:	28800044 	addi	r2,r5,1
   83c8c:	27000044 	addi	fp,r4,1
   83c90:	20800005 	stb	r2,0(r4)
   83c94:	003e6c06 	br	83648 <_dtoa_r+0xbe4>
   83c98:	d8800f17 	ldw	r2,60(sp)
   83c9c:	00bce016 	blt	zero,r2,83020 <_dtoa_r+0x5bc>
   83ca0:	d9800f17 	ldw	r6,60(sp)
   83ca4:	303cc51e 	bne	r6,zero,82fbc <_dtoa_r+0x558>
   83ca8:	0005883a 	mov	r2,zero
   83cac:	00d00534 	movhi	r3,16404
   83cb0:	980b883a 	mov	r5,r19
   83cb4:	180f883a 	mov	r7,r3
   83cb8:	9009883a 	mov	r4,r18
   83cbc:	100d883a 	mov	r6,r2
   83cc0:	0088c0c0 	call	88c0c <__muldf3>
   83cc4:	180b883a 	mov	r5,r3
   83cc8:	a80f883a 	mov	r7,r21
   83ccc:	1009883a 	mov	r4,r2
   83cd0:	a00d883a 	mov	r6,r20
   83cd4:	00893c00 	call	893c0 <__gedf2>
   83cd8:	103cb80e 	bge	r2,zero,82fbc <_dtoa_r+0x558>
   83cdc:	0027883a 	mov	r19,zero
   83ce0:	0025883a 	mov	r18,zero
   83ce4:	003fc606 	br	83c00 <_dtoa_r+0x119c>
   83ce8:	99400117 	ldw	r5,4(r19)
   83cec:	d9001617 	ldw	r4,88(sp)
   83cf0:	00861ac0 	call	861ac <_Balloc>
   83cf4:	99800417 	ldw	r6,16(r19)
   83cf8:	11000304 	addi	r4,r2,12
   83cfc:	99400304 	addi	r5,r19,12
   83d00:	318d883a 	add	r6,r6,r6
   83d04:	318d883a 	add	r6,r6,r6
   83d08:	31800204 	addi	r6,r6,8
   83d0c:	1023883a 	mov	r17,r2
   83d10:	0085a140 	call	85a14 <memcpy>
   83d14:	d9001617 	ldw	r4,88(sp)
   83d18:	880b883a 	mov	r5,r17
   83d1c:	01800044 	movi	r6,1
   83d20:	00865700 	call	86570 <__lshift>
   83d24:	100b883a 	mov	r5,r2
   83d28:	003d9c06 	br	8339c <_dtoa_r+0x938>
   83d2c:	00800e44 	movi	r2,57
   83d30:	b8807026 	beq	r23,r2,83ef4 <_dtoa_r+0x1490>
   83d34:	b8800044 	addi	r2,r23,1
   83d38:	b7000044 	addi	fp,r22,1
   83d3c:	b0800005 	stb	r2,0(r22)
   83d40:	003e4106 	br	83648 <_dtoa_r+0xbe4>
   83d44:	d8800317 	ldw	r2,12(sp)
   83d48:	01800274 	movhi	r6,9
   83d4c:	31b34804 	addi	r6,r6,-13024
   83d50:	b009883a 	mov	r4,r22
   83d54:	100e90fa 	slli	r7,r2,3
   83d58:	b80b883a 	mov	r5,r23
   83d5c:	398f883a 	add	r7,r7,r6
   83d60:	38bffe17 	ldw	r2,-8(r7)
   83d64:	d9800517 	ldw	r6,20(sp)
   83d68:	38ffff17 	ldw	r3,-4(r7)
   83d6c:	37000044 	addi	fp,r6,1
   83d70:	180f883a 	mov	r7,r3
   83d74:	100d883a 	mov	r6,r2
   83d78:	0088c0c0 	call	88c0c <__muldf3>
   83d7c:	a80b883a 	mov	r5,r21
   83d80:	a009883a 	mov	r4,r20
   83d84:	182f883a 	mov	r23,r3
   83d88:	102d883a 	mov	r22,r2
   83d8c:	00895c80 	call	895c8 <__fixdfsi>
   83d90:	1009883a 	mov	r4,r2
   83d94:	1027883a 	mov	r19,r2
   83d98:	00894d00 	call	894d0 <__floatsidf>
   83d9c:	a80b883a 	mov	r5,r21
   83da0:	a009883a 	mov	r4,r20
   83da4:	180f883a 	mov	r7,r3
   83da8:	100d883a 	mov	r6,r2
   83dac:	0088b180 	call	88b18 <__subdf3>
   83db0:	180b883a 	mov	r5,r3
   83db4:	d8c00517 	ldw	r3,20(sp)
   83db8:	9cc00c04 	addi	r19,r19,48
   83dbc:	1009883a 	mov	r4,r2
   83dc0:	1cc00005 	stb	r19,0(r3)
   83dc4:	2021883a 	mov	r16,r4
   83dc8:	d9000317 	ldw	r4,12(sp)
   83dcc:	00800044 	movi	r2,1
   83dd0:	2823883a 	mov	r17,r5
   83dd4:	20802226 	beq	r4,r2,83e60 <_dtoa_r+0x13fc>
   83dd8:	1029883a 	mov	r20,r2
   83ddc:	0005883a 	mov	r2,zero
   83de0:	00d00934 	movhi	r3,16420
   83de4:	180f883a 	mov	r7,r3
   83de8:	100d883a 	mov	r6,r2
   83dec:	880b883a 	mov	r5,r17
   83df0:	8009883a 	mov	r4,r16
   83df4:	0088c0c0 	call	88c0c <__muldf3>
   83df8:	180b883a 	mov	r5,r3
   83dfc:	1009883a 	mov	r4,r2
   83e00:	1823883a 	mov	r17,r3
   83e04:	1021883a 	mov	r16,r2
   83e08:	00895c80 	call	895c8 <__fixdfsi>
   83e0c:	1009883a 	mov	r4,r2
   83e10:	102b883a 	mov	r21,r2
   83e14:	00894d00 	call	894d0 <__floatsidf>
   83e18:	880b883a 	mov	r5,r17
   83e1c:	8009883a 	mov	r4,r16
   83e20:	180f883a 	mov	r7,r3
   83e24:	100d883a 	mov	r6,r2
   83e28:	0088b180 	call	88b18 <__subdf3>
   83e2c:	180b883a 	mov	r5,r3
   83e30:	d8c00517 	ldw	r3,20(sp)
   83e34:	1009883a 	mov	r4,r2
   83e38:	ad400c04 	addi	r21,r21,48
   83e3c:	1d05883a 	add	r2,r3,r20
   83e40:	15400005 	stb	r21,0(r2)
   83e44:	2021883a 	mov	r16,r4
   83e48:	d9000317 	ldw	r4,12(sp)
   83e4c:	a5000044 	addi	r20,r20,1
   83e50:	2823883a 	mov	r17,r5
   83e54:	a13fe11e 	bne	r20,r4,83ddc <_dtoa_r+0x1378>
   83e58:	e505883a 	add	r2,fp,r20
   83e5c:	173fffc4 	addi	fp,r2,-1
   83e60:	0025883a 	mov	r18,zero
   83e64:	04cff834 	movhi	r19,16352
   83e68:	b009883a 	mov	r4,r22
   83e6c:	b80b883a 	mov	r5,r23
   83e70:	900d883a 	mov	r6,r18
   83e74:	980f883a 	mov	r7,r19
   83e78:	0088b980 	call	88b98 <__adddf3>
   83e7c:	180b883a 	mov	r5,r3
   83e80:	1009883a 	mov	r4,r2
   83e84:	800d883a 	mov	r6,r16
   83e88:	880f883a 	mov	r7,r17
   83e8c:	00894480 	call	89448 <__ltdf2>
   83e90:	103cab16 	blt	r2,zero,83140 <_dtoa_r+0x6dc>
   83e94:	0009883a 	mov	r4,zero
   83e98:	980b883a 	mov	r5,r19
   83e9c:	b80f883a 	mov	r7,r23
   83ea0:	b00d883a 	mov	r6,r22
   83ea4:	0088b180 	call	88b18 <__subdf3>
   83ea8:	180b883a 	mov	r5,r3
   83eac:	880f883a 	mov	r7,r17
   83eb0:	1009883a 	mov	r4,r2
   83eb4:	800d883a 	mov	r6,r16
   83eb8:	00893380 	call	89338 <__gtdf2>
   83ebc:	00bc470e 	bge	zero,r2,82fdc <_dtoa_r+0x578>
   83ec0:	00c00c04 	movi	r3,48
   83ec4:	e73fffc4 	addi	fp,fp,-1
   83ec8:	e0800007 	ldb	r2,0(fp)
   83ecc:	10fffd26 	beq	r2,r3,83ec4 <_dtoa_r+0x1460>
   83ed0:	d9800417 	ldw	r6,16(sp)
   83ed4:	e7000044 	addi	fp,fp,1
   83ed8:	d9800d15 	stw	r6,52(sp)
   83edc:	003cab06 	br	8318c <_dtoa_r+0x728>
   83ee0:	d8c00f17 	ldw	r3,60(sp)
   83ee4:	d9001117 	ldw	r4,68(sp)
   83ee8:	20e1c83a 	sub	r16,r4,r3
   83eec:	0007883a 	mov	r3,zero
   83ef0:	003d9b06 	br	83560 <_dtoa_r+0xafc>
   83ef4:	00800e44 	movi	r2,57
   83ef8:	b0800005 	stb	r2,0(r22)
   83efc:	b5800044 	addi	r22,r22,1
   83f00:	003dc106 	br	83608 <_dtoa_r+0xba4>
   83f04:	05800084 	movi	r22,2
   83f08:	003bf706 	br	82ee8 <_dtoa_r+0x484>
   83f0c:	d9000f17 	ldw	r4,60(sp)
   83f10:	013c000e 	bge	zero,r4,82f14 <_dtoa_r+0x4b0>
   83f14:	d9800e17 	ldw	r6,56(sp)
   83f18:	01bc300e 	bge	zero,r6,82fdc <_dtoa_r+0x578>
   83f1c:	0005883a 	mov	r2,zero
   83f20:	00d00934 	movhi	r3,16420
   83f24:	a80b883a 	mov	r5,r21
   83f28:	180f883a 	mov	r7,r3
   83f2c:	a009883a 	mov	r4,r20
   83f30:	100d883a 	mov	r6,r2
   83f34:	0088c0c0 	call	88c0c <__muldf3>
   83f38:	b1000044 	addi	r4,r22,1
   83f3c:	1021883a 	mov	r16,r2
   83f40:	1823883a 	mov	r17,r3
   83f44:	00894d00 	call	894d0 <__floatsidf>
   83f48:	880b883a 	mov	r5,r17
   83f4c:	8009883a 	mov	r4,r16
   83f50:	180f883a 	mov	r7,r3
   83f54:	100d883a 	mov	r6,r2
   83f58:	0088c0c0 	call	88c0c <__muldf3>
   83f5c:	0011883a 	mov	r8,zero
   83f60:	02500734 	movhi	r9,16412
   83f64:	180b883a 	mov	r5,r3
   83f68:	480f883a 	mov	r7,r9
   83f6c:	1009883a 	mov	r4,r2
   83f70:	400d883a 	mov	r6,r8
   83f74:	0088b980 	call	88b98 <__adddf3>
   83f78:	102d883a 	mov	r22,r2
   83f7c:	00bf3034 	movhi	r2,64704
   83f80:	10ef883a 	add	r23,r2,r3
   83f84:	d8800d17 	ldw	r2,52(sp)
   83f88:	d8c00e17 	ldw	r3,56(sp)
   83f8c:	8029883a 	mov	r20,r16
   83f90:	10bfffc4 	addi	r2,r2,-1
   83f94:	882b883a 	mov	r21,r17
   83f98:	d8800415 	stw	r2,16(sp)
   83f9c:	d8c00315 	stw	r3,12(sp)
   83fa0:	003e8306 	br	839b0 <_dtoa_r+0xf4c>
   83fa4:	d8800117 	ldw	r2,4(sp)
   83fa8:	dc001117 	ldw	r16,68(sp)
   83fac:	dc801017 	ldw	r18,64(sp)
   83fb0:	00c00d84 	movi	r3,54
   83fb4:	1887c83a 	sub	r3,r3,r2
   83fb8:	003d6906 	br	83560 <_dtoa_r+0xafc>
   83fbc:	01800044 	movi	r6,1
   83fc0:	3021883a 	mov	r16,r6
   83fc4:	d9800f15 	stw	r6,60(sp)
   83fc8:	d9802615 	stw	r6,152(sp)
   83fcc:	d9800e15 	stw	r6,56(sp)
   83fd0:	003b9306 	br	82e20 <_dtoa_r+0x3bc>
   83fd4:	b021883a 	mov	r16,r22
   83fd8:	dd800f15 	stw	r22,60(sp)
   83fdc:	003b9006 	br	82e20 <_dtoa_r+0x3bc>
   83fe0:	103e221e 	bne	r2,zero,8386c <_dtoa_r+0xe08>
   83fe4:	b880004c 	andi	r2,r23,1
   83fe8:	1005003a 	cmpeq	r2,r2,zero
   83fec:	103e1f1e 	bne	r2,zero,8386c <_dtoa_r+0xe08>
   83ff0:	003e1b06 	br	83860 <_dtoa_r+0xdfc>
   83ff4:	d9001617 	ldw	r4,88(sp)
   83ff8:	980b883a 	mov	r5,r19
   83ffc:	01800284 	movi	r6,10
   84000:	000f883a 	mov	r7,zero
   84004:	008694c0 	call	8694c <__multadd>
   84008:	d8c00e17 	ldw	r3,56(sp)
   8400c:	1027883a 	mov	r19,r2
   84010:	d8c00f15 	stw	r3,60(sp)
   84014:	003cd306 	br	83364 <_dtoa_r+0x900>

00084018 <_fflush_r>:
   84018:	defffb04 	addi	sp,sp,-20
   8401c:	dcc00315 	stw	r19,12(sp)
   84020:	dc800215 	stw	r18,8(sp)
   84024:	dfc00415 	stw	ra,16(sp)
   84028:	dc400115 	stw	r17,4(sp)
   8402c:	dc000015 	stw	r16,0(sp)
   84030:	2027883a 	mov	r19,r4
   84034:	2825883a 	mov	r18,r5
   84038:	20000226 	beq	r4,zero,84044 <_fflush_r+0x2c>
   8403c:	20800e17 	ldw	r2,56(r4)
   84040:	10005626 	beq	r2,zero,8419c <_fflush_r+0x184>
   84044:	9100030b 	ldhu	r4,12(r18)
   84048:	20ffffcc 	andi	r3,r4,65535
   8404c:	18e0001c 	xori	r3,r3,32768
   84050:	18e00004 	addi	r3,r3,-32768
   84054:	1880020c 	andi	r2,r3,8
   84058:	1000261e 	bne	r2,zero,840f4 <_fflush_r+0xdc>
   8405c:	90c00117 	ldw	r3,4(r18)
   84060:	20820014 	ori	r2,r4,2048
   84064:	9080030d 	sth	r2,12(r18)
   84068:	1009883a 	mov	r4,r2
   8406c:	00c0400e 	bge	zero,r3,84170 <_fflush_r+0x158>
   84070:	92000a17 	ldw	r8,40(r18)
   84074:	40004026 	beq	r8,zero,84178 <_fflush_r+0x160>
   84078:	2084000c 	andi	r2,r4,4096
   8407c:	10005326 	beq	r2,zero,841cc <_fflush_r+0x1b4>
   84080:	94001417 	ldw	r16,80(r18)
   84084:	9080030b 	ldhu	r2,12(r18)
   84088:	1080010c 	andi	r2,r2,4
   8408c:	1000481e 	bne	r2,zero,841b0 <_fflush_r+0x198>
   84090:	91400717 	ldw	r5,28(r18)
   84094:	9809883a 	mov	r4,r19
   84098:	800d883a 	mov	r6,r16
   8409c:	000f883a 	mov	r7,zero
   840a0:	403ee83a 	callr	r8
   840a4:	8080261e 	bne	r16,r2,84140 <_fflush_r+0x128>
   840a8:	9080030b 	ldhu	r2,12(r18)
   840ac:	91000417 	ldw	r4,16(r18)
   840b0:	90000115 	stw	zero,4(r18)
   840b4:	10bdffcc 	andi	r2,r2,63487
   840b8:	10ffffcc 	andi	r3,r2,65535
   840bc:	18c4000c 	andi	r3,r3,4096
   840c0:	9080030d 	sth	r2,12(r18)
   840c4:	91000015 	stw	r4,0(r18)
   840c8:	18002b26 	beq	r3,zero,84178 <_fflush_r+0x160>
   840cc:	0007883a 	mov	r3,zero
   840d0:	1805883a 	mov	r2,r3
   840d4:	94001415 	stw	r16,80(r18)
   840d8:	dfc00417 	ldw	ra,16(sp)
   840dc:	dcc00317 	ldw	r19,12(sp)
   840e0:	dc800217 	ldw	r18,8(sp)
   840e4:	dc400117 	ldw	r17,4(sp)
   840e8:	dc000017 	ldw	r16,0(sp)
   840ec:	dec00504 	addi	sp,sp,20
   840f0:	f800283a 	ret
   840f4:	94400417 	ldw	r17,16(r18)
   840f8:	88001f26 	beq	r17,zero,84178 <_fflush_r+0x160>
   840fc:	90800017 	ldw	r2,0(r18)
   84100:	18c000cc 	andi	r3,r3,3
   84104:	94400015 	stw	r17,0(r18)
   84108:	1461c83a 	sub	r16,r2,r17
   8410c:	18002526 	beq	r3,zero,841a4 <_fflush_r+0x18c>
   84110:	0005883a 	mov	r2,zero
   84114:	90800215 	stw	r2,8(r18)
   84118:	0400170e 	bge	zero,r16,84178 <_fflush_r+0x160>
   8411c:	90c00917 	ldw	r3,36(r18)
   84120:	91400717 	ldw	r5,28(r18)
   84124:	880d883a 	mov	r6,r17
   84128:	800f883a 	mov	r7,r16
   8412c:	9809883a 	mov	r4,r19
   84130:	183ee83a 	callr	r3
   84134:	88a3883a 	add	r17,r17,r2
   84138:	80a1c83a 	sub	r16,r16,r2
   8413c:	00bff616 	blt	zero,r2,84118 <_fflush_r+0x100>
   84140:	9080030b 	ldhu	r2,12(r18)
   84144:	00ffffc4 	movi	r3,-1
   84148:	10801014 	ori	r2,r2,64
   8414c:	9080030d 	sth	r2,12(r18)
   84150:	1805883a 	mov	r2,r3
   84154:	dfc00417 	ldw	ra,16(sp)
   84158:	dcc00317 	ldw	r19,12(sp)
   8415c:	dc800217 	ldw	r18,8(sp)
   84160:	dc400117 	ldw	r17,4(sp)
   84164:	dc000017 	ldw	r16,0(sp)
   84168:	dec00504 	addi	sp,sp,20
   8416c:	f800283a 	ret
   84170:	90800f17 	ldw	r2,60(r18)
   84174:	00bfbe16 	blt	zero,r2,84070 <_fflush_r+0x58>
   84178:	0007883a 	mov	r3,zero
   8417c:	1805883a 	mov	r2,r3
   84180:	dfc00417 	ldw	ra,16(sp)
   84184:	dcc00317 	ldw	r19,12(sp)
   84188:	dc800217 	ldw	r18,8(sp)
   8418c:	dc400117 	ldw	r17,4(sp)
   84190:	dc000017 	ldw	r16,0(sp)
   84194:	dec00504 	addi	sp,sp,20
   84198:	f800283a 	ret
   8419c:	00842b00 	call	842b0 <__sinit>
   841a0:	003fa806 	br	84044 <_fflush_r+0x2c>
   841a4:	90800517 	ldw	r2,20(r18)
   841a8:	90800215 	stw	r2,8(r18)
   841ac:	003fda06 	br	84118 <_fflush_r+0x100>
   841b0:	90800117 	ldw	r2,4(r18)
   841b4:	90c00c17 	ldw	r3,48(r18)
   841b8:	80a1c83a 	sub	r16,r16,r2
   841bc:	183fb426 	beq	r3,zero,84090 <_fflush_r+0x78>
   841c0:	90800f17 	ldw	r2,60(r18)
   841c4:	80a1c83a 	sub	r16,r16,r2
   841c8:	003fb106 	br	84090 <_fflush_r+0x78>
   841cc:	91400717 	ldw	r5,28(r18)
   841d0:	9809883a 	mov	r4,r19
   841d4:	000d883a 	mov	r6,zero
   841d8:	01c00044 	movi	r7,1
   841dc:	403ee83a 	callr	r8
   841e0:	1021883a 	mov	r16,r2
   841e4:	00bfffc4 	movi	r2,-1
   841e8:	80800226 	beq	r16,r2,841f4 <_fflush_r+0x1dc>
   841ec:	92000a17 	ldw	r8,40(r18)
   841f0:	003fa406 	br	84084 <_fflush_r+0x6c>
   841f4:	98c00017 	ldw	r3,0(r19)
   841f8:	00800744 	movi	r2,29
   841fc:	18bfde26 	beq	r3,r2,84178 <_fflush_r+0x160>
   84200:	9080030b 	ldhu	r2,12(r18)
   84204:	8007883a 	mov	r3,r16
   84208:	10801014 	ori	r2,r2,64
   8420c:	9080030d 	sth	r2,12(r18)
   84210:	003fcf06 	br	84150 <_fflush_r+0x138>

00084214 <fflush>:
   84214:	01400234 	movhi	r5,8
   84218:	29500604 	addi	r5,r5,16408
   8421c:	2007883a 	mov	r3,r4
   84220:	20000526 	beq	r4,zero,84238 <fflush+0x24>
   84224:	00800274 	movhi	r2,9
   84228:	10ba6a04 	addi	r2,r2,-5720
   8422c:	11000017 	ldw	r4,0(r2)
   84230:	180b883a 	mov	r5,r3
   84234:	00840181 	jmpi	84018 <_fflush_r>
   84238:	00800274 	movhi	r2,9
   8423c:	10ba6b04 	addi	r2,r2,-5716
   84240:	11000017 	ldw	r4,0(r2)
   84244:	0084e181 	jmpi	84e18 <_fwalk_reent>

00084248 <std>:
   84248:	00800234 	movhi	r2,8
   8424c:	109ce304 	addi	r2,r2,29580
   84250:	20800b15 	stw	r2,44(r4)
   84254:	00800234 	movhi	r2,8
   84258:	109d1e04 	addi	r2,r2,29816
   8425c:	20800815 	stw	r2,32(r4)
   84260:	00c00234 	movhi	r3,8
   84264:	18dcff04 	addi	r3,r3,29692
   84268:	00800234 	movhi	r2,8
   8426c:	109ce504 	addi	r2,r2,29588
   84270:	2140030d 	sth	r5,12(r4)
   84274:	2180038d 	sth	r6,14(r4)
   84278:	20c00915 	stw	r3,36(r4)
   8427c:	20800a15 	stw	r2,40(r4)
   84280:	20000015 	stw	zero,0(r4)
   84284:	20000115 	stw	zero,4(r4)
   84288:	20000215 	stw	zero,8(r4)
   8428c:	20000415 	stw	zero,16(r4)
   84290:	20000515 	stw	zero,20(r4)
   84294:	20000615 	stw	zero,24(r4)
   84298:	21000715 	stw	r4,28(r4)
   8429c:	f800283a 	ret

000842a0 <__sfp_lock_acquire>:
   842a0:	f800283a 	ret

000842a4 <__sfp_lock_release>:
   842a4:	f800283a 	ret

000842a8 <__sinit_lock_acquire>:
   842a8:	f800283a 	ret

000842ac <__sinit_lock_release>:
   842ac:	f800283a 	ret

000842b0 <__sinit>:
   842b0:	20800e17 	ldw	r2,56(r4)
   842b4:	defffd04 	addi	sp,sp,-12
   842b8:	dc400115 	stw	r17,4(sp)
   842bc:	dc000015 	stw	r16,0(sp)
   842c0:	dfc00215 	stw	ra,8(sp)
   842c4:	04400044 	movi	r17,1
   842c8:	01400104 	movi	r5,4
   842cc:	000d883a 	mov	r6,zero
   842d0:	2021883a 	mov	r16,r4
   842d4:	2200bb04 	addi	r8,r4,748
   842d8:	200f883a 	mov	r7,r4
   842dc:	10000526 	beq	r2,zero,842f4 <__sinit+0x44>
   842e0:	dfc00217 	ldw	ra,8(sp)
   842e4:	dc400117 	ldw	r17,4(sp)
   842e8:	dc000017 	ldw	r16,0(sp)
   842ec:	dec00304 	addi	sp,sp,12
   842f0:	f800283a 	ret
   842f4:	21000117 	ldw	r4,4(r4)
   842f8:	00800234 	movhi	r2,8
   842fc:	1090e504 	addi	r2,r2,17300
   84300:	00c000c4 	movi	r3,3
   84304:	80800f15 	stw	r2,60(r16)
   84308:	80c0b915 	stw	r3,740(r16)
   8430c:	8200ba15 	stw	r8,744(r16)
   84310:	84400e15 	stw	r17,56(r16)
   84314:	8000b815 	stw	zero,736(r16)
   84318:	00842480 	call	84248 <std>
   8431c:	81000217 	ldw	r4,8(r16)
   84320:	880d883a 	mov	r6,r17
   84324:	800f883a 	mov	r7,r16
   84328:	01400284 	movi	r5,10
   8432c:	00842480 	call	84248 <std>
   84330:	81000317 	ldw	r4,12(r16)
   84334:	800f883a 	mov	r7,r16
   84338:	01400484 	movi	r5,18
   8433c:	01800084 	movi	r6,2
   84340:	dfc00217 	ldw	ra,8(sp)
   84344:	dc400117 	ldw	r17,4(sp)
   84348:	dc000017 	ldw	r16,0(sp)
   8434c:	dec00304 	addi	sp,sp,12
   84350:	00842481 	jmpi	84248 <std>

00084354 <__fp_lock>:
   84354:	0005883a 	mov	r2,zero
   84358:	f800283a 	ret

0008435c <__fp_unlock>:
   8435c:	0005883a 	mov	r2,zero
   84360:	f800283a 	ret

00084364 <__fp_unlock_all>:
   84364:	00800274 	movhi	r2,9
   84368:	10ba6a04 	addi	r2,r2,-5720
   8436c:	11000017 	ldw	r4,0(r2)
   84370:	01400234 	movhi	r5,8
   84374:	2950d704 	addi	r5,r5,17244
   84378:	0084ee01 	jmpi	84ee0 <_fwalk>

0008437c <__fp_lock_all>:
   8437c:	00800274 	movhi	r2,9
   84380:	10ba6a04 	addi	r2,r2,-5720
   84384:	11000017 	ldw	r4,0(r2)
   84388:	01400234 	movhi	r5,8
   8438c:	2950d504 	addi	r5,r5,17236
   84390:	0084ee01 	jmpi	84ee0 <_fwalk>

00084394 <_cleanup_r>:
   84394:	01400234 	movhi	r5,8
   84398:	295e1504 	addi	r5,r5,30804
   8439c:	0084ee01 	jmpi	84ee0 <_fwalk>

000843a0 <_cleanup>:
   843a0:	00800274 	movhi	r2,9
   843a4:	10ba6b04 	addi	r2,r2,-5716
   843a8:	11000017 	ldw	r4,0(r2)
   843ac:	00843941 	jmpi	84394 <_cleanup_r>

000843b0 <__sfmoreglue>:
   843b0:	defffc04 	addi	sp,sp,-16
   843b4:	dc000015 	stw	r16,0(sp)
   843b8:	2821883a 	mov	r16,r5
   843bc:	dc400115 	stw	r17,4(sp)
   843c0:	01401704 	movi	r5,92
   843c4:	2023883a 	mov	r17,r4
   843c8:	8009883a 	mov	r4,r16
   843cc:	dfc00315 	stw	ra,12(sp)
   843d0:	dcc00215 	stw	r19,8(sp)
   843d4:	00805cc0 	call	805cc <__mulsi3>
   843d8:	11400304 	addi	r5,r2,12
   843dc:	8809883a 	mov	r4,r17
   843e0:	1027883a 	mov	r19,r2
   843e4:	00851f00 	call	851f0 <_malloc_r>
   843e8:	10c00304 	addi	r3,r2,12
   843ec:	1023883a 	mov	r17,r2
   843f0:	1809883a 	mov	r4,r3
   843f4:	980d883a 	mov	r6,r19
   843f8:	000b883a 	mov	r5,zero
   843fc:	10000b26 	beq	r2,zero,8442c <__sfmoreglue+0x7c>
   84400:	14000115 	stw	r16,4(r2)
   84404:	10c00215 	stw	r3,8(r2)
   84408:	10000015 	stw	zero,0(r2)
   8440c:	0085b940 	call	85b94 <memset>
   84410:	8805883a 	mov	r2,r17
   84414:	dfc00317 	ldw	ra,12(sp)
   84418:	dcc00217 	ldw	r19,8(sp)
   8441c:	dc400117 	ldw	r17,4(sp)
   84420:	dc000017 	ldw	r16,0(sp)
   84424:	dec00404 	addi	sp,sp,16
   84428:	f800283a 	ret
   8442c:	0023883a 	mov	r17,zero
   84430:	8805883a 	mov	r2,r17
   84434:	dfc00317 	ldw	ra,12(sp)
   84438:	dcc00217 	ldw	r19,8(sp)
   8443c:	dc400117 	ldw	r17,4(sp)
   84440:	dc000017 	ldw	r16,0(sp)
   84444:	dec00404 	addi	sp,sp,16
   84448:	f800283a 	ret

0008444c <__sfp>:
   8444c:	defffd04 	addi	sp,sp,-12
   84450:	00800274 	movhi	r2,9
   84454:	10ba6b04 	addi	r2,r2,-5716
   84458:	dc000015 	stw	r16,0(sp)
   8445c:	14000017 	ldw	r16,0(r2)
   84460:	dc400115 	stw	r17,4(sp)
   84464:	dfc00215 	stw	ra,8(sp)
   84468:	80800e17 	ldw	r2,56(r16)
   8446c:	2023883a 	mov	r17,r4
   84470:	10002626 	beq	r2,zero,8450c <__sfp+0xc0>
   84474:	8400b804 	addi	r16,r16,736
   84478:	80800117 	ldw	r2,4(r16)
   8447c:	81000217 	ldw	r4,8(r16)
   84480:	10ffffc4 	addi	r3,r2,-1
   84484:	18000916 	blt	r3,zero,844ac <__sfp+0x60>
   84488:	2080030f 	ldh	r2,12(r4)
   8448c:	10000b26 	beq	r2,zero,844bc <__sfp+0x70>
   84490:	017fffc4 	movi	r5,-1
   84494:	00000206 	br	844a0 <__sfp+0x54>
   84498:	2080030f 	ldh	r2,12(r4)
   8449c:	10000726 	beq	r2,zero,844bc <__sfp+0x70>
   844a0:	18ffffc4 	addi	r3,r3,-1
   844a4:	21001704 	addi	r4,r4,92
   844a8:	197ffb1e 	bne	r3,r5,84498 <__sfp+0x4c>
   844ac:	80800017 	ldw	r2,0(r16)
   844b0:	10001926 	beq	r2,zero,84518 <__sfp+0xcc>
   844b4:	1021883a 	mov	r16,r2
   844b8:	003fef06 	br	84478 <__sfp+0x2c>
   844bc:	00bfffc4 	movi	r2,-1
   844c0:	00c00044 	movi	r3,1
   844c4:	2080038d 	sth	r2,14(r4)
   844c8:	20c0030d 	sth	r3,12(r4)
   844cc:	20000015 	stw	zero,0(r4)
   844d0:	20000215 	stw	zero,8(r4)
   844d4:	20000115 	stw	zero,4(r4)
   844d8:	20000415 	stw	zero,16(r4)
   844dc:	20000515 	stw	zero,20(r4)
   844e0:	20000615 	stw	zero,24(r4)
   844e4:	20000c15 	stw	zero,48(r4)
   844e8:	20000d15 	stw	zero,52(r4)
   844ec:	20001115 	stw	zero,68(r4)
   844f0:	20001215 	stw	zero,72(r4)
   844f4:	2005883a 	mov	r2,r4
   844f8:	dfc00217 	ldw	ra,8(sp)
   844fc:	dc400117 	ldw	r17,4(sp)
   84500:	dc000017 	ldw	r16,0(sp)
   84504:	dec00304 	addi	sp,sp,12
   84508:	f800283a 	ret
   8450c:	8009883a 	mov	r4,r16
   84510:	00842b00 	call	842b0 <__sinit>
   84514:	003fd706 	br	84474 <__sfp+0x28>
   84518:	8809883a 	mov	r4,r17
   8451c:	01400104 	movi	r5,4
   84520:	00843b00 	call	843b0 <__sfmoreglue>
   84524:	80800015 	stw	r2,0(r16)
   84528:	103fe21e 	bne	r2,zero,844b4 <__sfp+0x68>
   8452c:	00800304 	movi	r2,12
   84530:	0009883a 	mov	r4,zero
   84534:	88800015 	stw	r2,0(r17)
   84538:	003fee06 	br	844f4 <__sfp+0xa8>

0008453c <_malloc_trim_r>:
   8453c:	defffb04 	addi	sp,sp,-20
   84540:	dcc00315 	stw	r19,12(sp)
   84544:	04c00274 	movhi	r19,9
   84548:	9cf4e604 	addi	r19,r19,-11368
   8454c:	dc800215 	stw	r18,8(sp)
   84550:	dc400115 	stw	r17,4(sp)
   84554:	dc000015 	stw	r16,0(sp)
   84558:	2823883a 	mov	r17,r5
   8455c:	2025883a 	mov	r18,r4
   84560:	dfc00415 	stw	ra,16(sp)
   84564:	008a88c0 	call	8a88c <__malloc_lock>
   84568:	98800217 	ldw	r2,8(r19)
   8456c:	9009883a 	mov	r4,r18
   84570:	000b883a 	mov	r5,zero
   84574:	10c00117 	ldw	r3,4(r2)
   84578:	00bfff04 	movi	r2,-4
   8457c:	18a0703a 	and	r16,r3,r2
   84580:	8463c83a 	sub	r17,r16,r17
   84584:	8c43fbc4 	addi	r17,r17,4079
   84588:	8822d33a 	srli	r17,r17,12
   8458c:	0083ffc4 	movi	r2,4095
   84590:	8c7fffc4 	addi	r17,r17,-1
   84594:	8822933a 	slli	r17,r17,12
   84598:	1440060e 	bge	r2,r17,845b4 <_malloc_trim_r+0x78>
   8459c:	008731c0 	call	8731c <_sbrk_r>
   845a0:	98c00217 	ldw	r3,8(r19)
   845a4:	9009883a 	mov	r4,r18
   845a8:	044bc83a 	sub	r5,zero,r17
   845ac:	80c7883a 	add	r3,r16,r3
   845b0:	10c00926 	beq	r2,r3,845d8 <_malloc_trim_r+0x9c>
   845b4:	008a8ac0 	call	8a8ac <__malloc_unlock>
   845b8:	0005883a 	mov	r2,zero
   845bc:	dfc00417 	ldw	ra,16(sp)
   845c0:	dcc00317 	ldw	r19,12(sp)
   845c4:	dc800217 	ldw	r18,8(sp)
   845c8:	dc400117 	ldw	r17,4(sp)
   845cc:	dc000017 	ldw	r16,0(sp)
   845d0:	dec00504 	addi	sp,sp,20
   845d4:	f800283a 	ret
   845d8:	9009883a 	mov	r4,r18
   845dc:	008731c0 	call	8731c <_sbrk_r>
   845e0:	844dc83a 	sub	r6,r16,r17
   845e4:	00ffffc4 	movi	r3,-1
   845e8:	9009883a 	mov	r4,r18
   845ec:	000b883a 	mov	r5,zero
   845f0:	01c00274 	movhi	r7,9
   845f4:	39c11e04 	addi	r7,r7,1144
   845f8:	31800054 	ori	r6,r6,1
   845fc:	10c00926 	beq	r2,r3,84624 <_malloc_trim_r+0xe8>
   84600:	38800017 	ldw	r2,0(r7)
   84604:	98c00217 	ldw	r3,8(r19)
   84608:	9009883a 	mov	r4,r18
   8460c:	1445c83a 	sub	r2,r2,r17
   84610:	38800015 	stw	r2,0(r7)
   84614:	19800115 	stw	r6,4(r3)
   84618:	008a8ac0 	call	8a8ac <__malloc_unlock>
   8461c:	00800044 	movi	r2,1
   84620:	003fe606 	br	845bc <_malloc_trim_r+0x80>
   84624:	008731c0 	call	8731c <_sbrk_r>
   84628:	99800217 	ldw	r6,8(r19)
   8462c:	100f883a 	mov	r7,r2
   84630:	9009883a 	mov	r4,r18
   84634:	1187c83a 	sub	r3,r2,r6
   84638:	008003c4 	movi	r2,15
   8463c:	19400054 	ori	r5,r3,1
   84640:	10ffdc0e 	bge	r2,r3,845b4 <_malloc_trim_r+0x78>
   84644:	00800274 	movhi	r2,9
   84648:	10ba6f04 	addi	r2,r2,-5700
   8464c:	10c00017 	ldw	r3,0(r2)
   84650:	00800274 	movhi	r2,9
   84654:	10811e04 	addi	r2,r2,1144
   84658:	31400115 	stw	r5,4(r6)
   8465c:	38c7c83a 	sub	r3,r7,r3
   84660:	10c00015 	stw	r3,0(r2)
   84664:	003fd306 	br	845b4 <_malloc_trim_r+0x78>

00084668 <_free_r>:
   84668:	defffd04 	addi	sp,sp,-12
   8466c:	dc400115 	stw	r17,4(sp)
   84670:	dc000015 	stw	r16,0(sp)
   84674:	dfc00215 	stw	ra,8(sp)
   84678:	2821883a 	mov	r16,r5
   8467c:	2023883a 	mov	r17,r4
   84680:	28005a26 	beq	r5,zero,847ec <_free_r+0x184>
   84684:	008a88c0 	call	8a88c <__malloc_lock>
   84688:	823ffe04 	addi	r8,r16,-8
   8468c:	41400117 	ldw	r5,4(r8)
   84690:	00bfff84 	movi	r2,-2
   84694:	02800274 	movhi	r10,9
   84698:	52b4e604 	addi	r10,r10,-11368
   8469c:	288e703a 	and	r7,r5,r2
   846a0:	41cd883a 	add	r6,r8,r7
   846a4:	30c00117 	ldw	r3,4(r6)
   846a8:	51000217 	ldw	r4,8(r10)
   846ac:	00bfff04 	movi	r2,-4
   846b0:	1892703a 	and	r9,r3,r2
   846b4:	5017883a 	mov	r11,r10
   846b8:	31006726 	beq	r6,r4,84858 <_free_r+0x1f0>
   846bc:	2880004c 	andi	r2,r5,1
   846c0:	1005003a 	cmpeq	r2,r2,zero
   846c4:	32400115 	stw	r9,4(r6)
   846c8:	10001a1e 	bne	r2,zero,84734 <_free_r+0xcc>
   846cc:	000b883a 	mov	r5,zero
   846d0:	3247883a 	add	r3,r6,r9
   846d4:	18800117 	ldw	r2,4(r3)
   846d8:	1080004c 	andi	r2,r2,1
   846dc:	1000231e 	bne	r2,zero,8476c <_free_r+0x104>
   846e0:	280ac03a 	cmpne	r5,r5,zero
   846e4:	3a4f883a 	add	r7,r7,r9
   846e8:	2800451e 	bne	r5,zero,84800 <_free_r+0x198>
   846ec:	31000217 	ldw	r4,8(r6)
   846f0:	00800274 	movhi	r2,9
   846f4:	10b4e804 	addi	r2,r2,-11360
   846f8:	20807b26 	beq	r4,r2,848e8 <_free_r+0x280>
   846fc:	30800317 	ldw	r2,12(r6)
   84700:	3a07883a 	add	r3,r7,r8
   84704:	19c00015 	stw	r7,0(r3)
   84708:	11000215 	stw	r4,8(r2)
   8470c:	20800315 	stw	r2,12(r4)
   84710:	38800054 	ori	r2,r7,1
   84714:	40800115 	stw	r2,4(r8)
   84718:	28001a26 	beq	r5,zero,84784 <_free_r+0x11c>
   8471c:	8809883a 	mov	r4,r17
   84720:	dfc00217 	ldw	ra,8(sp)
   84724:	dc400117 	ldw	r17,4(sp)
   84728:	dc000017 	ldw	r16,0(sp)
   8472c:	dec00304 	addi	sp,sp,12
   84730:	008a8ac1 	jmpi	8a8ac <__malloc_unlock>
   84734:	80bffe17 	ldw	r2,-8(r16)
   84738:	50c00204 	addi	r3,r10,8
   8473c:	4091c83a 	sub	r8,r8,r2
   84740:	41000217 	ldw	r4,8(r8)
   84744:	388f883a 	add	r7,r7,r2
   84748:	20c06126 	beq	r4,r3,848d0 <_free_r+0x268>
   8474c:	40800317 	ldw	r2,12(r8)
   84750:	3247883a 	add	r3,r6,r9
   84754:	000b883a 	mov	r5,zero
   84758:	11000215 	stw	r4,8(r2)
   8475c:	20800315 	stw	r2,12(r4)
   84760:	18800117 	ldw	r2,4(r3)
   84764:	1080004c 	andi	r2,r2,1
   84768:	103fdd26 	beq	r2,zero,846e0 <_free_r+0x78>
   8476c:	38800054 	ori	r2,r7,1
   84770:	3a07883a 	add	r3,r7,r8
   84774:	280ac03a 	cmpne	r5,r5,zero
   84778:	40800115 	stw	r2,4(r8)
   8477c:	19c00015 	stw	r7,0(r3)
   84780:	283fe61e 	bne	r5,zero,8471c <_free_r+0xb4>
   84784:	00807fc4 	movi	r2,511
   84788:	11c01f2e 	bgeu	r2,r7,84808 <_free_r+0x1a0>
   8478c:	3806d27a 	srli	r3,r7,9
   84790:	1800481e 	bne	r3,zero,848b4 <_free_r+0x24c>
   84794:	3804d0fa 	srli	r2,r7,3
   84798:	100690fa 	slli	r3,r2,3
   8479c:	1acd883a 	add	r6,r3,r11
   847a0:	31400217 	ldw	r5,8(r6)
   847a4:	31405926 	beq	r6,r5,8490c <_free_r+0x2a4>
   847a8:	28800117 	ldw	r2,4(r5)
   847ac:	00ffff04 	movi	r3,-4
   847b0:	10c4703a 	and	r2,r2,r3
   847b4:	3880022e 	bgeu	r7,r2,847c0 <_free_r+0x158>
   847b8:	29400217 	ldw	r5,8(r5)
   847bc:	317ffa1e 	bne	r6,r5,847a8 <_free_r+0x140>
   847c0:	29800317 	ldw	r6,12(r5)
   847c4:	41800315 	stw	r6,12(r8)
   847c8:	41400215 	stw	r5,8(r8)
   847cc:	8809883a 	mov	r4,r17
   847d0:	2a000315 	stw	r8,12(r5)
   847d4:	32000215 	stw	r8,8(r6)
   847d8:	dfc00217 	ldw	ra,8(sp)
   847dc:	dc400117 	ldw	r17,4(sp)
   847e0:	dc000017 	ldw	r16,0(sp)
   847e4:	dec00304 	addi	sp,sp,12
   847e8:	008a8ac1 	jmpi	8a8ac <__malloc_unlock>
   847ec:	dfc00217 	ldw	ra,8(sp)
   847f0:	dc400117 	ldw	r17,4(sp)
   847f4:	dc000017 	ldw	r16,0(sp)
   847f8:	dec00304 	addi	sp,sp,12
   847fc:	f800283a 	ret
   84800:	31000217 	ldw	r4,8(r6)
   84804:	003fbd06 	br	846fc <_free_r+0x94>
   84808:	3806d0fa 	srli	r3,r7,3
   8480c:	00800044 	movi	r2,1
   84810:	51400117 	ldw	r5,4(r10)
   84814:	180890fa 	slli	r4,r3,3
   84818:	1807d0ba 	srai	r3,r3,2
   8481c:	22c9883a 	add	r4,r4,r11
   84820:	21800217 	ldw	r6,8(r4)
   84824:	10c4983a 	sll	r2,r2,r3
   84828:	41000315 	stw	r4,12(r8)
   8482c:	41800215 	stw	r6,8(r8)
   84830:	288ab03a 	or	r5,r5,r2
   84834:	22000215 	stw	r8,8(r4)
   84838:	8809883a 	mov	r4,r17
   8483c:	51400115 	stw	r5,4(r10)
   84840:	32000315 	stw	r8,12(r6)
   84844:	dfc00217 	ldw	ra,8(sp)
   84848:	dc400117 	ldw	r17,4(sp)
   8484c:	dc000017 	ldw	r16,0(sp)
   84850:	dec00304 	addi	sp,sp,12
   84854:	008a8ac1 	jmpi	8a8ac <__malloc_unlock>
   84858:	2880004c 	andi	r2,r5,1
   8485c:	3a4d883a 	add	r6,r7,r9
   84860:	1000071e 	bne	r2,zero,84880 <_free_r+0x218>
   84864:	80bffe17 	ldw	r2,-8(r16)
   84868:	4091c83a 	sub	r8,r8,r2
   8486c:	41000317 	ldw	r4,12(r8)
   84870:	40c00217 	ldw	r3,8(r8)
   84874:	308d883a 	add	r6,r6,r2
   84878:	20c00215 	stw	r3,8(r4)
   8487c:	19000315 	stw	r4,12(r3)
   84880:	00800274 	movhi	r2,9
   84884:	10ba6e04 	addi	r2,r2,-5704
   84888:	11000017 	ldw	r4,0(r2)
   8488c:	30c00054 	ori	r3,r6,1
   84890:	52000215 	stw	r8,8(r10)
   84894:	40c00115 	stw	r3,4(r8)
   84898:	313fa036 	bltu	r6,r4,8471c <_free_r+0xb4>
   8489c:	00800274 	movhi	r2,9
   848a0:	10811404 	addi	r2,r2,1104
   848a4:	11400017 	ldw	r5,0(r2)
   848a8:	8809883a 	mov	r4,r17
   848ac:	008453c0 	call	8453c <_malloc_trim_r>
   848b0:	003f9a06 	br	8471c <_free_r+0xb4>
   848b4:	00800104 	movi	r2,4
   848b8:	10c0072e 	bgeu	r2,r3,848d8 <_free_r+0x270>
   848bc:	00800504 	movi	r2,20
   848c0:	10c01936 	bltu	r2,r3,84928 <_free_r+0x2c0>
   848c4:	188016c4 	addi	r2,r3,91
   848c8:	100690fa 	slli	r3,r2,3
   848cc:	003fb306 	br	8479c <_free_r+0x134>
   848d0:	01400044 	movi	r5,1
   848d4:	003f7e06 	br	846d0 <_free_r+0x68>
   848d8:	3804d1ba 	srli	r2,r7,6
   848dc:	10800e04 	addi	r2,r2,56
   848e0:	100690fa 	slli	r3,r2,3
   848e4:	003fad06 	br	8479c <_free_r+0x134>
   848e8:	22000315 	stw	r8,12(r4)
   848ec:	22000215 	stw	r8,8(r4)
   848f0:	3a05883a 	add	r2,r7,r8
   848f4:	38c00054 	ori	r3,r7,1
   848f8:	11c00015 	stw	r7,0(r2)
   848fc:	41000215 	stw	r4,8(r8)
   84900:	40c00115 	stw	r3,4(r8)
   84904:	41000315 	stw	r4,12(r8)
   84908:	003f8406 	br	8471c <_free_r+0xb4>
   8490c:	1005d0ba 	srai	r2,r2,2
   84910:	00c00044 	movi	r3,1
   84914:	51000117 	ldw	r4,4(r10)
   84918:	1886983a 	sll	r3,r3,r2
   8491c:	20c8b03a 	or	r4,r4,r3
   84920:	51000115 	stw	r4,4(r10)
   84924:	003fa706 	br	847c4 <_free_r+0x15c>
   84928:	00801504 	movi	r2,84
   8492c:	10c00436 	bltu	r2,r3,84940 <_free_r+0x2d8>
   84930:	3804d33a 	srli	r2,r7,12
   84934:	10801b84 	addi	r2,r2,110
   84938:	100690fa 	slli	r3,r2,3
   8493c:	003f9706 	br	8479c <_free_r+0x134>
   84940:	00805504 	movi	r2,340
   84944:	10c00436 	bltu	r2,r3,84958 <_free_r+0x2f0>
   84948:	3804d3fa 	srli	r2,r7,15
   8494c:	10801dc4 	addi	r2,r2,119
   84950:	100690fa 	slli	r3,r2,3
   84954:	003f9106 	br	8479c <_free_r+0x134>
   84958:	00815504 	movi	r2,1364
   8495c:	10c0032e 	bgeu	r2,r3,8496c <_free_r+0x304>
   84960:	00801f84 	movi	r2,126
   84964:	00c0fc04 	movi	r3,1008
   84968:	003f8c06 	br	8479c <_free_r+0x134>
   8496c:	3804d4ba 	srli	r2,r7,18
   84970:	10801f04 	addi	r2,r2,124
   84974:	100690fa 	slli	r3,r2,3
   84978:	003f8806 	br	8479c <_free_r+0x134>

0008497c <__sfvwrite_r>:
   8497c:	30800217 	ldw	r2,8(r6)
   84980:	defff504 	addi	sp,sp,-44
   84984:	df000915 	stw	fp,36(sp)
   84988:	dd800715 	stw	r22,28(sp)
   8498c:	dc800315 	stw	r18,12(sp)
   84990:	dfc00a15 	stw	ra,40(sp)
   84994:	ddc00815 	stw	r23,32(sp)
   84998:	dd400615 	stw	r21,24(sp)
   8499c:	dd000515 	stw	r20,20(sp)
   849a0:	dcc00415 	stw	r19,16(sp)
   849a4:	dc400215 	stw	r17,8(sp)
   849a8:	dc000115 	stw	r16,4(sp)
   849ac:	302d883a 	mov	r22,r6
   849b0:	2039883a 	mov	fp,r4
   849b4:	2825883a 	mov	r18,r5
   849b8:	10001c26 	beq	r2,zero,84a2c <__sfvwrite_r+0xb0>
   849bc:	29c0030b 	ldhu	r7,12(r5)
   849c0:	3880020c 	andi	r2,r7,8
   849c4:	10002726 	beq	r2,zero,84a64 <__sfvwrite_r+0xe8>
   849c8:	28800417 	ldw	r2,16(r5)
   849cc:	10002526 	beq	r2,zero,84a64 <__sfvwrite_r+0xe8>
   849d0:	3880008c 	andi	r2,r7,2
   849d4:	b5400017 	ldw	r21,0(r22)
   849d8:	10002826 	beq	r2,zero,84a7c <__sfvwrite_r+0x100>
   849dc:	0021883a 	mov	r16,zero
   849e0:	0023883a 	mov	r17,zero
   849e4:	880d883a 	mov	r6,r17
   849e8:	e009883a 	mov	r4,fp
   849ec:	00810004 	movi	r2,1024
   849f0:	80006e26 	beq	r16,zero,84bac <__sfvwrite_r+0x230>
   849f4:	800f883a 	mov	r7,r16
   849f8:	91400717 	ldw	r5,28(r18)
   849fc:	1400012e 	bgeu	r2,r16,84a04 <__sfvwrite_r+0x88>
   84a00:	100f883a 	mov	r7,r2
   84a04:	90c00917 	ldw	r3,36(r18)
   84a08:	183ee83a 	callr	r3
   84a0c:	1007883a 	mov	r3,r2
   84a10:	80a1c83a 	sub	r16,r16,r2
   84a14:	88a3883a 	add	r17,r17,r2
   84a18:	00806d0e 	bge	zero,r2,84bd0 <__sfvwrite_r+0x254>
   84a1c:	b0800217 	ldw	r2,8(r22)
   84a20:	10c5c83a 	sub	r2,r2,r3
   84a24:	b0800215 	stw	r2,8(r22)
   84a28:	103fee1e 	bne	r2,zero,849e4 <__sfvwrite_r+0x68>
   84a2c:	0009883a 	mov	r4,zero
   84a30:	2005883a 	mov	r2,r4
   84a34:	dfc00a17 	ldw	ra,40(sp)
   84a38:	df000917 	ldw	fp,36(sp)
   84a3c:	ddc00817 	ldw	r23,32(sp)
   84a40:	dd800717 	ldw	r22,28(sp)
   84a44:	dd400617 	ldw	r21,24(sp)
   84a48:	dd000517 	ldw	r20,20(sp)
   84a4c:	dcc00417 	ldw	r19,16(sp)
   84a50:	dc800317 	ldw	r18,12(sp)
   84a54:	dc400217 	ldw	r17,8(sp)
   84a58:	dc000117 	ldw	r16,4(sp)
   84a5c:	dec00b04 	addi	sp,sp,44
   84a60:	f800283a 	ret
   84a64:	00826e40 	call	826e4 <__swsetup_r>
   84a68:	1000e41e 	bne	r2,zero,84dfc <__sfvwrite_r+0x480>
   84a6c:	91c0030b 	ldhu	r7,12(r18)
   84a70:	b5400017 	ldw	r21,0(r22)
   84a74:	3880008c 	andi	r2,r7,2
   84a78:	103fd81e 	bne	r2,zero,849dc <__sfvwrite_r+0x60>
   84a7c:	3880004c 	andi	r2,r7,1
   84a80:	1005003a 	cmpeq	r2,r2,zero
   84a84:	10005726 	beq	r2,zero,84be4 <__sfvwrite_r+0x268>
   84a88:	0029883a 	mov	r20,zero
   84a8c:	002f883a 	mov	r23,zero
   84a90:	a0004226 	beq	r20,zero,84b9c <__sfvwrite_r+0x220>
   84a94:	3880800c 	andi	r2,r7,512
   84a98:	94000217 	ldw	r16,8(r18)
   84a9c:	10008b26 	beq	r2,zero,84ccc <__sfvwrite_r+0x350>
   84aa0:	800d883a 	mov	r6,r16
   84aa4:	a400a536 	bltu	r20,r16,84d3c <__sfvwrite_r+0x3c0>
   84aa8:	3881200c 	andi	r2,r7,1152
   84aac:	10002726 	beq	r2,zero,84b4c <__sfvwrite_r+0x1d0>
   84ab0:	90800517 	ldw	r2,20(r18)
   84ab4:	92000417 	ldw	r8,16(r18)
   84ab8:	91400017 	ldw	r5,0(r18)
   84abc:	1087883a 	add	r3,r2,r2
   84ac0:	1887883a 	add	r3,r3,r2
   84ac4:	1808d7fa 	srli	r4,r3,31
   84ac8:	2a21c83a 	sub	r16,r5,r8
   84acc:	80800044 	addi	r2,r16,1
   84ad0:	20c9883a 	add	r4,r4,r3
   84ad4:	2027d07a 	srai	r19,r4,1
   84ad8:	a085883a 	add	r2,r20,r2
   84adc:	980d883a 	mov	r6,r19
   84ae0:	9880022e 	bgeu	r19,r2,84aec <__sfvwrite_r+0x170>
   84ae4:	1027883a 	mov	r19,r2
   84ae8:	100d883a 	mov	r6,r2
   84aec:	3881000c 	andi	r2,r7,1024
   84af0:	1000b826 	beq	r2,zero,84dd4 <__sfvwrite_r+0x458>
   84af4:	300b883a 	mov	r5,r6
   84af8:	e009883a 	mov	r4,fp
   84afc:	00851f00 	call	851f0 <_malloc_r>
   84b00:	10003126 	beq	r2,zero,84bc8 <__sfvwrite_r+0x24c>
   84b04:	91400417 	ldw	r5,16(r18)
   84b08:	1009883a 	mov	r4,r2
   84b0c:	800d883a 	mov	r6,r16
   84b10:	1023883a 	mov	r17,r2
   84b14:	0085a140 	call	85a14 <memcpy>
   84b18:	90c0030b 	ldhu	r3,12(r18)
   84b1c:	00beffc4 	movi	r2,-1025
   84b20:	1886703a 	and	r3,r3,r2
   84b24:	18c02014 	ori	r3,r3,128
   84b28:	90c0030d 	sth	r3,12(r18)
   84b2c:	9c07c83a 	sub	r3,r19,r16
   84b30:	8c05883a 	add	r2,r17,r16
   84b34:	a00d883a 	mov	r6,r20
   84b38:	a021883a 	mov	r16,r20
   84b3c:	90800015 	stw	r2,0(r18)
   84b40:	90c00215 	stw	r3,8(r18)
   84b44:	94400415 	stw	r17,16(r18)
   84b48:	94c00515 	stw	r19,20(r18)
   84b4c:	91000017 	ldw	r4,0(r18)
   84b50:	b80b883a 	mov	r5,r23
   84b54:	a023883a 	mov	r17,r20
   84b58:	0085ab40 	call	85ab4 <memmove>
   84b5c:	90c00217 	ldw	r3,8(r18)
   84b60:	90800017 	ldw	r2,0(r18)
   84b64:	a027883a 	mov	r19,r20
   84b68:	1c07c83a 	sub	r3,r3,r16
   84b6c:	1405883a 	add	r2,r2,r16
   84b70:	90c00215 	stw	r3,8(r18)
   84b74:	a021883a 	mov	r16,r20
   84b78:	90800015 	stw	r2,0(r18)
   84b7c:	b0800217 	ldw	r2,8(r22)
   84b80:	1405c83a 	sub	r2,r2,r16
   84b84:	b0800215 	stw	r2,8(r22)
   84b88:	103fa826 	beq	r2,zero,84a2c <__sfvwrite_r+0xb0>
   84b8c:	a469c83a 	sub	r20,r20,r17
   84b90:	91c0030b 	ldhu	r7,12(r18)
   84b94:	bcef883a 	add	r23,r23,r19
   84b98:	a03fbe1e 	bne	r20,zero,84a94 <__sfvwrite_r+0x118>
   84b9c:	adc00017 	ldw	r23,0(r21)
   84ba0:	ad000117 	ldw	r20,4(r21)
   84ba4:	ad400204 	addi	r21,r21,8
   84ba8:	003fb906 	br	84a90 <__sfvwrite_r+0x114>
   84bac:	ac400017 	ldw	r17,0(r21)
   84bb0:	ac000117 	ldw	r16,4(r21)
   84bb4:	ad400204 	addi	r21,r21,8
   84bb8:	003f8a06 	br	849e4 <__sfvwrite_r+0x68>
   84bbc:	91400417 	ldw	r5,16(r18)
   84bc0:	e009883a 	mov	r4,fp
   84bc4:	00846680 	call	84668 <_free_r>
   84bc8:	00800304 	movi	r2,12
   84bcc:	e0800015 	stw	r2,0(fp)
   84bd0:	9080030b 	ldhu	r2,12(r18)
   84bd4:	013fffc4 	movi	r4,-1
   84bd8:	10801014 	ori	r2,r2,64
   84bdc:	9080030d 	sth	r2,12(r18)
   84be0:	003f9306 	br	84a30 <__sfvwrite_r+0xb4>
   84be4:	0027883a 	mov	r19,zero
   84be8:	002f883a 	mov	r23,zero
   84bec:	d8000015 	stw	zero,0(sp)
   84bf0:	0029883a 	mov	r20,zero
   84bf4:	98001e26 	beq	r19,zero,84c70 <__sfvwrite_r+0x2f4>
   84bf8:	d8c00017 	ldw	r3,0(sp)
   84bfc:	1804c03a 	cmpne	r2,r3,zero
   84c00:	10005e26 	beq	r2,zero,84d7c <__sfvwrite_r+0x400>
   84c04:	9821883a 	mov	r16,r19
   84c08:	a4c0012e 	bgeu	r20,r19,84c10 <__sfvwrite_r+0x294>
   84c0c:	a021883a 	mov	r16,r20
   84c10:	91000017 	ldw	r4,0(r18)
   84c14:	90800417 	ldw	r2,16(r18)
   84c18:	91800217 	ldw	r6,8(r18)
   84c1c:	91c00517 	ldw	r7,20(r18)
   84c20:	1100022e 	bgeu	r2,r4,84c2c <__sfvwrite_r+0x2b0>
   84c24:	31e3883a 	add	r17,r6,r7
   84c28:	8c001616 	blt	r17,r16,84c84 <__sfvwrite_r+0x308>
   84c2c:	81c03816 	blt	r16,r7,84d10 <__sfvwrite_r+0x394>
   84c30:	90c00917 	ldw	r3,36(r18)
   84c34:	91400717 	ldw	r5,28(r18)
   84c38:	e009883a 	mov	r4,fp
   84c3c:	b80d883a 	mov	r6,r23
   84c40:	183ee83a 	callr	r3
   84c44:	1023883a 	mov	r17,r2
   84c48:	00bfe10e 	bge	zero,r2,84bd0 <__sfvwrite_r+0x254>
   84c4c:	a469c83a 	sub	r20,r20,r17
   84c50:	a0001826 	beq	r20,zero,84cb4 <__sfvwrite_r+0x338>
   84c54:	b0800217 	ldw	r2,8(r22)
   84c58:	1445c83a 	sub	r2,r2,r17
   84c5c:	b0800215 	stw	r2,8(r22)
   84c60:	103f7226 	beq	r2,zero,84a2c <__sfvwrite_r+0xb0>
   84c64:	9c67c83a 	sub	r19,r19,r17
   84c68:	bc6f883a 	add	r23,r23,r17
   84c6c:	983fe21e 	bne	r19,zero,84bf8 <__sfvwrite_r+0x27c>
   84c70:	adc00017 	ldw	r23,0(r21)
   84c74:	acc00117 	ldw	r19,4(r21)
   84c78:	ad400204 	addi	r21,r21,8
   84c7c:	d8000015 	stw	zero,0(sp)
   84c80:	003fdc06 	br	84bf4 <__sfvwrite_r+0x278>
   84c84:	b80b883a 	mov	r5,r23
   84c88:	880d883a 	mov	r6,r17
   84c8c:	0085ab40 	call	85ab4 <memmove>
   84c90:	90c00017 	ldw	r3,0(r18)
   84c94:	e009883a 	mov	r4,fp
   84c98:	900b883a 	mov	r5,r18
   84c9c:	1c47883a 	add	r3,r3,r17
   84ca0:	90c00015 	stw	r3,0(r18)
   84ca4:	00840180 	call	84018 <_fflush_r>
   84ca8:	103fc91e 	bne	r2,zero,84bd0 <__sfvwrite_r+0x254>
   84cac:	a469c83a 	sub	r20,r20,r17
   84cb0:	a03fe81e 	bne	r20,zero,84c54 <__sfvwrite_r+0x2d8>
   84cb4:	e009883a 	mov	r4,fp
   84cb8:	900b883a 	mov	r5,r18
   84cbc:	00840180 	call	84018 <_fflush_r>
   84cc0:	103fc31e 	bne	r2,zero,84bd0 <__sfvwrite_r+0x254>
   84cc4:	d8000015 	stw	zero,0(sp)
   84cc8:	003fe206 	br	84c54 <__sfvwrite_r+0x2d8>
   84ccc:	91000017 	ldw	r4,0(r18)
   84cd0:	90800417 	ldw	r2,16(r18)
   84cd4:	1100022e 	bgeu	r2,r4,84ce0 <__sfvwrite_r+0x364>
   84cd8:	8023883a 	mov	r17,r16
   84cdc:	85003136 	bltu	r16,r20,84da4 <__sfvwrite_r+0x428>
   84ce0:	91c00517 	ldw	r7,20(r18)
   84ce4:	a1c01836 	bltu	r20,r7,84d48 <__sfvwrite_r+0x3cc>
   84ce8:	90c00917 	ldw	r3,36(r18)
   84cec:	91400717 	ldw	r5,28(r18)
   84cf0:	e009883a 	mov	r4,fp
   84cf4:	b80d883a 	mov	r6,r23
   84cf8:	183ee83a 	callr	r3
   84cfc:	1021883a 	mov	r16,r2
   84d00:	00bfb30e 	bge	zero,r2,84bd0 <__sfvwrite_r+0x254>
   84d04:	1023883a 	mov	r17,r2
   84d08:	1027883a 	mov	r19,r2
   84d0c:	003f9b06 	br	84b7c <__sfvwrite_r+0x200>
   84d10:	b80b883a 	mov	r5,r23
   84d14:	800d883a 	mov	r6,r16
   84d18:	0085ab40 	call	85ab4 <memmove>
   84d1c:	90c00217 	ldw	r3,8(r18)
   84d20:	90800017 	ldw	r2,0(r18)
   84d24:	8023883a 	mov	r17,r16
   84d28:	1c07c83a 	sub	r3,r3,r16
   84d2c:	1405883a 	add	r2,r2,r16
   84d30:	90c00215 	stw	r3,8(r18)
   84d34:	90800015 	stw	r2,0(r18)
   84d38:	003fc406 	br	84c4c <__sfvwrite_r+0x2d0>
   84d3c:	a00d883a 	mov	r6,r20
   84d40:	a021883a 	mov	r16,r20
   84d44:	003f8106 	br	84b4c <__sfvwrite_r+0x1d0>
   84d48:	b80b883a 	mov	r5,r23
   84d4c:	a00d883a 	mov	r6,r20
   84d50:	0085ab40 	call	85ab4 <memmove>
   84d54:	90c00217 	ldw	r3,8(r18)
   84d58:	90800017 	ldw	r2,0(r18)
   84d5c:	a021883a 	mov	r16,r20
   84d60:	1d07c83a 	sub	r3,r3,r20
   84d64:	1505883a 	add	r2,r2,r20
   84d68:	a023883a 	mov	r17,r20
   84d6c:	a027883a 	mov	r19,r20
   84d70:	90c00215 	stw	r3,8(r18)
   84d74:	90800015 	stw	r2,0(r18)
   84d78:	003f8006 	br	84b7c <__sfvwrite_r+0x200>
   84d7c:	b809883a 	mov	r4,r23
   84d80:	01400284 	movi	r5,10
   84d84:	980d883a 	mov	r6,r19
   84d88:	00859300 	call	85930 <memchr>
   84d8c:	10001726 	beq	r2,zero,84dec <__sfvwrite_r+0x470>
   84d90:	15c5c83a 	sub	r2,r2,r23
   84d94:	15000044 	addi	r20,r2,1
   84d98:	00800044 	movi	r2,1
   84d9c:	d8800015 	stw	r2,0(sp)
   84da0:	003f9806 	br	84c04 <__sfvwrite_r+0x288>
   84da4:	b80b883a 	mov	r5,r23
   84da8:	800d883a 	mov	r6,r16
   84dac:	0085ab40 	call	85ab4 <memmove>
   84db0:	90c00017 	ldw	r3,0(r18)
   84db4:	e009883a 	mov	r4,fp
   84db8:	900b883a 	mov	r5,r18
   84dbc:	1c07883a 	add	r3,r3,r16
   84dc0:	90c00015 	stw	r3,0(r18)
   84dc4:	8027883a 	mov	r19,r16
   84dc8:	00840180 	call	84018 <_fflush_r>
   84dcc:	103f6b26 	beq	r2,zero,84b7c <__sfvwrite_r+0x200>
   84dd0:	003f7f06 	br	84bd0 <__sfvwrite_r+0x254>
   84dd4:	400b883a 	mov	r5,r8
   84dd8:	e009883a 	mov	r4,fp
   84ddc:	0086cb80 	call	86cb8 <_realloc_r>
   84de0:	103f7626 	beq	r2,zero,84bbc <__sfvwrite_r+0x240>
   84de4:	1023883a 	mov	r17,r2
   84de8:	003f5006 	br	84b2c <__sfvwrite_r+0x1b0>
   84dec:	00c00044 	movi	r3,1
   84df0:	9d000044 	addi	r20,r19,1
   84df4:	d8c00015 	stw	r3,0(sp)
   84df8:	003f8206 	br	84c04 <__sfvwrite_r+0x288>
   84dfc:	9080030b 	ldhu	r2,12(r18)
   84e00:	00c00244 	movi	r3,9
   84e04:	013fffc4 	movi	r4,-1
   84e08:	10801014 	ori	r2,r2,64
   84e0c:	9080030d 	sth	r2,12(r18)
   84e10:	e0c00015 	stw	r3,0(fp)
   84e14:	003f0606 	br	84a30 <__sfvwrite_r+0xb4>

00084e18 <_fwalk_reent>:
   84e18:	defff704 	addi	sp,sp,-36
   84e1c:	dcc00315 	stw	r19,12(sp)
   84e20:	24c0b804 	addi	r19,r4,736
   84e24:	dd800615 	stw	r22,24(sp)
   84e28:	dd400515 	stw	r21,20(sp)
   84e2c:	dfc00815 	stw	ra,32(sp)
   84e30:	ddc00715 	stw	r23,28(sp)
   84e34:	dd000415 	stw	r20,16(sp)
   84e38:	dc800215 	stw	r18,8(sp)
   84e3c:	dc400115 	stw	r17,4(sp)
   84e40:	dc000015 	stw	r16,0(sp)
   84e44:	202b883a 	mov	r21,r4
   84e48:	282d883a 	mov	r22,r5
   84e4c:	00842a00 	call	842a0 <__sfp_lock_acquire>
   84e50:	98002126 	beq	r19,zero,84ed8 <_fwalk_reent+0xc0>
   84e54:	002f883a 	mov	r23,zero
   84e58:	9c800117 	ldw	r18,4(r19)
   84e5c:	9c000217 	ldw	r16,8(r19)
   84e60:	90bfffc4 	addi	r2,r18,-1
   84e64:	10000d16 	blt	r2,zero,84e9c <_fwalk_reent+0x84>
   84e68:	0023883a 	mov	r17,zero
   84e6c:	053fffc4 	movi	r20,-1
   84e70:	8080030f 	ldh	r2,12(r16)
   84e74:	8c400044 	addi	r17,r17,1
   84e78:	10000626 	beq	r2,zero,84e94 <_fwalk_reent+0x7c>
   84e7c:	8080038f 	ldh	r2,14(r16)
   84e80:	800b883a 	mov	r5,r16
   84e84:	a809883a 	mov	r4,r21
   84e88:	15000226 	beq	r2,r20,84e94 <_fwalk_reent+0x7c>
   84e8c:	b03ee83a 	callr	r22
   84e90:	b8aeb03a 	or	r23,r23,r2
   84e94:	84001704 	addi	r16,r16,92
   84e98:	947ff51e 	bne	r18,r17,84e70 <_fwalk_reent+0x58>
   84e9c:	9cc00017 	ldw	r19,0(r19)
   84ea0:	983fed1e 	bne	r19,zero,84e58 <_fwalk_reent+0x40>
   84ea4:	00842a40 	call	842a4 <__sfp_lock_release>
   84ea8:	b805883a 	mov	r2,r23
   84eac:	dfc00817 	ldw	ra,32(sp)
   84eb0:	ddc00717 	ldw	r23,28(sp)
   84eb4:	dd800617 	ldw	r22,24(sp)
   84eb8:	dd400517 	ldw	r21,20(sp)
   84ebc:	dd000417 	ldw	r20,16(sp)
   84ec0:	dcc00317 	ldw	r19,12(sp)
   84ec4:	dc800217 	ldw	r18,8(sp)
   84ec8:	dc400117 	ldw	r17,4(sp)
   84ecc:	dc000017 	ldw	r16,0(sp)
   84ed0:	dec00904 	addi	sp,sp,36
   84ed4:	f800283a 	ret
   84ed8:	002f883a 	mov	r23,zero
   84edc:	003ff106 	br	84ea4 <_fwalk_reent+0x8c>

00084ee0 <_fwalk>:
   84ee0:	defff804 	addi	sp,sp,-32
   84ee4:	dcc00315 	stw	r19,12(sp)
   84ee8:	24c0b804 	addi	r19,r4,736
   84eec:	dd400515 	stw	r21,20(sp)
   84ef0:	dfc00715 	stw	ra,28(sp)
   84ef4:	dd800615 	stw	r22,24(sp)
   84ef8:	dd000415 	stw	r20,16(sp)
   84efc:	dc800215 	stw	r18,8(sp)
   84f00:	dc400115 	stw	r17,4(sp)
   84f04:	dc000015 	stw	r16,0(sp)
   84f08:	282b883a 	mov	r21,r5
   84f0c:	00842a00 	call	842a0 <__sfp_lock_acquire>
   84f10:	98001f26 	beq	r19,zero,84f90 <_fwalk+0xb0>
   84f14:	002d883a 	mov	r22,zero
   84f18:	9c800117 	ldw	r18,4(r19)
   84f1c:	9c000217 	ldw	r16,8(r19)
   84f20:	90bfffc4 	addi	r2,r18,-1
   84f24:	10000c16 	blt	r2,zero,84f58 <_fwalk+0x78>
   84f28:	0023883a 	mov	r17,zero
   84f2c:	053fffc4 	movi	r20,-1
   84f30:	8080030f 	ldh	r2,12(r16)
   84f34:	8c400044 	addi	r17,r17,1
   84f38:	10000526 	beq	r2,zero,84f50 <_fwalk+0x70>
   84f3c:	8080038f 	ldh	r2,14(r16)
   84f40:	8009883a 	mov	r4,r16
   84f44:	15000226 	beq	r2,r20,84f50 <_fwalk+0x70>
   84f48:	a83ee83a 	callr	r21
   84f4c:	b0acb03a 	or	r22,r22,r2
   84f50:	84001704 	addi	r16,r16,92
   84f54:	947ff61e 	bne	r18,r17,84f30 <_fwalk+0x50>
   84f58:	9cc00017 	ldw	r19,0(r19)
   84f5c:	983fee1e 	bne	r19,zero,84f18 <_fwalk+0x38>
   84f60:	00842a40 	call	842a4 <__sfp_lock_release>
   84f64:	b005883a 	mov	r2,r22
   84f68:	dfc00717 	ldw	ra,28(sp)
   84f6c:	dd800617 	ldw	r22,24(sp)
   84f70:	dd400517 	ldw	r21,20(sp)
   84f74:	dd000417 	ldw	r20,16(sp)
   84f78:	dcc00317 	ldw	r19,12(sp)
   84f7c:	dc800217 	ldw	r18,8(sp)
   84f80:	dc400117 	ldw	r17,4(sp)
   84f84:	dc000017 	ldw	r16,0(sp)
   84f88:	dec00804 	addi	sp,sp,32
   84f8c:	f800283a 	ret
   84f90:	002d883a 	mov	r22,zero
   84f94:	003ff206 	br	84f60 <_fwalk+0x80>

00084f98 <__locale_charset>:
   84f98:	d0a00317 	ldw	r2,-32756(gp)
   84f9c:	f800283a 	ret

00084fa0 <_localeconv_r>:
   84fa0:	00800274 	movhi	r2,9
   84fa4:	10b33c04 	addi	r2,r2,-13072
   84fa8:	f800283a 	ret

00084fac <localeconv>:
   84fac:	00800274 	movhi	r2,9
   84fb0:	10ba6a04 	addi	r2,r2,-5720
   84fb4:	11000017 	ldw	r4,0(r2)
   84fb8:	0084fa01 	jmpi	84fa0 <_localeconv_r>

00084fbc <_setlocale_r>:
   84fbc:	defffc04 	addi	sp,sp,-16
   84fc0:	00c00274 	movhi	r3,9
   84fc4:	18f33704 	addi	r3,r3,-13092
   84fc8:	dc800215 	stw	r18,8(sp)
   84fcc:	dc400115 	stw	r17,4(sp)
   84fd0:	dc000015 	stw	r16,0(sp)
   84fd4:	2023883a 	mov	r17,r4
   84fd8:	2825883a 	mov	r18,r5
   84fdc:	dfc00315 	stw	ra,12(sp)
   84fe0:	3021883a 	mov	r16,r6
   84fe4:	3009883a 	mov	r4,r6
   84fe8:	180b883a 	mov	r5,r3
   84fec:	30000926 	beq	r6,zero,85014 <_setlocale_r+0x58>
   84ff0:	00874d80 	call	874d8 <strcmp>
   84ff4:	8009883a 	mov	r4,r16
   84ff8:	01400274 	movhi	r5,9
   84ffc:	29732204 	addi	r5,r5,-13176
   85000:	10000b1e 	bne	r2,zero,85030 <_setlocale_r+0x74>
   85004:	8c000d15 	stw	r16,52(r17)
   85008:	8c800c15 	stw	r18,48(r17)
   8500c:	00c00274 	movhi	r3,9
   85010:	18f33704 	addi	r3,r3,-13092
   85014:	1805883a 	mov	r2,r3
   85018:	dfc00317 	ldw	ra,12(sp)
   8501c:	dc800217 	ldw	r18,8(sp)
   85020:	dc400117 	ldw	r17,4(sp)
   85024:	dc000017 	ldw	r16,0(sp)
   85028:	dec00404 	addi	sp,sp,16
   8502c:	f800283a 	ret
   85030:	00874d80 	call	874d8 <strcmp>
   85034:	0007883a 	mov	r3,zero
   85038:	103ff226 	beq	r2,zero,85004 <_setlocale_r+0x48>
   8503c:	003ff506 	br	85014 <_setlocale_r+0x58>

00085040 <setlocale>:
   85040:	01800274 	movhi	r6,9
   85044:	31ba6a04 	addi	r6,r6,-5720
   85048:	2007883a 	mov	r3,r4
   8504c:	31000017 	ldw	r4,0(r6)
   85050:	280d883a 	mov	r6,r5
   85054:	180b883a 	mov	r5,r3
   85058:	0084fbc1 	jmpi	84fbc <_setlocale_r>

0008505c <__smakebuf_r>:
   8505c:	2880030b 	ldhu	r2,12(r5)
   85060:	deffed04 	addi	sp,sp,-76
   85064:	dc401015 	stw	r17,64(sp)
   85068:	1080008c 	andi	r2,r2,2
   8506c:	dc000f15 	stw	r16,60(sp)
   85070:	dfc01215 	stw	ra,72(sp)
   85074:	dc801115 	stw	r18,68(sp)
   85078:	2821883a 	mov	r16,r5
   8507c:	2023883a 	mov	r17,r4
   85080:	10000b26 	beq	r2,zero,850b0 <__smakebuf_r+0x54>
   85084:	28c010c4 	addi	r3,r5,67
   85088:	00800044 	movi	r2,1
   8508c:	28800515 	stw	r2,20(r5)
   85090:	28c00415 	stw	r3,16(r5)
   85094:	28c00015 	stw	r3,0(r5)
   85098:	dfc01217 	ldw	ra,72(sp)
   8509c:	dc801117 	ldw	r18,68(sp)
   850a0:	dc401017 	ldw	r17,64(sp)
   850a4:	dc000f17 	ldw	r16,60(sp)
   850a8:	dec01304 	addi	sp,sp,76
   850ac:	f800283a 	ret
   850b0:	2940038f 	ldh	r5,14(r5)
   850b4:	28002116 	blt	r5,zero,8513c <__smakebuf_r+0xe0>
   850b8:	d80d883a 	mov	r6,sp
   850bc:	00878680 	call	87868 <_fstat_r>
   850c0:	10001e16 	blt	r2,zero,8513c <__smakebuf_r+0xe0>
   850c4:	d8800117 	ldw	r2,4(sp)
   850c8:	00e00014 	movui	r3,32768
   850cc:	113c000c 	andi	r4,r2,61440
   850d0:	20c03126 	beq	r4,r3,85198 <__smakebuf_r+0x13c>
   850d4:	8080030b 	ldhu	r2,12(r16)
   850d8:	00c80004 	movi	r3,8192
   850dc:	10820014 	ori	r2,r2,2048
   850e0:	8080030d 	sth	r2,12(r16)
   850e4:	20c01e26 	beq	r4,r3,85160 <__smakebuf_r+0x104>
   850e8:	04810004 	movi	r18,1024
   850ec:	8809883a 	mov	r4,r17
   850f0:	900b883a 	mov	r5,r18
   850f4:	00851f00 	call	851f0 <_malloc_r>
   850f8:	1009883a 	mov	r4,r2
   850fc:	10003126 	beq	r2,zero,851c4 <__smakebuf_r+0x168>
   85100:	80c0030b 	ldhu	r3,12(r16)
   85104:	00800234 	movhi	r2,8
   85108:	1090e504 	addi	r2,r2,17300
   8510c:	88800f15 	stw	r2,60(r17)
   85110:	18c02014 	ori	r3,r3,128
   85114:	84800515 	stw	r18,20(r16)
   85118:	80c0030d 	sth	r3,12(r16)
   8511c:	81000415 	stw	r4,16(r16)
   85120:	81000015 	stw	r4,0(r16)
   85124:	dfc01217 	ldw	ra,72(sp)
   85128:	dc801117 	ldw	r18,68(sp)
   8512c:	dc401017 	ldw	r17,64(sp)
   85130:	dc000f17 	ldw	r16,60(sp)
   85134:	dec01304 	addi	sp,sp,76
   85138:	f800283a 	ret
   8513c:	80c0030b 	ldhu	r3,12(r16)
   85140:	1880200c 	andi	r2,r3,128
   85144:	10000426 	beq	r2,zero,85158 <__smakebuf_r+0xfc>
   85148:	04801004 	movi	r18,64
   8514c:	18820014 	ori	r2,r3,2048
   85150:	8080030d 	sth	r2,12(r16)
   85154:	003fe506 	br	850ec <__smakebuf_r+0x90>
   85158:	04810004 	movi	r18,1024
   8515c:	003ffb06 	br	8514c <__smakebuf_r+0xf0>
   85160:	8140038f 	ldh	r5,14(r16)
   85164:	8809883a 	mov	r4,r17
   85168:	00878dc0 	call	878dc <_isatty_r>
   8516c:	103fde26 	beq	r2,zero,850e8 <__smakebuf_r+0x8c>
   85170:	8080030b 	ldhu	r2,12(r16)
   85174:	80c010c4 	addi	r3,r16,67
   85178:	04810004 	movi	r18,1024
   8517c:	10800054 	ori	r2,r2,1
   85180:	8080030d 	sth	r2,12(r16)
   85184:	00800044 	movi	r2,1
   85188:	80c00415 	stw	r3,16(r16)
   8518c:	80800515 	stw	r2,20(r16)
   85190:	80c00015 	stw	r3,0(r16)
   85194:	003fd506 	br	850ec <__smakebuf_r+0x90>
   85198:	80c00a17 	ldw	r3,40(r16)
   8519c:	00800234 	movhi	r2,8
   851a0:	109ce504 	addi	r2,r2,29588
   851a4:	18bfcb1e 	bne	r3,r2,850d4 <__smakebuf_r+0x78>
   851a8:	8080030b 	ldhu	r2,12(r16)
   851ac:	00c10004 	movi	r3,1024
   851b0:	1825883a 	mov	r18,r3
   851b4:	10c4b03a 	or	r2,r2,r3
   851b8:	8080030d 	sth	r2,12(r16)
   851bc:	80c01315 	stw	r3,76(r16)
   851c0:	003fca06 	br	850ec <__smakebuf_r+0x90>
   851c4:	8100030b 	ldhu	r4,12(r16)
   851c8:	2080800c 	andi	r2,r4,512
   851cc:	103fb21e 	bne	r2,zero,85098 <__smakebuf_r+0x3c>
   851d0:	80c010c4 	addi	r3,r16,67
   851d4:	21000094 	ori	r4,r4,2
   851d8:	00800044 	movi	r2,1
   851dc:	80800515 	stw	r2,20(r16)
   851e0:	8100030d 	sth	r4,12(r16)
   851e4:	80c00415 	stw	r3,16(r16)
   851e8:	80c00015 	stw	r3,0(r16)
   851ec:	003faa06 	br	85098 <__smakebuf_r+0x3c>

000851f0 <_malloc_r>:
   851f0:	defff604 	addi	sp,sp,-40
   851f4:	28c002c4 	addi	r3,r5,11
   851f8:	00800584 	movi	r2,22
   851fc:	dc800215 	stw	r18,8(sp)
   85200:	dfc00915 	stw	ra,36(sp)
   85204:	df000815 	stw	fp,32(sp)
   85208:	ddc00715 	stw	r23,28(sp)
   8520c:	dd800615 	stw	r22,24(sp)
   85210:	dd400515 	stw	r21,20(sp)
   85214:	dd000415 	stw	r20,16(sp)
   85218:	dcc00315 	stw	r19,12(sp)
   8521c:	dc400115 	stw	r17,4(sp)
   85220:	dc000015 	stw	r16,0(sp)
   85224:	2025883a 	mov	r18,r4
   85228:	10c01236 	bltu	r2,r3,85274 <_malloc_r+0x84>
   8522c:	04400404 	movi	r17,16
   85230:	8940142e 	bgeu	r17,r5,85284 <_malloc_r+0x94>
   85234:	00800304 	movi	r2,12
   85238:	0007883a 	mov	r3,zero
   8523c:	90800015 	stw	r2,0(r18)
   85240:	1805883a 	mov	r2,r3
   85244:	dfc00917 	ldw	ra,36(sp)
   85248:	df000817 	ldw	fp,32(sp)
   8524c:	ddc00717 	ldw	r23,28(sp)
   85250:	dd800617 	ldw	r22,24(sp)
   85254:	dd400517 	ldw	r21,20(sp)
   85258:	dd000417 	ldw	r20,16(sp)
   8525c:	dcc00317 	ldw	r19,12(sp)
   85260:	dc800217 	ldw	r18,8(sp)
   85264:	dc400117 	ldw	r17,4(sp)
   85268:	dc000017 	ldw	r16,0(sp)
   8526c:	dec00a04 	addi	sp,sp,40
   85270:	f800283a 	ret
   85274:	00bffe04 	movi	r2,-8
   85278:	18a2703a 	and	r17,r3,r2
   8527c:	883fed16 	blt	r17,zero,85234 <_malloc_r+0x44>
   85280:	897fec36 	bltu	r17,r5,85234 <_malloc_r+0x44>
   85284:	9009883a 	mov	r4,r18
   85288:	008a88c0 	call	8a88c <__malloc_lock>
   8528c:	00807dc4 	movi	r2,503
   85290:	14402b2e 	bgeu	r2,r17,85340 <_malloc_r+0x150>
   85294:	8806d27a 	srli	r3,r17,9
   85298:	18003f1e 	bne	r3,zero,85398 <_malloc_r+0x1a8>
   8529c:	880cd0fa 	srli	r6,r17,3
   852a0:	300490fa 	slli	r2,r6,3
   852a4:	02c00274 	movhi	r11,9
   852a8:	5af4e604 	addi	r11,r11,-11368
   852ac:	12cb883a 	add	r5,r2,r11
   852b0:	2c000317 	ldw	r16,12(r5)
   852b4:	580f883a 	mov	r7,r11
   852b8:	2c00041e 	bne	r5,r16,852cc <_malloc_r+0xdc>
   852bc:	00000a06 	br	852e8 <_malloc_r+0xf8>
   852c0:	1800860e 	bge	r3,zero,854dc <_malloc_r+0x2ec>
   852c4:	84000317 	ldw	r16,12(r16)
   852c8:	2c000726 	beq	r5,r16,852e8 <_malloc_r+0xf8>
   852cc:	80800117 	ldw	r2,4(r16)
   852d0:	00ffff04 	movi	r3,-4
   852d4:	10c8703a 	and	r4,r2,r3
   852d8:	2447c83a 	sub	r3,r4,r17
   852dc:	008003c4 	movi	r2,15
   852e0:	10fff70e 	bge	r2,r3,852c0 <_malloc_r+0xd0>
   852e4:	31bfffc4 	addi	r6,r6,-1
   852e8:	32400044 	addi	r9,r6,1
   852ec:	02800274 	movhi	r10,9
   852f0:	52b4e804 	addi	r10,r10,-11360
   852f4:	54000217 	ldw	r16,8(r10)
   852f8:	8280a026 	beq	r16,r10,8557c <_malloc_r+0x38c>
   852fc:	80800117 	ldw	r2,4(r16)
   85300:	00ffff04 	movi	r3,-4
   85304:	10ca703a 	and	r5,r2,r3
   85308:	2c4dc83a 	sub	r6,r5,r17
   8530c:	008003c4 	movi	r2,15
   85310:	11808316 	blt	r2,r6,85520 <_malloc_r+0x330>
   85314:	52800315 	stw	r10,12(r10)
   85318:	52800215 	stw	r10,8(r10)
   8531c:	30002916 	blt	r6,zero,853c4 <_malloc_r+0x1d4>
   85320:	8147883a 	add	r3,r16,r5
   85324:	18800117 	ldw	r2,4(r3)
   85328:	9009883a 	mov	r4,r18
   8532c:	10800054 	ori	r2,r2,1
   85330:	18800115 	stw	r2,4(r3)
   85334:	008a8ac0 	call	8a8ac <__malloc_unlock>
   85338:	80c00204 	addi	r3,r16,8
   8533c:	003fc006 	br	85240 <_malloc_r+0x50>
   85340:	02c00274 	movhi	r11,9
   85344:	5af4e604 	addi	r11,r11,-11368
   85348:	8ac5883a 	add	r2,r17,r11
   8534c:	14000317 	ldw	r16,12(r2)
   85350:	580f883a 	mov	r7,r11
   85354:	8806d0fa 	srli	r3,r17,3
   85358:	14006c26 	beq	r2,r16,8550c <_malloc_r+0x31c>
   8535c:	80c00117 	ldw	r3,4(r16)
   85360:	00bfff04 	movi	r2,-4
   85364:	81800317 	ldw	r6,12(r16)
   85368:	1886703a 	and	r3,r3,r2
   8536c:	80c7883a 	add	r3,r16,r3
   85370:	18800117 	ldw	r2,4(r3)
   85374:	81400217 	ldw	r5,8(r16)
   85378:	9009883a 	mov	r4,r18
   8537c:	10800054 	ori	r2,r2,1
   85380:	18800115 	stw	r2,4(r3)
   85384:	31400215 	stw	r5,8(r6)
   85388:	29800315 	stw	r6,12(r5)
   8538c:	008a8ac0 	call	8a8ac <__malloc_unlock>
   85390:	80c00204 	addi	r3,r16,8
   85394:	003faa06 	br	85240 <_malloc_r+0x50>
   85398:	00800104 	movi	r2,4
   8539c:	10c0052e 	bgeu	r2,r3,853b4 <_malloc_r+0x1c4>
   853a0:	00800504 	movi	r2,20
   853a4:	10c07836 	bltu	r2,r3,85588 <_malloc_r+0x398>
   853a8:	198016c4 	addi	r6,r3,91
   853ac:	300490fa 	slli	r2,r6,3
   853b0:	003fbc06 	br	852a4 <_malloc_r+0xb4>
   853b4:	8804d1ba 	srli	r2,r17,6
   853b8:	11800e04 	addi	r6,r2,56
   853bc:	300490fa 	slli	r2,r6,3
   853c0:	003fb806 	br	852a4 <_malloc_r+0xb4>
   853c4:	00807fc4 	movi	r2,511
   853c8:	1140bb36 	bltu	r2,r5,856b8 <_malloc_r+0x4c8>
   853cc:	2806d0fa 	srli	r3,r5,3
   853d0:	573ffe04 	addi	fp,r10,-8
   853d4:	00800044 	movi	r2,1
   853d8:	180890fa 	slli	r4,r3,3
   853dc:	1807d0ba 	srai	r3,r3,2
   853e0:	e1c00117 	ldw	r7,4(fp)
   853e4:	5909883a 	add	r4,r11,r4
   853e8:	21400217 	ldw	r5,8(r4)
   853ec:	10c4983a 	sll	r2,r2,r3
   853f0:	81000315 	stw	r4,12(r16)
   853f4:	81400215 	stw	r5,8(r16)
   853f8:	388eb03a 	or	r7,r7,r2
   853fc:	2c000315 	stw	r16,12(r5)
   85400:	24000215 	stw	r16,8(r4)
   85404:	e1c00115 	stw	r7,4(fp)
   85408:	4807883a 	mov	r3,r9
   8540c:	4800cd16 	blt	r9,zero,85744 <_malloc_r+0x554>
   85410:	1807d0ba 	srai	r3,r3,2
   85414:	00800044 	movi	r2,1
   85418:	10c8983a 	sll	r4,r2,r3
   8541c:	39004436 	bltu	r7,r4,85530 <_malloc_r+0x340>
   85420:	21c4703a 	and	r2,r4,r7
   85424:	10000a1e 	bne	r2,zero,85450 <_malloc_r+0x260>
   85428:	2109883a 	add	r4,r4,r4
   8542c:	00bfff04 	movi	r2,-4
   85430:	4884703a 	and	r2,r9,r2
   85434:	3906703a 	and	r3,r7,r4
   85438:	12400104 	addi	r9,r2,4
   8543c:	1800041e 	bne	r3,zero,85450 <_malloc_r+0x260>
   85440:	2109883a 	add	r4,r4,r4
   85444:	3904703a 	and	r2,r7,r4
   85448:	4a400104 	addi	r9,r9,4
   8544c:	103ffc26 	beq	r2,zero,85440 <_malloc_r+0x250>
   85450:	480490fa 	slli	r2,r9,3
   85454:	4819883a 	mov	r12,r9
   85458:	023fff04 	movi	r8,-4
   8545c:	589b883a 	add	r13,r11,r2
   85460:	6807883a 	mov	r3,r13
   85464:	014003c4 	movi	r5,15
   85468:	1c000317 	ldw	r16,12(r3)
   8546c:	1c00041e 	bne	r3,r16,85480 <_malloc_r+0x290>
   85470:	0000a706 	br	85710 <_malloc_r+0x520>
   85474:	3000ab0e 	bge	r6,zero,85724 <_malloc_r+0x534>
   85478:	84000317 	ldw	r16,12(r16)
   8547c:	1c00a426 	beq	r3,r16,85710 <_malloc_r+0x520>
   85480:	80800117 	ldw	r2,4(r16)
   85484:	1204703a 	and	r2,r2,r8
   85488:	144dc83a 	sub	r6,r2,r17
   8548c:	29bff90e 	bge	r5,r6,85474 <_malloc_r+0x284>
   85490:	81000317 	ldw	r4,12(r16)
   85494:	80c00217 	ldw	r3,8(r16)
   85498:	89400054 	ori	r5,r17,1
   8549c:	8445883a 	add	r2,r16,r17
   854a0:	20c00215 	stw	r3,8(r4)
   854a4:	19000315 	stw	r4,12(r3)
   854a8:	81400115 	stw	r5,4(r16)
   854ac:	1187883a 	add	r3,r2,r6
   854b0:	31000054 	ori	r4,r6,1
   854b4:	50800315 	stw	r2,12(r10)
   854b8:	50800215 	stw	r2,8(r10)
   854bc:	19800015 	stw	r6,0(r3)
   854c0:	11000115 	stw	r4,4(r2)
   854c4:	12800215 	stw	r10,8(r2)
   854c8:	12800315 	stw	r10,12(r2)
   854cc:	9009883a 	mov	r4,r18
   854d0:	008a8ac0 	call	8a8ac <__malloc_unlock>
   854d4:	80c00204 	addi	r3,r16,8
   854d8:	003f5906 	br	85240 <_malloc_r+0x50>
   854dc:	8109883a 	add	r4,r16,r4
   854e0:	20800117 	ldw	r2,4(r4)
   854e4:	80c00217 	ldw	r3,8(r16)
   854e8:	81400317 	ldw	r5,12(r16)
   854ec:	10800054 	ori	r2,r2,1
   854f0:	20800115 	stw	r2,4(r4)
   854f4:	28c00215 	stw	r3,8(r5)
   854f8:	19400315 	stw	r5,12(r3)
   854fc:	9009883a 	mov	r4,r18
   85500:	008a8ac0 	call	8a8ac <__malloc_unlock>
   85504:	80c00204 	addi	r3,r16,8
   85508:	003f4d06 	br	85240 <_malloc_r+0x50>
   8550c:	80800204 	addi	r2,r16,8
   85510:	14000317 	ldw	r16,12(r2)
   85514:	143f911e 	bne	r2,r16,8535c <_malloc_r+0x16c>
   85518:	1a400084 	addi	r9,r3,2
   8551c:	003f7306 	br	852ec <_malloc_r+0xfc>
   85520:	88c00054 	ori	r3,r17,1
   85524:	8445883a 	add	r2,r16,r17
   85528:	80c00115 	stw	r3,4(r16)
   8552c:	003fdf06 	br	854ac <_malloc_r+0x2bc>
   85530:	e4000217 	ldw	r16,8(fp)
   85534:	00bfff04 	movi	r2,-4
   85538:	80c00117 	ldw	r3,4(r16)
   8553c:	802d883a 	mov	r22,r16
   85540:	18aa703a 	and	r21,r3,r2
   85544:	ac401636 	bltu	r21,r17,855a0 <_malloc_r+0x3b0>
   85548:	ac49c83a 	sub	r4,r21,r17
   8554c:	008003c4 	movi	r2,15
   85550:	1100130e 	bge	r2,r4,855a0 <_malloc_r+0x3b0>
   85554:	88800054 	ori	r2,r17,1
   85558:	8447883a 	add	r3,r16,r17
   8555c:	80800115 	stw	r2,4(r16)
   85560:	20800054 	ori	r2,r4,1
   85564:	18800115 	stw	r2,4(r3)
   85568:	e0c00215 	stw	r3,8(fp)
   8556c:	9009883a 	mov	r4,r18
   85570:	008a8ac0 	call	8a8ac <__malloc_unlock>
   85574:	80c00204 	addi	r3,r16,8
   85578:	003f3106 	br	85240 <_malloc_r+0x50>
   8557c:	39c00117 	ldw	r7,4(r7)
   85580:	573ffe04 	addi	fp,r10,-8
   85584:	003fa006 	br	85408 <_malloc_r+0x218>
   85588:	00801504 	movi	r2,84
   8558c:	10c06736 	bltu	r2,r3,8572c <_malloc_r+0x53c>
   85590:	8804d33a 	srli	r2,r17,12
   85594:	11801b84 	addi	r6,r2,110
   85598:	300490fa 	slli	r2,r6,3
   8559c:	003f4106 	br	852a4 <_malloc_r+0xb4>
   855a0:	d0a6aa17 	ldw	r2,-25944(gp)
   855a4:	d0e00517 	ldw	r3,-32748(gp)
   855a8:	053fffc4 	movi	r20,-1
   855ac:	10800404 	addi	r2,r2,16
   855b0:	88a7883a 	add	r19,r17,r2
   855b4:	1d000326 	beq	r3,r20,855c4 <_malloc_r+0x3d4>
   855b8:	98c3ffc4 	addi	r3,r19,4095
   855bc:	00bc0004 	movi	r2,-4096
   855c0:	18a6703a 	and	r19,r3,r2
   855c4:	9009883a 	mov	r4,r18
   855c8:	980b883a 	mov	r5,r19
   855cc:	008731c0 	call	8731c <_sbrk_r>
   855d0:	1009883a 	mov	r4,r2
   855d4:	15000426 	beq	r2,r20,855e8 <_malloc_r+0x3f8>
   855d8:	854b883a 	add	r5,r16,r21
   855dc:	1029883a 	mov	r20,r2
   855e0:	11405a2e 	bgeu	r2,r5,8574c <_malloc_r+0x55c>
   855e4:	87000c26 	beq	r16,fp,85618 <_malloc_r+0x428>
   855e8:	e4000217 	ldw	r16,8(fp)
   855ec:	80c00117 	ldw	r3,4(r16)
   855f0:	00bfff04 	movi	r2,-4
   855f4:	1884703a 	and	r2,r3,r2
   855f8:	14400336 	bltu	r2,r17,85608 <_malloc_r+0x418>
   855fc:	1449c83a 	sub	r4,r2,r17
   85600:	008003c4 	movi	r2,15
   85604:	113fd316 	blt	r2,r4,85554 <_malloc_r+0x364>
   85608:	9009883a 	mov	r4,r18
   8560c:	008a8ac0 	call	8a8ac <__malloc_unlock>
   85610:	0007883a 	mov	r3,zero
   85614:	003f0a06 	br	85240 <_malloc_r+0x50>
   85618:	05c00274 	movhi	r23,9
   8561c:	bdc11e04 	addi	r23,r23,1144
   85620:	b8800017 	ldw	r2,0(r23)
   85624:	988d883a 	add	r6,r19,r2
   85628:	b9800015 	stw	r6,0(r23)
   8562c:	d0e00517 	ldw	r3,-32748(gp)
   85630:	00bfffc4 	movi	r2,-1
   85634:	18808e26 	beq	r3,r2,85870 <_malloc_r+0x680>
   85638:	2145c83a 	sub	r2,r4,r5
   8563c:	3085883a 	add	r2,r6,r2
   85640:	b8800015 	stw	r2,0(r23)
   85644:	20c001cc 	andi	r3,r4,7
   85648:	18005f1e 	bne	r3,zero,857c8 <_malloc_r+0x5d8>
   8564c:	000b883a 	mov	r5,zero
   85650:	a4c5883a 	add	r2,r20,r19
   85654:	1083ffcc 	andi	r2,r2,4095
   85658:	00c40004 	movi	r3,4096
   8565c:	1887c83a 	sub	r3,r3,r2
   85660:	28e7883a 	add	r19,r5,r3
   85664:	9009883a 	mov	r4,r18
   85668:	980b883a 	mov	r5,r19
   8566c:	008731c0 	call	8731c <_sbrk_r>
   85670:	1007883a 	mov	r3,r2
   85674:	00bfffc4 	movi	r2,-1
   85678:	18807a26 	beq	r3,r2,85864 <_malloc_r+0x674>
   8567c:	1d05c83a 	sub	r2,r3,r20
   85680:	9885883a 	add	r2,r19,r2
   85684:	10c00054 	ori	r3,r2,1
   85688:	b8800017 	ldw	r2,0(r23)
   8568c:	a021883a 	mov	r16,r20
   85690:	a0c00115 	stw	r3,4(r20)
   85694:	9885883a 	add	r2,r19,r2
   85698:	b8800015 	stw	r2,0(r23)
   8569c:	e5000215 	stw	r20,8(fp)
   856a0:	b7003626 	beq	r22,fp,8577c <_malloc_r+0x58c>
   856a4:	018003c4 	movi	r6,15
   856a8:	35404b36 	bltu	r6,r21,857d8 <_malloc_r+0x5e8>
   856ac:	00800044 	movi	r2,1
   856b0:	a0800115 	stw	r2,4(r20)
   856b4:	003fcd06 	br	855ec <_malloc_r+0x3fc>
   856b8:	2808d27a 	srli	r4,r5,9
   856bc:	2000371e 	bne	r4,zero,8579c <_malloc_r+0x5ac>
   856c0:	2808d0fa 	srli	r4,r5,3
   856c4:	200690fa 	slli	r3,r4,3
   856c8:	1ad1883a 	add	r8,r3,r11
   856cc:	41800217 	ldw	r6,8(r8)
   856d0:	41805b26 	beq	r8,r6,85840 <_malloc_r+0x650>
   856d4:	30800117 	ldw	r2,4(r6)
   856d8:	00ffff04 	movi	r3,-4
   856dc:	10c4703a 	and	r2,r2,r3
   856e0:	2880022e 	bgeu	r5,r2,856ec <_malloc_r+0x4fc>
   856e4:	31800217 	ldw	r6,8(r6)
   856e8:	41bffa1e 	bne	r8,r6,856d4 <_malloc_r+0x4e4>
   856ec:	32000317 	ldw	r8,12(r6)
   856f0:	39c00117 	ldw	r7,4(r7)
   856f4:	82000315 	stw	r8,12(r16)
   856f8:	81800215 	stw	r6,8(r16)
   856fc:	07000274 	movhi	fp,9
   85700:	e734e604 	addi	fp,fp,-11368
   85704:	34000315 	stw	r16,12(r6)
   85708:	44000215 	stw	r16,8(r8)
   8570c:	003f3e06 	br	85408 <_malloc_r+0x218>
   85710:	63000044 	addi	r12,r12,1
   85714:	608000cc 	andi	r2,r12,3
   85718:	10005d26 	beq	r2,zero,85890 <_malloc_r+0x6a0>
   8571c:	18c00204 	addi	r3,r3,8
   85720:	003f5106 	br	85468 <_malloc_r+0x278>
   85724:	8089883a 	add	r4,r16,r2
   85728:	003f6d06 	br	854e0 <_malloc_r+0x2f0>
   8572c:	00805504 	movi	r2,340
   85730:	10c02036 	bltu	r2,r3,857b4 <_malloc_r+0x5c4>
   85734:	8804d3fa 	srli	r2,r17,15
   85738:	11801dc4 	addi	r6,r2,119
   8573c:	300490fa 	slli	r2,r6,3
   85740:	003ed806 	br	852a4 <_malloc_r+0xb4>
   85744:	48c000c4 	addi	r3,r9,3
   85748:	003f3106 	br	85410 <_malloc_r+0x220>
   8574c:	05c00274 	movhi	r23,9
   85750:	bdc11e04 	addi	r23,r23,1144
   85754:	b8800017 	ldw	r2,0(r23)
   85758:	988d883a 	add	r6,r19,r2
   8575c:	b9800015 	stw	r6,0(r23)
   85760:	293fb21e 	bne	r5,r4,8562c <_malloc_r+0x43c>
   85764:	2083ffcc 	andi	r2,r4,4095
   85768:	103fb01e 	bne	r2,zero,8562c <_malloc_r+0x43c>
   8576c:	e4000217 	ldw	r16,8(fp)
   85770:	9d45883a 	add	r2,r19,r21
   85774:	10800054 	ori	r2,r2,1
   85778:	80800115 	stw	r2,4(r16)
   8577c:	b8c00017 	ldw	r3,0(r23)
   85780:	d0a6ab17 	ldw	r2,-25940(gp)
   85784:	10c0012e 	bgeu	r2,r3,8578c <_malloc_r+0x59c>
   85788:	d0e6ab15 	stw	r3,-25940(gp)
   8578c:	d0a6ac17 	ldw	r2,-25936(gp)
   85790:	10ff962e 	bgeu	r2,r3,855ec <_malloc_r+0x3fc>
   85794:	d0e6ac15 	stw	r3,-25936(gp)
   85798:	003f9406 	br	855ec <_malloc_r+0x3fc>
   8579c:	00800104 	movi	r2,4
   857a0:	11001e36 	bltu	r2,r4,8581c <_malloc_r+0x62c>
   857a4:	2804d1ba 	srli	r2,r5,6
   857a8:	11000e04 	addi	r4,r2,56
   857ac:	200690fa 	slli	r3,r4,3
   857b0:	003fc506 	br	856c8 <_malloc_r+0x4d8>
   857b4:	00815504 	movi	r2,1364
   857b8:	10c01d2e 	bgeu	r2,r3,85830 <_malloc_r+0x640>
   857bc:	01801f84 	movi	r6,126
   857c0:	0080fc04 	movi	r2,1008
   857c4:	003eb706 	br	852a4 <_malloc_r+0xb4>
   857c8:	00800204 	movi	r2,8
   857cc:	10cbc83a 	sub	r5,r2,r3
   857d0:	2169883a 	add	r20,r4,r5
   857d4:	003f9e06 	br	85650 <_malloc_r+0x460>
   857d8:	00bffe04 	movi	r2,-8
   857dc:	a93ffd04 	addi	r4,r21,-12
   857e0:	2088703a 	and	r4,r4,r2
   857e4:	b10b883a 	add	r5,r22,r4
   857e8:	00c00144 	movi	r3,5
   857ec:	28c00215 	stw	r3,8(r5)
   857f0:	28c00115 	stw	r3,4(r5)
   857f4:	b0800117 	ldw	r2,4(r22)
   857f8:	1080004c 	andi	r2,r2,1
   857fc:	2084b03a 	or	r2,r4,r2
   85800:	b0800115 	stw	r2,4(r22)
   85804:	313fdd2e 	bgeu	r6,r4,8577c <_malloc_r+0x58c>
   85808:	b1400204 	addi	r5,r22,8
   8580c:	9009883a 	mov	r4,r18
   85810:	00846680 	call	84668 <_free_r>
   85814:	e4000217 	ldw	r16,8(fp)
   85818:	003fd806 	br	8577c <_malloc_r+0x58c>
   8581c:	00800504 	movi	r2,20
   85820:	11001536 	bltu	r2,r4,85878 <_malloc_r+0x688>
   85824:	210016c4 	addi	r4,r4,91
   85828:	200690fa 	slli	r3,r4,3
   8582c:	003fa606 	br	856c8 <_malloc_r+0x4d8>
   85830:	8804d4ba 	srli	r2,r17,18
   85834:	11801f04 	addi	r6,r2,124
   85838:	300490fa 	slli	r2,r6,3
   8583c:	003e9906 	br	852a4 <_malloc_r+0xb4>
   85840:	2009d0ba 	srai	r4,r4,2
   85844:	01400274 	movhi	r5,9
   85848:	2974e604 	addi	r5,r5,-11368
   8584c:	00c00044 	movi	r3,1
   85850:	28800117 	ldw	r2,4(r5)
   85854:	1906983a 	sll	r3,r3,r4
   85858:	10c4b03a 	or	r2,r2,r3
   8585c:	28800115 	stw	r2,4(r5)
   85860:	003fa306 	br	856f0 <_malloc_r+0x500>
   85864:	0027883a 	mov	r19,zero
   85868:	00c00044 	movi	r3,1
   8586c:	003f8606 	br	85688 <_malloc_r+0x498>
   85870:	d1200515 	stw	r4,-32748(gp)
   85874:	003f7306 	br	85644 <_malloc_r+0x454>
   85878:	00801504 	movi	r2,84
   8587c:	11001936 	bltu	r2,r4,858e4 <_malloc_r+0x6f4>
   85880:	2804d33a 	srli	r2,r5,12
   85884:	11001b84 	addi	r4,r2,110
   85888:	200690fa 	slli	r3,r4,3
   8588c:	003f8e06 	br	856c8 <_malloc_r+0x4d8>
   85890:	480b883a 	mov	r5,r9
   85894:	6807883a 	mov	r3,r13
   85898:	288000cc 	andi	r2,r5,3
   8589c:	18fffe04 	addi	r3,r3,-8
   858a0:	297fffc4 	addi	r5,r5,-1
   858a4:	10001526 	beq	r2,zero,858fc <_malloc_r+0x70c>
   858a8:	18800217 	ldw	r2,8(r3)
   858ac:	10fffa26 	beq	r2,r3,85898 <_malloc_r+0x6a8>
   858b0:	2109883a 	add	r4,r4,r4
   858b4:	393f1e36 	bltu	r7,r4,85530 <_malloc_r+0x340>
   858b8:	203f1d26 	beq	r4,zero,85530 <_malloc_r+0x340>
   858bc:	21c4703a 	and	r2,r4,r7
   858c0:	10000226 	beq	r2,zero,858cc <_malloc_r+0x6dc>
   858c4:	6013883a 	mov	r9,r12
   858c8:	003ee106 	br	85450 <_malloc_r+0x260>
   858cc:	2109883a 	add	r4,r4,r4
   858d0:	3904703a 	and	r2,r7,r4
   858d4:	63000104 	addi	r12,r12,4
   858d8:	103ffc26 	beq	r2,zero,858cc <_malloc_r+0x6dc>
   858dc:	6013883a 	mov	r9,r12
   858e0:	003edb06 	br	85450 <_malloc_r+0x260>
   858e4:	00805504 	movi	r2,340
   858e8:	11000836 	bltu	r2,r4,8590c <_malloc_r+0x71c>
   858ec:	2804d3fa 	srli	r2,r5,15
   858f0:	11001dc4 	addi	r4,r2,119
   858f4:	200690fa 	slli	r3,r4,3
   858f8:	003f7306 	br	856c8 <_malloc_r+0x4d8>
   858fc:	0104303a 	nor	r2,zero,r4
   85900:	388e703a 	and	r7,r7,r2
   85904:	e1c00115 	stw	r7,4(fp)
   85908:	003fe906 	br	858b0 <_malloc_r+0x6c0>
   8590c:	00815504 	movi	r2,1364
   85910:	1100032e 	bgeu	r2,r4,85920 <_malloc_r+0x730>
   85914:	01001f84 	movi	r4,126
   85918:	00c0fc04 	movi	r3,1008
   8591c:	003f6a06 	br	856c8 <_malloc_r+0x4d8>
   85920:	2804d4ba 	srli	r2,r5,18
   85924:	11001f04 	addi	r4,r2,124
   85928:	200690fa 	slli	r3,r4,3
   8592c:	003f6606 	br	856c8 <_malloc_r+0x4d8>

00085930 <memchr>:
   85930:	008000c4 	movi	r2,3
   85934:	29403fcc 	andi	r5,r5,255
   85938:	2007883a 	mov	r3,r4
   8593c:	1180022e 	bgeu	r2,r6,85948 <memchr+0x18>
   85940:	2084703a 	and	r2,r4,r2
   85944:	10000b26 	beq	r2,zero,85974 <memchr+0x44>
   85948:	313fffc4 	addi	r4,r6,-1
   8594c:	3000051e 	bne	r6,zero,85964 <memchr+0x34>
   85950:	00002c06 	br	85a04 <memchr+0xd4>
   85954:	213fffc4 	addi	r4,r4,-1
   85958:	00bfffc4 	movi	r2,-1
   8595c:	18c00044 	addi	r3,r3,1
   85960:	20802826 	beq	r4,r2,85a04 <memchr+0xd4>
   85964:	18800003 	ldbu	r2,0(r3)
   85968:	28bffa1e 	bne	r5,r2,85954 <memchr+0x24>
   8596c:	1805883a 	mov	r2,r3
   85970:	f800283a 	ret
   85974:	0011883a 	mov	r8,zero
   85978:	0007883a 	mov	r3,zero
   8597c:	01c00104 	movi	r7,4
   85980:	4004923a 	slli	r2,r8,8
   85984:	18c00044 	addi	r3,r3,1
   85988:	1151883a 	add	r8,r2,r5
   8598c:	19fffc1e 	bne	r3,r7,85980 <memchr+0x50>
   85990:	02bfbff4 	movhi	r10,65279
   85994:	52bfbfc4 	addi	r10,r10,-257
   85998:	02602074 	movhi	r9,32897
   8599c:	4a602004 	addi	r9,r9,-32640
   859a0:	02c000c4 	movi	r11,3
   859a4:	20800017 	ldw	r2,0(r4)
   859a8:	31bfff04 	addi	r6,r6,-4
   859ac:	200f883a 	mov	r7,r4
   859b0:	1204f03a 	xor	r2,r2,r8
   859b4:	1287883a 	add	r3,r2,r10
   859b8:	1a46703a 	and	r3,r3,r9
   859bc:	0084303a 	nor	r2,zero,r2
   859c0:	10c4703a 	and	r2,r2,r3
   859c4:	10000b26 	beq	r2,zero,859f4 <memchr+0xc4>
   859c8:	20800003 	ldbu	r2,0(r4)
   859cc:	28800f26 	beq	r5,r2,85a0c <memchr+0xdc>
   859d0:	20800043 	ldbu	r2,1(r4)
   859d4:	21c00044 	addi	r7,r4,1
   859d8:	28800c26 	beq	r5,r2,85a0c <memchr+0xdc>
   859dc:	20800083 	ldbu	r2,2(r4)
   859e0:	21c00084 	addi	r7,r4,2
   859e4:	28800926 	beq	r5,r2,85a0c <memchr+0xdc>
   859e8:	208000c3 	ldbu	r2,3(r4)
   859ec:	21c000c4 	addi	r7,r4,3
   859f0:	28800626 	beq	r5,r2,85a0c <memchr+0xdc>
   859f4:	21000104 	addi	r4,r4,4
   859f8:	59bfea36 	bltu	r11,r6,859a4 <memchr+0x74>
   859fc:	2007883a 	mov	r3,r4
   85a00:	003fd106 	br	85948 <memchr+0x18>
   85a04:	0005883a 	mov	r2,zero
   85a08:	f800283a 	ret
   85a0c:	3805883a 	mov	r2,r7
   85a10:	f800283a 	ret

00085a14 <memcpy>:
   85a14:	01c003c4 	movi	r7,15
   85a18:	2007883a 	mov	r3,r4
   85a1c:	3980032e 	bgeu	r7,r6,85a2c <memcpy+0x18>
   85a20:	2904b03a 	or	r2,r5,r4
   85a24:	108000cc 	andi	r2,r2,3
   85a28:	10000926 	beq	r2,zero,85a50 <memcpy+0x3c>
   85a2c:	30000626 	beq	r6,zero,85a48 <memcpy+0x34>
   85a30:	30cd883a 	add	r6,r6,r3
   85a34:	28800003 	ldbu	r2,0(r5)
   85a38:	29400044 	addi	r5,r5,1
   85a3c:	18800005 	stb	r2,0(r3)
   85a40:	18c00044 	addi	r3,r3,1
   85a44:	30fffb1e 	bne	r6,r3,85a34 <memcpy+0x20>
   85a48:	2005883a 	mov	r2,r4
   85a4c:	f800283a 	ret
   85a50:	3811883a 	mov	r8,r7
   85a54:	200f883a 	mov	r7,r4
   85a58:	28c00017 	ldw	r3,0(r5)
   85a5c:	31bffc04 	addi	r6,r6,-16
   85a60:	38c00015 	stw	r3,0(r7)
   85a64:	28800117 	ldw	r2,4(r5)
   85a68:	38800115 	stw	r2,4(r7)
   85a6c:	28c00217 	ldw	r3,8(r5)
   85a70:	38c00215 	stw	r3,8(r7)
   85a74:	28800317 	ldw	r2,12(r5)
   85a78:	29400404 	addi	r5,r5,16
   85a7c:	38800315 	stw	r2,12(r7)
   85a80:	39c00404 	addi	r7,r7,16
   85a84:	41bff436 	bltu	r8,r6,85a58 <memcpy+0x44>
   85a88:	008000c4 	movi	r2,3
   85a8c:	1180072e 	bgeu	r2,r6,85aac <memcpy+0x98>
   85a90:	1007883a 	mov	r3,r2
   85a94:	28800017 	ldw	r2,0(r5)
   85a98:	31bfff04 	addi	r6,r6,-4
   85a9c:	29400104 	addi	r5,r5,4
   85aa0:	38800015 	stw	r2,0(r7)
   85aa4:	39c00104 	addi	r7,r7,4
   85aa8:	19bffa36 	bltu	r3,r6,85a94 <memcpy+0x80>
   85aac:	3807883a 	mov	r3,r7
   85ab0:	003fde06 	br	85a2c <memcpy+0x18>

00085ab4 <memmove>:
   85ab4:	2807883a 	mov	r3,r5
   85ab8:	2011883a 	mov	r8,r4
   85abc:	29000c2e 	bgeu	r5,r4,85af0 <memmove+0x3c>
   85ac0:	298f883a 	add	r7,r5,r6
   85ac4:	21c00a2e 	bgeu	r4,r7,85af0 <memmove+0x3c>
   85ac8:	30000726 	beq	r6,zero,85ae8 <memmove+0x34>
   85acc:	2187883a 	add	r3,r4,r6
   85ad0:	198dc83a 	sub	r6,r3,r6
   85ad4:	39ffffc4 	addi	r7,r7,-1
   85ad8:	38800003 	ldbu	r2,0(r7)
   85adc:	18ffffc4 	addi	r3,r3,-1
   85ae0:	18800005 	stb	r2,0(r3)
   85ae4:	19bffb1e 	bne	r3,r6,85ad4 <memmove+0x20>
   85ae8:	2005883a 	mov	r2,r4
   85aec:	f800283a 	ret
   85af0:	01c003c4 	movi	r7,15
   85af4:	39800a36 	bltu	r7,r6,85b20 <memmove+0x6c>
   85af8:	303ffb26 	beq	r6,zero,85ae8 <memmove+0x34>
   85afc:	400f883a 	mov	r7,r8
   85b00:	320d883a 	add	r6,r6,r8
   85b04:	28800003 	ldbu	r2,0(r5)
   85b08:	29400044 	addi	r5,r5,1
   85b0c:	38800005 	stb	r2,0(r7)
   85b10:	39c00044 	addi	r7,r7,1
   85b14:	39bffb1e 	bne	r7,r6,85b04 <memmove+0x50>
   85b18:	2005883a 	mov	r2,r4
   85b1c:	f800283a 	ret
   85b20:	1904b03a 	or	r2,r3,r4
   85b24:	108000cc 	andi	r2,r2,3
   85b28:	103ff31e 	bne	r2,zero,85af8 <memmove+0x44>
   85b2c:	3811883a 	mov	r8,r7
   85b30:	180b883a 	mov	r5,r3
   85b34:	200f883a 	mov	r7,r4
   85b38:	28c00017 	ldw	r3,0(r5)
   85b3c:	31bffc04 	addi	r6,r6,-16
   85b40:	38c00015 	stw	r3,0(r7)
   85b44:	28800117 	ldw	r2,4(r5)
   85b48:	38800115 	stw	r2,4(r7)
   85b4c:	28c00217 	ldw	r3,8(r5)
   85b50:	38c00215 	stw	r3,8(r7)
   85b54:	28800317 	ldw	r2,12(r5)
   85b58:	29400404 	addi	r5,r5,16
   85b5c:	38800315 	stw	r2,12(r7)
   85b60:	39c00404 	addi	r7,r7,16
   85b64:	41bff436 	bltu	r8,r6,85b38 <memmove+0x84>
   85b68:	008000c4 	movi	r2,3
   85b6c:	1180072e 	bgeu	r2,r6,85b8c <memmove+0xd8>
   85b70:	1007883a 	mov	r3,r2
   85b74:	28800017 	ldw	r2,0(r5)
   85b78:	31bfff04 	addi	r6,r6,-4
   85b7c:	29400104 	addi	r5,r5,4
   85b80:	38800015 	stw	r2,0(r7)
   85b84:	39c00104 	addi	r7,r7,4
   85b88:	19bffa36 	bltu	r3,r6,85b74 <memmove+0xc0>
   85b8c:	3811883a 	mov	r8,r7
   85b90:	003fd906 	br	85af8 <memmove+0x44>

00085b94 <memset>:
   85b94:	008000c4 	movi	r2,3
   85b98:	29403fcc 	andi	r5,r5,255
   85b9c:	2007883a 	mov	r3,r4
   85ba0:	1180022e 	bgeu	r2,r6,85bac <memset+0x18>
   85ba4:	2084703a 	and	r2,r4,r2
   85ba8:	10000826 	beq	r2,zero,85bcc <memset+0x38>
   85bac:	30000526 	beq	r6,zero,85bc4 <memset+0x30>
   85bb0:	2805883a 	mov	r2,r5
   85bb4:	30cd883a 	add	r6,r6,r3
   85bb8:	18800005 	stb	r2,0(r3)
   85bbc:	18c00044 	addi	r3,r3,1
   85bc0:	19bffd1e 	bne	r3,r6,85bb8 <memset+0x24>
   85bc4:	2005883a 	mov	r2,r4
   85bc8:	f800283a 	ret
   85bcc:	2804923a 	slli	r2,r5,8
   85bd0:	020003c4 	movi	r8,15
   85bd4:	200f883a 	mov	r7,r4
   85bd8:	2884b03a 	or	r2,r5,r2
   85bdc:	1006943a 	slli	r3,r2,16
   85be0:	10c6b03a 	or	r3,r2,r3
   85be4:	41800a2e 	bgeu	r8,r6,85c10 <memset+0x7c>
   85be8:	4005883a 	mov	r2,r8
   85bec:	31bffc04 	addi	r6,r6,-16
   85bf0:	38c00015 	stw	r3,0(r7)
   85bf4:	38c00115 	stw	r3,4(r7)
   85bf8:	38c00215 	stw	r3,8(r7)
   85bfc:	38c00315 	stw	r3,12(r7)
   85c00:	39c00404 	addi	r7,r7,16
   85c04:	11bff936 	bltu	r2,r6,85bec <memset+0x58>
   85c08:	008000c4 	movi	r2,3
   85c0c:	1180052e 	bgeu	r2,r6,85c24 <memset+0x90>
   85c10:	31bfff04 	addi	r6,r6,-4
   85c14:	008000c4 	movi	r2,3
   85c18:	38c00015 	stw	r3,0(r7)
   85c1c:	39c00104 	addi	r7,r7,4
   85c20:	11bffb36 	bltu	r2,r6,85c10 <memset+0x7c>
   85c24:	3807883a 	mov	r3,r7
   85c28:	003fe006 	br	85bac <memset+0x18>

00085c2c <_Bfree>:
   85c2c:	28000826 	beq	r5,zero,85c50 <_Bfree+0x24>
   85c30:	28800117 	ldw	r2,4(r5)
   85c34:	21001317 	ldw	r4,76(r4)
   85c38:	1085883a 	add	r2,r2,r2
   85c3c:	1085883a 	add	r2,r2,r2
   85c40:	1105883a 	add	r2,r2,r4
   85c44:	10c00017 	ldw	r3,0(r2)
   85c48:	28c00015 	stw	r3,0(r5)
   85c4c:	11400015 	stw	r5,0(r2)
   85c50:	f800283a 	ret

00085c54 <__hi0bits>:
   85c54:	20bfffec 	andhi	r2,r4,65535
   85c58:	10001426 	beq	r2,zero,85cac <__hi0bits+0x58>
   85c5c:	0007883a 	mov	r3,zero
   85c60:	20bfc02c 	andhi	r2,r4,65280
   85c64:	1000021e 	bne	r2,zero,85c70 <__hi0bits+0x1c>
   85c68:	2008923a 	slli	r4,r4,8
   85c6c:	18c00204 	addi	r3,r3,8
   85c70:	20bc002c 	andhi	r2,r4,61440
   85c74:	1000021e 	bne	r2,zero,85c80 <__hi0bits+0x2c>
   85c78:	2008913a 	slli	r4,r4,4
   85c7c:	18c00104 	addi	r3,r3,4
   85c80:	20b0002c 	andhi	r2,r4,49152
   85c84:	1000031e 	bne	r2,zero,85c94 <__hi0bits+0x40>
   85c88:	2105883a 	add	r2,r4,r4
   85c8c:	18c00084 	addi	r3,r3,2
   85c90:	1089883a 	add	r4,r2,r2
   85c94:	20000316 	blt	r4,zero,85ca4 <__hi0bits+0x50>
   85c98:	2090002c 	andhi	r2,r4,16384
   85c9c:	10000626 	beq	r2,zero,85cb8 <__hi0bits+0x64>
   85ca0:	18c00044 	addi	r3,r3,1
   85ca4:	1805883a 	mov	r2,r3
   85ca8:	f800283a 	ret
   85cac:	2008943a 	slli	r4,r4,16
   85cb0:	00c00404 	movi	r3,16
   85cb4:	003fea06 	br	85c60 <__hi0bits+0xc>
   85cb8:	00c00804 	movi	r3,32
   85cbc:	1805883a 	mov	r2,r3
   85cc0:	f800283a 	ret

00085cc4 <__lo0bits>:
   85cc4:	20c00017 	ldw	r3,0(r4)
   85cc8:	188001cc 	andi	r2,r3,7
   85ccc:	10000a26 	beq	r2,zero,85cf8 <__lo0bits+0x34>
   85cd0:	1880004c 	andi	r2,r3,1
   85cd4:	1005003a 	cmpeq	r2,r2,zero
   85cd8:	10002126 	beq	r2,zero,85d60 <__lo0bits+0x9c>
   85cdc:	1880008c 	andi	r2,r3,2
   85ce0:	1000251e 	bne	r2,zero,85d78 <__lo0bits+0xb4>
   85ce4:	1804d0ba 	srli	r2,r3,2
   85ce8:	01400084 	movi	r5,2
   85cec:	20800015 	stw	r2,0(r4)
   85cf0:	2805883a 	mov	r2,r5
   85cf4:	f800283a 	ret
   85cf8:	18bfffcc 	andi	r2,r3,65535
   85cfc:	10001526 	beq	r2,zero,85d54 <__lo0bits+0x90>
   85d00:	000b883a 	mov	r5,zero
   85d04:	18803fcc 	andi	r2,r3,255
   85d08:	1000021e 	bne	r2,zero,85d14 <__lo0bits+0x50>
   85d0c:	1806d23a 	srli	r3,r3,8
   85d10:	29400204 	addi	r5,r5,8
   85d14:	188003cc 	andi	r2,r3,15
   85d18:	1000021e 	bne	r2,zero,85d24 <__lo0bits+0x60>
   85d1c:	1806d13a 	srli	r3,r3,4
   85d20:	29400104 	addi	r5,r5,4
   85d24:	188000cc 	andi	r2,r3,3
   85d28:	1000021e 	bne	r2,zero,85d34 <__lo0bits+0x70>
   85d2c:	1806d0ba 	srli	r3,r3,2
   85d30:	29400084 	addi	r5,r5,2
   85d34:	1880004c 	andi	r2,r3,1
   85d38:	1000031e 	bne	r2,zero,85d48 <__lo0bits+0x84>
   85d3c:	1806d07a 	srli	r3,r3,1
   85d40:	18000a26 	beq	r3,zero,85d6c <__lo0bits+0xa8>
   85d44:	29400044 	addi	r5,r5,1
   85d48:	2805883a 	mov	r2,r5
   85d4c:	20c00015 	stw	r3,0(r4)
   85d50:	f800283a 	ret
   85d54:	1806d43a 	srli	r3,r3,16
   85d58:	01400404 	movi	r5,16
   85d5c:	003fe906 	br	85d04 <__lo0bits+0x40>
   85d60:	000b883a 	mov	r5,zero
   85d64:	2805883a 	mov	r2,r5
   85d68:	f800283a 	ret
   85d6c:	01400804 	movi	r5,32
   85d70:	2805883a 	mov	r2,r5
   85d74:	f800283a 	ret
   85d78:	1804d07a 	srli	r2,r3,1
   85d7c:	01400044 	movi	r5,1
   85d80:	20800015 	stw	r2,0(r4)
   85d84:	003fda06 	br	85cf0 <__lo0bits+0x2c>

00085d88 <__mcmp>:
   85d88:	20800417 	ldw	r2,16(r4)
   85d8c:	28c00417 	ldw	r3,16(r5)
   85d90:	10cfc83a 	sub	r7,r2,r3
   85d94:	38000c1e 	bne	r7,zero,85dc8 <__mcmp+0x40>
   85d98:	18c5883a 	add	r2,r3,r3
   85d9c:	1085883a 	add	r2,r2,r2
   85da0:	10c00504 	addi	r3,r2,20
   85da4:	21000504 	addi	r4,r4,20
   85da8:	28cb883a 	add	r5,r5,r3
   85dac:	2085883a 	add	r2,r4,r2
   85db0:	10bfff04 	addi	r2,r2,-4
   85db4:	297fff04 	addi	r5,r5,-4
   85db8:	11800017 	ldw	r6,0(r2)
   85dbc:	28c00017 	ldw	r3,0(r5)
   85dc0:	30c0031e 	bne	r6,r3,85dd0 <__mcmp+0x48>
   85dc4:	20bffa36 	bltu	r4,r2,85db0 <__mcmp+0x28>
   85dc8:	3805883a 	mov	r2,r7
   85dcc:	f800283a 	ret
   85dd0:	30c00336 	bltu	r6,r3,85de0 <__mcmp+0x58>
   85dd4:	01c00044 	movi	r7,1
   85dd8:	3805883a 	mov	r2,r7
   85ddc:	f800283a 	ret
   85de0:	01ffffc4 	movi	r7,-1
   85de4:	003ff806 	br	85dc8 <__mcmp+0x40>

00085de8 <__ulp>:
   85de8:	295ffc2c 	andhi	r5,r5,32752
   85dec:	013f3034 	movhi	r4,64704
   85df0:	290b883a 	add	r5,r5,r4
   85df4:	0145c83a 	sub	r2,zero,r5
   85df8:	1007d53a 	srai	r3,r2,20
   85dfc:	000d883a 	mov	r6,zero
   85e00:	0140040e 	bge	zero,r5,85e14 <__ulp+0x2c>
   85e04:	280f883a 	mov	r7,r5
   85e08:	3807883a 	mov	r3,r7
   85e0c:	3005883a 	mov	r2,r6
   85e10:	f800283a 	ret
   85e14:	008004c4 	movi	r2,19
   85e18:	193ffb04 	addi	r4,r3,-20
   85e1c:	10c00c0e 	bge	r2,r3,85e50 <__ulp+0x68>
   85e20:	008007c4 	movi	r2,31
   85e24:	1107c83a 	sub	r3,r2,r4
   85e28:	00800784 	movi	r2,30
   85e2c:	01400044 	movi	r5,1
   85e30:	11000216 	blt	r2,r4,85e3c <__ulp+0x54>
   85e34:	00800044 	movi	r2,1
   85e38:	10ca983a 	sll	r5,r2,r3
   85e3c:	000f883a 	mov	r7,zero
   85e40:	280d883a 	mov	r6,r5
   85e44:	3807883a 	mov	r3,r7
   85e48:	3005883a 	mov	r2,r6
   85e4c:	f800283a 	ret
   85e50:	00800234 	movhi	r2,8
   85e54:	10cfd83a 	sra	r7,r2,r3
   85e58:	000d883a 	mov	r6,zero
   85e5c:	3005883a 	mov	r2,r6
   85e60:	3807883a 	mov	r3,r7
   85e64:	f800283a 	ret

00085e68 <__b2d>:
   85e68:	20800417 	ldw	r2,16(r4)
   85e6c:	defff904 	addi	sp,sp,-28
   85e70:	dd000415 	stw	r20,16(sp)
   85e74:	1085883a 	add	r2,r2,r2
   85e78:	25000504 	addi	r20,r4,20
   85e7c:	1085883a 	add	r2,r2,r2
   85e80:	dc000015 	stw	r16,0(sp)
   85e84:	a0a1883a 	add	r16,r20,r2
   85e88:	dd400515 	stw	r21,20(sp)
   85e8c:	857fff17 	ldw	r21,-4(r16)
   85e90:	dc400115 	stw	r17,4(sp)
   85e94:	dfc00615 	stw	ra,24(sp)
   85e98:	a809883a 	mov	r4,r21
   85e9c:	2823883a 	mov	r17,r5
   85ea0:	dcc00315 	stw	r19,12(sp)
   85ea4:	dc800215 	stw	r18,8(sp)
   85ea8:	0085c540 	call	85c54 <__hi0bits>
   85eac:	100b883a 	mov	r5,r2
   85eb0:	00800804 	movi	r2,32
   85eb4:	1145c83a 	sub	r2,r2,r5
   85eb8:	88800015 	stw	r2,0(r17)
   85ebc:	00800284 	movi	r2,10
   85ec0:	80ffff04 	addi	r3,r16,-4
   85ec4:	11401416 	blt	r2,r5,85f18 <__b2d+0xb0>
   85ec8:	008002c4 	movi	r2,11
   85ecc:	1149c83a 	sub	r4,r2,r5
   85ed0:	a0c02736 	bltu	r20,r3,85f70 <__b2d+0x108>
   85ed4:	000d883a 	mov	r6,zero
   85ed8:	28800544 	addi	r2,r5,21
   85edc:	a906d83a 	srl	r3,r21,r4
   85ee0:	a884983a 	sll	r2,r21,r2
   85ee4:	1ccffc34 	orhi	r19,r3,16368
   85ee8:	11a4b03a 	or	r18,r2,r6
   85eec:	9005883a 	mov	r2,r18
   85ef0:	9807883a 	mov	r3,r19
   85ef4:	dfc00617 	ldw	ra,24(sp)
   85ef8:	dd400517 	ldw	r21,20(sp)
   85efc:	dd000417 	ldw	r20,16(sp)
   85f00:	dcc00317 	ldw	r19,12(sp)
   85f04:	dc800217 	ldw	r18,8(sp)
   85f08:	dc400117 	ldw	r17,4(sp)
   85f0c:	dc000017 	ldw	r16,0(sp)
   85f10:	dec00704 	addi	sp,sp,28
   85f14:	f800283a 	ret
   85f18:	a0c00e36 	bltu	r20,r3,85f54 <__b2d+0xec>
   85f1c:	293ffd44 	addi	r4,r5,-11
   85f20:	000d883a 	mov	r6,zero
   85f24:	20000f26 	beq	r4,zero,85f64 <__b2d+0xfc>
   85f28:	00800804 	movi	r2,32
   85f2c:	110bc83a 	sub	r5,r2,r4
   85f30:	a0c01236 	bltu	r20,r3,85f7c <__b2d+0x114>
   85f34:	000f883a 	mov	r7,zero
   85f38:	a904983a 	sll	r2,r21,r4
   85f3c:	3146d83a 	srl	r3,r6,r5
   85f40:	3108983a 	sll	r4,r6,r4
   85f44:	108ffc34 	orhi	r2,r2,16368
   85f48:	18a6b03a 	or	r19,r3,r2
   85f4c:	3924b03a 	or	r18,r7,r4
   85f50:	003fe606 	br	85eec <__b2d+0x84>
   85f54:	293ffd44 	addi	r4,r5,-11
   85f58:	81bffe17 	ldw	r6,-8(r16)
   85f5c:	80fffe04 	addi	r3,r16,-8
   85f60:	203ff11e 	bne	r4,zero,85f28 <__b2d+0xc0>
   85f64:	accffc34 	orhi	r19,r21,16368
   85f68:	3025883a 	mov	r18,r6
   85f6c:	003fdf06 	br	85eec <__b2d+0x84>
   85f70:	18bfff17 	ldw	r2,-4(r3)
   85f74:	110cd83a 	srl	r6,r2,r4
   85f78:	003fd706 	br	85ed8 <__b2d+0x70>
   85f7c:	18bfff17 	ldw	r2,-4(r3)
   85f80:	114ed83a 	srl	r7,r2,r5
   85f84:	003fec06 	br	85f38 <__b2d+0xd0>

00085f88 <__ratio>:
   85f88:	defff904 	addi	sp,sp,-28
   85f8c:	dc400215 	stw	r17,8(sp)
   85f90:	2823883a 	mov	r17,r5
   85f94:	d80b883a 	mov	r5,sp
   85f98:	dfc00615 	stw	ra,24(sp)
   85f9c:	dd000515 	stw	r20,20(sp)
   85fa0:	dcc00415 	stw	r19,16(sp)
   85fa4:	dc800315 	stw	r18,12(sp)
   85fa8:	2025883a 	mov	r18,r4
   85fac:	0085e680 	call	85e68 <__b2d>
   85fb0:	8809883a 	mov	r4,r17
   85fb4:	d9400104 	addi	r5,sp,4
   85fb8:	1027883a 	mov	r19,r2
   85fbc:	1829883a 	mov	r20,r3
   85fc0:	0085e680 	call	85e68 <__b2d>
   85fc4:	89000417 	ldw	r4,16(r17)
   85fc8:	91c00417 	ldw	r7,16(r18)
   85fcc:	d9800117 	ldw	r6,4(sp)
   85fd0:	180b883a 	mov	r5,r3
   85fd4:	390fc83a 	sub	r7,r7,r4
   85fd8:	1009883a 	mov	r4,r2
   85fdc:	d8800017 	ldw	r2,0(sp)
   85fe0:	380e917a 	slli	r7,r7,5
   85fe4:	2011883a 	mov	r8,r4
   85fe8:	1185c83a 	sub	r2,r2,r6
   85fec:	11c5883a 	add	r2,r2,r7
   85ff0:	1006953a 	slli	r3,r2,20
   85ff4:	2813883a 	mov	r9,r5
   85ff8:	00800d0e 	bge	zero,r2,86030 <__ratio+0xa8>
   85ffc:	1d29883a 	add	r20,r3,r20
   86000:	a00b883a 	mov	r5,r20
   86004:	480f883a 	mov	r7,r9
   86008:	9809883a 	mov	r4,r19
   8600c:	400d883a 	mov	r6,r8
   86010:	0088fd00 	call	88fd0 <__divdf3>
   86014:	dfc00617 	ldw	ra,24(sp)
   86018:	dd000517 	ldw	r20,20(sp)
   8601c:	dcc00417 	ldw	r19,16(sp)
   86020:	dc800317 	ldw	r18,12(sp)
   86024:	dc400217 	ldw	r17,8(sp)
   86028:	dec00704 	addi	sp,sp,28
   8602c:	f800283a 	ret
   86030:	28d3c83a 	sub	r9,r5,r3
   86034:	003ff206 	br	86000 <__ratio+0x78>

00086038 <_mprec_log10>:
   86038:	defffe04 	addi	sp,sp,-8
   8603c:	008005c4 	movi	r2,23
   86040:	dc000015 	stw	r16,0(sp)
   86044:	dfc00115 	stw	ra,4(sp)
   86048:	2021883a 	mov	r16,r4
   8604c:	11000c16 	blt	r2,r4,86080 <_mprec_log10+0x48>
   86050:	200490fa 	slli	r2,r4,3
   86054:	00c00274 	movhi	r3,9
   86058:	18f34804 	addi	r3,r3,-13024
   8605c:	10c5883a 	add	r2,r2,r3
   86060:	12400117 	ldw	r9,4(r2)
   86064:	12000017 	ldw	r8,0(r2)
   86068:	4807883a 	mov	r3,r9
   8606c:	4005883a 	mov	r2,r8
   86070:	dfc00117 	ldw	ra,4(sp)
   86074:	dc000017 	ldw	r16,0(sp)
   86078:	dec00204 	addi	sp,sp,8
   8607c:	f800283a 	ret
   86080:	0011883a 	mov	r8,zero
   86084:	024ffc34 	movhi	r9,16368
   86088:	0005883a 	mov	r2,zero
   8608c:	00d00934 	movhi	r3,16420
   86090:	480b883a 	mov	r5,r9
   86094:	4009883a 	mov	r4,r8
   86098:	180f883a 	mov	r7,r3
   8609c:	100d883a 	mov	r6,r2
   860a0:	0088c0c0 	call	88c0c <__muldf3>
   860a4:	843fffc4 	addi	r16,r16,-1
   860a8:	1011883a 	mov	r8,r2
   860ac:	1813883a 	mov	r9,r3
   860b0:	803ff51e 	bne	r16,zero,86088 <_mprec_log10+0x50>
   860b4:	4005883a 	mov	r2,r8
   860b8:	4807883a 	mov	r3,r9
   860bc:	dfc00117 	ldw	ra,4(sp)
   860c0:	dc000017 	ldw	r16,0(sp)
   860c4:	dec00204 	addi	sp,sp,8
   860c8:	f800283a 	ret

000860cc <__copybits>:
   860cc:	297fffc4 	addi	r5,r5,-1
   860d0:	30800417 	ldw	r2,16(r6)
   860d4:	280bd17a 	srai	r5,r5,5
   860d8:	31800504 	addi	r6,r6,20
   860dc:	1085883a 	add	r2,r2,r2
   860e0:	294b883a 	add	r5,r5,r5
   860e4:	294b883a 	add	r5,r5,r5
   860e8:	1085883a 	add	r2,r2,r2
   860ec:	290b883a 	add	r5,r5,r4
   860f0:	3087883a 	add	r3,r6,r2
   860f4:	29400104 	addi	r5,r5,4
   860f8:	30c0052e 	bgeu	r6,r3,86110 <__copybits+0x44>
   860fc:	30800017 	ldw	r2,0(r6)
   86100:	31800104 	addi	r6,r6,4
   86104:	20800015 	stw	r2,0(r4)
   86108:	21000104 	addi	r4,r4,4
   8610c:	30fffb36 	bltu	r6,r3,860fc <__copybits+0x30>
   86110:	2140032e 	bgeu	r4,r5,86120 <__copybits+0x54>
   86114:	20000015 	stw	zero,0(r4)
   86118:	21000104 	addi	r4,r4,4
   8611c:	217ffd36 	bltu	r4,r5,86114 <__copybits+0x48>
   86120:	f800283a 	ret

00086124 <__any_on>:
   86124:	20800417 	ldw	r2,16(r4)
   86128:	2807d17a 	srai	r3,r5,5
   8612c:	21000504 	addi	r4,r4,20
   86130:	10c00d0e 	bge	r2,r3,86168 <__any_on+0x44>
   86134:	1085883a 	add	r2,r2,r2
   86138:	1085883a 	add	r2,r2,r2
   8613c:	208d883a 	add	r6,r4,r2
   86140:	2180182e 	bgeu	r4,r6,861a4 <__any_on+0x80>
   86144:	30bfff17 	ldw	r2,-4(r6)
   86148:	30ffff04 	addi	r3,r6,-4
   8614c:	1000041e 	bne	r2,zero,86160 <__any_on+0x3c>
   86150:	20c0142e 	bgeu	r4,r3,861a4 <__any_on+0x80>
   86154:	18ffff04 	addi	r3,r3,-4
   86158:	18800017 	ldw	r2,0(r3)
   8615c:	103ffc26 	beq	r2,zero,86150 <__any_on+0x2c>
   86160:	00800044 	movi	r2,1
   86164:	f800283a 	ret
   86168:	18800a0e 	bge	r3,r2,86194 <__any_on+0x70>
   8616c:	294007cc 	andi	r5,r5,31
   86170:	28000826 	beq	r5,zero,86194 <__any_on+0x70>
   86174:	18c5883a 	add	r2,r3,r3
   86178:	1085883a 	add	r2,r2,r2
   8617c:	208d883a 	add	r6,r4,r2
   86180:	30c00017 	ldw	r3,0(r6)
   86184:	1944d83a 	srl	r2,r3,r5
   86188:	1144983a 	sll	r2,r2,r5
   8618c:	18bff41e 	bne	r3,r2,86160 <__any_on+0x3c>
   86190:	003feb06 	br	86140 <__any_on+0x1c>
   86194:	18c5883a 	add	r2,r3,r3
   86198:	1085883a 	add	r2,r2,r2
   8619c:	208d883a 	add	r6,r4,r2
   861a0:	003fe706 	br	86140 <__any_on+0x1c>
   861a4:	0005883a 	mov	r2,zero
   861a8:	f800283a 	ret

000861ac <_Balloc>:
   861ac:	20c01317 	ldw	r3,76(r4)
   861b0:	defffb04 	addi	sp,sp,-20
   861b4:	dcc00315 	stw	r19,12(sp)
   861b8:	dc800215 	stw	r18,8(sp)
   861bc:	dfc00415 	stw	ra,16(sp)
   861c0:	2825883a 	mov	r18,r5
   861c4:	dc400115 	stw	r17,4(sp)
   861c8:	dc000015 	stw	r16,0(sp)
   861cc:	2027883a 	mov	r19,r4
   861d0:	01800404 	movi	r6,16
   861d4:	01400104 	movi	r5,4
   861d8:	18001726 	beq	r3,zero,86238 <_Balloc+0x8c>
   861dc:	01400044 	movi	r5,1
   861e0:	9485883a 	add	r2,r18,r18
   861e4:	2ca2983a 	sll	r17,r5,r18
   861e8:	1085883a 	add	r2,r2,r2
   861ec:	10c7883a 	add	r3,r2,r3
   861f0:	1c000017 	ldw	r16,0(r3)
   861f4:	8c4d883a 	add	r6,r17,r17
   861f8:	318d883a 	add	r6,r6,r6
   861fc:	9809883a 	mov	r4,r19
   86200:	31800504 	addi	r6,r6,20
   86204:	80001226 	beq	r16,zero,86250 <_Balloc+0xa4>
   86208:	80800017 	ldw	r2,0(r16)
   8620c:	18800015 	stw	r2,0(r3)
   86210:	80000415 	stw	zero,16(r16)
   86214:	80000315 	stw	zero,12(r16)
   86218:	8005883a 	mov	r2,r16
   8621c:	dfc00417 	ldw	ra,16(sp)
   86220:	dcc00317 	ldw	r19,12(sp)
   86224:	dc800217 	ldw	r18,8(sp)
   86228:	dc400117 	ldw	r17,4(sp)
   8622c:	dc000017 	ldw	r16,0(sp)
   86230:	dec00504 	addi	sp,sp,20
   86234:	f800283a 	ret
   86238:	008760c0 	call	8760c <_calloc_r>
   8623c:	1007883a 	mov	r3,r2
   86240:	0021883a 	mov	r16,zero
   86244:	98801315 	stw	r2,76(r19)
   86248:	103fe41e 	bne	r2,zero,861dc <_Balloc+0x30>
   8624c:	003ff206 	br	86218 <_Balloc+0x6c>
   86250:	008760c0 	call	8760c <_calloc_r>
   86254:	103ff026 	beq	r2,zero,86218 <_Balloc+0x6c>
   86258:	1021883a 	mov	r16,r2
   8625c:	14800115 	stw	r18,4(r2)
   86260:	14400215 	stw	r17,8(r2)
   86264:	003fea06 	br	86210 <_Balloc+0x64>

00086268 <__d2b>:
   86268:	defff504 	addi	sp,sp,-44
   8626c:	dcc00515 	stw	r19,20(sp)
   86270:	04c00044 	movi	r19,1
   86274:	dc000215 	stw	r16,8(sp)
   86278:	2821883a 	mov	r16,r5
   8627c:	980b883a 	mov	r5,r19
   86280:	ddc00915 	stw	r23,36(sp)
   86284:	dd800815 	stw	r22,32(sp)
   86288:	dd400715 	stw	r21,28(sp)
   8628c:	dd000615 	stw	r20,24(sp)
   86290:	dc800415 	stw	r18,16(sp)
   86294:	dc400315 	stw	r17,12(sp)
   86298:	dfc00a15 	stw	ra,40(sp)
   8629c:	3023883a 	mov	r17,r6
   862a0:	382d883a 	mov	r22,r7
   862a4:	ddc00b17 	ldw	r23,44(sp)
   862a8:	00861ac0 	call	861ac <_Balloc>
   862ac:	1025883a 	mov	r18,r2
   862b0:	00a00034 	movhi	r2,32768
   862b4:	10bfffc4 	addi	r2,r2,-1
   862b8:	8888703a 	and	r4,r17,r2
   862bc:	202ad53a 	srli	r21,r4,20
   862c0:	00800434 	movhi	r2,16
   862c4:	10bfffc4 	addi	r2,r2,-1
   862c8:	8886703a 	and	r3,r17,r2
   862cc:	a829003a 	cmpeq	r20,r21,zero
   862d0:	800b883a 	mov	r5,r16
   862d4:	d8c00115 	stw	r3,4(sp)
   862d8:	94000504 	addi	r16,r18,20
   862dc:	a000021e 	bne	r20,zero,862e8 <__d2b+0x80>
   862e0:	18c00434 	orhi	r3,r3,16
   862e4:	d8c00115 	stw	r3,4(sp)
   862e8:	28002726 	beq	r5,zero,86388 <__d2b+0x120>
   862ec:	d809883a 	mov	r4,sp
   862f0:	d9400015 	stw	r5,0(sp)
   862f4:	0085cc40 	call	85cc4 <__lo0bits>
   862f8:	100d883a 	mov	r6,r2
   862fc:	10003526 	beq	r2,zero,863d4 <__d2b+0x16c>
   86300:	d8c00117 	ldw	r3,4(sp)
   86304:	00800804 	movi	r2,32
   86308:	1185c83a 	sub	r2,r2,r6
   8630c:	d9000017 	ldw	r4,0(sp)
   86310:	1886983a 	sll	r3,r3,r2
   86314:	1906b03a 	or	r3,r3,r4
   86318:	90c00515 	stw	r3,20(r18)
   8631c:	d8c00117 	ldw	r3,4(sp)
   86320:	1986d83a 	srl	r3,r3,r6
   86324:	d8c00115 	stw	r3,4(sp)
   86328:	180b003a 	cmpeq	r5,r3,zero
   8632c:	00800084 	movi	r2,2
   86330:	114bc83a 	sub	r5,r2,r5
   86334:	80c00115 	stw	r3,4(r16)
   86338:	91400415 	stw	r5,16(r18)
   8633c:	a0001a1e 	bne	r20,zero,863a8 <__d2b+0x140>
   86340:	3545883a 	add	r2,r6,r21
   86344:	10bef344 	addi	r2,r2,-1075
   86348:	00c00d44 	movi	r3,53
   8634c:	b0800015 	stw	r2,0(r22)
   86350:	1987c83a 	sub	r3,r3,r6
   86354:	b8c00015 	stw	r3,0(r23)
   86358:	9005883a 	mov	r2,r18
   8635c:	dfc00a17 	ldw	ra,40(sp)
   86360:	ddc00917 	ldw	r23,36(sp)
   86364:	dd800817 	ldw	r22,32(sp)
   86368:	dd400717 	ldw	r21,28(sp)
   8636c:	dd000617 	ldw	r20,24(sp)
   86370:	dcc00517 	ldw	r19,20(sp)
   86374:	dc800417 	ldw	r18,16(sp)
   86378:	dc400317 	ldw	r17,12(sp)
   8637c:	dc000217 	ldw	r16,8(sp)
   86380:	dec00b04 	addi	sp,sp,44
   86384:	f800283a 	ret
   86388:	d9000104 	addi	r4,sp,4
   8638c:	0085cc40 	call	85cc4 <__lo0bits>
   86390:	11800804 	addi	r6,r2,32
   86394:	d8800117 	ldw	r2,4(sp)
   86398:	94c00415 	stw	r19,16(r18)
   8639c:	980b883a 	mov	r5,r19
   863a0:	90800515 	stw	r2,20(r18)
   863a4:	a03fe626 	beq	r20,zero,86340 <__d2b+0xd8>
   863a8:	2945883a 	add	r2,r5,r5
   863ac:	1085883a 	add	r2,r2,r2
   863b0:	1405883a 	add	r2,r2,r16
   863b4:	113fff17 	ldw	r4,-4(r2)
   863b8:	30fef384 	addi	r3,r6,-1074
   863bc:	2820917a 	slli	r16,r5,5
   863c0:	b0c00015 	stw	r3,0(r22)
   863c4:	0085c540 	call	85c54 <__hi0bits>
   863c8:	80a1c83a 	sub	r16,r16,r2
   863cc:	bc000015 	stw	r16,0(r23)
   863d0:	003fe106 	br	86358 <__d2b+0xf0>
   863d4:	d8800017 	ldw	r2,0(sp)
   863d8:	90800515 	stw	r2,20(r18)
   863dc:	d8c00117 	ldw	r3,4(sp)
   863e0:	003fd106 	br	86328 <__d2b+0xc0>

000863e4 <__mdiff>:
   863e4:	defffb04 	addi	sp,sp,-20
   863e8:	dc000015 	stw	r16,0(sp)
   863ec:	2821883a 	mov	r16,r5
   863f0:	dc800215 	stw	r18,8(sp)
   863f4:	300b883a 	mov	r5,r6
   863f8:	2025883a 	mov	r18,r4
   863fc:	8009883a 	mov	r4,r16
   86400:	dc400115 	stw	r17,4(sp)
   86404:	dfc00415 	stw	ra,16(sp)
   86408:	dcc00315 	stw	r19,12(sp)
   8640c:	3023883a 	mov	r17,r6
   86410:	0085d880 	call	85d88 <__mcmp>
   86414:	10004226 	beq	r2,zero,86520 <__mdiff+0x13c>
   86418:	10005016 	blt	r2,zero,8655c <__mdiff+0x178>
   8641c:	0027883a 	mov	r19,zero
   86420:	81400117 	ldw	r5,4(r16)
   86424:	9009883a 	mov	r4,r18
   86428:	00861ac0 	call	861ac <_Balloc>
   8642c:	1019883a 	mov	r12,r2
   86430:	82800417 	ldw	r10,16(r16)
   86434:	88800417 	ldw	r2,16(r17)
   86438:	81800504 	addi	r6,r16,20
   8643c:	5287883a 	add	r3,r10,r10
   86440:	1085883a 	add	r2,r2,r2
   86444:	18c7883a 	add	r3,r3,r3
   86448:	1085883a 	add	r2,r2,r2
   8644c:	8a000504 	addi	r8,r17,20
   86450:	64c00315 	stw	r19,12(r12)
   86454:	30db883a 	add	r13,r6,r3
   86458:	4097883a 	add	r11,r8,r2
   8645c:	61c00504 	addi	r7,r12,20
   86460:	0013883a 	mov	r9,zero
   86464:	31000017 	ldw	r4,0(r6)
   86468:	41400017 	ldw	r5,0(r8)
   8646c:	42000104 	addi	r8,r8,4
   86470:	20bfffcc 	andi	r2,r4,65535
   86474:	28ffffcc 	andi	r3,r5,65535
   86478:	10c5c83a 	sub	r2,r2,r3
   8647c:	1245883a 	add	r2,r2,r9
   86480:	2008d43a 	srli	r4,r4,16
   86484:	280ad43a 	srli	r5,r5,16
   86488:	1007d43a 	srai	r3,r2,16
   8648c:	3880000d 	sth	r2,0(r7)
   86490:	2149c83a 	sub	r4,r4,r5
   86494:	20c9883a 	add	r4,r4,r3
   86498:	3900008d 	sth	r4,2(r7)
   8649c:	31800104 	addi	r6,r6,4
   864a0:	39c00104 	addi	r7,r7,4
   864a4:	2013d43a 	srai	r9,r4,16
   864a8:	42ffee36 	bltu	r8,r11,86464 <__mdiff+0x80>
   864ac:	33400c2e 	bgeu	r6,r13,864e0 <__mdiff+0xfc>
   864b0:	30800017 	ldw	r2,0(r6)
   864b4:	31800104 	addi	r6,r6,4
   864b8:	10ffffcc 	andi	r3,r2,65535
   864bc:	1a47883a 	add	r3,r3,r9
   864c0:	1004d43a 	srli	r2,r2,16
   864c4:	1809d43a 	srai	r4,r3,16
   864c8:	38c0000d 	sth	r3,0(r7)
   864cc:	1105883a 	add	r2,r2,r4
   864d0:	3880008d 	sth	r2,2(r7)
   864d4:	1013d43a 	srai	r9,r2,16
   864d8:	39c00104 	addi	r7,r7,4
   864dc:	337ff436 	bltu	r6,r13,864b0 <__mdiff+0xcc>
   864e0:	38bfff17 	ldw	r2,-4(r7)
   864e4:	38ffff04 	addi	r3,r7,-4
   864e8:	1000041e 	bne	r2,zero,864fc <__mdiff+0x118>
   864ec:	18ffff04 	addi	r3,r3,-4
   864f0:	18800017 	ldw	r2,0(r3)
   864f4:	52bfffc4 	addi	r10,r10,-1
   864f8:	103ffc26 	beq	r2,zero,864ec <__mdiff+0x108>
   864fc:	6005883a 	mov	r2,r12
   86500:	62800415 	stw	r10,16(r12)
   86504:	dfc00417 	ldw	ra,16(sp)
   86508:	dcc00317 	ldw	r19,12(sp)
   8650c:	dc800217 	ldw	r18,8(sp)
   86510:	dc400117 	ldw	r17,4(sp)
   86514:	dc000017 	ldw	r16,0(sp)
   86518:	dec00504 	addi	sp,sp,20
   8651c:	f800283a 	ret
   86520:	9009883a 	mov	r4,r18
   86524:	000b883a 	mov	r5,zero
   86528:	00861ac0 	call	861ac <_Balloc>
   8652c:	1019883a 	mov	r12,r2
   86530:	00800044 	movi	r2,1
   86534:	60800415 	stw	r2,16(r12)
   86538:	6005883a 	mov	r2,r12
   8653c:	60000515 	stw	zero,20(r12)
   86540:	dfc00417 	ldw	ra,16(sp)
   86544:	dcc00317 	ldw	r19,12(sp)
   86548:	dc800217 	ldw	r18,8(sp)
   8654c:	dc400117 	ldw	r17,4(sp)
   86550:	dc000017 	ldw	r16,0(sp)
   86554:	dec00504 	addi	sp,sp,20
   86558:	f800283a 	ret
   8655c:	880d883a 	mov	r6,r17
   86560:	04c00044 	movi	r19,1
   86564:	8023883a 	mov	r17,r16
   86568:	3021883a 	mov	r16,r6
   8656c:	003fac06 	br	86420 <__mdiff+0x3c>

00086570 <__lshift>:
   86570:	defff904 	addi	sp,sp,-28
   86574:	28800417 	ldw	r2,16(r5)
   86578:	dc000015 	stw	r16,0(sp)
   8657c:	3021d17a 	srai	r16,r6,5
   86580:	28c00217 	ldw	r3,8(r5)
   86584:	10800044 	addi	r2,r2,1
   86588:	dc400115 	stw	r17,4(sp)
   8658c:	80a3883a 	add	r17,r16,r2
   86590:	dd400515 	stw	r21,20(sp)
   86594:	dd000415 	stw	r20,16(sp)
   86598:	dc800215 	stw	r18,8(sp)
   8659c:	dfc00615 	stw	ra,24(sp)
   865a0:	2825883a 	mov	r18,r5
   865a4:	dcc00315 	stw	r19,12(sp)
   865a8:	3029883a 	mov	r20,r6
   865ac:	202b883a 	mov	r21,r4
   865b0:	29400117 	ldw	r5,4(r5)
   865b4:	1c40030e 	bge	r3,r17,865c4 <__lshift+0x54>
   865b8:	18c7883a 	add	r3,r3,r3
   865bc:	29400044 	addi	r5,r5,1
   865c0:	1c7ffd16 	blt	r3,r17,865b8 <__lshift+0x48>
   865c4:	a809883a 	mov	r4,r21
   865c8:	00861ac0 	call	861ac <_Balloc>
   865cc:	1027883a 	mov	r19,r2
   865d0:	11400504 	addi	r5,r2,20
   865d4:	0400090e 	bge	zero,r16,865fc <__lshift+0x8c>
   865d8:	2805883a 	mov	r2,r5
   865dc:	0007883a 	mov	r3,zero
   865e0:	18c00044 	addi	r3,r3,1
   865e4:	10000015 	stw	zero,0(r2)
   865e8:	10800104 	addi	r2,r2,4
   865ec:	80fffc1e 	bne	r16,r3,865e0 <__lshift+0x70>
   865f0:	8405883a 	add	r2,r16,r16
   865f4:	1085883a 	add	r2,r2,r2
   865f8:	288b883a 	add	r5,r5,r2
   865fc:	90800417 	ldw	r2,16(r18)
   86600:	91000504 	addi	r4,r18,20
   86604:	a18007cc 	andi	r6,r20,31
   86608:	1085883a 	add	r2,r2,r2
   8660c:	1085883a 	add	r2,r2,r2
   86610:	208f883a 	add	r7,r4,r2
   86614:	30001e26 	beq	r6,zero,86690 <__lshift+0x120>
   86618:	00800804 	movi	r2,32
   8661c:	1191c83a 	sub	r8,r2,r6
   86620:	0007883a 	mov	r3,zero
   86624:	20800017 	ldw	r2,0(r4)
   86628:	1184983a 	sll	r2,r2,r6
   8662c:	1884b03a 	or	r2,r3,r2
   86630:	28800015 	stw	r2,0(r5)
   86634:	20c00017 	ldw	r3,0(r4)
   86638:	21000104 	addi	r4,r4,4
   8663c:	29400104 	addi	r5,r5,4
   86640:	1a06d83a 	srl	r3,r3,r8
   86644:	21fff736 	bltu	r4,r7,86624 <__lshift+0xb4>
   86648:	28c00015 	stw	r3,0(r5)
   8664c:	18000126 	beq	r3,zero,86654 <__lshift+0xe4>
   86650:	8c400044 	addi	r17,r17,1
   86654:	88bfffc4 	addi	r2,r17,-1
   86658:	98800415 	stw	r2,16(r19)
   8665c:	a809883a 	mov	r4,r21
   86660:	900b883a 	mov	r5,r18
   86664:	0085c2c0 	call	85c2c <_Bfree>
   86668:	9805883a 	mov	r2,r19
   8666c:	dfc00617 	ldw	ra,24(sp)
   86670:	dd400517 	ldw	r21,20(sp)
   86674:	dd000417 	ldw	r20,16(sp)
   86678:	dcc00317 	ldw	r19,12(sp)
   8667c:	dc800217 	ldw	r18,8(sp)
   86680:	dc400117 	ldw	r17,4(sp)
   86684:	dc000017 	ldw	r16,0(sp)
   86688:	dec00704 	addi	sp,sp,28
   8668c:	f800283a 	ret
   86690:	20800017 	ldw	r2,0(r4)
   86694:	21000104 	addi	r4,r4,4
   86698:	28800015 	stw	r2,0(r5)
   8669c:	29400104 	addi	r5,r5,4
   866a0:	21ffec2e 	bgeu	r4,r7,86654 <__lshift+0xe4>
   866a4:	20800017 	ldw	r2,0(r4)
   866a8:	21000104 	addi	r4,r4,4
   866ac:	28800015 	stw	r2,0(r5)
   866b0:	29400104 	addi	r5,r5,4
   866b4:	21fff636 	bltu	r4,r7,86690 <__lshift+0x120>
   866b8:	003fe606 	br	86654 <__lshift+0xe4>

000866bc <__multiply>:
   866bc:	defff004 	addi	sp,sp,-64
   866c0:	dc800815 	stw	r18,32(sp)
   866c4:	dc400715 	stw	r17,28(sp)
   866c8:	2c800417 	ldw	r18,16(r5)
   866cc:	34400417 	ldw	r17,16(r6)
   866d0:	dcc00915 	stw	r19,36(sp)
   866d4:	dc000615 	stw	r16,24(sp)
   866d8:	dfc00f15 	stw	ra,60(sp)
   866dc:	df000e15 	stw	fp,56(sp)
   866e0:	ddc00d15 	stw	r23,52(sp)
   866e4:	dd800c15 	stw	r22,48(sp)
   866e8:	dd400b15 	stw	r21,44(sp)
   866ec:	dd000a15 	stw	r20,40(sp)
   866f0:	2821883a 	mov	r16,r5
   866f4:	3027883a 	mov	r19,r6
   866f8:	9440040e 	bge	r18,r17,8670c <__multiply+0x50>
   866fc:	8825883a 	mov	r18,r17
   86700:	2c400417 	ldw	r17,16(r5)
   86704:	2827883a 	mov	r19,r5
   86708:	3021883a 	mov	r16,r6
   8670c:	80800217 	ldw	r2,8(r16)
   86710:	9447883a 	add	r3,r18,r17
   86714:	d8c00415 	stw	r3,16(sp)
   86718:	81400117 	ldw	r5,4(r16)
   8671c:	10c0010e 	bge	r2,r3,86724 <__multiply+0x68>
   86720:	29400044 	addi	r5,r5,1
   86724:	00861ac0 	call	861ac <_Balloc>
   86728:	d8800515 	stw	r2,20(sp)
   8672c:	d9000417 	ldw	r4,16(sp)
   86730:	d8c00517 	ldw	r3,20(sp)
   86734:	2105883a 	add	r2,r4,r4
   86738:	1085883a 	add	r2,r2,r2
   8673c:	19000504 	addi	r4,r3,20
   86740:	2085883a 	add	r2,r4,r2
   86744:	d8800315 	stw	r2,12(sp)
   86748:	2080052e 	bgeu	r4,r2,86760 <__multiply+0xa4>
   8674c:	2005883a 	mov	r2,r4
   86750:	d8c00317 	ldw	r3,12(sp)
   86754:	10000015 	stw	zero,0(r2)
   86758:	10800104 	addi	r2,r2,4
   8675c:	10fffc36 	bltu	r2,r3,86750 <__multiply+0x94>
   86760:	8c45883a 	add	r2,r17,r17
   86764:	9487883a 	add	r3,r18,r18
   86768:	9dc00504 	addi	r23,r19,20
   8676c:	1085883a 	add	r2,r2,r2
   86770:	84000504 	addi	r16,r16,20
   86774:	18c7883a 	add	r3,r3,r3
   86778:	b885883a 	add	r2,r23,r2
   8677c:	dc000015 	stw	r16,0(sp)
   86780:	d8800215 	stw	r2,8(sp)
   86784:	80f9883a 	add	fp,r16,r3
   86788:	b880432e 	bgeu	r23,r2,86898 <__multiply+0x1dc>
   8678c:	d9000115 	stw	r4,4(sp)
   86790:	b9000017 	ldw	r4,0(r23)
   86794:	253fffcc 	andi	r20,r4,65535
   86798:	a0001a26 	beq	r20,zero,86804 <__multiply+0x148>
   8679c:	dcc00017 	ldw	r19,0(sp)
   867a0:	dc800117 	ldw	r18,4(sp)
   867a4:	002b883a 	mov	r21,zero
   867a8:	9c400017 	ldw	r17,0(r19)
   867ac:	94000017 	ldw	r16,0(r18)
   867b0:	a009883a 	mov	r4,r20
   867b4:	897fffcc 	andi	r5,r17,65535
   867b8:	00805cc0 	call	805cc <__mulsi3>
   867bc:	880ad43a 	srli	r5,r17,16
   867c0:	80ffffcc 	andi	r3,r16,65535
   867c4:	a8c7883a 	add	r3,r21,r3
   867c8:	a009883a 	mov	r4,r20
   867cc:	10e3883a 	add	r17,r2,r3
   867d0:	8020d43a 	srli	r16,r16,16
   867d4:	00805cc0 	call	805cc <__mulsi3>
   867d8:	8806d43a 	srli	r3,r17,16
   867dc:	1405883a 	add	r2,r2,r16
   867e0:	9cc00104 	addi	r19,r19,4
   867e4:	1887883a 	add	r3,r3,r2
   867e8:	90c0008d 	sth	r3,2(r18)
   867ec:	9440000d 	sth	r17,0(r18)
   867f0:	182ad43a 	srli	r21,r3,16
   867f4:	94800104 	addi	r18,r18,4
   867f8:	9f3feb36 	bltu	r19,fp,867a8 <__multiply+0xec>
   867fc:	95400015 	stw	r21,0(r18)
   86800:	b9000017 	ldw	r4,0(r23)
   86804:	202ad43a 	srli	r21,r4,16
   86808:	a8001c26 	beq	r21,zero,8687c <__multiply+0x1c0>
   8680c:	d9000117 	ldw	r4,4(sp)
   86810:	dd000017 	ldw	r20,0(sp)
   86814:	002d883a 	mov	r22,zero
   86818:	24c00017 	ldw	r19,0(r4)
   8681c:	2025883a 	mov	r18,r4
   86820:	9823883a 	mov	r17,r19
   86824:	a4000017 	ldw	r16,0(r20)
   86828:	a809883a 	mov	r4,r21
   8682c:	a5000104 	addi	r20,r20,4
   86830:	817fffcc 	andi	r5,r16,65535
   86834:	00805cc0 	call	805cc <__mulsi3>
   86838:	8806d43a 	srli	r3,r17,16
   8683c:	800ad43a 	srli	r5,r16,16
   86840:	94c0000d 	sth	r19,0(r18)
   86844:	b0c7883a 	add	r3,r22,r3
   86848:	10e1883a 	add	r16,r2,r3
   8684c:	9400008d 	sth	r16,2(r18)
   86850:	a809883a 	mov	r4,r21
   86854:	94800104 	addi	r18,r18,4
   86858:	00805cc0 	call	805cc <__mulsi3>
   8685c:	94400017 	ldw	r17,0(r18)
   86860:	8020d43a 	srli	r16,r16,16
   86864:	88ffffcc 	andi	r3,r17,65535
   86868:	10c5883a 	add	r2,r2,r3
   8686c:	80a7883a 	add	r19,r16,r2
   86870:	982cd43a 	srli	r22,r19,16
   86874:	a73feb36 	bltu	r20,fp,86824 <__multiply+0x168>
   86878:	94c00015 	stw	r19,0(r18)
   8687c:	d8800217 	ldw	r2,8(sp)
   86880:	bdc00104 	addi	r23,r23,4
   86884:	b880042e 	bgeu	r23,r2,86898 <__multiply+0x1dc>
   86888:	d8c00117 	ldw	r3,4(sp)
   8688c:	18c00104 	addi	r3,r3,4
   86890:	d8c00115 	stw	r3,4(sp)
   86894:	003fbe06 	br	86790 <__multiply+0xd4>
   86898:	d9000417 	ldw	r4,16(sp)
   8689c:	01000c0e 	bge	zero,r4,868d0 <__multiply+0x214>
   868a0:	d8c00317 	ldw	r3,12(sp)
   868a4:	18bfff17 	ldw	r2,-4(r3)
   868a8:	18ffff04 	addi	r3,r3,-4
   868ac:	10000326 	beq	r2,zero,868bc <__multiply+0x200>
   868b0:	00000706 	br	868d0 <__multiply+0x214>
   868b4:	18800017 	ldw	r2,0(r3)
   868b8:	1000051e 	bne	r2,zero,868d0 <__multiply+0x214>
   868bc:	d9000417 	ldw	r4,16(sp)
   868c0:	18ffff04 	addi	r3,r3,-4
   868c4:	213fffc4 	addi	r4,r4,-1
   868c8:	d9000415 	stw	r4,16(sp)
   868cc:	203ff91e 	bne	r4,zero,868b4 <__multiply+0x1f8>
   868d0:	d8800417 	ldw	r2,16(sp)
   868d4:	d8c00517 	ldw	r3,20(sp)
   868d8:	18800415 	stw	r2,16(r3)
   868dc:	1805883a 	mov	r2,r3
   868e0:	dfc00f17 	ldw	ra,60(sp)
   868e4:	df000e17 	ldw	fp,56(sp)
   868e8:	ddc00d17 	ldw	r23,52(sp)
   868ec:	dd800c17 	ldw	r22,48(sp)
   868f0:	dd400b17 	ldw	r21,44(sp)
   868f4:	dd000a17 	ldw	r20,40(sp)
   868f8:	dcc00917 	ldw	r19,36(sp)
   868fc:	dc800817 	ldw	r18,32(sp)
   86900:	dc400717 	ldw	r17,28(sp)
   86904:	dc000617 	ldw	r16,24(sp)
   86908:	dec01004 	addi	sp,sp,64
   8690c:	f800283a 	ret

00086910 <__i2b>:
   86910:	defffd04 	addi	sp,sp,-12
   86914:	dc000015 	stw	r16,0(sp)
   86918:	04000044 	movi	r16,1
   8691c:	dc800115 	stw	r18,4(sp)
   86920:	2825883a 	mov	r18,r5
   86924:	800b883a 	mov	r5,r16
   86928:	dfc00215 	stw	ra,8(sp)
   8692c:	00861ac0 	call	861ac <_Balloc>
   86930:	14000415 	stw	r16,16(r2)
   86934:	14800515 	stw	r18,20(r2)
   86938:	dfc00217 	ldw	ra,8(sp)
   8693c:	dc800117 	ldw	r18,4(sp)
   86940:	dc000017 	ldw	r16,0(sp)
   86944:	dec00304 	addi	sp,sp,12
   86948:	f800283a 	ret

0008694c <__multadd>:
   8694c:	defff604 	addi	sp,sp,-40
   86950:	dd800615 	stw	r22,24(sp)
   86954:	2d800417 	ldw	r22,16(r5)
   86958:	df000815 	stw	fp,32(sp)
   8695c:	ddc00715 	stw	r23,28(sp)
   86960:	dd400515 	stw	r21,20(sp)
   86964:	dd000415 	stw	r20,16(sp)
   86968:	dcc00315 	stw	r19,12(sp)
   8696c:	dc800215 	stw	r18,8(sp)
   86970:	dfc00915 	stw	ra,36(sp)
   86974:	dc400115 	stw	r17,4(sp)
   86978:	dc000015 	stw	r16,0(sp)
   8697c:	282f883a 	mov	r23,r5
   86980:	2039883a 	mov	fp,r4
   86984:	302b883a 	mov	r21,r6
   86988:	3829883a 	mov	r20,r7
   8698c:	2c800504 	addi	r18,r5,20
   86990:	0027883a 	mov	r19,zero
   86994:	94400017 	ldw	r17,0(r18)
   86998:	a80b883a 	mov	r5,r21
   8699c:	9cc00044 	addi	r19,r19,1
   869a0:	893fffcc 	andi	r4,r17,65535
   869a4:	00805cc0 	call	805cc <__mulsi3>
   869a8:	8808d43a 	srli	r4,r17,16
   869ac:	1521883a 	add	r16,r2,r20
   869b0:	a80b883a 	mov	r5,r21
   869b4:	00805cc0 	call	805cc <__mulsi3>
   869b8:	8008d43a 	srli	r4,r16,16
   869bc:	843fffcc 	andi	r16,r16,65535
   869c0:	1105883a 	add	r2,r2,r4
   869c4:	1006943a 	slli	r3,r2,16
   869c8:	1028d43a 	srli	r20,r2,16
   869cc:	1c07883a 	add	r3,r3,r16
   869d0:	90c00015 	stw	r3,0(r18)
   869d4:	94800104 	addi	r18,r18,4
   869d8:	9dbfee16 	blt	r19,r22,86994 <__multadd+0x48>
   869dc:	a0000826 	beq	r20,zero,86a00 <__multadd+0xb4>
   869e0:	b8800217 	ldw	r2,8(r23)
   869e4:	b080130e 	bge	r22,r2,86a34 <__multadd+0xe8>
   869e8:	b585883a 	add	r2,r22,r22
   869ec:	1085883a 	add	r2,r2,r2
   869f0:	15c5883a 	add	r2,r2,r23
   869f4:	b0c00044 	addi	r3,r22,1
   869f8:	15000515 	stw	r20,20(r2)
   869fc:	b8c00415 	stw	r3,16(r23)
   86a00:	b805883a 	mov	r2,r23
   86a04:	dfc00917 	ldw	ra,36(sp)
   86a08:	df000817 	ldw	fp,32(sp)
   86a0c:	ddc00717 	ldw	r23,28(sp)
   86a10:	dd800617 	ldw	r22,24(sp)
   86a14:	dd400517 	ldw	r21,20(sp)
   86a18:	dd000417 	ldw	r20,16(sp)
   86a1c:	dcc00317 	ldw	r19,12(sp)
   86a20:	dc800217 	ldw	r18,8(sp)
   86a24:	dc400117 	ldw	r17,4(sp)
   86a28:	dc000017 	ldw	r16,0(sp)
   86a2c:	dec00a04 	addi	sp,sp,40
   86a30:	f800283a 	ret
   86a34:	b9400117 	ldw	r5,4(r23)
   86a38:	e009883a 	mov	r4,fp
   86a3c:	29400044 	addi	r5,r5,1
   86a40:	00861ac0 	call	861ac <_Balloc>
   86a44:	b9800417 	ldw	r6,16(r23)
   86a48:	b9400304 	addi	r5,r23,12
   86a4c:	11000304 	addi	r4,r2,12
   86a50:	318d883a 	add	r6,r6,r6
   86a54:	318d883a 	add	r6,r6,r6
   86a58:	31800204 	addi	r6,r6,8
   86a5c:	1023883a 	mov	r17,r2
   86a60:	0085a140 	call	85a14 <memcpy>
   86a64:	b80b883a 	mov	r5,r23
   86a68:	e009883a 	mov	r4,fp
   86a6c:	0085c2c0 	call	85c2c <_Bfree>
   86a70:	882f883a 	mov	r23,r17
   86a74:	003fdc06 	br	869e8 <__multadd+0x9c>

00086a78 <__pow5mult>:
   86a78:	defffa04 	addi	sp,sp,-24
   86a7c:	308000cc 	andi	r2,r6,3
   86a80:	dd000415 	stw	r20,16(sp)
   86a84:	dcc00315 	stw	r19,12(sp)
   86a88:	dc000015 	stw	r16,0(sp)
   86a8c:	dfc00515 	stw	ra,20(sp)
   86a90:	dc800215 	stw	r18,8(sp)
   86a94:	dc400115 	stw	r17,4(sp)
   86a98:	3021883a 	mov	r16,r6
   86a9c:	2027883a 	mov	r19,r4
   86aa0:	2829883a 	mov	r20,r5
   86aa4:	10002b1e 	bne	r2,zero,86b54 <__pow5mult+0xdc>
   86aa8:	8025d0ba 	srai	r18,r16,2
   86aac:	90001b26 	beq	r18,zero,86b1c <__pow5mult+0xa4>
   86ab0:	9c001217 	ldw	r16,72(r19)
   86ab4:	8000081e 	bne	r16,zero,86ad8 <__pow5mult+0x60>
   86ab8:	00003006 	br	86b7c <__pow5mult+0x104>
   86abc:	800b883a 	mov	r5,r16
   86ac0:	800d883a 	mov	r6,r16
   86ac4:	9809883a 	mov	r4,r19
   86ac8:	90001426 	beq	r18,zero,86b1c <__pow5mult+0xa4>
   86acc:	80800017 	ldw	r2,0(r16)
   86ad0:	10001b26 	beq	r2,zero,86b40 <__pow5mult+0xc8>
   86ad4:	1021883a 	mov	r16,r2
   86ad8:	9080004c 	andi	r2,r18,1
   86adc:	1005003a 	cmpeq	r2,r2,zero
   86ae0:	9025d07a 	srai	r18,r18,1
   86ae4:	800d883a 	mov	r6,r16
   86ae8:	9809883a 	mov	r4,r19
   86aec:	a00b883a 	mov	r5,r20
   86af0:	103ff21e 	bne	r2,zero,86abc <__pow5mult+0x44>
   86af4:	00866bc0 	call	866bc <__multiply>
   86af8:	a00b883a 	mov	r5,r20
   86afc:	9809883a 	mov	r4,r19
   86b00:	1023883a 	mov	r17,r2
   86b04:	0085c2c0 	call	85c2c <_Bfree>
   86b08:	8829883a 	mov	r20,r17
   86b0c:	800b883a 	mov	r5,r16
   86b10:	800d883a 	mov	r6,r16
   86b14:	9809883a 	mov	r4,r19
   86b18:	903fec1e 	bne	r18,zero,86acc <__pow5mult+0x54>
   86b1c:	a005883a 	mov	r2,r20
   86b20:	dfc00517 	ldw	ra,20(sp)
   86b24:	dd000417 	ldw	r20,16(sp)
   86b28:	dcc00317 	ldw	r19,12(sp)
   86b2c:	dc800217 	ldw	r18,8(sp)
   86b30:	dc400117 	ldw	r17,4(sp)
   86b34:	dc000017 	ldw	r16,0(sp)
   86b38:	dec00604 	addi	sp,sp,24
   86b3c:	f800283a 	ret
   86b40:	00866bc0 	call	866bc <__multiply>
   86b44:	80800015 	stw	r2,0(r16)
   86b48:	1021883a 	mov	r16,r2
   86b4c:	10000015 	stw	zero,0(r2)
   86b50:	003fe106 	br	86ad8 <__pow5mult+0x60>
   86b54:	1085883a 	add	r2,r2,r2
   86b58:	00c00274 	movhi	r3,9
   86b5c:	18f38e04 	addi	r3,r3,-12744
   86b60:	1085883a 	add	r2,r2,r2
   86b64:	10c5883a 	add	r2,r2,r3
   86b68:	11bfff17 	ldw	r6,-4(r2)
   86b6c:	000f883a 	mov	r7,zero
   86b70:	008694c0 	call	8694c <__multadd>
   86b74:	1029883a 	mov	r20,r2
   86b78:	003fcb06 	br	86aa8 <__pow5mult+0x30>
   86b7c:	9809883a 	mov	r4,r19
   86b80:	01409c44 	movi	r5,625
   86b84:	00869100 	call	86910 <__i2b>
   86b88:	98801215 	stw	r2,72(r19)
   86b8c:	1021883a 	mov	r16,r2
   86b90:	10000015 	stw	zero,0(r2)
   86b94:	003fd006 	br	86ad8 <__pow5mult+0x60>

00086b98 <__s2b>:
   86b98:	defff904 	addi	sp,sp,-28
   86b9c:	dcc00315 	stw	r19,12(sp)
   86ba0:	dc800215 	stw	r18,8(sp)
   86ba4:	2827883a 	mov	r19,r5
   86ba8:	2025883a 	mov	r18,r4
   86bac:	01400244 	movi	r5,9
   86bb0:	39000204 	addi	r4,r7,8
   86bb4:	dd000415 	stw	r20,16(sp)
   86bb8:	dc400115 	stw	r17,4(sp)
   86bbc:	dfc00615 	stw	ra,24(sp)
   86bc0:	dd400515 	stw	r21,20(sp)
   86bc4:	dc000015 	stw	r16,0(sp)
   86bc8:	3829883a 	mov	r20,r7
   86bcc:	3023883a 	mov	r17,r6
   86bd0:	00898b00 	call	898b0 <__divsi3>
   86bd4:	00c00044 	movi	r3,1
   86bd8:	1880350e 	bge	r3,r2,86cb0 <__s2b+0x118>
   86bdc:	000b883a 	mov	r5,zero
   86be0:	18c7883a 	add	r3,r3,r3
   86be4:	29400044 	addi	r5,r5,1
   86be8:	18bffd16 	blt	r3,r2,86be0 <__s2b+0x48>
   86bec:	9009883a 	mov	r4,r18
   86bf0:	00861ac0 	call	861ac <_Balloc>
   86bf4:	1011883a 	mov	r8,r2
   86bf8:	d8800717 	ldw	r2,28(sp)
   86bfc:	00c00044 	movi	r3,1
   86c00:	01800244 	movi	r6,9
   86c04:	40800515 	stw	r2,20(r8)
   86c08:	40c00415 	stw	r3,16(r8)
   86c0c:	3440260e 	bge	r6,r17,86ca8 <__s2b+0x110>
   86c10:	3021883a 	mov	r16,r6
   86c14:	99ab883a 	add	r21,r19,r6
   86c18:	9c05883a 	add	r2,r19,r16
   86c1c:	11c00007 	ldb	r7,0(r2)
   86c20:	400b883a 	mov	r5,r8
   86c24:	9009883a 	mov	r4,r18
   86c28:	39fff404 	addi	r7,r7,-48
   86c2c:	01800284 	movi	r6,10
   86c30:	008694c0 	call	8694c <__multadd>
   86c34:	84000044 	addi	r16,r16,1
   86c38:	1011883a 	mov	r8,r2
   86c3c:	8c3ff61e 	bne	r17,r16,86c18 <__s2b+0x80>
   86c40:	ac45883a 	add	r2,r21,r17
   86c44:	117ffe04 	addi	r5,r2,-8
   86c48:	880d883a 	mov	r6,r17
   86c4c:	35000c0e 	bge	r6,r20,86c80 <__s2b+0xe8>
   86c50:	a185c83a 	sub	r2,r20,r6
   86c54:	2821883a 	mov	r16,r5
   86c58:	28a3883a 	add	r17,r5,r2
   86c5c:	81c00007 	ldb	r7,0(r16)
   86c60:	400b883a 	mov	r5,r8
   86c64:	9009883a 	mov	r4,r18
   86c68:	39fff404 	addi	r7,r7,-48
   86c6c:	01800284 	movi	r6,10
   86c70:	008694c0 	call	8694c <__multadd>
   86c74:	84000044 	addi	r16,r16,1
   86c78:	1011883a 	mov	r8,r2
   86c7c:	847ff71e 	bne	r16,r17,86c5c <__s2b+0xc4>
   86c80:	4005883a 	mov	r2,r8
   86c84:	dfc00617 	ldw	ra,24(sp)
   86c88:	dd400517 	ldw	r21,20(sp)
   86c8c:	dd000417 	ldw	r20,16(sp)
   86c90:	dcc00317 	ldw	r19,12(sp)
   86c94:	dc800217 	ldw	r18,8(sp)
   86c98:	dc400117 	ldw	r17,4(sp)
   86c9c:	dc000017 	ldw	r16,0(sp)
   86ca0:	dec00704 	addi	sp,sp,28
   86ca4:	f800283a 	ret
   86ca8:	99400284 	addi	r5,r19,10
   86cac:	003fe706 	br	86c4c <__s2b+0xb4>
   86cb0:	000b883a 	mov	r5,zero
   86cb4:	003fcd06 	br	86bec <__s2b+0x54>

00086cb8 <_realloc_r>:
   86cb8:	defff404 	addi	sp,sp,-48
   86cbc:	dd800815 	stw	r22,32(sp)
   86cc0:	dc800415 	stw	r18,16(sp)
   86cc4:	dc400315 	stw	r17,12(sp)
   86cc8:	dfc00b15 	stw	ra,44(sp)
   86ccc:	df000a15 	stw	fp,40(sp)
   86cd0:	ddc00915 	stw	r23,36(sp)
   86cd4:	dd400715 	stw	r21,28(sp)
   86cd8:	dd000615 	stw	r20,24(sp)
   86cdc:	dcc00515 	stw	r19,20(sp)
   86ce0:	dc000215 	stw	r16,8(sp)
   86ce4:	2825883a 	mov	r18,r5
   86ce8:	3023883a 	mov	r17,r6
   86cec:	202d883a 	mov	r22,r4
   86cf0:	2800c926 	beq	r5,zero,87018 <_realloc_r+0x360>
   86cf4:	008a88c0 	call	8a88c <__malloc_lock>
   86cf8:	943ffe04 	addi	r16,r18,-8
   86cfc:	88c002c4 	addi	r3,r17,11
   86d00:	00800584 	movi	r2,22
   86d04:	82000117 	ldw	r8,4(r16)
   86d08:	10c01b2e 	bgeu	r2,r3,86d78 <_realloc_r+0xc0>
   86d0c:	00bffe04 	movi	r2,-8
   86d10:	188e703a 	and	r7,r3,r2
   86d14:	3839883a 	mov	fp,r7
   86d18:	38001a16 	blt	r7,zero,86d84 <_realloc_r+0xcc>
   86d1c:	e4401936 	bltu	fp,r17,86d84 <_realloc_r+0xcc>
   86d20:	013fff04 	movi	r4,-4
   86d24:	4126703a 	and	r19,r8,r4
   86d28:	99c02616 	blt	r19,r7,86dc4 <_realloc_r+0x10c>
   86d2c:	802b883a 	mov	r21,r16
   86d30:	9829883a 	mov	r20,r19
   86d34:	84000204 	addi	r16,r16,8
   86d38:	a80f883a 	mov	r7,r21
   86d3c:	a70dc83a 	sub	r6,r20,fp
   86d40:	008003c4 	movi	r2,15
   86d44:	1180c136 	bltu	r2,r6,8704c <_realloc_r+0x394>
   86d48:	38800117 	ldw	r2,4(r7)
   86d4c:	a549883a 	add	r4,r20,r21
   86d50:	1080004c 	andi	r2,r2,1
   86d54:	a084b03a 	or	r2,r20,r2
   86d58:	38800115 	stw	r2,4(r7)
   86d5c:	20c00117 	ldw	r3,4(r4)
   86d60:	18c00054 	ori	r3,r3,1
   86d64:	20c00115 	stw	r3,4(r4)
   86d68:	b009883a 	mov	r4,r22
   86d6c:	008a8ac0 	call	8a8ac <__malloc_unlock>
   86d70:	8023883a 	mov	r17,r16
   86d74:	00000606 	br	86d90 <_realloc_r+0xd8>
   86d78:	01c00404 	movi	r7,16
   86d7c:	3839883a 	mov	fp,r7
   86d80:	e47fe72e 	bgeu	fp,r17,86d20 <_realloc_r+0x68>
   86d84:	00800304 	movi	r2,12
   86d88:	0023883a 	mov	r17,zero
   86d8c:	b0800015 	stw	r2,0(r22)
   86d90:	8805883a 	mov	r2,r17
   86d94:	dfc00b17 	ldw	ra,44(sp)
   86d98:	df000a17 	ldw	fp,40(sp)
   86d9c:	ddc00917 	ldw	r23,36(sp)
   86da0:	dd800817 	ldw	r22,32(sp)
   86da4:	dd400717 	ldw	r21,28(sp)
   86da8:	dd000617 	ldw	r20,24(sp)
   86dac:	dcc00517 	ldw	r19,20(sp)
   86db0:	dc800417 	ldw	r18,16(sp)
   86db4:	dc400317 	ldw	r17,12(sp)
   86db8:	dc000217 	ldw	r16,8(sp)
   86dbc:	dec00c04 	addi	sp,sp,48
   86dc0:	f800283a 	ret
   86dc4:	00800274 	movhi	r2,9
   86dc8:	10b4e604 	addi	r2,r2,-11368
   86dcc:	12400217 	ldw	r9,8(r2)
   86dd0:	84cd883a 	add	r6,r16,r19
   86dd4:	802b883a 	mov	r21,r16
   86dd8:	3240b926 	beq	r6,r9,870c0 <_realloc_r+0x408>
   86ddc:	31400117 	ldw	r5,4(r6)
   86de0:	00bfff84 	movi	r2,-2
   86de4:	2884703a 	and	r2,r5,r2
   86de8:	1185883a 	add	r2,r2,r6
   86dec:	10c00117 	ldw	r3,4(r2)
   86df0:	18c0004c 	andi	r3,r3,1
   86df4:	1807003a 	cmpeq	r3,r3,zero
   86df8:	1800a326 	beq	r3,zero,87088 <_realloc_r+0x3d0>
   86dfc:	2908703a 	and	r4,r5,r4
   86e00:	9929883a 	add	r20,r19,r4
   86e04:	a1c0a30e 	bge	r20,r7,87094 <_realloc_r+0x3dc>
   86e08:	4080004c 	andi	r2,r8,1
   86e0c:	1000551e 	bne	r2,zero,86f64 <_realloc_r+0x2ac>
   86e10:	80800017 	ldw	r2,0(r16)
   86e14:	80afc83a 	sub	r23,r16,r2
   86e18:	b8c00117 	ldw	r3,4(r23)
   86e1c:	00bfff04 	movi	r2,-4
   86e20:	1884703a 	and	r2,r3,r2
   86e24:	30002e26 	beq	r6,zero,86ee0 <_realloc_r+0x228>
   86e28:	3240b926 	beq	r6,r9,87110 <_realloc_r+0x458>
   86e2c:	98a9883a 	add	r20,r19,r2
   86e30:	2509883a 	add	r4,r4,r20
   86e34:	d9000015 	stw	r4,0(sp)
   86e38:	21c02a16 	blt	r4,r7,86ee4 <_realloc_r+0x22c>
   86e3c:	30800317 	ldw	r2,12(r6)
   86e40:	30c00217 	ldw	r3,8(r6)
   86e44:	01400904 	movi	r5,36
   86e48:	99bfff04 	addi	r6,r19,-4
   86e4c:	18800315 	stw	r2,12(r3)
   86e50:	10c00215 	stw	r3,8(r2)
   86e54:	b9000317 	ldw	r4,12(r23)
   86e58:	b8800217 	ldw	r2,8(r23)
   86e5c:	b82b883a 	mov	r21,r23
   86e60:	bc000204 	addi	r16,r23,8
   86e64:	20800215 	stw	r2,8(r4)
   86e68:	11000315 	stw	r4,12(r2)
   86e6c:	2980e436 	bltu	r5,r6,87200 <_realloc_r+0x548>
   86e70:	008004c4 	movi	r2,19
   86e74:	9009883a 	mov	r4,r18
   86e78:	8011883a 	mov	r8,r16
   86e7c:	11800f2e 	bgeu	r2,r6,86ebc <_realloc_r+0x204>
   86e80:	90800017 	ldw	r2,0(r18)
   86e84:	ba000404 	addi	r8,r23,16
   86e88:	91000204 	addi	r4,r18,8
   86e8c:	b8800215 	stw	r2,8(r23)
   86e90:	90c00117 	ldw	r3,4(r18)
   86e94:	008006c4 	movi	r2,27
   86e98:	b8c00315 	stw	r3,12(r23)
   86e9c:	1180072e 	bgeu	r2,r6,86ebc <_realloc_r+0x204>
   86ea0:	90c00217 	ldw	r3,8(r18)
   86ea4:	ba000604 	addi	r8,r23,24
   86ea8:	91000404 	addi	r4,r18,16
   86eac:	b8c00415 	stw	r3,16(r23)
   86eb0:	90800317 	ldw	r2,12(r18)
   86eb4:	b8800515 	stw	r2,20(r23)
   86eb8:	3140e726 	beq	r6,r5,87258 <_realloc_r+0x5a0>
   86ebc:	20800017 	ldw	r2,0(r4)
   86ec0:	dd000017 	ldw	r20,0(sp)
   86ec4:	b80f883a 	mov	r7,r23
   86ec8:	40800015 	stw	r2,0(r8)
   86ecc:	20c00117 	ldw	r3,4(r4)
   86ed0:	40c00115 	stw	r3,4(r8)
   86ed4:	20800217 	ldw	r2,8(r4)
   86ed8:	40800215 	stw	r2,8(r8)
   86edc:	003f9706 	br	86d3c <_realloc_r+0x84>
   86ee0:	98a9883a 	add	r20,r19,r2
   86ee4:	a1c01f16 	blt	r20,r7,86f64 <_realloc_r+0x2ac>
   86ee8:	b8c00317 	ldw	r3,12(r23)
   86eec:	b8800217 	ldw	r2,8(r23)
   86ef0:	99bfff04 	addi	r6,r19,-4
   86ef4:	01400904 	movi	r5,36
   86ef8:	b82b883a 	mov	r21,r23
   86efc:	18800215 	stw	r2,8(r3)
   86f00:	10c00315 	stw	r3,12(r2)
   86f04:	bc000204 	addi	r16,r23,8
   86f08:	2980c336 	bltu	r5,r6,87218 <_realloc_r+0x560>
   86f0c:	008004c4 	movi	r2,19
   86f10:	9009883a 	mov	r4,r18
   86f14:	8011883a 	mov	r8,r16
   86f18:	11800f2e 	bgeu	r2,r6,86f58 <_realloc_r+0x2a0>
   86f1c:	90800017 	ldw	r2,0(r18)
   86f20:	ba000404 	addi	r8,r23,16
   86f24:	91000204 	addi	r4,r18,8
   86f28:	b8800215 	stw	r2,8(r23)
   86f2c:	90c00117 	ldw	r3,4(r18)
   86f30:	008006c4 	movi	r2,27
   86f34:	b8c00315 	stw	r3,12(r23)
   86f38:	1180072e 	bgeu	r2,r6,86f58 <_realloc_r+0x2a0>
   86f3c:	90c00217 	ldw	r3,8(r18)
   86f40:	ba000604 	addi	r8,r23,24
   86f44:	91000404 	addi	r4,r18,16
   86f48:	b8c00415 	stw	r3,16(r23)
   86f4c:	90800317 	ldw	r2,12(r18)
   86f50:	b8800515 	stw	r2,20(r23)
   86f54:	3140c726 	beq	r6,r5,87274 <_realloc_r+0x5bc>
   86f58:	20800017 	ldw	r2,0(r4)
   86f5c:	b80f883a 	mov	r7,r23
   86f60:	003fd906 	br	86ec8 <_realloc_r+0x210>
   86f64:	880b883a 	mov	r5,r17
   86f68:	b009883a 	mov	r4,r22
   86f6c:	00851f00 	call	851f0 <_malloc_r>
   86f70:	1023883a 	mov	r17,r2
   86f74:	10002526 	beq	r2,zero,8700c <_realloc_r+0x354>
   86f78:	80800117 	ldw	r2,4(r16)
   86f7c:	00ffff84 	movi	r3,-2
   86f80:	893ffe04 	addi	r4,r17,-8
   86f84:	10c4703a 	and	r2,r2,r3
   86f88:	8085883a 	add	r2,r16,r2
   86f8c:	20809526 	beq	r4,r2,871e4 <_realloc_r+0x52c>
   86f90:	99bfff04 	addi	r6,r19,-4
   86f94:	01c00904 	movi	r7,36
   86f98:	39804536 	bltu	r7,r6,870b0 <_realloc_r+0x3f8>
   86f9c:	008004c4 	movi	r2,19
   86fa0:	9009883a 	mov	r4,r18
   86fa4:	880b883a 	mov	r5,r17
   86fa8:	11800f2e 	bgeu	r2,r6,86fe8 <_realloc_r+0x330>
   86fac:	90800017 	ldw	r2,0(r18)
   86fb0:	89400204 	addi	r5,r17,8
   86fb4:	91000204 	addi	r4,r18,8
   86fb8:	88800015 	stw	r2,0(r17)
   86fbc:	90c00117 	ldw	r3,4(r18)
   86fc0:	008006c4 	movi	r2,27
   86fc4:	88c00115 	stw	r3,4(r17)
   86fc8:	1180072e 	bgeu	r2,r6,86fe8 <_realloc_r+0x330>
   86fcc:	90c00217 	ldw	r3,8(r18)
   86fd0:	89400404 	addi	r5,r17,16
   86fd4:	91000404 	addi	r4,r18,16
   86fd8:	88c00215 	stw	r3,8(r17)
   86fdc:	90800317 	ldw	r2,12(r18)
   86fe0:	88800315 	stw	r2,12(r17)
   86fe4:	31c09126 	beq	r6,r7,8722c <_realloc_r+0x574>
   86fe8:	20800017 	ldw	r2,0(r4)
   86fec:	28800015 	stw	r2,0(r5)
   86ff0:	20c00117 	ldw	r3,4(r4)
   86ff4:	28c00115 	stw	r3,4(r5)
   86ff8:	20800217 	ldw	r2,8(r4)
   86ffc:	28800215 	stw	r2,8(r5)
   87000:	900b883a 	mov	r5,r18
   87004:	b009883a 	mov	r4,r22
   87008:	00846680 	call	84668 <_free_r>
   8700c:	b009883a 	mov	r4,r22
   87010:	008a8ac0 	call	8a8ac <__malloc_unlock>
   87014:	003f5e06 	br	86d90 <_realloc_r+0xd8>
   87018:	300b883a 	mov	r5,r6
   8701c:	dfc00b17 	ldw	ra,44(sp)
   87020:	df000a17 	ldw	fp,40(sp)
   87024:	ddc00917 	ldw	r23,36(sp)
   87028:	dd800817 	ldw	r22,32(sp)
   8702c:	dd400717 	ldw	r21,28(sp)
   87030:	dd000617 	ldw	r20,24(sp)
   87034:	dcc00517 	ldw	r19,20(sp)
   87038:	dc800417 	ldw	r18,16(sp)
   8703c:	dc400317 	ldw	r17,12(sp)
   87040:	dc000217 	ldw	r16,8(sp)
   87044:	dec00c04 	addi	sp,sp,48
   87048:	00851f01 	jmpi	851f0 <_malloc_r>
   8704c:	38800117 	ldw	r2,4(r7)
   87050:	e54b883a 	add	r5,fp,r21
   87054:	31000054 	ori	r4,r6,1
   87058:	1080004c 	andi	r2,r2,1
   8705c:	1704b03a 	or	r2,r2,fp
   87060:	38800115 	stw	r2,4(r7)
   87064:	29000115 	stw	r4,4(r5)
   87068:	2987883a 	add	r3,r5,r6
   8706c:	18800117 	ldw	r2,4(r3)
   87070:	29400204 	addi	r5,r5,8
   87074:	b009883a 	mov	r4,r22
   87078:	10800054 	ori	r2,r2,1
   8707c:	18800115 	stw	r2,4(r3)
   87080:	00846680 	call	84668 <_free_r>
   87084:	003f3806 	br	86d68 <_realloc_r+0xb0>
   87088:	000d883a 	mov	r6,zero
   8708c:	0009883a 	mov	r4,zero
   87090:	003f5d06 	br	86e08 <_realloc_r+0x150>
   87094:	30c00217 	ldw	r3,8(r6)
   87098:	30800317 	ldw	r2,12(r6)
   8709c:	800f883a 	mov	r7,r16
   870a0:	84000204 	addi	r16,r16,8
   870a4:	10c00215 	stw	r3,8(r2)
   870a8:	18800315 	stw	r2,12(r3)
   870ac:	003f2306 	br	86d3c <_realloc_r+0x84>
   870b0:	8809883a 	mov	r4,r17
   870b4:	900b883a 	mov	r5,r18
   870b8:	0085ab40 	call	85ab4 <memmove>
   870bc:	003fd006 	br	87000 <_realloc_r+0x348>
   870c0:	30800117 	ldw	r2,4(r6)
   870c4:	e0c00404 	addi	r3,fp,16
   870c8:	1108703a 	and	r4,r2,r4
   870cc:	9905883a 	add	r2,r19,r4
   870d0:	10ff4d16 	blt	r2,r3,86e08 <_realloc_r+0x150>
   870d4:	1705c83a 	sub	r2,r2,fp
   870d8:	870b883a 	add	r5,r16,fp
   870dc:	10800054 	ori	r2,r2,1
   870e0:	28800115 	stw	r2,4(r5)
   870e4:	80c00117 	ldw	r3,4(r16)
   870e8:	00800274 	movhi	r2,9
   870ec:	10b4e604 	addi	r2,r2,-11368
   870f0:	b009883a 	mov	r4,r22
   870f4:	18c0004c 	andi	r3,r3,1
   870f8:	e0c6b03a 	or	r3,fp,r3
   870fc:	11400215 	stw	r5,8(r2)
   87100:	80c00115 	stw	r3,4(r16)
   87104:	008a8ac0 	call	8a8ac <__malloc_unlock>
   87108:	84400204 	addi	r17,r16,8
   8710c:	003f2006 	br	86d90 <_realloc_r+0xd8>
   87110:	98a9883a 	add	r20,r19,r2
   87114:	2509883a 	add	r4,r4,r20
   87118:	e0800404 	addi	r2,fp,16
   8711c:	d9000115 	stw	r4,4(sp)
   87120:	20bf7016 	blt	r4,r2,86ee4 <_realloc_r+0x22c>
   87124:	b8c00317 	ldw	r3,12(r23)
   87128:	b8800217 	ldw	r2,8(r23)
   8712c:	99bfff04 	addi	r6,r19,-4
   87130:	01400904 	movi	r5,36
   87134:	18800215 	stw	r2,8(r3)
   87138:	10c00315 	stw	r3,12(r2)
   8713c:	bc400204 	addi	r17,r23,8
   87140:	29804136 	bltu	r5,r6,87248 <_realloc_r+0x590>
   87144:	008004c4 	movi	r2,19
   87148:	9009883a 	mov	r4,r18
   8714c:	880f883a 	mov	r7,r17
   87150:	11800f2e 	bgeu	r2,r6,87190 <_realloc_r+0x4d8>
   87154:	90800017 	ldw	r2,0(r18)
   87158:	b9c00404 	addi	r7,r23,16
   8715c:	91000204 	addi	r4,r18,8
   87160:	b8800215 	stw	r2,8(r23)
   87164:	90c00117 	ldw	r3,4(r18)
   87168:	008006c4 	movi	r2,27
   8716c:	b8c00315 	stw	r3,12(r23)
   87170:	1180072e 	bgeu	r2,r6,87190 <_realloc_r+0x4d8>
   87174:	90c00217 	ldw	r3,8(r18)
   87178:	b9c00604 	addi	r7,r23,24
   8717c:	91000404 	addi	r4,r18,16
   87180:	b8c00415 	stw	r3,16(r23)
   87184:	90800317 	ldw	r2,12(r18)
   87188:	b8800515 	stw	r2,20(r23)
   8718c:	31404026 	beq	r6,r5,87290 <_realloc_r+0x5d8>
   87190:	20800017 	ldw	r2,0(r4)
   87194:	38800015 	stw	r2,0(r7)
   87198:	20c00117 	ldw	r3,4(r4)
   8719c:	38c00115 	stw	r3,4(r7)
   871a0:	20800217 	ldw	r2,8(r4)
   871a4:	38800215 	stw	r2,8(r7)
   871a8:	d8c00117 	ldw	r3,4(sp)
   871ac:	bf0b883a 	add	r5,r23,fp
   871b0:	b009883a 	mov	r4,r22
   871b4:	1f05c83a 	sub	r2,r3,fp
   871b8:	10800054 	ori	r2,r2,1
   871bc:	28800115 	stw	r2,4(r5)
   871c0:	b8c00117 	ldw	r3,4(r23)
   871c4:	00800274 	movhi	r2,9
   871c8:	10b4e604 	addi	r2,r2,-11368
   871cc:	11400215 	stw	r5,8(r2)
   871d0:	18c0004c 	andi	r3,r3,1
   871d4:	e0c6b03a 	or	r3,fp,r3
   871d8:	b8c00115 	stw	r3,4(r23)
   871dc:	008a8ac0 	call	8a8ac <__malloc_unlock>
   871e0:	003eeb06 	br	86d90 <_realloc_r+0xd8>
   871e4:	20800117 	ldw	r2,4(r4)
   871e8:	00ffff04 	movi	r3,-4
   871ec:	800f883a 	mov	r7,r16
   871f0:	10c4703a 	and	r2,r2,r3
   871f4:	98a9883a 	add	r20,r19,r2
   871f8:	84000204 	addi	r16,r16,8
   871fc:	003ecf06 	br	86d3c <_realloc_r+0x84>
   87200:	900b883a 	mov	r5,r18
   87204:	8009883a 	mov	r4,r16
   87208:	0085ab40 	call	85ab4 <memmove>
   8720c:	dd000017 	ldw	r20,0(sp)
   87210:	b80f883a 	mov	r7,r23
   87214:	003ec906 	br	86d3c <_realloc_r+0x84>
   87218:	900b883a 	mov	r5,r18
   8721c:	8009883a 	mov	r4,r16
   87220:	0085ab40 	call	85ab4 <memmove>
   87224:	b80f883a 	mov	r7,r23
   87228:	003ec406 	br	86d3c <_realloc_r+0x84>
   8722c:	90c00417 	ldw	r3,16(r18)
   87230:	89400604 	addi	r5,r17,24
   87234:	91000604 	addi	r4,r18,24
   87238:	88c00415 	stw	r3,16(r17)
   8723c:	90800517 	ldw	r2,20(r18)
   87240:	88800515 	stw	r2,20(r17)
   87244:	003f6806 	br	86fe8 <_realloc_r+0x330>
   87248:	900b883a 	mov	r5,r18
   8724c:	8809883a 	mov	r4,r17
   87250:	0085ab40 	call	85ab4 <memmove>
   87254:	003fd406 	br	871a8 <_realloc_r+0x4f0>
   87258:	90c00417 	ldw	r3,16(r18)
   8725c:	91000604 	addi	r4,r18,24
   87260:	ba000804 	addi	r8,r23,32
   87264:	b8c00615 	stw	r3,24(r23)
   87268:	90800517 	ldw	r2,20(r18)
   8726c:	b8800715 	stw	r2,28(r23)
   87270:	003f1206 	br	86ebc <_realloc_r+0x204>
   87274:	90c00417 	ldw	r3,16(r18)
   87278:	91000604 	addi	r4,r18,24
   8727c:	ba000804 	addi	r8,r23,32
   87280:	b8c00615 	stw	r3,24(r23)
   87284:	90800517 	ldw	r2,20(r18)
   87288:	b8800715 	stw	r2,28(r23)
   8728c:	003f3206 	br	86f58 <_realloc_r+0x2a0>
   87290:	90c00417 	ldw	r3,16(r18)
   87294:	91000604 	addi	r4,r18,24
   87298:	b9c00804 	addi	r7,r23,32
   8729c:	b8c00615 	stw	r3,24(r23)
   872a0:	90800517 	ldw	r2,20(r18)
   872a4:	b8800715 	stw	r2,28(r23)
   872a8:	003fb906 	br	87190 <_realloc_r+0x4d8>

000872ac <__isinfd>:
   872ac:	200d883a 	mov	r6,r4
   872b0:	0109c83a 	sub	r4,zero,r4
   872b4:	2188b03a 	or	r4,r4,r6
   872b8:	2008d7fa 	srli	r4,r4,31
   872bc:	00a00034 	movhi	r2,32768
   872c0:	10bfffc4 	addi	r2,r2,-1
   872c4:	1144703a 	and	r2,r2,r5
   872c8:	2088b03a 	or	r4,r4,r2
   872cc:	009ffc34 	movhi	r2,32752
   872d0:	1105c83a 	sub	r2,r2,r4
   872d4:	0087c83a 	sub	r3,zero,r2
   872d8:	10c4b03a 	or	r2,r2,r3
   872dc:	1004d7fa 	srli	r2,r2,31
   872e0:	00c00044 	movi	r3,1
   872e4:	1885c83a 	sub	r2,r3,r2
   872e8:	f800283a 	ret

000872ec <__isnand>:
   872ec:	200d883a 	mov	r6,r4
   872f0:	0109c83a 	sub	r4,zero,r4
   872f4:	2188b03a 	or	r4,r4,r6
   872f8:	2008d7fa 	srli	r4,r4,31
   872fc:	00a00034 	movhi	r2,32768
   87300:	10bfffc4 	addi	r2,r2,-1
   87304:	1144703a 	and	r2,r2,r5
   87308:	2088b03a 	or	r4,r4,r2
   8730c:	009ffc34 	movhi	r2,32752
   87310:	1105c83a 	sub	r2,r2,r4
   87314:	1004d7fa 	srli	r2,r2,31
   87318:	f800283a 	ret

0008731c <_sbrk_r>:
   8731c:	defffd04 	addi	sp,sp,-12
   87320:	dc000015 	stw	r16,0(sp)
   87324:	04000274 	movhi	r16,9
   87328:	84011704 	addi	r16,r16,1116
   8732c:	dc400115 	stw	r17,4(sp)
   87330:	80000015 	stw	zero,0(r16)
   87334:	2023883a 	mov	r17,r4
   87338:	2809883a 	mov	r4,r5
   8733c:	dfc00215 	stw	ra,8(sp)
   87340:	008aac80 	call	8aac8 <sbrk>
   87344:	1007883a 	mov	r3,r2
   87348:	00bfffc4 	movi	r2,-1
   8734c:	18800626 	beq	r3,r2,87368 <_sbrk_r+0x4c>
   87350:	1805883a 	mov	r2,r3
   87354:	dfc00217 	ldw	ra,8(sp)
   87358:	dc400117 	ldw	r17,4(sp)
   8735c:	dc000017 	ldw	r16,0(sp)
   87360:	dec00304 	addi	sp,sp,12
   87364:	f800283a 	ret
   87368:	80800017 	ldw	r2,0(r16)
   8736c:	103ff826 	beq	r2,zero,87350 <_sbrk_r+0x34>
   87370:	88800015 	stw	r2,0(r17)
   87374:	1805883a 	mov	r2,r3
   87378:	dfc00217 	ldw	ra,8(sp)
   8737c:	dc400117 	ldw	r17,4(sp)
   87380:	dc000017 	ldw	r16,0(sp)
   87384:	dec00304 	addi	sp,sp,12
   87388:	f800283a 	ret

0008738c <__sclose>:
   8738c:	2940038f 	ldh	r5,14(r5)
   87390:	00876d41 	jmpi	876d4 <_close_r>

00087394 <__sseek>:
   87394:	defffe04 	addi	sp,sp,-8
   87398:	dc000015 	stw	r16,0(sp)
   8739c:	2821883a 	mov	r16,r5
   873a0:	2940038f 	ldh	r5,14(r5)
   873a4:	dfc00115 	stw	ra,4(sp)
   873a8:	008794c0 	call	8794c <_lseek_r>
   873ac:	1007883a 	mov	r3,r2
   873b0:	00bfffc4 	movi	r2,-1
   873b4:	18800926 	beq	r3,r2,873dc <__sseek+0x48>
   873b8:	8080030b 	ldhu	r2,12(r16)
   873bc:	80c01415 	stw	r3,80(r16)
   873c0:	10840014 	ori	r2,r2,4096
   873c4:	8080030d 	sth	r2,12(r16)
   873c8:	1805883a 	mov	r2,r3
   873cc:	dfc00117 	ldw	ra,4(sp)
   873d0:	dc000017 	ldw	r16,0(sp)
   873d4:	dec00204 	addi	sp,sp,8
   873d8:	f800283a 	ret
   873dc:	8080030b 	ldhu	r2,12(r16)
   873e0:	10bbffcc 	andi	r2,r2,61439
   873e4:	8080030d 	sth	r2,12(r16)
   873e8:	1805883a 	mov	r2,r3
   873ec:	dfc00117 	ldw	ra,4(sp)
   873f0:	dc000017 	ldw	r16,0(sp)
   873f4:	dec00204 	addi	sp,sp,8
   873f8:	f800283a 	ret

000873fc <__swrite>:
   873fc:	2880030b 	ldhu	r2,12(r5)
   87400:	defffb04 	addi	sp,sp,-20
   87404:	dcc00315 	stw	r19,12(sp)
   87408:	1080400c 	andi	r2,r2,256
   8740c:	dc800215 	stw	r18,8(sp)
   87410:	dc400115 	stw	r17,4(sp)
   87414:	dc000015 	stw	r16,0(sp)
   87418:	3027883a 	mov	r19,r6
   8741c:	3825883a 	mov	r18,r7
   87420:	dfc00415 	stw	ra,16(sp)
   87424:	2821883a 	mov	r16,r5
   87428:	000d883a 	mov	r6,zero
   8742c:	01c00084 	movi	r7,2
   87430:	2023883a 	mov	r17,r4
   87434:	10000226 	beq	r2,zero,87440 <__swrite+0x44>
   87438:	2940038f 	ldh	r5,14(r5)
   8743c:	008794c0 	call	8794c <_lseek_r>
   87440:	8080030b 	ldhu	r2,12(r16)
   87444:	8140038f 	ldh	r5,14(r16)
   87448:	8809883a 	mov	r4,r17
   8744c:	10bbffcc 	andi	r2,r2,61439
   87450:	980d883a 	mov	r6,r19
   87454:	900f883a 	mov	r7,r18
   87458:	8080030d 	sth	r2,12(r16)
   8745c:	dfc00417 	ldw	ra,16(sp)
   87460:	dcc00317 	ldw	r19,12(sp)
   87464:	dc800217 	ldw	r18,8(sp)
   87468:	dc400117 	ldw	r17,4(sp)
   8746c:	dc000017 	ldw	r16,0(sp)
   87470:	dec00504 	addi	sp,sp,20
   87474:	00875941 	jmpi	87594 <_write_r>

00087478 <__sread>:
   87478:	defffe04 	addi	sp,sp,-8
   8747c:	dc000015 	stw	r16,0(sp)
   87480:	2821883a 	mov	r16,r5
   87484:	2940038f 	ldh	r5,14(r5)
   87488:	dfc00115 	stw	ra,4(sp)
   8748c:	00879c40 	call	879c4 <_read_r>
   87490:	1007883a 	mov	r3,r2
   87494:	10000816 	blt	r2,zero,874b8 <__sread+0x40>
   87498:	80801417 	ldw	r2,80(r16)
   8749c:	10c5883a 	add	r2,r2,r3
   874a0:	80801415 	stw	r2,80(r16)
   874a4:	1805883a 	mov	r2,r3
   874a8:	dfc00117 	ldw	ra,4(sp)
   874ac:	dc000017 	ldw	r16,0(sp)
   874b0:	dec00204 	addi	sp,sp,8
   874b4:	f800283a 	ret
   874b8:	8080030b 	ldhu	r2,12(r16)
   874bc:	10bbffcc 	andi	r2,r2,61439
   874c0:	8080030d 	sth	r2,12(r16)
   874c4:	1805883a 	mov	r2,r3
   874c8:	dfc00117 	ldw	ra,4(sp)
   874cc:	dc000017 	ldw	r16,0(sp)
   874d0:	dec00204 	addi	sp,sp,8
   874d4:	f800283a 	ret

000874d8 <strcmp>:
   874d8:	2144b03a 	or	r2,r4,r5
   874dc:	108000cc 	andi	r2,r2,3
   874e0:	10001d1e 	bne	r2,zero,87558 <strcmp+0x80>
   874e4:	200f883a 	mov	r7,r4
   874e8:	28800017 	ldw	r2,0(r5)
   874ec:	21000017 	ldw	r4,0(r4)
   874f0:	280d883a 	mov	r6,r5
   874f4:	2080161e 	bne	r4,r2,87550 <strcmp+0x78>
   874f8:	023fbff4 	movhi	r8,65279
   874fc:	423fbfc4 	addi	r8,r8,-257
   87500:	2207883a 	add	r3,r4,r8
   87504:	01602074 	movhi	r5,32897
   87508:	29602004 	addi	r5,r5,-32640
   8750c:	1946703a 	and	r3,r3,r5
   87510:	0104303a 	nor	r2,zero,r4
   87514:	10c4703a 	and	r2,r2,r3
   87518:	10001c1e 	bne	r2,zero,8758c <strcmp+0xb4>
   8751c:	4013883a 	mov	r9,r8
   87520:	2811883a 	mov	r8,r5
   87524:	00000106 	br	8752c <strcmp+0x54>
   87528:	1800181e 	bne	r3,zero,8758c <strcmp+0xb4>
   8752c:	39c00104 	addi	r7,r7,4
   87530:	39000017 	ldw	r4,0(r7)
   87534:	31800104 	addi	r6,r6,4
   87538:	31400017 	ldw	r5,0(r6)
   8753c:	2245883a 	add	r2,r4,r9
   87540:	1204703a 	and	r2,r2,r8
   87544:	0106303a 	nor	r3,zero,r4
   87548:	1886703a 	and	r3,r3,r2
   8754c:	217ff626 	beq	r4,r5,87528 <strcmp+0x50>
   87550:	3809883a 	mov	r4,r7
   87554:	300b883a 	mov	r5,r6
   87558:	20c00007 	ldb	r3,0(r4)
   8755c:	1800051e 	bne	r3,zero,87574 <strcmp+0x9c>
   87560:	00000606 	br	8757c <strcmp+0xa4>
   87564:	21000044 	addi	r4,r4,1
   87568:	20c00007 	ldb	r3,0(r4)
   8756c:	29400044 	addi	r5,r5,1
   87570:	18000226 	beq	r3,zero,8757c <strcmp+0xa4>
   87574:	28800007 	ldb	r2,0(r5)
   87578:	18bffa26 	beq	r3,r2,87564 <strcmp+0x8c>
   8757c:	20c00003 	ldbu	r3,0(r4)
   87580:	28800003 	ldbu	r2,0(r5)
   87584:	1885c83a 	sub	r2,r3,r2
   87588:	f800283a 	ret
   8758c:	0005883a 	mov	r2,zero
   87590:	f800283a 	ret

00087594 <_write_r>:
   87594:	defffd04 	addi	sp,sp,-12
   87598:	dc000015 	stw	r16,0(sp)
   8759c:	04000274 	movhi	r16,9
   875a0:	84011704 	addi	r16,r16,1116
   875a4:	dc400115 	stw	r17,4(sp)
   875a8:	80000015 	stw	zero,0(r16)
   875ac:	2023883a 	mov	r17,r4
   875b0:	2809883a 	mov	r4,r5
   875b4:	300b883a 	mov	r5,r6
   875b8:	380d883a 	mov	r6,r7
   875bc:	dfc00215 	stw	ra,8(sp)
   875c0:	008ab840 	call	8ab84 <write>
   875c4:	1007883a 	mov	r3,r2
   875c8:	00bfffc4 	movi	r2,-1
   875cc:	18800626 	beq	r3,r2,875e8 <_write_r+0x54>
   875d0:	1805883a 	mov	r2,r3
   875d4:	dfc00217 	ldw	ra,8(sp)
   875d8:	dc400117 	ldw	r17,4(sp)
   875dc:	dc000017 	ldw	r16,0(sp)
   875e0:	dec00304 	addi	sp,sp,12
   875e4:	f800283a 	ret
   875e8:	80800017 	ldw	r2,0(r16)
   875ec:	103ff826 	beq	r2,zero,875d0 <_write_r+0x3c>
   875f0:	88800015 	stw	r2,0(r17)
   875f4:	1805883a 	mov	r2,r3
   875f8:	dfc00217 	ldw	ra,8(sp)
   875fc:	dc400117 	ldw	r17,4(sp)
   87600:	dc000017 	ldw	r16,0(sp)
   87604:	dec00304 	addi	sp,sp,12
   87608:	f800283a 	ret

0008760c <_calloc_r>:
   8760c:	defffe04 	addi	sp,sp,-8
   87610:	dc400015 	stw	r17,0(sp)
   87614:	2023883a 	mov	r17,r4
   87618:	2809883a 	mov	r4,r5
   8761c:	300b883a 	mov	r5,r6
   87620:	dfc00115 	stw	ra,4(sp)
   87624:	00805cc0 	call	805cc <__mulsi3>
   87628:	100b883a 	mov	r5,r2
   8762c:	8809883a 	mov	r4,r17
   87630:	00851f00 	call	851f0 <_malloc_r>
   87634:	1023883a 	mov	r17,r2
   87638:	01c00904 	movi	r7,36
   8763c:	10000d26 	beq	r2,zero,87674 <_calloc_r+0x68>
   87640:	10ffff17 	ldw	r3,-4(r2)
   87644:	1009883a 	mov	r4,r2
   87648:	00bfff04 	movi	r2,-4
   8764c:	1886703a 	and	r3,r3,r2
   87650:	1887883a 	add	r3,r3,r2
   87654:	180d883a 	mov	r6,r3
   87658:	000b883a 	mov	r5,zero
   8765c:	38c01736 	bltu	r7,r3,876bc <_calloc_r+0xb0>
   87660:	008004c4 	movi	r2,19
   87664:	10c00836 	bltu	r2,r3,87688 <_calloc_r+0x7c>
   87668:	20000215 	stw	zero,8(r4)
   8766c:	20000015 	stw	zero,0(r4)
   87670:	20000115 	stw	zero,4(r4)
   87674:	8805883a 	mov	r2,r17
   87678:	dfc00117 	ldw	ra,4(sp)
   8767c:	dc400017 	ldw	r17,0(sp)
   87680:	dec00204 	addi	sp,sp,8
   87684:	f800283a 	ret
   87688:	008006c4 	movi	r2,27
   8768c:	88000015 	stw	zero,0(r17)
   87690:	88000115 	stw	zero,4(r17)
   87694:	89000204 	addi	r4,r17,8
   87698:	10fff32e 	bgeu	r2,r3,87668 <_calloc_r+0x5c>
   8769c:	88000215 	stw	zero,8(r17)
   876a0:	88000315 	stw	zero,12(r17)
   876a4:	89000404 	addi	r4,r17,16
   876a8:	19ffef1e 	bne	r3,r7,87668 <_calloc_r+0x5c>
   876ac:	89000604 	addi	r4,r17,24
   876b0:	88000415 	stw	zero,16(r17)
   876b4:	88000515 	stw	zero,20(r17)
   876b8:	003feb06 	br	87668 <_calloc_r+0x5c>
   876bc:	0085b940 	call	85b94 <memset>
   876c0:	8805883a 	mov	r2,r17
   876c4:	dfc00117 	ldw	ra,4(sp)
   876c8:	dc400017 	ldw	r17,0(sp)
   876cc:	dec00204 	addi	sp,sp,8
   876d0:	f800283a 	ret

000876d4 <_close_r>:
   876d4:	defffd04 	addi	sp,sp,-12
   876d8:	dc000015 	stw	r16,0(sp)
   876dc:	04000274 	movhi	r16,9
   876e0:	84011704 	addi	r16,r16,1116
   876e4:	dc400115 	stw	r17,4(sp)
   876e8:	80000015 	stw	zero,0(r16)
   876ec:	2023883a 	mov	r17,r4
   876f0:	2809883a 	mov	r4,r5
   876f4:	dfc00215 	stw	ra,8(sp)
   876f8:	008a0380 	call	8a038 <close>
   876fc:	1007883a 	mov	r3,r2
   87700:	00bfffc4 	movi	r2,-1
   87704:	18800626 	beq	r3,r2,87720 <_close_r+0x4c>
   87708:	1805883a 	mov	r2,r3
   8770c:	dfc00217 	ldw	ra,8(sp)
   87710:	dc400117 	ldw	r17,4(sp)
   87714:	dc000017 	ldw	r16,0(sp)
   87718:	dec00304 	addi	sp,sp,12
   8771c:	f800283a 	ret
   87720:	80800017 	ldw	r2,0(r16)
   87724:	103ff826 	beq	r2,zero,87708 <_close_r+0x34>
   87728:	88800015 	stw	r2,0(r17)
   8772c:	1805883a 	mov	r2,r3
   87730:	dfc00217 	ldw	ra,8(sp)
   87734:	dc400117 	ldw	r17,4(sp)
   87738:	dc000017 	ldw	r16,0(sp)
   8773c:	dec00304 	addi	sp,sp,12
   87740:	f800283a 	ret

00087744 <_fclose_r>:
   87744:	defffc04 	addi	sp,sp,-16
   87748:	dc400115 	stw	r17,4(sp)
   8774c:	dc000015 	stw	r16,0(sp)
   87750:	dfc00315 	stw	ra,12(sp)
   87754:	dc800215 	stw	r18,8(sp)
   87758:	2821883a 	mov	r16,r5
   8775c:	2023883a 	mov	r17,r4
   87760:	28002926 	beq	r5,zero,87808 <_fclose_r+0xc4>
   87764:	00842a00 	call	842a0 <__sfp_lock_acquire>
   87768:	88000226 	beq	r17,zero,87774 <_fclose_r+0x30>
   8776c:	88800e17 	ldw	r2,56(r17)
   87770:	10002d26 	beq	r2,zero,87828 <_fclose_r+0xe4>
   87774:	8080030f 	ldh	r2,12(r16)
   87778:	10002226 	beq	r2,zero,87804 <_fclose_r+0xc0>
   8777c:	8809883a 	mov	r4,r17
   87780:	800b883a 	mov	r5,r16
   87784:	00840180 	call	84018 <_fflush_r>
   87788:	1025883a 	mov	r18,r2
   8778c:	80800b17 	ldw	r2,44(r16)
   87790:	10000426 	beq	r2,zero,877a4 <_fclose_r+0x60>
   87794:	81400717 	ldw	r5,28(r16)
   87798:	8809883a 	mov	r4,r17
   8779c:	103ee83a 	callr	r2
   877a0:	10002a16 	blt	r2,zero,8784c <_fclose_r+0x108>
   877a4:	8080030b 	ldhu	r2,12(r16)
   877a8:	1080200c 	andi	r2,r2,128
   877ac:	1000231e 	bne	r2,zero,8783c <_fclose_r+0xf8>
   877b0:	81400c17 	ldw	r5,48(r16)
   877b4:	28000526 	beq	r5,zero,877cc <_fclose_r+0x88>
   877b8:	80801004 	addi	r2,r16,64
   877bc:	28800226 	beq	r5,r2,877c8 <_fclose_r+0x84>
   877c0:	8809883a 	mov	r4,r17
   877c4:	00846680 	call	84668 <_free_r>
   877c8:	80000c15 	stw	zero,48(r16)
   877cc:	81401117 	ldw	r5,68(r16)
   877d0:	28000326 	beq	r5,zero,877e0 <_fclose_r+0x9c>
   877d4:	8809883a 	mov	r4,r17
   877d8:	00846680 	call	84668 <_free_r>
   877dc:	80001115 	stw	zero,68(r16)
   877e0:	8000030d 	sth	zero,12(r16)
   877e4:	00842a40 	call	842a4 <__sfp_lock_release>
   877e8:	9005883a 	mov	r2,r18
   877ec:	dfc00317 	ldw	ra,12(sp)
   877f0:	dc800217 	ldw	r18,8(sp)
   877f4:	dc400117 	ldw	r17,4(sp)
   877f8:	dc000017 	ldw	r16,0(sp)
   877fc:	dec00404 	addi	sp,sp,16
   87800:	f800283a 	ret
   87804:	00842a40 	call	842a4 <__sfp_lock_release>
   87808:	0025883a 	mov	r18,zero
   8780c:	9005883a 	mov	r2,r18
   87810:	dfc00317 	ldw	ra,12(sp)
   87814:	dc800217 	ldw	r18,8(sp)
   87818:	dc400117 	ldw	r17,4(sp)
   8781c:	dc000017 	ldw	r16,0(sp)
   87820:	dec00404 	addi	sp,sp,16
   87824:	f800283a 	ret
   87828:	8809883a 	mov	r4,r17
   8782c:	00842b00 	call	842b0 <__sinit>
   87830:	8080030f 	ldh	r2,12(r16)
   87834:	103fd11e 	bne	r2,zero,8777c <_fclose_r+0x38>
   87838:	003ff206 	br	87804 <_fclose_r+0xc0>
   8783c:	81400417 	ldw	r5,16(r16)
   87840:	8809883a 	mov	r4,r17
   87844:	00846680 	call	84668 <_free_r>
   87848:	003fd906 	br	877b0 <_fclose_r+0x6c>
   8784c:	04bfffc4 	movi	r18,-1
   87850:	003fd406 	br	877a4 <_fclose_r+0x60>

00087854 <fclose>:
   87854:	00800274 	movhi	r2,9
   87858:	10ba6a04 	addi	r2,r2,-5720
   8785c:	200b883a 	mov	r5,r4
   87860:	11000017 	ldw	r4,0(r2)
   87864:	00877441 	jmpi	87744 <_fclose_r>

00087868 <_fstat_r>:
   87868:	defffd04 	addi	sp,sp,-12
   8786c:	dc000015 	stw	r16,0(sp)
   87870:	04000274 	movhi	r16,9
   87874:	84011704 	addi	r16,r16,1116
   87878:	dc400115 	stw	r17,4(sp)
   8787c:	80000015 	stw	zero,0(r16)
   87880:	2023883a 	mov	r17,r4
   87884:	2809883a 	mov	r4,r5
   87888:	300b883a 	mov	r5,r6
   8788c:	dfc00215 	stw	ra,8(sp)
   87890:	008a1c40 	call	8a1c4 <fstat>
   87894:	1007883a 	mov	r3,r2
   87898:	00bfffc4 	movi	r2,-1
   8789c:	18800626 	beq	r3,r2,878b8 <_fstat_r+0x50>
   878a0:	1805883a 	mov	r2,r3
   878a4:	dfc00217 	ldw	ra,8(sp)
   878a8:	dc400117 	ldw	r17,4(sp)
   878ac:	dc000017 	ldw	r16,0(sp)
   878b0:	dec00304 	addi	sp,sp,12
   878b4:	f800283a 	ret
   878b8:	80800017 	ldw	r2,0(r16)
   878bc:	103ff826 	beq	r2,zero,878a0 <_fstat_r+0x38>
   878c0:	88800015 	stw	r2,0(r17)
   878c4:	1805883a 	mov	r2,r3
   878c8:	dfc00217 	ldw	ra,8(sp)
   878cc:	dc400117 	ldw	r17,4(sp)
   878d0:	dc000017 	ldw	r16,0(sp)
   878d4:	dec00304 	addi	sp,sp,12
   878d8:	f800283a 	ret

000878dc <_isatty_r>:
   878dc:	defffd04 	addi	sp,sp,-12
   878e0:	dc000015 	stw	r16,0(sp)
   878e4:	04000274 	movhi	r16,9
   878e8:	84011704 	addi	r16,r16,1116
   878ec:	dc400115 	stw	r17,4(sp)
   878f0:	80000015 	stw	zero,0(r16)
   878f4:	2023883a 	mov	r17,r4
   878f8:	2809883a 	mov	r4,r5
   878fc:	dfc00215 	stw	ra,8(sp)
   87900:	008a4bc0 	call	8a4bc <isatty>
   87904:	1007883a 	mov	r3,r2
   87908:	00bfffc4 	movi	r2,-1
   8790c:	18800626 	beq	r3,r2,87928 <_isatty_r+0x4c>
   87910:	1805883a 	mov	r2,r3
   87914:	dfc00217 	ldw	ra,8(sp)
   87918:	dc400117 	ldw	r17,4(sp)
   8791c:	dc000017 	ldw	r16,0(sp)
   87920:	dec00304 	addi	sp,sp,12
   87924:	f800283a 	ret
   87928:	80800017 	ldw	r2,0(r16)
   8792c:	103ff826 	beq	r2,zero,87910 <_isatty_r+0x34>
   87930:	88800015 	stw	r2,0(r17)
   87934:	1805883a 	mov	r2,r3
   87938:	dfc00217 	ldw	ra,8(sp)
   8793c:	dc400117 	ldw	r17,4(sp)
   87940:	dc000017 	ldw	r16,0(sp)
   87944:	dec00304 	addi	sp,sp,12
   87948:	f800283a 	ret

0008794c <_lseek_r>:
   8794c:	defffd04 	addi	sp,sp,-12
   87950:	dc000015 	stw	r16,0(sp)
   87954:	04000274 	movhi	r16,9
   87958:	84011704 	addi	r16,r16,1116
   8795c:	dc400115 	stw	r17,4(sp)
   87960:	80000015 	stw	zero,0(r16)
   87964:	2023883a 	mov	r17,r4
   87968:	2809883a 	mov	r4,r5
   8796c:	300b883a 	mov	r5,r6
   87970:	380d883a 	mov	r6,r7
   87974:	dfc00215 	stw	ra,8(sp)
   87978:	008a6cc0 	call	8a6cc <lseek>
   8797c:	1007883a 	mov	r3,r2
   87980:	00bfffc4 	movi	r2,-1
   87984:	18800626 	beq	r3,r2,879a0 <_lseek_r+0x54>
   87988:	1805883a 	mov	r2,r3
   8798c:	dfc00217 	ldw	ra,8(sp)
   87990:	dc400117 	ldw	r17,4(sp)
   87994:	dc000017 	ldw	r16,0(sp)
   87998:	dec00304 	addi	sp,sp,12
   8799c:	f800283a 	ret
   879a0:	80800017 	ldw	r2,0(r16)
   879a4:	103ff826 	beq	r2,zero,87988 <_lseek_r+0x3c>
   879a8:	88800015 	stw	r2,0(r17)
   879ac:	1805883a 	mov	r2,r3
   879b0:	dfc00217 	ldw	ra,8(sp)
   879b4:	dc400117 	ldw	r17,4(sp)
   879b8:	dc000017 	ldw	r16,0(sp)
   879bc:	dec00304 	addi	sp,sp,12
   879c0:	f800283a 	ret

000879c4 <_read_r>:
   879c4:	defffd04 	addi	sp,sp,-12
   879c8:	dc000015 	stw	r16,0(sp)
   879cc:	04000274 	movhi	r16,9
   879d0:	84011704 	addi	r16,r16,1116
   879d4:	dc400115 	stw	r17,4(sp)
   879d8:	80000015 	stw	zero,0(r16)
   879dc:	2023883a 	mov	r17,r4
   879e0:	2809883a 	mov	r4,r5
   879e4:	300b883a 	mov	r5,r6
   879e8:	380d883a 	mov	r6,r7
   879ec:	dfc00215 	stw	ra,8(sp)
   879f0:	008a8cc0 	call	8a8cc <read>
   879f4:	1007883a 	mov	r3,r2
   879f8:	00bfffc4 	movi	r2,-1
   879fc:	18800626 	beq	r3,r2,87a18 <_read_r+0x54>
   87a00:	1805883a 	mov	r2,r3
   87a04:	dfc00217 	ldw	ra,8(sp)
   87a08:	dc400117 	ldw	r17,4(sp)
   87a0c:	dc000017 	ldw	r16,0(sp)
   87a10:	dec00304 	addi	sp,sp,12
   87a14:	f800283a 	ret
   87a18:	80800017 	ldw	r2,0(r16)
   87a1c:	103ff826 	beq	r2,zero,87a00 <_read_r+0x3c>
   87a20:	88800015 	stw	r2,0(r17)
   87a24:	1805883a 	mov	r2,r3
   87a28:	dfc00217 	ldw	ra,8(sp)
   87a2c:	dc400117 	ldw	r17,4(sp)
   87a30:	dc000017 	ldw	r16,0(sp)
   87a34:	dec00304 	addi	sp,sp,12
   87a38:	f800283a 	ret

00087a3c <__udivdi3>:
   87a3c:	defff104 	addi	sp,sp,-60
   87a40:	0015883a 	mov	r10,zero
   87a44:	2005883a 	mov	r2,r4
   87a48:	3011883a 	mov	r8,r6
   87a4c:	df000d15 	stw	fp,52(sp)
   87a50:	dd400a15 	stw	r21,40(sp)
   87a54:	dcc00815 	stw	r19,32(sp)
   87a58:	dfc00e15 	stw	ra,56(sp)
   87a5c:	ddc00c15 	stw	r23,48(sp)
   87a60:	dd800b15 	stw	r22,44(sp)
   87a64:	dd000915 	stw	r20,36(sp)
   87a68:	dc800715 	stw	r18,28(sp)
   87a6c:	dc400615 	stw	r17,24(sp)
   87a70:	dc000515 	stw	r16,20(sp)
   87a74:	da800315 	stw	r10,12(sp)
   87a78:	4027883a 	mov	r19,r8
   87a7c:	1039883a 	mov	fp,r2
   87a80:	282b883a 	mov	r21,r5
   87a84:	da800415 	stw	r10,16(sp)
   87a88:	3800401e 	bne	r7,zero,87b8c <__udivdi3+0x150>
   87a8c:	2a006536 	bltu	r5,r8,87c24 <__udivdi3+0x1e8>
   87a90:	4000b526 	beq	r8,zero,87d68 <__udivdi3+0x32c>
   87a94:	00bfffd4 	movui	r2,65535
   87a98:	14c0ad36 	bltu	r2,r19,87d50 <__udivdi3+0x314>
   87a9c:	00803fc4 	movi	r2,255
   87aa0:	14c15e36 	bltu	r2,r19,8801c <__udivdi3+0x5e0>
   87aa4:	000b883a 	mov	r5,zero
   87aa8:	0005883a 	mov	r2,zero
   87aac:	9884d83a 	srl	r2,r19,r2
   87ab0:	01000274 	movhi	r4,9
   87ab4:	21339604 	addi	r4,r4,-12712
   87ab8:	01800804 	movi	r6,32
   87abc:	1105883a 	add	r2,r2,r4
   87ac0:	10c00003 	ldbu	r3,0(r2)
   87ac4:	28c7883a 	add	r3,r5,r3
   87ac8:	30e9c83a 	sub	r20,r6,r3
   87acc:	a0010a1e 	bne	r20,zero,87ef8 <__udivdi3+0x4bc>
   87ad0:	982ed43a 	srli	r23,r19,16
   87ad4:	acebc83a 	sub	r21,r21,r19
   87ad8:	9dbfffcc 	andi	r22,r19,65535
   87adc:	05000044 	movi	r20,1
   87ae0:	a809883a 	mov	r4,r21
   87ae4:	b80b883a 	mov	r5,r23
   87ae8:	00899700 	call	89970 <__udivsi3>
   87aec:	100b883a 	mov	r5,r2
   87af0:	b009883a 	mov	r4,r22
   87af4:	1021883a 	mov	r16,r2
   87af8:	00805cc0 	call	805cc <__mulsi3>
   87afc:	a809883a 	mov	r4,r21
   87b00:	b80b883a 	mov	r5,r23
   87b04:	1023883a 	mov	r17,r2
   87b08:	00899780 	call	89978 <__umodsi3>
   87b0c:	1004943a 	slli	r2,r2,16
   87b10:	e006d43a 	srli	r3,fp,16
   87b14:	10c4b03a 	or	r2,r2,r3
   87b18:	1440042e 	bgeu	r2,r17,87b2c <__udivdi3+0xf0>
   87b1c:	14c5883a 	add	r2,r2,r19
   87b20:	843fffc4 	addi	r16,r16,-1
   87b24:	14c00136 	bltu	r2,r19,87b2c <__udivdi3+0xf0>
   87b28:	14415c36 	bltu	r2,r17,8809c <__udivdi3+0x660>
   87b2c:	1463c83a 	sub	r17,r2,r17
   87b30:	8809883a 	mov	r4,r17
   87b34:	b80b883a 	mov	r5,r23
   87b38:	00899700 	call	89970 <__udivsi3>
   87b3c:	100b883a 	mov	r5,r2
   87b40:	b009883a 	mov	r4,r22
   87b44:	102b883a 	mov	r21,r2
   87b48:	00805cc0 	call	805cc <__mulsi3>
   87b4c:	8809883a 	mov	r4,r17
   87b50:	b80b883a 	mov	r5,r23
   87b54:	1025883a 	mov	r18,r2
   87b58:	00899780 	call	89978 <__umodsi3>
   87b5c:	1004943a 	slli	r2,r2,16
   87b60:	e0ffffcc 	andi	r3,fp,65535
   87b64:	10c4b03a 	or	r2,r2,r3
   87b68:	1480042e 	bgeu	r2,r18,87b7c <__udivdi3+0x140>
   87b6c:	9885883a 	add	r2,r19,r2
   87b70:	ad7fffc4 	addi	r21,r21,-1
   87b74:	14c00136 	bltu	r2,r19,87b7c <__udivdi3+0x140>
   87b78:	14813c36 	bltu	r2,r18,8806c <__udivdi3+0x630>
   87b7c:	8004943a 	slli	r2,r16,16
   87b80:	a009883a 	mov	r4,r20
   87b84:	a884b03a 	or	r2,r21,r2
   87b88:	00001506 	br	87be0 <__udivdi3+0x1a4>
   87b8c:	380d883a 	mov	r6,r7
   87b90:	29c06c36 	bltu	r5,r7,87d44 <__udivdi3+0x308>
   87b94:	00bfffd4 	movui	r2,65535
   87b98:	11c06436 	bltu	r2,r7,87d2c <__udivdi3+0x2f0>
   87b9c:	00803fc4 	movi	r2,255
   87ba0:	11c11836 	bltu	r2,r7,88004 <__udivdi3+0x5c8>
   87ba4:	000b883a 	mov	r5,zero
   87ba8:	0005883a 	mov	r2,zero
   87bac:	3084d83a 	srl	r2,r6,r2
   87bb0:	01000274 	movhi	r4,9
   87bb4:	21339604 	addi	r4,r4,-12712
   87bb8:	01c00804 	movi	r7,32
   87bbc:	1105883a 	add	r2,r2,r4
   87bc0:	10c00003 	ldbu	r3,0(r2)
   87bc4:	28c7883a 	add	r3,r5,r3
   87bc8:	38edc83a 	sub	r22,r7,r3
   87bcc:	b000731e 	bne	r22,zero,87d9c <__udivdi3+0x360>
   87bd0:	35400136 	bltu	r6,r21,87bd8 <__udivdi3+0x19c>
   87bd4:	e4c05b36 	bltu	fp,r19,87d44 <__udivdi3+0x308>
   87bd8:	00800044 	movi	r2,1
   87bdc:	0009883a 	mov	r4,zero
   87be0:	d8800315 	stw	r2,12(sp)
   87be4:	d9400317 	ldw	r5,12(sp)
   87be8:	d9000415 	stw	r4,16(sp)
   87bec:	2007883a 	mov	r3,r4
   87bf0:	2805883a 	mov	r2,r5
   87bf4:	dfc00e17 	ldw	ra,56(sp)
   87bf8:	df000d17 	ldw	fp,52(sp)
   87bfc:	ddc00c17 	ldw	r23,48(sp)
   87c00:	dd800b17 	ldw	r22,44(sp)
   87c04:	dd400a17 	ldw	r21,40(sp)
   87c08:	dd000917 	ldw	r20,36(sp)
   87c0c:	dcc00817 	ldw	r19,32(sp)
   87c10:	dc800717 	ldw	r18,28(sp)
   87c14:	dc400617 	ldw	r17,24(sp)
   87c18:	dc000517 	ldw	r16,20(sp)
   87c1c:	dec00f04 	addi	sp,sp,60
   87c20:	f800283a 	ret
   87c24:	00bfffd4 	movui	r2,65535
   87c28:	12005636 	bltu	r2,r8,87d84 <__udivdi3+0x348>
   87c2c:	00803fc4 	movi	r2,255
   87c30:	12010036 	bltu	r2,r8,88034 <__udivdi3+0x5f8>
   87c34:	000b883a 	mov	r5,zero
   87c38:	0005883a 	mov	r2,zero
   87c3c:	9884d83a 	srl	r2,r19,r2
   87c40:	01000274 	movhi	r4,9
   87c44:	21339604 	addi	r4,r4,-12712
   87c48:	01800804 	movi	r6,32
   87c4c:	1105883a 	add	r2,r2,r4
   87c50:	10c00003 	ldbu	r3,0(r2)
   87c54:	28c7883a 	add	r3,r5,r3
   87c58:	30cbc83a 	sub	r5,r6,r3
   87c5c:	28000626 	beq	r5,zero,87c78 <__udivdi3+0x23c>
   87c60:	3145c83a 	sub	r2,r6,r5
   87c64:	e084d83a 	srl	r2,fp,r2
   87c68:	a946983a 	sll	r3,r21,r5
   87c6c:	e178983a 	sll	fp,fp,r5
   87c70:	9966983a 	sll	r19,r19,r5
   87c74:	18aab03a 	or	r21,r3,r2
   87c78:	982ed43a 	srli	r23,r19,16
   87c7c:	a809883a 	mov	r4,r21
   87c80:	9cbfffcc 	andi	r18,r19,65535
   87c84:	b80b883a 	mov	r5,r23
   87c88:	00899700 	call	89970 <__udivsi3>
   87c8c:	100b883a 	mov	r5,r2
   87c90:	9009883a 	mov	r4,r18
   87c94:	1021883a 	mov	r16,r2
   87c98:	00805cc0 	call	805cc <__mulsi3>
   87c9c:	a809883a 	mov	r4,r21
   87ca0:	b80b883a 	mov	r5,r23
   87ca4:	1023883a 	mov	r17,r2
   87ca8:	00899780 	call	89978 <__umodsi3>
   87cac:	1004943a 	slli	r2,r2,16
   87cb0:	e006d43a 	srli	r3,fp,16
   87cb4:	10c4b03a 	or	r2,r2,r3
   87cb8:	1440042e 	bgeu	r2,r17,87ccc <__udivdi3+0x290>
   87cbc:	14c5883a 	add	r2,r2,r19
   87cc0:	843fffc4 	addi	r16,r16,-1
   87cc4:	14c00136 	bltu	r2,r19,87ccc <__udivdi3+0x290>
   87cc8:	1440ea36 	bltu	r2,r17,88074 <__udivdi3+0x638>
   87ccc:	1463c83a 	sub	r17,r2,r17
   87cd0:	8809883a 	mov	r4,r17
   87cd4:	b80b883a 	mov	r5,r23
   87cd8:	00899700 	call	89970 <__udivsi3>
   87cdc:	100b883a 	mov	r5,r2
   87ce0:	9009883a 	mov	r4,r18
   87ce4:	102b883a 	mov	r21,r2
   87ce8:	00805cc0 	call	805cc <__mulsi3>
   87cec:	8809883a 	mov	r4,r17
   87cf0:	b80b883a 	mov	r5,r23
   87cf4:	1025883a 	mov	r18,r2
   87cf8:	00899780 	call	89978 <__umodsi3>
   87cfc:	1004943a 	slli	r2,r2,16
   87d00:	e0ffffcc 	andi	r3,fp,65535
   87d04:	10c4b03a 	or	r2,r2,r3
   87d08:	1480042e 	bgeu	r2,r18,87d1c <__udivdi3+0x2e0>
   87d0c:	9885883a 	add	r2,r19,r2
   87d10:	ad7fffc4 	addi	r21,r21,-1
   87d14:	14c00136 	bltu	r2,r19,87d1c <__udivdi3+0x2e0>
   87d18:	1480d936 	bltu	r2,r18,88080 <__udivdi3+0x644>
   87d1c:	8004943a 	slli	r2,r16,16
   87d20:	0009883a 	mov	r4,zero
   87d24:	a884b03a 	or	r2,r21,r2
   87d28:	003fad06 	br	87be0 <__udivdi3+0x1a4>
   87d2c:	00804034 	movhi	r2,256
   87d30:	10bfffc4 	addi	r2,r2,-1
   87d34:	11c0b636 	bltu	r2,r7,88010 <__udivdi3+0x5d4>
   87d38:	01400404 	movi	r5,16
   87d3c:	2805883a 	mov	r2,r5
   87d40:	003f9a06 	br	87bac <__udivdi3+0x170>
   87d44:	0005883a 	mov	r2,zero
   87d48:	0009883a 	mov	r4,zero
   87d4c:	003fa406 	br	87be0 <__udivdi3+0x1a4>
   87d50:	00804034 	movhi	r2,256
   87d54:	10bfffc4 	addi	r2,r2,-1
   87d58:	14c0b336 	bltu	r2,r19,88028 <__udivdi3+0x5ec>
   87d5c:	01400404 	movi	r5,16
   87d60:	2805883a 	mov	r2,r5
   87d64:	003f5106 	br	87aac <__udivdi3+0x70>
   87d68:	01000044 	movi	r4,1
   87d6c:	000b883a 	mov	r5,zero
   87d70:	00899700 	call	89970 <__udivsi3>
   87d74:	1027883a 	mov	r19,r2
   87d78:	00bfffd4 	movui	r2,65535
   87d7c:	14fff436 	bltu	r2,r19,87d50 <__udivdi3+0x314>
   87d80:	003f4606 	br	87a9c <__udivdi3+0x60>
   87d84:	00804034 	movhi	r2,256
   87d88:	10bfffc4 	addi	r2,r2,-1
   87d8c:	1200ac36 	bltu	r2,r8,88040 <__udivdi3+0x604>
   87d90:	01400404 	movi	r5,16
   87d94:	2805883a 	mov	r2,r5
   87d98:	003fa806 	br	87c3c <__udivdi3+0x200>
   87d9c:	3d85c83a 	sub	r2,r7,r22
   87da0:	3588983a 	sll	r4,r6,r22
   87da4:	9886d83a 	srl	r3,r19,r2
   87da8:	a8a2d83a 	srl	r17,r21,r2
   87dac:	e084d83a 	srl	r2,fp,r2
   87db0:	20eeb03a 	or	r23,r4,r3
   87db4:	b824d43a 	srli	r18,r23,16
   87db8:	ad86983a 	sll	r3,r21,r22
   87dbc:	8809883a 	mov	r4,r17
   87dc0:	900b883a 	mov	r5,r18
   87dc4:	1886b03a 	or	r3,r3,r2
   87dc8:	d8c00115 	stw	r3,4(sp)
   87dcc:	bc3fffcc 	andi	r16,r23,65535
   87dd0:	00899700 	call	89970 <__udivsi3>
   87dd4:	100b883a 	mov	r5,r2
   87dd8:	8009883a 	mov	r4,r16
   87ddc:	1029883a 	mov	r20,r2
   87de0:	00805cc0 	call	805cc <__mulsi3>
   87de4:	900b883a 	mov	r5,r18
   87de8:	8809883a 	mov	r4,r17
   87dec:	102b883a 	mov	r21,r2
   87df0:	00899780 	call	89978 <__umodsi3>
   87df4:	d9400117 	ldw	r5,4(sp)
   87df8:	1004943a 	slli	r2,r2,16
   87dfc:	9da6983a 	sll	r19,r19,r22
   87e00:	2806d43a 	srli	r3,r5,16
   87e04:	10c4b03a 	or	r2,r2,r3
   87e08:	1540032e 	bgeu	r2,r21,87e18 <__udivdi3+0x3dc>
   87e0c:	15c5883a 	add	r2,r2,r23
   87e10:	a53fffc4 	addi	r20,r20,-1
   87e14:	15c0912e 	bgeu	r2,r23,8805c <__udivdi3+0x620>
   87e18:	1563c83a 	sub	r17,r2,r21
   87e1c:	8809883a 	mov	r4,r17
   87e20:	900b883a 	mov	r5,r18
   87e24:	00899700 	call	89970 <__udivsi3>
   87e28:	100b883a 	mov	r5,r2
   87e2c:	8009883a 	mov	r4,r16
   87e30:	102b883a 	mov	r21,r2
   87e34:	00805cc0 	call	805cc <__mulsi3>
   87e38:	8809883a 	mov	r4,r17
   87e3c:	900b883a 	mov	r5,r18
   87e40:	1021883a 	mov	r16,r2
   87e44:	00899780 	call	89978 <__umodsi3>
   87e48:	da800117 	ldw	r10,4(sp)
   87e4c:	1004943a 	slli	r2,r2,16
   87e50:	50ffffcc 	andi	r3,r10,65535
   87e54:	10c6b03a 	or	r3,r2,r3
   87e58:	1c00032e 	bgeu	r3,r16,87e68 <__udivdi3+0x42c>
   87e5c:	1dc7883a 	add	r3,r3,r23
   87e60:	ad7fffc4 	addi	r21,r21,-1
   87e64:	1dc0792e 	bgeu	r3,r23,8804c <__udivdi3+0x610>
   87e68:	a004943a 	slli	r2,r20,16
   87e6c:	982ed43a 	srli	r23,r19,16
   87e70:	9cffffcc 	andi	r19,r19,65535
   87e74:	a8a4b03a 	or	r18,r21,r2
   87e78:	947fffcc 	andi	r17,r18,65535
   87e7c:	902ad43a 	srli	r21,r18,16
   87e80:	8809883a 	mov	r4,r17
   87e84:	980b883a 	mov	r5,r19
   87e88:	1c21c83a 	sub	r16,r3,r16
   87e8c:	00805cc0 	call	805cc <__mulsi3>
   87e90:	8809883a 	mov	r4,r17
   87e94:	b80b883a 	mov	r5,r23
   87e98:	1029883a 	mov	r20,r2
   87e9c:	00805cc0 	call	805cc <__mulsi3>
   87ea0:	980b883a 	mov	r5,r19
   87ea4:	a809883a 	mov	r4,r21
   87ea8:	1023883a 	mov	r17,r2
   87eac:	00805cc0 	call	805cc <__mulsi3>
   87eb0:	a809883a 	mov	r4,r21
   87eb4:	b80b883a 	mov	r5,r23
   87eb8:	1027883a 	mov	r19,r2
   87ebc:	00805cc0 	call	805cc <__mulsi3>
   87ec0:	1009883a 	mov	r4,r2
   87ec4:	a004d43a 	srli	r2,r20,16
   87ec8:	8ce3883a 	add	r17,r17,r19
   87ecc:	1447883a 	add	r3,r2,r17
   87ed0:	1cc0022e 	bgeu	r3,r19,87edc <__udivdi3+0x4a0>
   87ed4:	00800074 	movhi	r2,1
   87ed8:	2089883a 	add	r4,r4,r2
   87edc:	1804d43a 	srli	r2,r3,16
   87ee0:	2085883a 	add	r2,r4,r2
   87ee4:	80804436 	bltu	r16,r2,87ff8 <__udivdi3+0x5bc>
   87ee8:	80803e26 	beq	r16,r2,87fe4 <__udivdi3+0x5a8>
   87eec:	9005883a 	mov	r2,r18
   87ef0:	0009883a 	mov	r4,zero
   87ef4:	003f3a06 	br	87be0 <__udivdi3+0x1a4>
   87ef8:	9d26983a 	sll	r19,r19,r20
   87efc:	3505c83a 	sub	r2,r6,r20
   87f00:	a8a2d83a 	srl	r17,r21,r2
   87f04:	982ed43a 	srli	r23,r19,16
   87f08:	e084d83a 	srl	r2,fp,r2
   87f0c:	ad06983a 	sll	r3,r21,r20
   87f10:	8809883a 	mov	r4,r17
   87f14:	b80b883a 	mov	r5,r23
   87f18:	1886b03a 	or	r3,r3,r2
   87f1c:	d8c00015 	stw	r3,0(sp)
   87f20:	9dbfffcc 	andi	r22,r19,65535
   87f24:	00899700 	call	89970 <__udivsi3>
   87f28:	100b883a 	mov	r5,r2
   87f2c:	b009883a 	mov	r4,r22
   87f30:	d8800215 	stw	r2,8(sp)
   87f34:	00805cc0 	call	805cc <__mulsi3>
   87f38:	8809883a 	mov	r4,r17
   87f3c:	b80b883a 	mov	r5,r23
   87f40:	102b883a 	mov	r21,r2
   87f44:	00899780 	call	89978 <__umodsi3>
   87f48:	d9000017 	ldw	r4,0(sp)
   87f4c:	1004943a 	slli	r2,r2,16
   87f50:	2006d43a 	srli	r3,r4,16
   87f54:	10c4b03a 	or	r2,r2,r3
   87f58:	1540052e 	bgeu	r2,r21,87f70 <__udivdi3+0x534>
   87f5c:	d9400217 	ldw	r5,8(sp)
   87f60:	14c5883a 	add	r2,r2,r19
   87f64:	297fffc4 	addi	r5,r5,-1
   87f68:	d9400215 	stw	r5,8(sp)
   87f6c:	14c0462e 	bgeu	r2,r19,88088 <__udivdi3+0x64c>
   87f70:	1563c83a 	sub	r17,r2,r21
   87f74:	8809883a 	mov	r4,r17
   87f78:	b80b883a 	mov	r5,r23
   87f7c:	00899700 	call	89970 <__udivsi3>
   87f80:	100b883a 	mov	r5,r2
   87f84:	b009883a 	mov	r4,r22
   87f88:	1025883a 	mov	r18,r2
   87f8c:	00805cc0 	call	805cc <__mulsi3>
   87f90:	8809883a 	mov	r4,r17
   87f94:	b80b883a 	mov	r5,r23
   87f98:	1021883a 	mov	r16,r2
   87f9c:	00899780 	call	89978 <__umodsi3>
   87fa0:	da800017 	ldw	r10,0(sp)
   87fa4:	1004943a 	slli	r2,r2,16
   87fa8:	50ffffcc 	andi	r3,r10,65535
   87fac:	10c6b03a 	or	r3,r2,r3
   87fb0:	1c00062e 	bgeu	r3,r16,87fcc <__udivdi3+0x590>
   87fb4:	1cc7883a 	add	r3,r3,r19
   87fb8:	94bfffc4 	addi	r18,r18,-1
   87fbc:	1cc00336 	bltu	r3,r19,87fcc <__udivdi3+0x590>
   87fc0:	1c00022e 	bgeu	r3,r16,87fcc <__udivdi3+0x590>
   87fc4:	94bfffc4 	addi	r18,r18,-1
   87fc8:	1cc7883a 	add	r3,r3,r19
   87fcc:	d9000217 	ldw	r4,8(sp)
   87fd0:	e538983a 	sll	fp,fp,r20
   87fd4:	1c2bc83a 	sub	r21,r3,r16
   87fd8:	2004943a 	slli	r2,r4,16
   87fdc:	90a8b03a 	or	r20,r18,r2
   87fe0:	003ebf06 	br	87ae0 <__udivdi3+0xa4>
   87fe4:	1804943a 	slli	r2,r3,16
   87fe8:	e588983a 	sll	r4,fp,r22
   87fec:	a0ffffcc 	andi	r3,r20,65535
   87ff0:	10c5883a 	add	r2,r2,r3
   87ff4:	20bfbd2e 	bgeu	r4,r2,87eec <__udivdi3+0x4b0>
   87ff8:	90bfffc4 	addi	r2,r18,-1
   87ffc:	0009883a 	mov	r4,zero
   88000:	003ef706 	br	87be0 <__udivdi3+0x1a4>
   88004:	01400204 	movi	r5,8
   88008:	2805883a 	mov	r2,r5
   8800c:	003ee706 	br	87bac <__udivdi3+0x170>
   88010:	01400604 	movi	r5,24
   88014:	2805883a 	mov	r2,r5
   88018:	003ee406 	br	87bac <__udivdi3+0x170>
   8801c:	01400204 	movi	r5,8
   88020:	2805883a 	mov	r2,r5
   88024:	003ea106 	br	87aac <__udivdi3+0x70>
   88028:	01400604 	movi	r5,24
   8802c:	2805883a 	mov	r2,r5
   88030:	003e9e06 	br	87aac <__udivdi3+0x70>
   88034:	01400204 	movi	r5,8
   88038:	2805883a 	mov	r2,r5
   8803c:	003eff06 	br	87c3c <__udivdi3+0x200>
   88040:	01400604 	movi	r5,24
   88044:	2805883a 	mov	r2,r5
   88048:	003efc06 	br	87c3c <__udivdi3+0x200>
   8804c:	1c3f862e 	bgeu	r3,r16,87e68 <__udivdi3+0x42c>
   88050:	1dc7883a 	add	r3,r3,r23
   88054:	ad7fffc4 	addi	r21,r21,-1
   88058:	003f8306 	br	87e68 <__udivdi3+0x42c>
   8805c:	157f6e2e 	bgeu	r2,r21,87e18 <__udivdi3+0x3dc>
   88060:	a53fffc4 	addi	r20,r20,-1
   88064:	15c5883a 	add	r2,r2,r23
   88068:	003f6b06 	br	87e18 <__udivdi3+0x3dc>
   8806c:	ad7fffc4 	addi	r21,r21,-1
   88070:	003ec206 	br	87b7c <__udivdi3+0x140>
   88074:	843fffc4 	addi	r16,r16,-1
   88078:	14c5883a 	add	r2,r2,r19
   8807c:	003f1306 	br	87ccc <__udivdi3+0x290>
   88080:	ad7fffc4 	addi	r21,r21,-1
   88084:	003f2506 	br	87d1c <__udivdi3+0x2e0>
   88088:	157fb92e 	bgeu	r2,r21,87f70 <__udivdi3+0x534>
   8808c:	297fffc4 	addi	r5,r5,-1
   88090:	14c5883a 	add	r2,r2,r19
   88094:	d9400215 	stw	r5,8(sp)
   88098:	003fb506 	br	87f70 <__udivdi3+0x534>
   8809c:	843fffc4 	addi	r16,r16,-1
   880a0:	14c5883a 	add	r2,r2,r19
   880a4:	003ea106 	br	87b2c <__udivdi3+0xf0>

000880a8 <__umoddi3>:
   880a8:	defff004 	addi	sp,sp,-64
   880ac:	3011883a 	mov	r8,r6
   880b0:	000d883a 	mov	r6,zero
   880b4:	dd400b15 	stw	r21,44(sp)
   880b8:	dcc00915 	stw	r19,36(sp)
   880bc:	dc000615 	stw	r16,24(sp)
   880c0:	dfc00f15 	stw	ra,60(sp)
   880c4:	df000e15 	stw	fp,56(sp)
   880c8:	ddc00d15 	stw	r23,52(sp)
   880cc:	dd800c15 	stw	r22,48(sp)
   880d0:	dd000a15 	stw	r20,40(sp)
   880d4:	dc800815 	stw	r18,32(sp)
   880d8:	dc400715 	stw	r17,28(sp)
   880dc:	2817883a 	mov	r11,r5
   880e0:	d9800415 	stw	r6,16(sp)
   880e4:	4027883a 	mov	r19,r8
   880e8:	d9800515 	stw	r6,20(sp)
   880ec:	2021883a 	mov	r16,r4
   880f0:	282b883a 	mov	r21,r5
   880f4:	38002c1e 	bne	r7,zero,881a8 <__umoddi3+0x100>
   880f8:	2a005636 	bltu	r5,r8,88254 <__umoddi3+0x1ac>
   880fc:	40009a26 	beq	r8,zero,88368 <__umoddi3+0x2c0>
   88100:	00bfffd4 	movui	r2,65535
   88104:	14c09236 	bltu	r2,r19,88350 <__umoddi3+0x2a8>
   88108:	00803fc4 	movi	r2,255
   8810c:	14c15c36 	bltu	r2,r19,88680 <__umoddi3+0x5d8>
   88110:	000b883a 	mov	r5,zero
   88114:	0005883a 	mov	r2,zero
   88118:	9884d83a 	srl	r2,r19,r2
   8811c:	01000274 	movhi	r4,9
   88120:	21339604 	addi	r4,r4,-12712
   88124:	01800804 	movi	r6,32
   88128:	1105883a 	add	r2,r2,r4
   8812c:	10c00003 	ldbu	r3,0(r2)
   88130:	28c7883a 	add	r3,r5,r3
   88134:	30e5c83a 	sub	r18,r6,r3
   88138:	9000a41e 	bne	r18,zero,883cc <__umoddi3+0x324>
   8813c:	982ed43a 	srli	r23,r19,16
   88140:	acebc83a 	sub	r21,r21,r19
   88144:	9d3fffcc 	andi	r20,r19,65535
   88148:	002d883a 	mov	r22,zero
   8814c:	a809883a 	mov	r4,r21
   88150:	b80b883a 	mov	r5,r23
   88154:	00899700 	call	89970 <__udivsi3>
   88158:	100b883a 	mov	r5,r2
   8815c:	a009883a 	mov	r4,r20
   88160:	00805cc0 	call	805cc <__mulsi3>
   88164:	a809883a 	mov	r4,r21
   88168:	b80b883a 	mov	r5,r23
   8816c:	1023883a 	mov	r17,r2
   88170:	00899780 	call	89978 <__umodsi3>
   88174:	1004943a 	slli	r2,r2,16
   88178:	8006d43a 	srli	r3,r16,16
   8817c:	10c4b03a 	or	r2,r2,r3
   88180:	1440032e 	bgeu	r2,r17,88190 <__umoddi3+0xe8>
   88184:	14c5883a 	add	r2,r2,r19
   88188:	14c00136 	bltu	r2,r19,88190 <__umoddi3+0xe8>
   8818c:	14415836 	bltu	r2,r17,886f0 <__umoddi3+0x648>
   88190:	1463c83a 	sub	r17,r2,r17
   88194:	8809883a 	mov	r4,r17
   88198:	b80b883a 	mov	r5,r23
   8819c:	00899700 	call	89970 <__udivsi3>
   881a0:	a009883a 	mov	r4,r20
   881a4:	00005306 	br	882f4 <__umoddi3+0x24c>
   881a8:	380d883a 	mov	r6,r7
   881ac:	29c0132e 	bgeu	r5,r7,881fc <__umoddi3+0x154>
   881b0:	d9000415 	stw	r4,16(sp)
   881b4:	d9400515 	stw	r5,20(sp)
   881b8:	d9400417 	ldw	r5,16(sp)
   881bc:	5813883a 	mov	r9,r11
   881c0:	2811883a 	mov	r8,r5
   881c4:	4005883a 	mov	r2,r8
   881c8:	4807883a 	mov	r3,r9
   881cc:	dfc00f17 	ldw	ra,60(sp)
   881d0:	df000e17 	ldw	fp,56(sp)
   881d4:	ddc00d17 	ldw	r23,52(sp)
   881d8:	dd800c17 	ldw	r22,48(sp)
   881dc:	dd400b17 	ldw	r21,44(sp)
   881e0:	dd000a17 	ldw	r20,40(sp)
   881e4:	dcc00917 	ldw	r19,36(sp)
   881e8:	dc800817 	ldw	r18,32(sp)
   881ec:	dc400717 	ldw	r17,28(sp)
   881f0:	dc000617 	ldw	r16,24(sp)
   881f4:	dec01004 	addi	sp,sp,64
   881f8:	f800283a 	ret
   881fc:	00bfffd4 	movui	r2,65535
   88200:	11c06636 	bltu	r2,r7,8839c <__umoddi3+0x2f4>
   88204:	00803fc4 	movi	r2,255
   88208:	11c12036 	bltu	r2,r7,8868c <__umoddi3+0x5e4>
   8820c:	000b883a 	mov	r5,zero
   88210:	0005883a 	mov	r2,zero
   88214:	3084d83a 	srl	r2,r6,r2
   88218:	01000274 	movhi	r4,9
   8821c:	21339604 	addi	r4,r4,-12712
   88220:	01c00804 	movi	r7,32
   88224:	1105883a 	add	r2,r2,r4
   88228:	10c00003 	ldbu	r3,0(r2)
   8822c:	28c7883a 	add	r3,r5,r3
   88230:	38e5c83a 	sub	r18,r7,r3
   88234:	9000941e 	bne	r18,zero,88488 <__umoddi3+0x3e0>
   88238:	35405e36 	bltu	r6,r21,883b4 <__umoddi3+0x30c>
   8823c:	84c05d2e 	bgeu	r16,r19,883b4 <__umoddi3+0x30c>
   88240:	8011883a 	mov	r8,r16
   88244:	a813883a 	mov	r9,r21
   88248:	dc000415 	stw	r16,16(sp)
   8824c:	dd400515 	stw	r21,20(sp)
   88250:	003fdc06 	br	881c4 <__umoddi3+0x11c>
   88254:	00bfffd4 	movui	r2,65535
   88258:	12004a36 	bltu	r2,r8,88384 <__umoddi3+0x2dc>
   8825c:	00803fc4 	movi	r2,255
   88260:	12010d36 	bltu	r2,r8,88698 <__umoddi3+0x5f0>
   88264:	000b883a 	mov	r5,zero
   88268:	0005883a 	mov	r2,zero
   8826c:	9884d83a 	srl	r2,r19,r2
   88270:	01000274 	movhi	r4,9
   88274:	21339604 	addi	r4,r4,-12712
   88278:	01800804 	movi	r6,32
   8827c:	1105883a 	add	r2,r2,r4
   88280:	10c00003 	ldbu	r3,0(r2)
   88284:	28c7883a 	add	r3,r5,r3
   88288:	30c7c83a 	sub	r3,r6,r3
   8828c:	1800dc1e 	bne	r3,zero,88600 <__umoddi3+0x558>
   88290:	002d883a 	mov	r22,zero
   88294:	982ed43a 	srli	r23,r19,16
   88298:	a809883a 	mov	r4,r21
   8829c:	9cbfffcc 	andi	r18,r19,65535
   882a0:	b80b883a 	mov	r5,r23
   882a4:	00899700 	call	89970 <__udivsi3>
   882a8:	100b883a 	mov	r5,r2
   882ac:	9009883a 	mov	r4,r18
   882b0:	00805cc0 	call	805cc <__mulsi3>
   882b4:	a809883a 	mov	r4,r21
   882b8:	b80b883a 	mov	r5,r23
   882bc:	1023883a 	mov	r17,r2
   882c0:	00899780 	call	89978 <__umodsi3>
   882c4:	1004943a 	slli	r2,r2,16
   882c8:	8006d43a 	srli	r3,r16,16
   882cc:	10c4b03a 	or	r2,r2,r3
   882d0:	1440032e 	bgeu	r2,r17,882e0 <__umoddi3+0x238>
   882d4:	14c5883a 	add	r2,r2,r19
   882d8:	14c00136 	bltu	r2,r19,882e0 <__umoddi3+0x238>
   882dc:	14410236 	bltu	r2,r17,886e8 <__umoddi3+0x640>
   882e0:	1463c83a 	sub	r17,r2,r17
   882e4:	8809883a 	mov	r4,r17
   882e8:	b80b883a 	mov	r5,r23
   882ec:	00899700 	call	89970 <__udivsi3>
   882f0:	9009883a 	mov	r4,r18
   882f4:	100b883a 	mov	r5,r2
   882f8:	00805cc0 	call	805cc <__mulsi3>
   882fc:	8809883a 	mov	r4,r17
   88300:	b80b883a 	mov	r5,r23
   88304:	102b883a 	mov	r21,r2
   88308:	00899780 	call	89978 <__umodsi3>
   8830c:	1004943a 	slli	r2,r2,16
   88310:	80ffffcc 	andi	r3,r16,65535
   88314:	10c4b03a 	or	r2,r2,r3
   88318:	1540042e 	bgeu	r2,r21,8832c <__umoddi3+0x284>
   8831c:	14c5883a 	add	r2,r2,r19
   88320:	14c00236 	bltu	r2,r19,8832c <__umoddi3+0x284>
   88324:	1540012e 	bgeu	r2,r21,8832c <__umoddi3+0x284>
   88328:	14c5883a 	add	r2,r2,r19
   8832c:	1545c83a 	sub	r2,r2,r21
   88330:	1584d83a 	srl	r2,r2,r22
   88334:	0013883a 	mov	r9,zero
   88338:	d8800415 	stw	r2,16(sp)
   8833c:	d8c00417 	ldw	r3,16(sp)
   88340:	0005883a 	mov	r2,zero
   88344:	d8800515 	stw	r2,20(sp)
   88348:	1811883a 	mov	r8,r3
   8834c:	003f9d06 	br	881c4 <__umoddi3+0x11c>
   88350:	00804034 	movhi	r2,256
   88354:	10bfffc4 	addi	r2,r2,-1
   88358:	14c0c636 	bltu	r2,r19,88674 <__umoddi3+0x5cc>
   8835c:	01400404 	movi	r5,16
   88360:	2805883a 	mov	r2,r5
   88364:	003f6c06 	br	88118 <__umoddi3+0x70>
   88368:	01000044 	movi	r4,1
   8836c:	000b883a 	mov	r5,zero
   88370:	00899700 	call	89970 <__udivsi3>
   88374:	1027883a 	mov	r19,r2
   88378:	00bfffd4 	movui	r2,65535
   8837c:	14fff436 	bltu	r2,r19,88350 <__umoddi3+0x2a8>
   88380:	003f6106 	br	88108 <__umoddi3+0x60>
   88384:	00804034 	movhi	r2,256
   88388:	10bfffc4 	addi	r2,r2,-1
   8838c:	1200c536 	bltu	r2,r8,886a4 <__umoddi3+0x5fc>
   88390:	01400404 	movi	r5,16
   88394:	2805883a 	mov	r2,r5
   88398:	003fb406 	br	8826c <__umoddi3+0x1c4>
   8839c:	00804034 	movhi	r2,256
   883a0:	10bfffc4 	addi	r2,r2,-1
   883a4:	11c0c236 	bltu	r2,r7,886b0 <__umoddi3+0x608>
   883a8:	01400404 	movi	r5,16
   883ac:	2805883a 	mov	r2,r5
   883b0:	003f9806 	br	88214 <__umoddi3+0x16c>
   883b4:	84c9c83a 	sub	r4,r16,r19
   883b8:	8105803a 	cmpltu	r2,r16,r4
   883bc:	a987c83a 	sub	r3,r21,r6
   883c0:	18abc83a 	sub	r21,r3,r2
   883c4:	2021883a 	mov	r16,r4
   883c8:	003f9d06 	br	88240 <__umoddi3+0x198>
   883cc:	9ca6983a 	sll	r19,r19,r18
   883d0:	3485c83a 	sub	r2,r6,r18
   883d4:	a8a2d83a 	srl	r17,r21,r2
   883d8:	982ed43a 	srli	r23,r19,16
   883dc:	ac86983a 	sll	r3,r21,r18
   883e0:	8084d83a 	srl	r2,r16,r2
   883e4:	8809883a 	mov	r4,r17
   883e8:	b80b883a 	mov	r5,r23
   883ec:	18b8b03a 	or	fp,r3,r2
   883f0:	9d3fffcc 	andi	r20,r19,65535
   883f4:	00899700 	call	89970 <__udivsi3>
   883f8:	100b883a 	mov	r5,r2
   883fc:	a009883a 	mov	r4,r20
   88400:	00805cc0 	call	805cc <__mulsi3>
   88404:	8809883a 	mov	r4,r17
   88408:	b80b883a 	mov	r5,r23
   8840c:	102b883a 	mov	r21,r2
   88410:	00899780 	call	89978 <__umodsi3>
   88414:	1004943a 	slli	r2,r2,16
   88418:	e006d43a 	srli	r3,fp,16
   8841c:	902d883a 	mov	r22,r18
   88420:	10c4b03a 	or	r2,r2,r3
   88424:	1540022e 	bgeu	r2,r21,88430 <__umoddi3+0x388>
   88428:	14c5883a 	add	r2,r2,r19
   8842c:	14c0ab2e 	bgeu	r2,r19,886dc <__umoddi3+0x634>
   88430:	1563c83a 	sub	r17,r2,r21
   88434:	8809883a 	mov	r4,r17
   88438:	b80b883a 	mov	r5,r23
   8843c:	00899700 	call	89970 <__udivsi3>
   88440:	100b883a 	mov	r5,r2
   88444:	a009883a 	mov	r4,r20
   88448:	00805cc0 	call	805cc <__mulsi3>
   8844c:	8809883a 	mov	r4,r17
   88450:	b80b883a 	mov	r5,r23
   88454:	102b883a 	mov	r21,r2
   88458:	00899780 	call	89978 <__umodsi3>
   8845c:	1004943a 	slli	r2,r2,16
   88460:	e0ffffcc 	andi	r3,fp,65535
   88464:	10c4b03a 	or	r2,r2,r3
   88468:	1540042e 	bgeu	r2,r21,8847c <__umoddi3+0x3d4>
   8846c:	14c5883a 	add	r2,r2,r19
   88470:	14c00236 	bltu	r2,r19,8847c <__umoddi3+0x3d4>
   88474:	1540012e 	bgeu	r2,r21,8847c <__umoddi3+0x3d4>
   88478:	14c5883a 	add	r2,r2,r19
   8847c:	84a0983a 	sll	r16,r16,r18
   88480:	156bc83a 	sub	r21,r2,r21
   88484:	003f3106 	br	8814c <__umoddi3+0xa4>
   88488:	3c8fc83a 	sub	r7,r7,r18
   8848c:	3486983a 	sll	r3,r6,r18
   88490:	99c4d83a 	srl	r2,r19,r7
   88494:	a9e2d83a 	srl	r17,r21,r7
   88498:	ac8c983a 	sll	r6,r21,r18
   8849c:	18acb03a 	or	r22,r3,r2
   884a0:	b02ed43a 	srli	r23,r22,16
   884a4:	81c4d83a 	srl	r2,r16,r7
   884a8:	8809883a 	mov	r4,r17
   884ac:	b80b883a 	mov	r5,r23
   884b0:	308cb03a 	or	r6,r6,r2
   884b4:	d9c00315 	stw	r7,12(sp)
   884b8:	d9800215 	stw	r6,8(sp)
   884bc:	b53fffcc 	andi	r20,r22,65535
   884c0:	00899700 	call	89970 <__udivsi3>
   884c4:	100b883a 	mov	r5,r2
   884c8:	a009883a 	mov	r4,r20
   884cc:	1039883a 	mov	fp,r2
   884d0:	00805cc0 	call	805cc <__mulsi3>
   884d4:	8809883a 	mov	r4,r17
   884d8:	b80b883a 	mov	r5,r23
   884dc:	102b883a 	mov	r21,r2
   884e0:	00899780 	call	89978 <__umodsi3>
   884e4:	d9000217 	ldw	r4,8(sp)
   884e8:	1004943a 	slli	r2,r2,16
   884ec:	9ca6983a 	sll	r19,r19,r18
   884f0:	2006d43a 	srli	r3,r4,16
   884f4:	84a0983a 	sll	r16,r16,r18
   884f8:	dcc00015 	stw	r19,0(sp)
   884fc:	10c4b03a 	or	r2,r2,r3
   88500:	dc000115 	stw	r16,4(sp)
   88504:	1540032e 	bgeu	r2,r21,88514 <__umoddi3+0x46c>
   88508:	1585883a 	add	r2,r2,r22
   8850c:	e73fffc4 	addi	fp,fp,-1
   88510:	15806e2e 	bgeu	r2,r22,886cc <__umoddi3+0x624>
   88514:	1563c83a 	sub	r17,r2,r21
   88518:	8809883a 	mov	r4,r17
   8851c:	b80b883a 	mov	r5,r23
   88520:	00899700 	call	89970 <__udivsi3>
   88524:	100b883a 	mov	r5,r2
   88528:	a009883a 	mov	r4,r20
   8852c:	1021883a 	mov	r16,r2
   88530:	00805cc0 	call	805cc <__mulsi3>
   88534:	b80b883a 	mov	r5,r23
   88538:	8809883a 	mov	r4,r17
   8853c:	1029883a 	mov	r20,r2
   88540:	00899780 	call	89978 <__umodsi3>
   88544:	d9400217 	ldw	r5,8(sp)
   88548:	1004943a 	slli	r2,r2,16
   8854c:	28ffffcc 	andi	r3,r5,65535
   88550:	10c4b03a 	or	r2,r2,r3
   88554:	1500032e 	bgeu	r2,r20,88564 <__umoddi3+0x4bc>
   88558:	1585883a 	add	r2,r2,r22
   8855c:	843fffc4 	addi	r16,r16,-1
   88560:	1580562e 	bgeu	r2,r22,886bc <__umoddi3+0x614>
   88564:	d9800017 	ldw	r6,0(sp)
   88568:	e022943a 	slli	r17,fp,16
   8856c:	302ed43a 	srli	r23,r6,16
   88570:	8462b03a 	or	r17,r16,r17
   88574:	34ffffcc 	andi	r19,r6,65535
   88578:	882ad43a 	srli	r21,r17,16
   8857c:	8c7fffcc 	andi	r17,r17,65535
   88580:	8809883a 	mov	r4,r17
   88584:	980b883a 	mov	r5,r19
   88588:	1521c83a 	sub	r16,r2,r20
   8858c:	00805cc0 	call	805cc <__mulsi3>
   88590:	8809883a 	mov	r4,r17
   88594:	b80b883a 	mov	r5,r23
   88598:	1029883a 	mov	r20,r2
   8859c:	00805cc0 	call	805cc <__mulsi3>
   885a0:	980b883a 	mov	r5,r19
   885a4:	a809883a 	mov	r4,r21
   885a8:	1023883a 	mov	r17,r2
   885ac:	00805cc0 	call	805cc <__mulsi3>
   885b0:	a809883a 	mov	r4,r21
   885b4:	b80b883a 	mov	r5,r23
   885b8:	1027883a 	mov	r19,r2
   885bc:	00805cc0 	call	805cc <__mulsi3>
   885c0:	100b883a 	mov	r5,r2
   885c4:	a004d43a 	srli	r2,r20,16
   885c8:	8ce3883a 	add	r17,r17,r19
   885cc:	1449883a 	add	r4,r2,r17
   885d0:	24c0022e 	bgeu	r4,r19,885dc <__umoddi3+0x534>
   885d4:	00800074 	movhi	r2,1
   885d8:	288b883a 	add	r5,r5,r2
   885dc:	2004d43a 	srli	r2,r4,16
   885e0:	2008943a 	slli	r4,r4,16
   885e4:	a0ffffcc 	andi	r3,r20,65535
   885e8:	288d883a 	add	r6,r5,r2
   885ec:	20c9883a 	add	r4,r4,r3
   885f0:	81800b36 	bltu	r16,r6,88620 <__umoddi3+0x578>
   885f4:	81804026 	beq	r16,r6,886f8 <__umoddi3+0x650>
   885f8:	818dc83a 	sub	r6,r16,r6
   885fc:	00000f06 	br	8863c <__umoddi3+0x594>
   88600:	30c5c83a 	sub	r2,r6,r3
   88604:	182d883a 	mov	r22,r3
   88608:	8084d83a 	srl	r2,r16,r2
   8860c:	a8c6983a 	sll	r3,r21,r3
   88610:	9da6983a 	sll	r19,r19,r22
   88614:	85a0983a 	sll	r16,r16,r22
   88618:	18aab03a 	or	r21,r3,r2
   8861c:	003f1d06 	br	88294 <__umoddi3+0x1ec>
   88620:	d8c00017 	ldw	r3,0(sp)
   88624:	20c5c83a 	sub	r2,r4,r3
   88628:	2089803a 	cmpltu	r4,r4,r2
   8862c:	3587c83a 	sub	r3,r6,r22
   88630:	1907c83a 	sub	r3,r3,r4
   88634:	80cdc83a 	sub	r6,r16,r3
   88638:	1009883a 	mov	r4,r2
   8863c:	d9400117 	ldw	r5,4(sp)
   88640:	2905c83a 	sub	r2,r5,r4
   88644:	2887803a 	cmpltu	r3,r5,r2
   88648:	30c7c83a 	sub	r3,r6,r3
   8864c:	d9800317 	ldw	r6,12(sp)
   88650:	1484d83a 	srl	r2,r2,r18
   88654:	1988983a 	sll	r4,r3,r6
   88658:	1c86d83a 	srl	r3,r3,r18
   8865c:	2088b03a 	or	r4,r4,r2
   88660:	2011883a 	mov	r8,r4
   88664:	1813883a 	mov	r9,r3
   88668:	d9000415 	stw	r4,16(sp)
   8866c:	d8c00515 	stw	r3,20(sp)
   88670:	003ed406 	br	881c4 <__umoddi3+0x11c>
   88674:	01400604 	movi	r5,24
   88678:	2805883a 	mov	r2,r5
   8867c:	003ea606 	br	88118 <__umoddi3+0x70>
   88680:	01400204 	movi	r5,8
   88684:	2805883a 	mov	r2,r5
   88688:	003ea306 	br	88118 <__umoddi3+0x70>
   8868c:	01400204 	movi	r5,8
   88690:	2805883a 	mov	r2,r5
   88694:	003edf06 	br	88214 <__umoddi3+0x16c>
   88698:	01400204 	movi	r5,8
   8869c:	2805883a 	mov	r2,r5
   886a0:	003ef206 	br	8826c <__umoddi3+0x1c4>
   886a4:	01400604 	movi	r5,24
   886a8:	2805883a 	mov	r2,r5
   886ac:	003eef06 	br	8826c <__umoddi3+0x1c4>
   886b0:	01400604 	movi	r5,24
   886b4:	2805883a 	mov	r2,r5
   886b8:	003ed606 	br	88214 <__umoddi3+0x16c>
   886bc:	153fa92e 	bgeu	r2,r20,88564 <__umoddi3+0x4bc>
   886c0:	843fffc4 	addi	r16,r16,-1
   886c4:	1585883a 	add	r2,r2,r22
   886c8:	003fa606 	br	88564 <__umoddi3+0x4bc>
   886cc:	157f912e 	bgeu	r2,r21,88514 <__umoddi3+0x46c>
   886d0:	e73fffc4 	addi	fp,fp,-1
   886d4:	1585883a 	add	r2,r2,r22
   886d8:	003f8e06 	br	88514 <__umoddi3+0x46c>
   886dc:	157f542e 	bgeu	r2,r21,88430 <__umoddi3+0x388>
   886e0:	14c5883a 	add	r2,r2,r19
   886e4:	003f5206 	br	88430 <__umoddi3+0x388>
   886e8:	14c5883a 	add	r2,r2,r19
   886ec:	003efc06 	br	882e0 <__umoddi3+0x238>
   886f0:	14c5883a 	add	r2,r2,r19
   886f4:	003ea606 	br	88190 <__umoddi3+0xe8>
   886f8:	d8800117 	ldw	r2,4(sp)
   886fc:	113fc836 	bltu	r2,r4,88620 <__umoddi3+0x578>
   88700:	000d883a 	mov	r6,zero
   88704:	003fcd06 	br	8863c <__umoddi3+0x594>

00088708 <_fpadd_parts>:
   88708:	defff804 	addi	sp,sp,-32
   8870c:	dcc00315 	stw	r19,12(sp)
   88710:	2027883a 	mov	r19,r4
   88714:	21000017 	ldw	r4,0(r4)
   88718:	00c00044 	movi	r3,1
   8871c:	dd400515 	stw	r21,20(sp)
   88720:	dd000415 	stw	r20,16(sp)
   88724:	ddc00715 	stw	r23,28(sp)
   88728:	dd800615 	stw	r22,24(sp)
   8872c:	dc800215 	stw	r18,8(sp)
   88730:	dc400115 	stw	r17,4(sp)
   88734:	dc000015 	stw	r16,0(sp)
   88738:	282b883a 	mov	r21,r5
   8873c:	3029883a 	mov	r20,r6
   88740:	1900632e 	bgeu	r3,r4,888d0 <_fpadd_parts+0x1c8>
   88744:	28800017 	ldw	r2,0(r5)
   88748:	1880812e 	bgeu	r3,r2,88950 <_fpadd_parts+0x248>
   8874c:	00c00104 	movi	r3,4
   88750:	20c0dc26 	beq	r4,r3,88ac4 <_fpadd_parts+0x3bc>
   88754:	10c07e26 	beq	r2,r3,88950 <_fpadd_parts+0x248>
   88758:	00c00084 	movi	r3,2
   8875c:	10c06726 	beq	r2,r3,888fc <_fpadd_parts+0x1f4>
   88760:	20c07b26 	beq	r4,r3,88950 <_fpadd_parts+0x248>
   88764:	9dc00217 	ldw	r23,8(r19)
   88768:	28c00217 	ldw	r3,8(r5)
   8876c:	9c400317 	ldw	r17,12(r19)
   88770:	2bc00317 	ldw	r15,12(r5)
   88774:	b8cdc83a 	sub	r6,r23,r3
   88778:	9c800417 	ldw	r18,16(r19)
   8877c:	2c000417 	ldw	r16,16(r5)
   88780:	3009883a 	mov	r4,r6
   88784:	30009716 	blt	r6,zero,889e4 <_fpadd_parts+0x2dc>
   88788:	00800fc4 	movi	r2,63
   8878c:	11806b16 	blt	r2,r6,8893c <_fpadd_parts+0x234>
   88790:	0100a40e 	bge	zero,r4,88a24 <_fpadd_parts+0x31c>
   88794:	35bff804 	addi	r22,r6,-32
   88798:	b000bc16 	blt	r22,zero,88a8c <_fpadd_parts+0x384>
   8879c:	8596d83a 	srl	r11,r16,r22
   887a0:	0019883a 	mov	r12,zero
   887a4:	0013883a 	mov	r9,zero
   887a8:	01000044 	movi	r4,1
   887ac:	0015883a 	mov	r10,zero
   887b0:	b000be16 	blt	r22,zero,88aac <_fpadd_parts+0x3a4>
   887b4:	2590983a 	sll	r8,r4,r22
   887b8:	000f883a 	mov	r7,zero
   887bc:	00bfffc4 	movi	r2,-1
   887c0:	3889883a 	add	r4,r7,r2
   887c4:	408b883a 	add	r5,r8,r2
   887c8:	21cd803a 	cmpltu	r6,r4,r7
   887cc:	314b883a 	add	r5,r6,r5
   887d0:	7904703a 	and	r2,r15,r4
   887d4:	8146703a 	and	r3,r16,r5
   887d8:	10c4b03a 	or	r2,r2,r3
   887dc:	10000226 	beq	r2,zero,887e8 <_fpadd_parts+0xe0>
   887e0:	02400044 	movi	r9,1
   887e4:	0015883a 	mov	r10,zero
   887e8:	5a5eb03a 	or	r15,r11,r9
   887ec:	62a0b03a 	or	r16,r12,r10
   887f0:	99400117 	ldw	r5,4(r19)
   887f4:	a8800117 	ldw	r2,4(r21)
   887f8:	28806e26 	beq	r5,r2,889b4 <_fpadd_parts+0x2ac>
   887fc:	28006626 	beq	r5,zero,88998 <_fpadd_parts+0x290>
   88800:	7c45c83a 	sub	r2,r15,r17
   88804:	7889803a 	cmpltu	r4,r15,r2
   88808:	8487c83a 	sub	r3,r16,r18
   8880c:	1909c83a 	sub	r4,r3,r4
   88810:	100d883a 	mov	r6,r2
   88814:	200f883a 	mov	r7,r4
   88818:	38007716 	blt	r7,zero,889f8 <_fpadd_parts+0x2f0>
   8881c:	a5c00215 	stw	r23,8(r20)
   88820:	a1c00415 	stw	r7,16(r20)
   88824:	a0000115 	stw	zero,4(r20)
   88828:	a1800315 	stw	r6,12(r20)
   8882c:	a2000317 	ldw	r8,12(r20)
   88830:	a2400417 	ldw	r9,16(r20)
   88834:	00bfffc4 	movi	r2,-1
   88838:	408b883a 	add	r5,r8,r2
   8883c:	2a09803a 	cmpltu	r4,r5,r8
   88840:	488d883a 	add	r6,r9,r2
   88844:	01c40034 	movhi	r7,4096
   88848:	39ffffc4 	addi	r7,r7,-1
   8884c:	218d883a 	add	r6,r4,r6
   88850:	39801736 	bltu	r7,r6,888b0 <_fpadd_parts+0x1a8>
   88854:	31c06526 	beq	r6,r7,889ec <_fpadd_parts+0x2e4>
   88858:	a3000217 	ldw	r12,8(r20)
   8885c:	4209883a 	add	r4,r8,r8
   88860:	00bfffc4 	movi	r2,-1
   88864:	220f803a 	cmpltu	r7,r4,r8
   88868:	4a4b883a 	add	r5,r9,r9
   8886c:	394f883a 	add	r7,r7,r5
   88870:	2095883a 	add	r10,r4,r2
   88874:	3897883a 	add	r11,r7,r2
   88878:	510d803a 	cmpltu	r6,r10,r4
   8887c:	6099883a 	add	r12,r12,r2
   88880:	32d7883a 	add	r11,r6,r11
   88884:	00840034 	movhi	r2,4096
   88888:	10bfffc4 	addi	r2,r2,-1
   8888c:	2011883a 	mov	r8,r4
   88890:	3813883a 	mov	r9,r7
   88894:	a1000315 	stw	r4,12(r20)
   88898:	a1c00415 	stw	r7,16(r20)
   8889c:	a3000215 	stw	r12,8(r20)
   888a0:	12c00336 	bltu	r2,r11,888b0 <_fpadd_parts+0x1a8>
   888a4:	58bfed1e 	bne	r11,r2,8885c <_fpadd_parts+0x154>
   888a8:	00bfff84 	movi	r2,-2
   888ac:	12bfeb2e 	bgeu	r2,r10,8885c <_fpadd_parts+0x154>
   888b0:	a2800417 	ldw	r10,16(r20)
   888b4:	008000c4 	movi	r2,3
   888b8:	00c80034 	movhi	r3,8192
   888bc:	18ffffc4 	addi	r3,r3,-1
   888c0:	a2400317 	ldw	r9,12(r20)
   888c4:	a0800015 	stw	r2,0(r20)
   888c8:	1a802336 	bltu	r3,r10,88958 <_fpadd_parts+0x250>
   888cc:	a027883a 	mov	r19,r20
   888d0:	9805883a 	mov	r2,r19
   888d4:	ddc00717 	ldw	r23,28(sp)
   888d8:	dd800617 	ldw	r22,24(sp)
   888dc:	dd400517 	ldw	r21,20(sp)
   888e0:	dd000417 	ldw	r20,16(sp)
   888e4:	dcc00317 	ldw	r19,12(sp)
   888e8:	dc800217 	ldw	r18,8(sp)
   888ec:	dc400117 	ldw	r17,4(sp)
   888f0:	dc000017 	ldw	r16,0(sp)
   888f4:	dec00804 	addi	sp,sp,32
   888f8:	f800283a 	ret
   888fc:	20fff41e 	bne	r4,r3,888d0 <_fpadd_parts+0x1c8>
   88900:	31000015 	stw	r4,0(r6)
   88904:	98800117 	ldw	r2,4(r19)
   88908:	30800115 	stw	r2,4(r6)
   8890c:	98c00217 	ldw	r3,8(r19)
   88910:	30c00215 	stw	r3,8(r6)
   88914:	98800317 	ldw	r2,12(r19)
   88918:	30800315 	stw	r2,12(r6)
   8891c:	98c00417 	ldw	r3,16(r19)
   88920:	30c00415 	stw	r3,16(r6)
   88924:	98800117 	ldw	r2,4(r19)
   88928:	28c00117 	ldw	r3,4(r5)
   8892c:	3027883a 	mov	r19,r6
   88930:	10c4703a 	and	r2,r2,r3
   88934:	30800115 	stw	r2,4(r6)
   88938:	003fe506 	br	888d0 <_fpadd_parts+0x1c8>
   8893c:	1dc02616 	blt	r3,r23,889d8 <_fpadd_parts+0x2d0>
   88940:	0023883a 	mov	r17,zero
   88944:	182f883a 	mov	r23,r3
   88948:	0025883a 	mov	r18,zero
   8894c:	003fa806 	br	887f0 <_fpadd_parts+0xe8>
   88950:	a827883a 	mov	r19,r21
   88954:	003fde06 	br	888d0 <_fpadd_parts+0x1c8>
   88958:	01800044 	movi	r6,1
   8895c:	500497fa 	slli	r2,r10,31
   88960:	4808d07a 	srli	r4,r9,1
   88964:	518ad83a 	srl	r5,r10,r6
   88968:	a2000217 	ldw	r8,8(r20)
   8896c:	1108b03a 	or	r4,r2,r4
   88970:	0007883a 	mov	r3,zero
   88974:	4984703a 	and	r2,r9,r6
   88978:	208cb03a 	or	r6,r4,r2
   8897c:	28ceb03a 	or	r7,r5,r3
   88980:	42000044 	addi	r8,r8,1
   88984:	a027883a 	mov	r19,r20
   88988:	a1c00415 	stw	r7,16(r20)
   8898c:	a2000215 	stw	r8,8(r20)
   88990:	a1800315 	stw	r6,12(r20)
   88994:	003fce06 	br	888d0 <_fpadd_parts+0x1c8>
   88998:	8bc5c83a 	sub	r2,r17,r15
   8899c:	8889803a 	cmpltu	r4,r17,r2
   889a0:	9407c83a 	sub	r3,r18,r16
   889a4:	1909c83a 	sub	r4,r3,r4
   889a8:	100d883a 	mov	r6,r2
   889ac:	200f883a 	mov	r7,r4
   889b0:	003f9906 	br	88818 <_fpadd_parts+0x110>
   889b4:	7c45883a 	add	r2,r15,r17
   889b8:	13c9803a 	cmpltu	r4,r2,r15
   889bc:	8487883a 	add	r3,r16,r18
   889c0:	20c9883a 	add	r4,r4,r3
   889c4:	a1400115 	stw	r5,4(r20)
   889c8:	a5c00215 	stw	r23,8(r20)
   889cc:	a0800315 	stw	r2,12(r20)
   889d0:	a1000415 	stw	r4,16(r20)
   889d4:	003fb606 	br	888b0 <_fpadd_parts+0x1a8>
   889d8:	001f883a 	mov	r15,zero
   889dc:	0021883a 	mov	r16,zero
   889e0:	003f8306 	br	887f0 <_fpadd_parts+0xe8>
   889e4:	018dc83a 	sub	r6,zero,r6
   889e8:	003f6706 	br	88788 <_fpadd_parts+0x80>
   889ec:	00bfff84 	movi	r2,-2
   889f0:	117faf36 	bltu	r2,r5,888b0 <_fpadd_parts+0x1a8>
   889f4:	003f9806 	br	88858 <_fpadd_parts+0x150>
   889f8:	0005883a 	mov	r2,zero
   889fc:	1189c83a 	sub	r4,r2,r6
   88a00:	1105803a 	cmpltu	r2,r2,r4
   88a04:	01cbc83a 	sub	r5,zero,r7
   88a08:	2885c83a 	sub	r2,r5,r2
   88a0c:	01800044 	movi	r6,1
   88a10:	a1800115 	stw	r6,4(r20)
   88a14:	a5c00215 	stw	r23,8(r20)
   88a18:	a1000315 	stw	r4,12(r20)
   88a1c:	a0800415 	stw	r2,16(r20)
   88a20:	003f8206 	br	8882c <_fpadd_parts+0x124>
   88a24:	203f7226 	beq	r4,zero,887f0 <_fpadd_parts+0xe8>
   88a28:	35bff804 	addi	r22,r6,-32
   88a2c:	b9af883a 	add	r23,r23,r6
   88a30:	b0003116 	blt	r22,zero,88af8 <_fpadd_parts+0x3f0>
   88a34:	959ad83a 	srl	r13,r18,r22
   88a38:	001d883a 	mov	r14,zero
   88a3c:	000f883a 	mov	r7,zero
   88a40:	01000044 	movi	r4,1
   88a44:	0011883a 	mov	r8,zero
   88a48:	b0002516 	blt	r22,zero,88ae0 <_fpadd_parts+0x3d8>
   88a4c:	2594983a 	sll	r10,r4,r22
   88a50:	0013883a 	mov	r9,zero
   88a54:	00bfffc4 	movi	r2,-1
   88a58:	4889883a 	add	r4,r9,r2
   88a5c:	508b883a 	add	r5,r10,r2
   88a60:	224d803a 	cmpltu	r6,r4,r9
   88a64:	314b883a 	add	r5,r6,r5
   88a68:	8904703a 	and	r2,r17,r4
   88a6c:	9146703a 	and	r3,r18,r5
   88a70:	10c4b03a 	or	r2,r2,r3
   88a74:	10000226 	beq	r2,zero,88a80 <_fpadd_parts+0x378>
   88a78:	01c00044 	movi	r7,1
   88a7c:	0011883a 	mov	r8,zero
   88a80:	69e2b03a 	or	r17,r13,r7
   88a84:	7224b03a 	or	r18,r14,r8
   88a88:	003f5906 	br	887f0 <_fpadd_parts+0xe8>
   88a8c:	8407883a 	add	r3,r16,r16
   88a90:	008007c4 	movi	r2,31
   88a94:	1185c83a 	sub	r2,r2,r6
   88a98:	1886983a 	sll	r3,r3,r2
   88a9c:	7996d83a 	srl	r11,r15,r6
   88aa0:	8198d83a 	srl	r12,r16,r6
   88aa4:	1ad6b03a 	or	r11,r3,r11
   88aa8:	003f3e06 	br	887a4 <_fpadd_parts+0x9c>
   88aac:	2006d07a 	srli	r3,r4,1
   88ab0:	008007c4 	movi	r2,31
   88ab4:	1185c83a 	sub	r2,r2,r6
   88ab8:	1890d83a 	srl	r8,r3,r2
   88abc:	218e983a 	sll	r7,r4,r6
   88ac0:	003f3e06 	br	887bc <_fpadd_parts+0xb4>
   88ac4:	113f821e 	bne	r2,r4,888d0 <_fpadd_parts+0x1c8>
   88ac8:	28c00117 	ldw	r3,4(r5)
   88acc:	98800117 	ldw	r2,4(r19)
   88ad0:	10ff7f26 	beq	r2,r3,888d0 <_fpadd_parts+0x1c8>
   88ad4:	04c00274 	movhi	r19,9
   88ad8:	9cf39104 	addi	r19,r19,-12732
   88adc:	003f7c06 	br	888d0 <_fpadd_parts+0x1c8>
   88ae0:	2006d07a 	srli	r3,r4,1
   88ae4:	008007c4 	movi	r2,31
   88ae8:	1185c83a 	sub	r2,r2,r6
   88aec:	1894d83a 	srl	r10,r3,r2
   88af0:	2192983a 	sll	r9,r4,r6
   88af4:	003fd706 	br	88a54 <_fpadd_parts+0x34c>
   88af8:	9487883a 	add	r3,r18,r18
   88afc:	008007c4 	movi	r2,31
   88b00:	1185c83a 	sub	r2,r2,r6
   88b04:	1886983a 	sll	r3,r3,r2
   88b08:	899ad83a 	srl	r13,r17,r6
   88b0c:	919cd83a 	srl	r14,r18,r6
   88b10:	1b5ab03a 	or	r13,r3,r13
   88b14:	003fc906 	br	88a3c <_fpadd_parts+0x334>

00088b18 <__subdf3>:
   88b18:	deffea04 	addi	sp,sp,-88
   88b1c:	dcc01415 	stw	r19,80(sp)
   88b20:	dcc00404 	addi	r19,sp,16
   88b24:	2011883a 	mov	r8,r4
   88b28:	2813883a 	mov	r9,r5
   88b2c:	dc401315 	stw	r17,76(sp)
   88b30:	d809883a 	mov	r4,sp
   88b34:	980b883a 	mov	r5,r19
   88b38:	dc400904 	addi	r17,sp,36
   88b3c:	dfc01515 	stw	ra,84(sp)
   88b40:	da400115 	stw	r9,4(sp)
   88b44:	d9c00315 	stw	r7,12(sp)
   88b48:	da000015 	stw	r8,0(sp)
   88b4c:	d9800215 	stw	r6,8(sp)
   88b50:	0089e380 	call	89e38 <__unpack_d>
   88b54:	d9000204 	addi	r4,sp,8
   88b58:	880b883a 	mov	r5,r17
   88b5c:	0089e380 	call	89e38 <__unpack_d>
   88b60:	d8800a17 	ldw	r2,40(sp)
   88b64:	880b883a 	mov	r5,r17
   88b68:	9809883a 	mov	r4,r19
   88b6c:	d9800e04 	addi	r6,sp,56
   88b70:	1080005c 	xori	r2,r2,1
   88b74:	d8800a15 	stw	r2,40(sp)
   88b78:	00887080 	call	88708 <_fpadd_parts>
   88b7c:	1009883a 	mov	r4,r2
   88b80:	0089b240 	call	89b24 <__pack_d>
   88b84:	dfc01517 	ldw	ra,84(sp)
   88b88:	dcc01417 	ldw	r19,80(sp)
   88b8c:	dc401317 	ldw	r17,76(sp)
   88b90:	dec01604 	addi	sp,sp,88
   88b94:	f800283a 	ret

00088b98 <__adddf3>:
   88b98:	deffea04 	addi	sp,sp,-88
   88b9c:	dcc01415 	stw	r19,80(sp)
   88ba0:	dcc00404 	addi	r19,sp,16
   88ba4:	2011883a 	mov	r8,r4
   88ba8:	2813883a 	mov	r9,r5
   88bac:	dc401315 	stw	r17,76(sp)
   88bb0:	d809883a 	mov	r4,sp
   88bb4:	980b883a 	mov	r5,r19
   88bb8:	dc400904 	addi	r17,sp,36
   88bbc:	dfc01515 	stw	ra,84(sp)
   88bc0:	da400115 	stw	r9,4(sp)
   88bc4:	d9c00315 	stw	r7,12(sp)
   88bc8:	da000015 	stw	r8,0(sp)
   88bcc:	d9800215 	stw	r6,8(sp)
   88bd0:	0089e380 	call	89e38 <__unpack_d>
   88bd4:	d9000204 	addi	r4,sp,8
   88bd8:	880b883a 	mov	r5,r17
   88bdc:	0089e380 	call	89e38 <__unpack_d>
   88be0:	d9800e04 	addi	r6,sp,56
   88be4:	9809883a 	mov	r4,r19
   88be8:	880b883a 	mov	r5,r17
   88bec:	00887080 	call	88708 <_fpadd_parts>
   88bf0:	1009883a 	mov	r4,r2
   88bf4:	0089b240 	call	89b24 <__pack_d>
   88bf8:	dfc01517 	ldw	ra,84(sp)
   88bfc:	dcc01417 	ldw	r19,80(sp)
   88c00:	dc401317 	ldw	r17,76(sp)
   88c04:	dec01604 	addi	sp,sp,88
   88c08:	f800283a 	ret

00088c0c <__muldf3>:
   88c0c:	deffe004 	addi	sp,sp,-128
   88c10:	dc401815 	stw	r17,96(sp)
   88c14:	dc400404 	addi	r17,sp,16
   88c18:	2011883a 	mov	r8,r4
   88c1c:	2813883a 	mov	r9,r5
   88c20:	dc001715 	stw	r16,92(sp)
   88c24:	d809883a 	mov	r4,sp
   88c28:	880b883a 	mov	r5,r17
   88c2c:	dc000904 	addi	r16,sp,36
   88c30:	dfc01f15 	stw	ra,124(sp)
   88c34:	da400115 	stw	r9,4(sp)
   88c38:	d9c00315 	stw	r7,12(sp)
   88c3c:	da000015 	stw	r8,0(sp)
   88c40:	d9800215 	stw	r6,8(sp)
   88c44:	ddc01e15 	stw	r23,120(sp)
   88c48:	dd801d15 	stw	r22,116(sp)
   88c4c:	dd401c15 	stw	r21,112(sp)
   88c50:	dd001b15 	stw	r20,108(sp)
   88c54:	dcc01a15 	stw	r19,104(sp)
   88c58:	dc801915 	stw	r18,100(sp)
   88c5c:	0089e380 	call	89e38 <__unpack_d>
   88c60:	d9000204 	addi	r4,sp,8
   88c64:	800b883a 	mov	r5,r16
   88c68:	0089e380 	call	89e38 <__unpack_d>
   88c6c:	d9000417 	ldw	r4,16(sp)
   88c70:	00800044 	movi	r2,1
   88c74:	1100102e 	bgeu	r2,r4,88cb8 <__muldf3+0xac>
   88c78:	d8c00917 	ldw	r3,36(sp)
   88c7c:	10c0062e 	bgeu	r2,r3,88c98 <__muldf3+0x8c>
   88c80:	00800104 	movi	r2,4
   88c84:	20800a26 	beq	r4,r2,88cb0 <__muldf3+0xa4>
   88c88:	1880cc26 	beq	r3,r2,88fbc <__muldf3+0x3b0>
   88c8c:	00800084 	movi	r2,2
   88c90:	20800926 	beq	r4,r2,88cb8 <__muldf3+0xac>
   88c94:	1880191e 	bne	r3,r2,88cfc <__muldf3+0xf0>
   88c98:	d8c00a17 	ldw	r3,40(sp)
   88c9c:	d8800517 	ldw	r2,20(sp)
   88ca0:	8009883a 	mov	r4,r16
   88ca4:	10c4c03a 	cmpne	r2,r2,r3
   88ca8:	d8800a15 	stw	r2,40(sp)
   88cac:	00000706 	br	88ccc <__muldf3+0xc0>
   88cb0:	00800084 	movi	r2,2
   88cb4:	1880c326 	beq	r3,r2,88fc4 <__muldf3+0x3b8>
   88cb8:	d8800517 	ldw	r2,20(sp)
   88cbc:	d8c00a17 	ldw	r3,40(sp)
   88cc0:	8809883a 	mov	r4,r17
   88cc4:	10c4c03a 	cmpne	r2,r2,r3
   88cc8:	d8800515 	stw	r2,20(sp)
   88ccc:	0089b240 	call	89b24 <__pack_d>
   88cd0:	dfc01f17 	ldw	ra,124(sp)
   88cd4:	ddc01e17 	ldw	r23,120(sp)
   88cd8:	dd801d17 	ldw	r22,116(sp)
   88cdc:	dd401c17 	ldw	r21,112(sp)
   88ce0:	dd001b17 	ldw	r20,108(sp)
   88ce4:	dcc01a17 	ldw	r19,104(sp)
   88ce8:	dc801917 	ldw	r18,100(sp)
   88cec:	dc401817 	ldw	r17,96(sp)
   88cf0:	dc001717 	ldw	r16,92(sp)
   88cf4:	dec02004 	addi	sp,sp,128
   88cf8:	f800283a 	ret
   88cfc:	dd800717 	ldw	r22,28(sp)
   88d00:	dc800c17 	ldw	r18,48(sp)
   88d04:	002b883a 	mov	r21,zero
   88d08:	0023883a 	mov	r17,zero
   88d0c:	a80b883a 	mov	r5,r21
   88d10:	b00d883a 	mov	r6,r22
   88d14:	880f883a 	mov	r7,r17
   88d18:	ddc00817 	ldw	r23,32(sp)
   88d1c:	dcc00d17 	ldw	r19,52(sp)
   88d20:	9009883a 	mov	r4,r18
   88d24:	00899800 	call	89980 <__muldi3>
   88d28:	001b883a 	mov	r13,zero
   88d2c:	680f883a 	mov	r7,r13
   88d30:	b009883a 	mov	r4,r22
   88d34:	000b883a 	mov	r5,zero
   88d38:	980d883a 	mov	r6,r19
   88d3c:	b82d883a 	mov	r22,r23
   88d40:	002f883a 	mov	r23,zero
   88d44:	db401615 	stw	r13,88(sp)
   88d48:	d8801315 	stw	r2,76(sp)
   88d4c:	d8c01415 	stw	r3,80(sp)
   88d50:	dcc01515 	stw	r19,84(sp)
   88d54:	00899800 	call	89980 <__muldi3>
   88d58:	b00d883a 	mov	r6,r22
   88d5c:	000b883a 	mov	r5,zero
   88d60:	9009883a 	mov	r4,r18
   88d64:	b80f883a 	mov	r7,r23
   88d68:	1021883a 	mov	r16,r2
   88d6c:	1823883a 	mov	r17,r3
   88d70:	00899800 	call	89980 <__muldi3>
   88d74:	8085883a 	add	r2,r16,r2
   88d78:	140d803a 	cmpltu	r6,r2,r16
   88d7c:	88c7883a 	add	r3,r17,r3
   88d80:	30cd883a 	add	r6,r6,r3
   88d84:	1029883a 	mov	r20,r2
   88d88:	302b883a 	mov	r21,r6
   88d8c:	da801317 	ldw	r10,76(sp)
   88d90:	dac01417 	ldw	r11,80(sp)
   88d94:	db001517 	ldw	r12,84(sp)
   88d98:	db401617 	ldw	r13,88(sp)
   88d9c:	3440612e 	bgeu	r6,r17,88f24 <__muldf3+0x318>
   88da0:	0009883a 	mov	r4,zero
   88da4:	5105883a 	add	r2,r10,r4
   88da8:	128d803a 	cmpltu	r6,r2,r10
   88dac:	5d07883a 	add	r3,r11,r20
   88db0:	30cd883a 	add	r6,r6,r3
   88db4:	0021883a 	mov	r16,zero
   88db8:	04400044 	movi	r17,1
   88dbc:	1025883a 	mov	r18,r2
   88dc0:	3027883a 	mov	r19,r6
   88dc4:	32c06236 	bltu	r6,r11,88f50 <__muldf3+0x344>
   88dc8:	59807a26 	beq	r11,r6,88fb4 <__muldf3+0x3a8>
   88dcc:	680b883a 	mov	r5,r13
   88dd0:	b80f883a 	mov	r7,r23
   88dd4:	6009883a 	mov	r4,r12
   88dd8:	b00d883a 	mov	r6,r22
   88ddc:	00899800 	call	89980 <__muldi3>
   88de0:	1009883a 	mov	r4,r2
   88de4:	000f883a 	mov	r7,zero
   88de8:	1545883a 	add	r2,r2,r21
   88dec:	1111803a 	cmpltu	r8,r2,r4
   88df0:	19c7883a 	add	r3,r3,r7
   88df4:	40c7883a 	add	r3,r8,r3
   88df8:	88cb883a 	add	r5,r17,r3
   88dfc:	d8c00617 	ldw	r3,24(sp)
   88e00:	8089883a 	add	r4,r16,r2
   88e04:	d8800b17 	ldw	r2,44(sp)
   88e08:	18c00104 	addi	r3,r3,4
   88e0c:	240d803a 	cmpltu	r6,r4,r16
   88e10:	10c7883a 	add	r3,r2,r3
   88e14:	2013883a 	mov	r9,r4
   88e18:	d8800a17 	ldw	r2,40(sp)
   88e1c:	d9000517 	ldw	r4,20(sp)
   88e20:	314d883a 	add	r6,r6,r5
   88e24:	3015883a 	mov	r10,r6
   88e28:	2088c03a 	cmpne	r4,r4,r2
   88e2c:	00880034 	movhi	r2,8192
   88e30:	10bfffc4 	addi	r2,r2,-1
   88e34:	d9000f15 	stw	r4,60(sp)
   88e38:	d8c01015 	stw	r3,64(sp)
   88e3c:	1180162e 	bgeu	r2,r6,88e98 <__muldf3+0x28c>
   88e40:	1811883a 	mov	r8,r3
   88e44:	101f883a 	mov	r15,r2
   88e48:	980497fa 	slli	r2,r19,31
   88e4c:	9016d07a 	srli	r11,r18,1
   88e50:	500697fa 	slli	r3,r10,31
   88e54:	480cd07a 	srli	r6,r9,1
   88e58:	500ed07a 	srli	r7,r10,1
   88e5c:	12d6b03a 	or	r11,r2,r11
   88e60:	00800044 	movi	r2,1
   88e64:	198cb03a 	or	r6,r3,r6
   88e68:	4888703a 	and	r4,r9,r2
   88e6c:	9818d07a 	srli	r12,r19,1
   88e70:	001b883a 	mov	r13,zero
   88e74:	03a00034 	movhi	r14,32768
   88e78:	3013883a 	mov	r9,r6
   88e7c:	3815883a 	mov	r10,r7
   88e80:	4091883a 	add	r8,r8,r2
   88e84:	20000226 	beq	r4,zero,88e90 <__muldf3+0x284>
   88e88:	5b64b03a 	or	r18,r11,r13
   88e8c:	63a6b03a 	or	r19,r12,r14
   88e90:	7abfed36 	bltu	r15,r10,88e48 <__muldf3+0x23c>
   88e94:	da001015 	stw	r8,64(sp)
   88e98:	00840034 	movhi	r2,4096
   88e9c:	10bfffc4 	addi	r2,r2,-1
   88ea0:	12801436 	bltu	r2,r10,88ef4 <__muldf3+0x2e8>
   88ea4:	da001017 	ldw	r8,64(sp)
   88ea8:	101f883a 	mov	r15,r2
   88eac:	4a45883a 	add	r2,r9,r9
   88eb0:	124d803a 	cmpltu	r6,r2,r9
   88eb4:	5287883a 	add	r3,r10,r10
   88eb8:	9497883a 	add	r11,r18,r18
   88ebc:	5c8f803a 	cmpltu	r7,r11,r18
   88ec0:	9cd9883a 	add	r12,r19,r19
   88ec4:	01000044 	movi	r4,1
   88ec8:	30cd883a 	add	r6,r6,r3
   88ecc:	3b0f883a 	add	r7,r7,r12
   88ed0:	423fffc4 	addi	r8,r8,-1
   88ed4:	1013883a 	mov	r9,r2
   88ed8:	3015883a 	mov	r10,r6
   88edc:	111ab03a 	or	r13,r2,r4
   88ee0:	98003016 	blt	r19,zero,88fa4 <__muldf3+0x398>
   88ee4:	5825883a 	mov	r18,r11
   88ee8:	3827883a 	mov	r19,r7
   88eec:	7abfef2e 	bgeu	r15,r10,88eac <__muldf3+0x2a0>
   88ef0:	da001015 	stw	r8,64(sp)
   88ef4:	00803fc4 	movi	r2,255
   88ef8:	488e703a 	and	r7,r9,r2
   88efc:	00802004 	movi	r2,128
   88f00:	0007883a 	mov	r3,zero
   88f04:	0011883a 	mov	r8,zero
   88f08:	38801826 	beq	r7,r2,88f6c <__muldf3+0x360>
   88f0c:	008000c4 	movi	r2,3
   88f10:	d9000e04 	addi	r4,sp,56
   88f14:	da801215 	stw	r10,72(sp)
   88f18:	d8800e15 	stw	r2,56(sp)
   88f1c:	da401115 	stw	r9,68(sp)
   88f20:	003f6a06 	br	88ccc <__muldf3+0xc0>
   88f24:	89802126 	beq	r17,r6,88fac <__muldf3+0x3a0>
   88f28:	0009883a 	mov	r4,zero
   88f2c:	5105883a 	add	r2,r10,r4
   88f30:	128d803a 	cmpltu	r6,r2,r10
   88f34:	5d07883a 	add	r3,r11,r20
   88f38:	30cd883a 	add	r6,r6,r3
   88f3c:	0021883a 	mov	r16,zero
   88f40:	0023883a 	mov	r17,zero
   88f44:	1025883a 	mov	r18,r2
   88f48:	3027883a 	mov	r19,r6
   88f4c:	32ff9e2e 	bgeu	r6,r11,88dc8 <__muldf3+0x1bc>
   88f50:	00800044 	movi	r2,1
   88f54:	8089883a 	add	r4,r16,r2
   88f58:	240d803a 	cmpltu	r6,r4,r16
   88f5c:	344d883a 	add	r6,r6,r17
   88f60:	2021883a 	mov	r16,r4
   88f64:	3023883a 	mov	r17,r6
   88f68:	003f9806 	br	88dcc <__muldf3+0x1c0>
   88f6c:	403fe71e 	bne	r8,zero,88f0c <__muldf3+0x300>
   88f70:	01004004 	movi	r4,256
   88f74:	4904703a 	and	r2,r9,r4
   88f78:	10c4b03a 	or	r2,r2,r3
   88f7c:	103fe31e 	bne	r2,zero,88f0c <__muldf3+0x300>
   88f80:	94c4b03a 	or	r2,r18,r19
   88f84:	103fe126 	beq	r2,zero,88f0c <__muldf3+0x300>
   88f88:	49c5883a 	add	r2,r9,r7
   88f8c:	1251803a 	cmpltu	r8,r2,r9
   88f90:	4291883a 	add	r8,r8,r10
   88f94:	013fc004 	movi	r4,-256
   88f98:	1112703a 	and	r9,r2,r4
   88f9c:	4015883a 	mov	r10,r8
   88fa0:	003fda06 	br	88f0c <__muldf3+0x300>
   88fa4:	6813883a 	mov	r9,r13
   88fa8:	003fce06 	br	88ee4 <__muldf3+0x2d8>
   88fac:	143f7c36 	bltu	r2,r16,88da0 <__muldf3+0x194>
   88fb0:	003fdd06 	br	88f28 <__muldf3+0x31c>
   88fb4:	12bf852e 	bgeu	r2,r10,88dcc <__muldf3+0x1c0>
   88fb8:	003fe506 	br	88f50 <__muldf3+0x344>
   88fbc:	00800084 	movi	r2,2
   88fc0:	20bf351e 	bne	r4,r2,88c98 <__muldf3+0x8c>
   88fc4:	01000274 	movhi	r4,9
   88fc8:	21339104 	addi	r4,r4,-12732
   88fcc:	003f3f06 	br	88ccc <__muldf3+0xc0>

00088fd0 <__divdf3>:
   88fd0:	deffed04 	addi	sp,sp,-76
   88fd4:	dcc01115 	stw	r19,68(sp)
   88fd8:	dcc00404 	addi	r19,sp,16
   88fdc:	2011883a 	mov	r8,r4
   88fe0:	2813883a 	mov	r9,r5
   88fe4:	dc000e15 	stw	r16,56(sp)
   88fe8:	d809883a 	mov	r4,sp
   88fec:	980b883a 	mov	r5,r19
   88ff0:	dc000904 	addi	r16,sp,36
   88ff4:	dfc01215 	stw	ra,72(sp)
   88ff8:	da400115 	stw	r9,4(sp)
   88ffc:	d9c00315 	stw	r7,12(sp)
   89000:	da000015 	stw	r8,0(sp)
   89004:	d9800215 	stw	r6,8(sp)
   89008:	dc801015 	stw	r18,64(sp)
   8900c:	dc400f15 	stw	r17,60(sp)
   89010:	0089e380 	call	89e38 <__unpack_d>
   89014:	d9000204 	addi	r4,sp,8
   89018:	800b883a 	mov	r5,r16
   8901c:	0089e380 	call	89e38 <__unpack_d>
   89020:	d9000417 	ldw	r4,16(sp)
   89024:	00800044 	movi	r2,1
   89028:	11000b2e 	bgeu	r2,r4,89058 <__divdf3+0x88>
   8902c:	d9400917 	ldw	r5,36(sp)
   89030:	1140762e 	bgeu	r2,r5,8920c <__divdf3+0x23c>
   89034:	d8800517 	ldw	r2,20(sp)
   89038:	d8c00a17 	ldw	r3,40(sp)
   8903c:	01800104 	movi	r6,4
   89040:	10c4f03a 	xor	r2,r2,r3
   89044:	d8800515 	stw	r2,20(sp)
   89048:	21800226 	beq	r4,r6,89054 <__divdf3+0x84>
   8904c:	00800084 	movi	r2,2
   89050:	2080141e 	bne	r4,r2,890a4 <__divdf3+0xd4>
   89054:	29000926 	beq	r5,r4,8907c <__divdf3+0xac>
   89058:	9809883a 	mov	r4,r19
   8905c:	0089b240 	call	89b24 <__pack_d>
   89060:	dfc01217 	ldw	ra,72(sp)
   89064:	dcc01117 	ldw	r19,68(sp)
   89068:	dc801017 	ldw	r18,64(sp)
   8906c:	dc400f17 	ldw	r17,60(sp)
   89070:	dc000e17 	ldw	r16,56(sp)
   89074:	dec01304 	addi	sp,sp,76
   89078:	f800283a 	ret
   8907c:	01000274 	movhi	r4,9
   89080:	21339104 	addi	r4,r4,-12732
   89084:	0089b240 	call	89b24 <__pack_d>
   89088:	dfc01217 	ldw	ra,72(sp)
   8908c:	dcc01117 	ldw	r19,68(sp)
   89090:	dc801017 	ldw	r18,64(sp)
   89094:	dc400f17 	ldw	r17,60(sp)
   89098:	dc000e17 	ldw	r16,56(sp)
   8909c:	dec01304 	addi	sp,sp,76
   890a0:	f800283a 	ret
   890a4:	29805b26 	beq	r5,r6,89214 <__divdf3+0x244>
   890a8:	28802d26 	beq	r5,r2,89160 <__divdf3+0x190>
   890ac:	d8c00617 	ldw	r3,24(sp)
   890b0:	d8800b17 	ldw	r2,44(sp)
   890b4:	d9c00817 	ldw	r7,32(sp)
   890b8:	dc400d17 	ldw	r17,52(sp)
   890bc:	188bc83a 	sub	r5,r3,r2
   890c0:	d9800717 	ldw	r6,28(sp)
   890c4:	dc000c17 	ldw	r16,48(sp)
   890c8:	d9400615 	stw	r5,24(sp)
   890cc:	3c403836 	bltu	r7,r17,891b0 <__divdf3+0x1e0>
   890d0:	89c03626 	beq	r17,r7,891ac <__divdf3+0x1dc>
   890d4:	0015883a 	mov	r10,zero
   890d8:	001d883a 	mov	r14,zero
   890dc:	02c40034 	movhi	r11,4096
   890e0:	001f883a 	mov	r15,zero
   890e4:	003f883a 	mov	ra,zero
   890e8:	04800f44 	movi	r18,61
   890ec:	00000f06 	br	8912c <__divdf3+0x15c>
   890f0:	601d883a 	mov	r14,r12
   890f4:	681f883a 	mov	r15,r13
   890f8:	400d883a 	mov	r6,r8
   890fc:	100f883a 	mov	r7,r2
   89100:	3191883a 	add	r8,r6,r6
   89104:	5808d07a 	srli	r4,r11,1
   89108:	4185803a 	cmpltu	r2,r8,r6
   8910c:	39d3883a 	add	r9,r7,r7
   89110:	28c6b03a 	or	r3,r5,r3
   89114:	1245883a 	add	r2,r2,r9
   89118:	1815883a 	mov	r10,r3
   8911c:	2017883a 	mov	r11,r4
   89120:	400d883a 	mov	r6,r8
   89124:	100f883a 	mov	r7,r2
   89128:	fc801726 	beq	ra,r18,89188 <__divdf3+0x1b8>
   8912c:	580a97fa 	slli	r5,r11,31
   89130:	5006d07a 	srli	r3,r10,1
   89134:	ffc00044 	addi	ra,ra,1
   89138:	3c7ff136 	bltu	r7,r17,89100 <__divdf3+0x130>
   8913c:	3411c83a 	sub	r8,r6,r16
   89140:	3205803a 	cmpltu	r2,r6,r8
   89144:	3c53c83a 	sub	r9,r7,r17
   89148:	7298b03a 	or	r12,r14,r10
   8914c:	7adab03a 	or	r13,r15,r11
   89150:	4885c83a 	sub	r2,r9,r2
   89154:	89ffe61e 	bne	r17,r7,890f0 <__divdf3+0x120>
   89158:	343fe936 	bltu	r6,r16,89100 <__divdf3+0x130>
   8915c:	003fe406 	br	890f0 <__divdf3+0x120>
   89160:	9809883a 	mov	r4,r19
   89164:	d9800415 	stw	r6,16(sp)
   89168:	0089b240 	call	89b24 <__pack_d>
   8916c:	dfc01217 	ldw	ra,72(sp)
   89170:	dcc01117 	ldw	r19,68(sp)
   89174:	dc801017 	ldw	r18,64(sp)
   89178:	dc400f17 	ldw	r17,60(sp)
   8917c:	dc000e17 	ldw	r16,56(sp)
   89180:	dec01304 	addi	sp,sp,76
   89184:	f800283a 	ret
   89188:	00803fc4 	movi	r2,255
   8918c:	7090703a 	and	r8,r14,r2
   89190:	00802004 	movi	r2,128
   89194:	0007883a 	mov	r3,zero
   89198:	0013883a 	mov	r9,zero
   8919c:	40800d26 	beq	r8,r2,891d4 <__divdf3+0x204>
   891a0:	dbc00815 	stw	r15,32(sp)
   891a4:	db800715 	stw	r14,28(sp)
   891a8:	003fab06 	br	89058 <__divdf3+0x88>
   891ac:	343fc92e 	bgeu	r6,r16,890d4 <__divdf3+0x104>
   891b0:	3185883a 	add	r2,r6,r6
   891b4:	1189803a 	cmpltu	r4,r2,r6
   891b8:	39c7883a 	add	r3,r7,r7
   891bc:	20c9883a 	add	r4,r4,r3
   891c0:	297fffc4 	addi	r5,r5,-1
   891c4:	100d883a 	mov	r6,r2
   891c8:	200f883a 	mov	r7,r4
   891cc:	d9400615 	stw	r5,24(sp)
   891d0:	003fc006 	br	890d4 <__divdf3+0x104>
   891d4:	483ff21e 	bne	r9,zero,891a0 <__divdf3+0x1d0>
   891d8:	01004004 	movi	r4,256
   891dc:	7104703a 	and	r2,r14,r4
   891e0:	10c4b03a 	or	r2,r2,r3
   891e4:	103fee1e 	bne	r2,zero,891a0 <__divdf3+0x1d0>
   891e8:	31c4b03a 	or	r2,r6,r7
   891ec:	103fec26 	beq	r2,zero,891a0 <__divdf3+0x1d0>
   891f0:	7205883a 	add	r2,r14,r8
   891f4:	1391803a 	cmpltu	r8,r2,r14
   891f8:	43d1883a 	add	r8,r8,r15
   891fc:	013fc004 	movi	r4,-256
   89200:	111c703a 	and	r14,r2,r4
   89204:	401f883a 	mov	r15,r8
   89208:	003fe506 	br	891a0 <__divdf3+0x1d0>
   8920c:	8009883a 	mov	r4,r16
   89210:	003f9206 	br	8905c <__divdf3+0x8c>
   89214:	9809883a 	mov	r4,r19
   89218:	d8000715 	stw	zero,28(sp)
   8921c:	d8000815 	stw	zero,32(sp)
   89220:	d8000615 	stw	zero,24(sp)
   89224:	003f8d06 	br	8905c <__divdf3+0x8c>

00089228 <__eqdf2>:
   89228:	deffef04 	addi	sp,sp,-68
   8922c:	dc400f15 	stw	r17,60(sp)
   89230:	dc400404 	addi	r17,sp,16
   89234:	2005883a 	mov	r2,r4
   89238:	2807883a 	mov	r3,r5
   8923c:	dc000e15 	stw	r16,56(sp)
   89240:	d809883a 	mov	r4,sp
   89244:	880b883a 	mov	r5,r17
   89248:	dc000904 	addi	r16,sp,36
   8924c:	d8c00115 	stw	r3,4(sp)
   89250:	d8800015 	stw	r2,0(sp)
   89254:	d9800215 	stw	r6,8(sp)
   89258:	dfc01015 	stw	ra,64(sp)
   8925c:	d9c00315 	stw	r7,12(sp)
   89260:	0089e380 	call	89e38 <__unpack_d>
   89264:	d9000204 	addi	r4,sp,8
   89268:	800b883a 	mov	r5,r16
   8926c:	0089e380 	call	89e38 <__unpack_d>
   89270:	d8800417 	ldw	r2,16(sp)
   89274:	00c00044 	movi	r3,1
   89278:	180d883a 	mov	r6,r3
   8927c:	1880062e 	bgeu	r3,r2,89298 <__eqdf2+0x70>
   89280:	d8800917 	ldw	r2,36(sp)
   89284:	8809883a 	mov	r4,r17
   89288:	800b883a 	mov	r5,r16
   8928c:	1880022e 	bgeu	r3,r2,89298 <__eqdf2+0x70>
   89290:	0089f700 	call	89f70 <__fpcmp_parts_d>
   89294:	100d883a 	mov	r6,r2
   89298:	3005883a 	mov	r2,r6
   8929c:	dfc01017 	ldw	ra,64(sp)
   892a0:	dc400f17 	ldw	r17,60(sp)
   892a4:	dc000e17 	ldw	r16,56(sp)
   892a8:	dec01104 	addi	sp,sp,68
   892ac:	f800283a 	ret

000892b0 <__nedf2>:
   892b0:	deffef04 	addi	sp,sp,-68
   892b4:	dc400f15 	stw	r17,60(sp)
   892b8:	dc400404 	addi	r17,sp,16
   892bc:	2005883a 	mov	r2,r4
   892c0:	2807883a 	mov	r3,r5
   892c4:	dc000e15 	stw	r16,56(sp)
   892c8:	d809883a 	mov	r4,sp
   892cc:	880b883a 	mov	r5,r17
   892d0:	dc000904 	addi	r16,sp,36
   892d4:	d8c00115 	stw	r3,4(sp)
   892d8:	d8800015 	stw	r2,0(sp)
   892dc:	d9800215 	stw	r6,8(sp)
   892e0:	dfc01015 	stw	ra,64(sp)
   892e4:	d9c00315 	stw	r7,12(sp)
   892e8:	0089e380 	call	89e38 <__unpack_d>
   892ec:	d9000204 	addi	r4,sp,8
   892f0:	800b883a 	mov	r5,r16
   892f4:	0089e380 	call	89e38 <__unpack_d>
   892f8:	d8800417 	ldw	r2,16(sp)
   892fc:	00c00044 	movi	r3,1
   89300:	180d883a 	mov	r6,r3
   89304:	1880062e 	bgeu	r3,r2,89320 <__nedf2+0x70>
   89308:	d8800917 	ldw	r2,36(sp)
   8930c:	8809883a 	mov	r4,r17
   89310:	800b883a 	mov	r5,r16
   89314:	1880022e 	bgeu	r3,r2,89320 <__nedf2+0x70>
   89318:	0089f700 	call	89f70 <__fpcmp_parts_d>
   8931c:	100d883a 	mov	r6,r2
   89320:	3005883a 	mov	r2,r6
   89324:	dfc01017 	ldw	ra,64(sp)
   89328:	dc400f17 	ldw	r17,60(sp)
   8932c:	dc000e17 	ldw	r16,56(sp)
   89330:	dec01104 	addi	sp,sp,68
   89334:	f800283a 	ret

00089338 <__gtdf2>:
   89338:	deffef04 	addi	sp,sp,-68
   8933c:	dc400f15 	stw	r17,60(sp)
   89340:	dc400404 	addi	r17,sp,16
   89344:	2005883a 	mov	r2,r4
   89348:	2807883a 	mov	r3,r5
   8934c:	dc000e15 	stw	r16,56(sp)
   89350:	d809883a 	mov	r4,sp
   89354:	880b883a 	mov	r5,r17
   89358:	dc000904 	addi	r16,sp,36
   8935c:	d8c00115 	stw	r3,4(sp)
   89360:	d8800015 	stw	r2,0(sp)
   89364:	d9800215 	stw	r6,8(sp)
   89368:	dfc01015 	stw	ra,64(sp)
   8936c:	d9c00315 	stw	r7,12(sp)
   89370:	0089e380 	call	89e38 <__unpack_d>
   89374:	d9000204 	addi	r4,sp,8
   89378:	800b883a 	mov	r5,r16
   8937c:	0089e380 	call	89e38 <__unpack_d>
   89380:	d8800417 	ldw	r2,16(sp)
   89384:	00c00044 	movi	r3,1
   89388:	01bfffc4 	movi	r6,-1
   8938c:	1880062e 	bgeu	r3,r2,893a8 <__gtdf2+0x70>
   89390:	d8800917 	ldw	r2,36(sp)
   89394:	8809883a 	mov	r4,r17
   89398:	800b883a 	mov	r5,r16
   8939c:	1880022e 	bgeu	r3,r2,893a8 <__gtdf2+0x70>
   893a0:	0089f700 	call	89f70 <__fpcmp_parts_d>
   893a4:	100d883a 	mov	r6,r2
   893a8:	3005883a 	mov	r2,r6
   893ac:	dfc01017 	ldw	ra,64(sp)
   893b0:	dc400f17 	ldw	r17,60(sp)
   893b4:	dc000e17 	ldw	r16,56(sp)
   893b8:	dec01104 	addi	sp,sp,68
   893bc:	f800283a 	ret

000893c0 <__gedf2>:
   893c0:	deffef04 	addi	sp,sp,-68
   893c4:	dc400f15 	stw	r17,60(sp)
   893c8:	dc400404 	addi	r17,sp,16
   893cc:	2005883a 	mov	r2,r4
   893d0:	2807883a 	mov	r3,r5
   893d4:	dc000e15 	stw	r16,56(sp)
   893d8:	d809883a 	mov	r4,sp
   893dc:	880b883a 	mov	r5,r17
   893e0:	dc000904 	addi	r16,sp,36
   893e4:	d8c00115 	stw	r3,4(sp)
   893e8:	d8800015 	stw	r2,0(sp)
   893ec:	d9800215 	stw	r6,8(sp)
   893f0:	dfc01015 	stw	ra,64(sp)
   893f4:	d9c00315 	stw	r7,12(sp)
   893f8:	0089e380 	call	89e38 <__unpack_d>
   893fc:	d9000204 	addi	r4,sp,8
   89400:	800b883a 	mov	r5,r16
   89404:	0089e380 	call	89e38 <__unpack_d>
   89408:	d8800417 	ldw	r2,16(sp)
   8940c:	00c00044 	movi	r3,1
   89410:	01bfffc4 	movi	r6,-1
   89414:	1880062e 	bgeu	r3,r2,89430 <__gedf2+0x70>
   89418:	d8800917 	ldw	r2,36(sp)
   8941c:	8809883a 	mov	r4,r17
   89420:	800b883a 	mov	r5,r16
   89424:	1880022e 	bgeu	r3,r2,89430 <__gedf2+0x70>
   89428:	0089f700 	call	89f70 <__fpcmp_parts_d>
   8942c:	100d883a 	mov	r6,r2
   89430:	3005883a 	mov	r2,r6
   89434:	dfc01017 	ldw	ra,64(sp)
   89438:	dc400f17 	ldw	r17,60(sp)
   8943c:	dc000e17 	ldw	r16,56(sp)
   89440:	dec01104 	addi	sp,sp,68
   89444:	f800283a 	ret

00089448 <__ltdf2>:
   89448:	deffef04 	addi	sp,sp,-68
   8944c:	dc400f15 	stw	r17,60(sp)
   89450:	dc400404 	addi	r17,sp,16
   89454:	2005883a 	mov	r2,r4
   89458:	2807883a 	mov	r3,r5
   8945c:	dc000e15 	stw	r16,56(sp)
   89460:	d809883a 	mov	r4,sp
   89464:	880b883a 	mov	r5,r17
   89468:	dc000904 	addi	r16,sp,36
   8946c:	d8c00115 	stw	r3,4(sp)
   89470:	d8800015 	stw	r2,0(sp)
   89474:	d9800215 	stw	r6,8(sp)
   89478:	dfc01015 	stw	ra,64(sp)
   8947c:	d9c00315 	stw	r7,12(sp)
   89480:	0089e380 	call	89e38 <__unpack_d>
   89484:	d9000204 	addi	r4,sp,8
   89488:	800b883a 	mov	r5,r16
   8948c:	0089e380 	call	89e38 <__unpack_d>
   89490:	d8800417 	ldw	r2,16(sp)
   89494:	00c00044 	movi	r3,1
   89498:	180d883a 	mov	r6,r3
   8949c:	1880062e 	bgeu	r3,r2,894b8 <__ltdf2+0x70>
   894a0:	d8800917 	ldw	r2,36(sp)
   894a4:	8809883a 	mov	r4,r17
   894a8:	800b883a 	mov	r5,r16
   894ac:	1880022e 	bgeu	r3,r2,894b8 <__ltdf2+0x70>
   894b0:	0089f700 	call	89f70 <__fpcmp_parts_d>
   894b4:	100d883a 	mov	r6,r2
   894b8:	3005883a 	mov	r2,r6
   894bc:	dfc01017 	ldw	ra,64(sp)
   894c0:	dc400f17 	ldw	r17,60(sp)
   894c4:	dc000e17 	ldw	r16,56(sp)
   894c8:	dec01104 	addi	sp,sp,68
   894cc:	f800283a 	ret

000894d0 <__floatsidf>:
   894d0:	2006d7fa 	srli	r3,r4,31
   894d4:	defff604 	addi	sp,sp,-40
   894d8:	008000c4 	movi	r2,3
   894dc:	dfc00915 	stw	ra,36(sp)
   894e0:	dcc00815 	stw	r19,32(sp)
   894e4:	dc800715 	stw	r18,28(sp)
   894e8:	dc400615 	stw	r17,24(sp)
   894ec:	dc000515 	stw	r16,20(sp)
   894f0:	d8800015 	stw	r2,0(sp)
   894f4:	d8c00115 	stw	r3,4(sp)
   894f8:	20000f1e 	bne	r4,zero,89538 <__floatsidf+0x68>
   894fc:	00800084 	movi	r2,2
   89500:	d8800015 	stw	r2,0(sp)
   89504:	d809883a 	mov	r4,sp
   89508:	0089b240 	call	89b24 <__pack_d>
   8950c:	1009883a 	mov	r4,r2
   89510:	180b883a 	mov	r5,r3
   89514:	2005883a 	mov	r2,r4
   89518:	2807883a 	mov	r3,r5
   8951c:	dfc00917 	ldw	ra,36(sp)
   89520:	dcc00817 	ldw	r19,32(sp)
   89524:	dc800717 	ldw	r18,28(sp)
   89528:	dc400617 	ldw	r17,24(sp)
   8952c:	dc000517 	ldw	r16,20(sp)
   89530:	dec00a04 	addi	sp,sp,40
   89534:	f800283a 	ret
   89538:	00800f04 	movi	r2,60
   8953c:	1807003a 	cmpeq	r3,r3,zero
   89540:	d8800215 	stw	r2,8(sp)
   89544:	18001126 	beq	r3,zero,8958c <__floatsidf+0xbc>
   89548:	0027883a 	mov	r19,zero
   8954c:	2025883a 	mov	r18,r4
   89550:	d9000315 	stw	r4,12(sp)
   89554:	dcc00415 	stw	r19,16(sp)
   89558:	0089aa40 	call	89aa4 <__clzsi2>
   8955c:	11000744 	addi	r4,r2,29
   89560:	013fe80e 	bge	zero,r4,89504 <__floatsidf+0x34>
   89564:	10bfff44 	addi	r2,r2,-3
   89568:	10000c16 	blt	r2,zero,8959c <__floatsidf+0xcc>
   8956c:	90a2983a 	sll	r17,r18,r2
   89570:	0021883a 	mov	r16,zero
   89574:	d8800217 	ldw	r2,8(sp)
   89578:	dc400415 	stw	r17,16(sp)
   8957c:	dc000315 	stw	r16,12(sp)
   89580:	1105c83a 	sub	r2,r2,r4
   89584:	d8800215 	stw	r2,8(sp)
   89588:	003fde06 	br	89504 <__floatsidf+0x34>
   8958c:	00a00034 	movhi	r2,32768
   89590:	20800a26 	beq	r4,r2,895bc <__floatsidf+0xec>
   89594:	0109c83a 	sub	r4,zero,r4
   89598:	003feb06 	br	89548 <__floatsidf+0x78>
   8959c:	9006d07a 	srli	r3,r18,1
   895a0:	008007c4 	movi	r2,31
   895a4:	1105c83a 	sub	r2,r2,r4
   895a8:	1886d83a 	srl	r3,r3,r2
   895ac:	9922983a 	sll	r17,r19,r4
   895b0:	9120983a 	sll	r16,r18,r4
   895b4:	1c62b03a 	or	r17,r3,r17
   895b8:	003fee06 	br	89574 <__floatsidf+0xa4>
   895bc:	0009883a 	mov	r4,zero
   895c0:	01707834 	movhi	r5,49632
   895c4:	003fd306 	br	89514 <__floatsidf+0x44>

000895c8 <__fixdfsi>:
   895c8:	defff804 	addi	sp,sp,-32
   895cc:	2005883a 	mov	r2,r4
   895d0:	2807883a 	mov	r3,r5
   895d4:	d809883a 	mov	r4,sp
   895d8:	d9400204 	addi	r5,sp,8
   895dc:	d8c00115 	stw	r3,4(sp)
   895e0:	d8800015 	stw	r2,0(sp)
   895e4:	dfc00715 	stw	ra,28(sp)
   895e8:	0089e380 	call	89e38 <__unpack_d>
   895ec:	d8c00217 	ldw	r3,8(sp)
   895f0:	00800084 	movi	r2,2
   895f4:	1880051e 	bne	r3,r2,8960c <__fixdfsi+0x44>
   895f8:	0007883a 	mov	r3,zero
   895fc:	1805883a 	mov	r2,r3
   89600:	dfc00717 	ldw	ra,28(sp)
   89604:	dec00804 	addi	sp,sp,32
   89608:	f800283a 	ret
   8960c:	00800044 	movi	r2,1
   89610:	10fff92e 	bgeu	r2,r3,895f8 <__fixdfsi+0x30>
   89614:	00800104 	movi	r2,4
   89618:	18800426 	beq	r3,r2,8962c <__fixdfsi+0x64>
   8961c:	d8c00417 	ldw	r3,16(sp)
   89620:	183ff516 	blt	r3,zero,895f8 <__fixdfsi+0x30>
   89624:	00800784 	movi	r2,30
   89628:	10c0080e 	bge	r2,r3,8964c <__fixdfsi+0x84>
   8962c:	d8800317 	ldw	r2,12(sp)
   89630:	1000121e 	bne	r2,zero,8967c <__fixdfsi+0xb4>
   89634:	00e00034 	movhi	r3,32768
   89638:	18ffffc4 	addi	r3,r3,-1
   8963c:	1805883a 	mov	r2,r3
   89640:	dfc00717 	ldw	ra,28(sp)
   89644:	dec00804 	addi	sp,sp,32
   89648:	f800283a 	ret
   8964c:	00800f04 	movi	r2,60
   89650:	10d1c83a 	sub	r8,r2,r3
   89654:	40bff804 	addi	r2,r8,-32
   89658:	d9800517 	ldw	r6,20(sp)
   8965c:	d9c00617 	ldw	r7,24(sp)
   89660:	10000816 	blt	r2,zero,89684 <__fixdfsi+0xbc>
   89664:	3888d83a 	srl	r4,r7,r2
   89668:	d8800317 	ldw	r2,12(sp)
   8966c:	2007883a 	mov	r3,r4
   89670:	103fe226 	beq	r2,zero,895fc <__fixdfsi+0x34>
   89674:	0107c83a 	sub	r3,zero,r4
   89678:	003fe006 	br	895fc <__fixdfsi+0x34>
   8967c:	00e00034 	movhi	r3,32768
   89680:	003fde06 	br	895fc <__fixdfsi+0x34>
   89684:	39c7883a 	add	r3,r7,r7
   89688:	008007c4 	movi	r2,31
   8968c:	1205c83a 	sub	r2,r2,r8
   89690:	1886983a 	sll	r3,r3,r2
   89694:	3208d83a 	srl	r4,r6,r8
   89698:	1908b03a 	or	r4,r3,r4
   8969c:	003ff206 	br	89668 <__fixdfsi+0xa0>

000896a0 <__floatunsidf>:
   896a0:	defff204 	addi	sp,sp,-56
   896a4:	dfc00d15 	stw	ra,52(sp)
   896a8:	ddc00c15 	stw	r23,48(sp)
   896ac:	dd800b15 	stw	r22,44(sp)
   896b0:	dd400a15 	stw	r21,40(sp)
   896b4:	dd000915 	stw	r20,36(sp)
   896b8:	dcc00815 	stw	r19,32(sp)
   896bc:	dc800715 	stw	r18,28(sp)
   896c0:	dc400615 	stw	r17,24(sp)
   896c4:	dc000515 	stw	r16,20(sp)
   896c8:	d8000115 	stw	zero,4(sp)
   896cc:	20000f1e 	bne	r4,zero,8970c <__floatunsidf+0x6c>
   896d0:	00800084 	movi	r2,2
   896d4:	d8800015 	stw	r2,0(sp)
   896d8:	d809883a 	mov	r4,sp
   896dc:	0089b240 	call	89b24 <__pack_d>
   896e0:	dfc00d17 	ldw	ra,52(sp)
   896e4:	ddc00c17 	ldw	r23,48(sp)
   896e8:	dd800b17 	ldw	r22,44(sp)
   896ec:	dd400a17 	ldw	r21,40(sp)
   896f0:	dd000917 	ldw	r20,36(sp)
   896f4:	dcc00817 	ldw	r19,32(sp)
   896f8:	dc800717 	ldw	r18,28(sp)
   896fc:	dc400617 	ldw	r17,24(sp)
   89700:	dc000517 	ldw	r16,20(sp)
   89704:	dec00e04 	addi	sp,sp,56
   89708:	f800283a 	ret
   8970c:	008000c4 	movi	r2,3
   89710:	00c00f04 	movi	r3,60
   89714:	002f883a 	mov	r23,zero
   89718:	202d883a 	mov	r22,r4
   8971c:	d8800015 	stw	r2,0(sp)
   89720:	d8c00215 	stw	r3,8(sp)
   89724:	d9000315 	stw	r4,12(sp)
   89728:	ddc00415 	stw	r23,16(sp)
   8972c:	0089aa40 	call	89aa4 <__clzsi2>
   89730:	12400744 	addi	r9,r2,29
   89734:	48000b16 	blt	r9,zero,89764 <__floatunsidf+0xc4>
   89738:	483fe726 	beq	r9,zero,896d8 <__floatunsidf+0x38>
   8973c:	10bfff44 	addi	r2,r2,-3
   89740:	10002e16 	blt	r2,zero,897fc <__floatunsidf+0x15c>
   89744:	b0a2983a 	sll	r17,r22,r2
   89748:	0021883a 	mov	r16,zero
   8974c:	d8800217 	ldw	r2,8(sp)
   89750:	dc400415 	stw	r17,16(sp)
   89754:	dc000315 	stw	r16,12(sp)
   89758:	1245c83a 	sub	r2,r2,r9
   8975c:	d8800215 	stw	r2,8(sp)
   89760:	003fdd06 	br	896d8 <__floatunsidf+0x38>
   89764:	0255c83a 	sub	r10,zero,r9
   89768:	51bff804 	addi	r6,r10,-32
   8976c:	30001b16 	blt	r6,zero,897dc <__floatunsidf+0x13c>
   89770:	b9a8d83a 	srl	r20,r23,r6
   89774:	002b883a 	mov	r21,zero
   89778:	000f883a 	mov	r7,zero
   8977c:	01000044 	movi	r4,1
   89780:	0011883a 	mov	r8,zero
   89784:	30002516 	blt	r6,zero,8981c <__floatunsidf+0x17c>
   89788:	21a6983a 	sll	r19,r4,r6
   8978c:	0025883a 	mov	r18,zero
   89790:	00bfffc4 	movi	r2,-1
   89794:	9089883a 	add	r4,r18,r2
   89798:	988b883a 	add	r5,r19,r2
   8979c:	248d803a 	cmpltu	r6,r4,r18
   897a0:	314b883a 	add	r5,r6,r5
   897a4:	b104703a 	and	r2,r22,r4
   897a8:	b946703a 	and	r3,r23,r5
   897ac:	10c4b03a 	or	r2,r2,r3
   897b0:	10000226 	beq	r2,zero,897bc <__floatunsidf+0x11c>
   897b4:	01c00044 	movi	r7,1
   897b8:	0011883a 	mov	r8,zero
   897bc:	d9000217 	ldw	r4,8(sp)
   897c0:	a1c4b03a 	or	r2,r20,r7
   897c4:	aa06b03a 	or	r3,r21,r8
   897c8:	2249c83a 	sub	r4,r4,r9
   897cc:	d8c00415 	stw	r3,16(sp)
   897d0:	d9000215 	stw	r4,8(sp)
   897d4:	d8800315 	stw	r2,12(sp)
   897d8:	003fbf06 	br	896d8 <__floatunsidf+0x38>
   897dc:	bdc7883a 	add	r3,r23,r23
   897e0:	008007c4 	movi	r2,31
   897e4:	1285c83a 	sub	r2,r2,r10
   897e8:	1886983a 	sll	r3,r3,r2
   897ec:	b2a8d83a 	srl	r20,r22,r10
   897f0:	baaad83a 	srl	r21,r23,r10
   897f4:	1d28b03a 	or	r20,r3,r20
   897f8:	003fdf06 	br	89778 <__floatunsidf+0xd8>
   897fc:	b006d07a 	srli	r3,r22,1
   89800:	008007c4 	movi	r2,31
   89804:	1245c83a 	sub	r2,r2,r9
   89808:	1886d83a 	srl	r3,r3,r2
   8980c:	ba62983a 	sll	r17,r23,r9
   89810:	b260983a 	sll	r16,r22,r9
   89814:	1c62b03a 	or	r17,r3,r17
   89818:	003fcc06 	br	8974c <__floatunsidf+0xac>
   8981c:	2006d07a 	srli	r3,r4,1
   89820:	008007c4 	movi	r2,31
   89824:	1285c83a 	sub	r2,r2,r10
   89828:	18a6d83a 	srl	r19,r3,r2
   8982c:	22a4983a 	sll	r18,r4,r10
   89830:	003fd706 	br	89790 <__floatunsidf+0xf0>

00089834 <udivmodsi4>:
   89834:	29001b2e 	bgeu	r5,r4,898a4 <udivmodsi4+0x70>
   89838:	28001a16 	blt	r5,zero,898a4 <udivmodsi4+0x70>
   8983c:	00800044 	movi	r2,1
   89840:	0007883a 	mov	r3,zero
   89844:	01c007c4 	movi	r7,31
   89848:	00000306 	br	89858 <udivmodsi4+0x24>
   8984c:	19c01326 	beq	r3,r7,8989c <udivmodsi4+0x68>
   89850:	18c00044 	addi	r3,r3,1
   89854:	28000416 	blt	r5,zero,89868 <udivmodsi4+0x34>
   89858:	294b883a 	add	r5,r5,r5
   8985c:	1085883a 	add	r2,r2,r2
   89860:	293ffa36 	bltu	r5,r4,8984c <udivmodsi4+0x18>
   89864:	10000d26 	beq	r2,zero,8989c <udivmodsi4+0x68>
   89868:	0007883a 	mov	r3,zero
   8986c:	21400236 	bltu	r4,r5,89878 <udivmodsi4+0x44>
   89870:	2149c83a 	sub	r4,r4,r5
   89874:	1886b03a 	or	r3,r3,r2
   89878:	1004d07a 	srli	r2,r2,1
   8987c:	280ad07a 	srli	r5,r5,1
   89880:	103ffa1e 	bne	r2,zero,8986c <udivmodsi4+0x38>
   89884:	30000226 	beq	r6,zero,89890 <udivmodsi4+0x5c>
   89888:	2005883a 	mov	r2,r4
   8988c:	f800283a 	ret
   89890:	1809883a 	mov	r4,r3
   89894:	2005883a 	mov	r2,r4
   89898:	f800283a 	ret
   8989c:	0007883a 	mov	r3,zero
   898a0:	003ff806 	br	89884 <udivmodsi4+0x50>
   898a4:	00800044 	movi	r2,1
   898a8:	0007883a 	mov	r3,zero
   898ac:	003fef06 	br	8986c <udivmodsi4+0x38>

000898b0 <__divsi3>:
   898b0:	defffe04 	addi	sp,sp,-8
   898b4:	dc000015 	stw	r16,0(sp)
   898b8:	dfc00115 	stw	ra,4(sp)
   898bc:	0021883a 	mov	r16,zero
   898c0:	20000c16 	blt	r4,zero,898f4 <__divsi3+0x44>
   898c4:	000d883a 	mov	r6,zero
   898c8:	28000e16 	blt	r5,zero,89904 <__divsi3+0x54>
   898cc:	00898340 	call	89834 <udivmodsi4>
   898d0:	1007883a 	mov	r3,r2
   898d4:	8005003a 	cmpeq	r2,r16,zero
   898d8:	1000011e 	bne	r2,zero,898e0 <__divsi3+0x30>
   898dc:	00c7c83a 	sub	r3,zero,r3
   898e0:	1805883a 	mov	r2,r3
   898e4:	dfc00117 	ldw	ra,4(sp)
   898e8:	dc000017 	ldw	r16,0(sp)
   898ec:	dec00204 	addi	sp,sp,8
   898f0:	f800283a 	ret
   898f4:	0109c83a 	sub	r4,zero,r4
   898f8:	04000044 	movi	r16,1
   898fc:	000d883a 	mov	r6,zero
   89900:	283ff20e 	bge	r5,zero,898cc <__divsi3+0x1c>
   89904:	014bc83a 	sub	r5,zero,r5
   89908:	8021003a 	cmpeq	r16,r16,zero
   8990c:	003fef06 	br	898cc <__divsi3+0x1c>

00089910 <__modsi3>:
   89910:	deffff04 	addi	sp,sp,-4
   89914:	dfc00015 	stw	ra,0(sp)
   89918:	01800044 	movi	r6,1
   8991c:	2807883a 	mov	r3,r5
   89920:	20000416 	blt	r4,zero,89934 <__modsi3+0x24>
   89924:	28000c16 	blt	r5,zero,89958 <__modsi3+0x48>
   89928:	dfc00017 	ldw	ra,0(sp)
   8992c:	dec00104 	addi	sp,sp,4
   89930:	00898341 	jmpi	89834 <udivmodsi4>
   89934:	0109c83a 	sub	r4,zero,r4
   89938:	28000b16 	blt	r5,zero,89968 <__modsi3+0x58>
   8993c:	180b883a 	mov	r5,r3
   89940:	01800044 	movi	r6,1
   89944:	00898340 	call	89834 <udivmodsi4>
   89948:	0085c83a 	sub	r2,zero,r2
   8994c:	dfc00017 	ldw	ra,0(sp)
   89950:	dec00104 	addi	sp,sp,4
   89954:	f800283a 	ret
   89958:	014bc83a 	sub	r5,zero,r5
   8995c:	dfc00017 	ldw	ra,0(sp)
   89960:	dec00104 	addi	sp,sp,4
   89964:	00898341 	jmpi	89834 <udivmodsi4>
   89968:	0147c83a 	sub	r3,zero,r5
   8996c:	003ff306 	br	8993c <__modsi3+0x2c>

00089970 <__udivsi3>:
   89970:	000d883a 	mov	r6,zero
   89974:	00898341 	jmpi	89834 <udivmodsi4>

00089978 <__umodsi3>:
   89978:	01800044 	movi	r6,1
   8997c:	00898341 	jmpi	89834 <udivmodsi4>

00089980 <__muldi3>:
   89980:	defff204 	addi	sp,sp,-56
   89984:	df000c15 	stw	fp,48(sp)
   89988:	3038d43a 	srli	fp,r6,16
   8998c:	dd000815 	stw	r20,32(sp)
   89990:	dc400515 	stw	r17,20(sp)
   89994:	2028d43a 	srli	r20,r4,16
   89998:	247fffcc 	andi	r17,r4,65535
   8999c:	dc000415 	stw	r16,16(sp)
   899a0:	343fffcc 	andi	r16,r6,65535
   899a4:	dcc00715 	stw	r19,28(sp)
   899a8:	d9000015 	stw	r4,0(sp)
   899ac:	2827883a 	mov	r19,r5
   899b0:	8809883a 	mov	r4,r17
   899b4:	d9400115 	stw	r5,4(sp)
   899b8:	800b883a 	mov	r5,r16
   899bc:	d9800215 	stw	r6,8(sp)
   899c0:	dfc00d15 	stw	ra,52(sp)
   899c4:	d9c00315 	stw	r7,12(sp)
   899c8:	dd800a15 	stw	r22,40(sp)
   899cc:	dd400915 	stw	r21,36(sp)
   899d0:	302d883a 	mov	r22,r6
   899d4:	ddc00b15 	stw	r23,44(sp)
   899d8:	dc800615 	stw	r18,24(sp)
   899dc:	00805cc0 	call	805cc <__mulsi3>
   899e0:	8809883a 	mov	r4,r17
   899e4:	e00b883a 	mov	r5,fp
   899e8:	102b883a 	mov	r21,r2
   899ec:	00805cc0 	call	805cc <__mulsi3>
   899f0:	800b883a 	mov	r5,r16
   899f4:	a009883a 	mov	r4,r20
   899f8:	1023883a 	mov	r17,r2
   899fc:	00805cc0 	call	805cc <__mulsi3>
   89a00:	a009883a 	mov	r4,r20
   89a04:	e00b883a 	mov	r5,fp
   89a08:	1021883a 	mov	r16,r2
   89a0c:	00805cc0 	call	805cc <__mulsi3>
   89a10:	a8ffffcc 	andi	r3,r21,65535
   89a14:	a82ad43a 	srli	r21,r21,16
   89a18:	8c23883a 	add	r17,r17,r16
   89a1c:	1011883a 	mov	r8,r2
   89a20:	ac6b883a 	add	r21,r21,r17
   89a24:	a804943a 	slli	r2,r21,16
   89a28:	b009883a 	mov	r4,r22
   89a2c:	980b883a 	mov	r5,r19
   89a30:	10c7883a 	add	r3,r2,r3
   89a34:	a812d43a 	srli	r9,r21,16
   89a38:	180d883a 	mov	r6,r3
   89a3c:	ac00022e 	bgeu	r21,r16,89a48 <__muldi3+0xc8>
   89a40:	00800074 	movhi	r2,1
   89a44:	4091883a 	add	r8,r8,r2
   89a48:	4267883a 	add	r19,r8,r9
   89a4c:	302d883a 	mov	r22,r6
   89a50:	00805cc0 	call	805cc <__mulsi3>
   89a54:	d9400317 	ldw	r5,12(sp)
   89a58:	d9000017 	ldw	r4,0(sp)
   89a5c:	1023883a 	mov	r17,r2
   89a60:	00805cc0 	call	805cc <__mulsi3>
   89a64:	14cb883a 	add	r5,r2,r19
   89a68:	894b883a 	add	r5,r17,r5
   89a6c:	b005883a 	mov	r2,r22
   89a70:	2807883a 	mov	r3,r5
   89a74:	dfc00d17 	ldw	ra,52(sp)
   89a78:	df000c17 	ldw	fp,48(sp)
   89a7c:	ddc00b17 	ldw	r23,44(sp)
   89a80:	dd800a17 	ldw	r22,40(sp)
   89a84:	dd400917 	ldw	r21,36(sp)
   89a88:	dd000817 	ldw	r20,32(sp)
   89a8c:	dcc00717 	ldw	r19,28(sp)
   89a90:	dc800617 	ldw	r18,24(sp)
   89a94:	dc400517 	ldw	r17,20(sp)
   89a98:	dc000417 	ldw	r16,16(sp)
   89a9c:	dec00e04 	addi	sp,sp,56
   89aa0:	f800283a 	ret

00089aa4 <__clzsi2>:
   89aa4:	00bfffd4 	movui	r2,65535
   89aa8:	11000e36 	bltu	r2,r4,89ae4 <__clzsi2+0x40>
   89aac:	00803fc4 	movi	r2,255
   89ab0:	01400204 	movi	r5,8
   89ab4:	0007883a 	mov	r3,zero
   89ab8:	11001036 	bltu	r2,r4,89afc <__clzsi2+0x58>
   89abc:	000b883a 	mov	r5,zero
   89ac0:	20c6d83a 	srl	r3,r4,r3
   89ac4:	00800274 	movhi	r2,9
   89ac8:	10b39604 	addi	r2,r2,-12712
   89acc:	1887883a 	add	r3,r3,r2
   89ad0:	18800003 	ldbu	r2,0(r3)
   89ad4:	00c00804 	movi	r3,32
   89ad8:	2885883a 	add	r2,r5,r2
   89adc:	1885c83a 	sub	r2,r3,r2
   89ae0:	f800283a 	ret
   89ae4:	01400404 	movi	r5,16
   89ae8:	00804034 	movhi	r2,256
   89aec:	10bfffc4 	addi	r2,r2,-1
   89af0:	2807883a 	mov	r3,r5
   89af4:	113ff22e 	bgeu	r2,r4,89ac0 <__clzsi2+0x1c>
   89af8:	01400604 	movi	r5,24
   89afc:	2807883a 	mov	r3,r5
   89b00:	20c6d83a 	srl	r3,r4,r3
   89b04:	00800274 	movhi	r2,9
   89b08:	10b39604 	addi	r2,r2,-12712
   89b0c:	1887883a 	add	r3,r3,r2
   89b10:	18800003 	ldbu	r2,0(r3)
   89b14:	00c00804 	movi	r3,32
   89b18:	2885883a 	add	r2,r5,r2
   89b1c:	1885c83a 	sub	r2,r3,r2
   89b20:	f800283a 	ret

00089b24 <__pack_d>:
   89b24:	20c00017 	ldw	r3,0(r4)
   89b28:	defffd04 	addi	sp,sp,-12
   89b2c:	dc000015 	stw	r16,0(sp)
   89b30:	dc800215 	stw	r18,8(sp)
   89b34:	dc400115 	stw	r17,4(sp)
   89b38:	00800044 	movi	r2,1
   89b3c:	22000317 	ldw	r8,12(r4)
   89b40:	001f883a 	mov	r15,zero
   89b44:	22400417 	ldw	r9,16(r4)
   89b48:	24000117 	ldw	r16,4(r4)
   89b4c:	10c0552e 	bgeu	r2,r3,89ca4 <__pack_d+0x180>
   89b50:	00800104 	movi	r2,4
   89b54:	18804f26 	beq	r3,r2,89c94 <__pack_d+0x170>
   89b58:	00800084 	movi	r2,2
   89b5c:	18800226 	beq	r3,r2,89b68 <__pack_d+0x44>
   89b60:	4244b03a 	or	r2,r8,r9
   89b64:	10001a1e 	bne	r2,zero,89bd0 <__pack_d+0xac>
   89b68:	000d883a 	mov	r6,zero
   89b6c:	000f883a 	mov	r7,zero
   89b70:	0011883a 	mov	r8,zero
   89b74:	00800434 	movhi	r2,16
   89b78:	10bfffc4 	addi	r2,r2,-1
   89b7c:	301d883a 	mov	r14,r6
   89b80:	3884703a 	and	r2,r7,r2
   89b84:	400a953a 	slli	r5,r8,20
   89b88:	79bffc2c 	andhi	r6,r15,65520
   89b8c:	308cb03a 	or	r6,r6,r2
   89b90:	00e00434 	movhi	r3,32784
   89b94:	18ffffc4 	addi	r3,r3,-1
   89b98:	800497fa 	slli	r2,r16,31
   89b9c:	30c6703a 	and	r3,r6,r3
   89ba0:	1946b03a 	or	r3,r3,r5
   89ba4:	01600034 	movhi	r5,32768
   89ba8:	297fffc4 	addi	r5,r5,-1
   89bac:	194a703a 	and	r5,r3,r5
   89bb0:	288ab03a 	or	r5,r5,r2
   89bb4:	2807883a 	mov	r3,r5
   89bb8:	7005883a 	mov	r2,r14
   89bbc:	dc800217 	ldw	r18,8(sp)
   89bc0:	dc400117 	ldw	r17,4(sp)
   89bc4:	dc000017 	ldw	r16,0(sp)
   89bc8:	dec00304 	addi	sp,sp,12
   89bcc:	f800283a 	ret
   89bd0:	21000217 	ldw	r4,8(r4)
   89bd4:	00bf0084 	movi	r2,-1022
   89bd8:	20803f16 	blt	r4,r2,89cd8 <__pack_d+0x1b4>
   89bdc:	0080ffc4 	movi	r2,1023
   89be0:	11002c16 	blt	r2,r4,89c94 <__pack_d+0x170>
   89be4:	00803fc4 	movi	r2,255
   89be8:	408c703a 	and	r6,r8,r2
   89bec:	00802004 	movi	r2,128
   89bf0:	0007883a 	mov	r3,zero
   89bf4:	000f883a 	mov	r7,zero
   89bf8:	2280ffc4 	addi	r10,r4,1023
   89bfc:	30801e26 	beq	r6,r2,89c78 <__pack_d+0x154>
   89c00:	00801fc4 	movi	r2,127
   89c04:	4089883a 	add	r4,r8,r2
   89c08:	220d803a 	cmpltu	r6,r4,r8
   89c0c:	324d883a 	add	r6,r6,r9
   89c10:	2011883a 	mov	r8,r4
   89c14:	3013883a 	mov	r9,r6
   89c18:	00880034 	movhi	r2,8192
   89c1c:	10bfffc4 	addi	r2,r2,-1
   89c20:	12400d36 	bltu	r2,r9,89c58 <__pack_d+0x134>
   89c24:	4804963a 	slli	r2,r9,24
   89c28:	400cd23a 	srli	r6,r8,8
   89c2c:	480ed23a 	srli	r7,r9,8
   89c30:	013fffc4 	movi	r4,-1
   89c34:	118cb03a 	or	r6,r2,r6
   89c38:	01400434 	movhi	r5,16
   89c3c:	297fffc4 	addi	r5,r5,-1
   89c40:	3104703a 	and	r2,r6,r4
   89c44:	3946703a 	and	r3,r7,r5
   89c48:	5201ffcc 	andi	r8,r10,2047
   89c4c:	100d883a 	mov	r6,r2
   89c50:	180f883a 	mov	r7,r3
   89c54:	003fc706 	br	89b74 <__pack_d+0x50>
   89c58:	480897fa 	slli	r4,r9,31
   89c5c:	4004d07a 	srli	r2,r8,1
   89c60:	4806d07a 	srli	r3,r9,1
   89c64:	52800044 	addi	r10,r10,1
   89c68:	2084b03a 	or	r2,r4,r2
   89c6c:	1011883a 	mov	r8,r2
   89c70:	1813883a 	mov	r9,r3
   89c74:	003feb06 	br	89c24 <__pack_d+0x100>
   89c78:	383fe11e 	bne	r7,zero,89c00 <__pack_d+0xdc>
   89c7c:	01004004 	movi	r4,256
   89c80:	4104703a 	and	r2,r8,r4
   89c84:	10c4b03a 	or	r2,r2,r3
   89c88:	103fe326 	beq	r2,zero,89c18 <__pack_d+0xf4>
   89c8c:	3005883a 	mov	r2,r6
   89c90:	003fdc06 	br	89c04 <__pack_d+0xe0>
   89c94:	000d883a 	mov	r6,zero
   89c98:	000f883a 	mov	r7,zero
   89c9c:	0201ffc4 	movi	r8,2047
   89ca0:	003fb406 	br	89b74 <__pack_d+0x50>
   89ca4:	0005883a 	mov	r2,zero
   89ca8:	00c00234 	movhi	r3,8
   89cac:	408cb03a 	or	r6,r8,r2
   89cb0:	48ceb03a 	or	r7,r9,r3
   89cb4:	013fffc4 	movi	r4,-1
   89cb8:	01400434 	movhi	r5,16
   89cbc:	297fffc4 	addi	r5,r5,-1
   89cc0:	3104703a 	and	r2,r6,r4
   89cc4:	3946703a 	and	r3,r7,r5
   89cc8:	100d883a 	mov	r6,r2
   89ccc:	180f883a 	mov	r7,r3
   89cd0:	0201ffc4 	movi	r8,2047
   89cd4:	003fa706 	br	89b74 <__pack_d+0x50>
   89cd8:	1109c83a 	sub	r4,r2,r4
   89cdc:	00800e04 	movi	r2,56
   89ce0:	11004316 	blt	r2,r4,89df0 <__pack_d+0x2cc>
   89ce4:	21fff804 	addi	r7,r4,-32
   89ce8:	38004516 	blt	r7,zero,89e00 <__pack_d+0x2dc>
   89cec:	49d8d83a 	srl	r12,r9,r7
   89cf0:	001b883a 	mov	r13,zero
   89cf4:	0023883a 	mov	r17,zero
   89cf8:	01400044 	movi	r5,1
   89cfc:	0025883a 	mov	r18,zero
   89d00:	38004716 	blt	r7,zero,89e20 <__pack_d+0x2fc>
   89d04:	29d6983a 	sll	r11,r5,r7
   89d08:	0015883a 	mov	r10,zero
   89d0c:	00bfffc4 	movi	r2,-1
   89d10:	5089883a 	add	r4,r10,r2
   89d14:	588b883a 	add	r5,r11,r2
   89d18:	228d803a 	cmpltu	r6,r4,r10
   89d1c:	314b883a 	add	r5,r6,r5
   89d20:	4104703a 	and	r2,r8,r4
   89d24:	4946703a 	and	r3,r9,r5
   89d28:	10c4b03a 	or	r2,r2,r3
   89d2c:	10000226 	beq	r2,zero,89d38 <__pack_d+0x214>
   89d30:	04400044 	movi	r17,1
   89d34:	0025883a 	mov	r18,zero
   89d38:	00803fc4 	movi	r2,255
   89d3c:	644eb03a 	or	r7,r12,r17
   89d40:	3892703a 	and	r9,r7,r2
   89d44:	00802004 	movi	r2,128
   89d48:	6c90b03a 	or	r8,r13,r18
   89d4c:	0015883a 	mov	r10,zero
   89d50:	48801626 	beq	r9,r2,89dac <__pack_d+0x288>
   89d54:	01001fc4 	movi	r4,127
   89d58:	3905883a 	add	r2,r7,r4
   89d5c:	11cd803a 	cmpltu	r6,r2,r7
   89d60:	320d883a 	add	r6,r6,r8
   89d64:	100f883a 	mov	r7,r2
   89d68:	00840034 	movhi	r2,4096
   89d6c:	10bfffc4 	addi	r2,r2,-1
   89d70:	3011883a 	mov	r8,r6
   89d74:	0007883a 	mov	r3,zero
   89d78:	11801b36 	bltu	r2,r6,89de8 <__pack_d+0x2c4>
   89d7c:	4004963a 	slli	r2,r8,24
   89d80:	3808d23a 	srli	r4,r7,8
   89d84:	400ad23a 	srli	r5,r8,8
   89d88:	1813883a 	mov	r9,r3
   89d8c:	1108b03a 	or	r4,r2,r4
   89d90:	00bfffc4 	movi	r2,-1
   89d94:	00c00434 	movhi	r3,16
   89d98:	18ffffc4 	addi	r3,r3,-1
   89d9c:	208c703a 	and	r6,r4,r2
   89da0:	28ce703a 	and	r7,r5,r3
   89da4:	4a01ffcc 	andi	r8,r9,2047
   89da8:	003f7206 	br	89b74 <__pack_d+0x50>
   89dac:	503fe91e 	bne	r10,zero,89d54 <__pack_d+0x230>
   89db0:	01004004 	movi	r4,256
   89db4:	3904703a 	and	r2,r7,r4
   89db8:	0007883a 	mov	r3,zero
   89dbc:	10c4b03a 	or	r2,r2,r3
   89dc0:	10000626 	beq	r2,zero,89ddc <__pack_d+0x2b8>
   89dc4:	3a45883a 	add	r2,r7,r9
   89dc8:	11cd803a 	cmpltu	r6,r2,r7
   89dcc:	320d883a 	add	r6,r6,r8
   89dd0:	100f883a 	mov	r7,r2
   89dd4:	3011883a 	mov	r8,r6
   89dd8:	0007883a 	mov	r3,zero
   89ddc:	00840034 	movhi	r2,4096
   89de0:	10bfffc4 	addi	r2,r2,-1
   89de4:	123fe52e 	bgeu	r2,r8,89d7c <__pack_d+0x258>
   89de8:	00c00044 	movi	r3,1
   89dec:	003fe306 	br	89d7c <__pack_d+0x258>
   89df0:	0009883a 	mov	r4,zero
   89df4:	0013883a 	mov	r9,zero
   89df8:	000b883a 	mov	r5,zero
   89dfc:	003fe406 	br	89d90 <__pack_d+0x26c>
   89e00:	4a47883a 	add	r3,r9,r9
   89e04:	008007c4 	movi	r2,31
   89e08:	1105c83a 	sub	r2,r2,r4
   89e0c:	1886983a 	sll	r3,r3,r2
   89e10:	4118d83a 	srl	r12,r8,r4
   89e14:	491ad83a 	srl	r13,r9,r4
   89e18:	1b18b03a 	or	r12,r3,r12
   89e1c:	003fb506 	br	89cf4 <__pack_d+0x1d0>
   89e20:	2806d07a 	srli	r3,r5,1
   89e24:	008007c4 	movi	r2,31
   89e28:	1105c83a 	sub	r2,r2,r4
   89e2c:	1896d83a 	srl	r11,r3,r2
   89e30:	2914983a 	sll	r10,r5,r4
   89e34:	003fb506 	br	89d0c <__pack_d+0x1e8>

00089e38 <__unpack_d>:
   89e38:	20c00117 	ldw	r3,4(r4)
   89e3c:	22400017 	ldw	r9,0(r4)
   89e40:	00800434 	movhi	r2,16
   89e44:	10bfffc4 	addi	r2,r2,-1
   89e48:	1808d53a 	srli	r4,r3,20
   89e4c:	180cd7fa 	srli	r6,r3,31
   89e50:	1894703a 	and	r10,r3,r2
   89e54:	2201ffcc 	andi	r8,r4,2047
   89e58:	281b883a 	mov	r13,r5
   89e5c:	4817883a 	mov	r11,r9
   89e60:	29800115 	stw	r6,4(r5)
   89e64:	5019883a 	mov	r12,r10
   89e68:	40001e1e 	bne	r8,zero,89ee4 <__unpack_d+0xac>
   89e6c:	4a84b03a 	or	r2,r9,r10
   89e70:	10001926 	beq	r2,zero,89ed8 <__unpack_d+0xa0>
   89e74:	4804d63a 	srli	r2,r9,24
   89e78:	500c923a 	slli	r6,r10,8
   89e7c:	013f0084 	movi	r4,-1022
   89e80:	00c40034 	movhi	r3,4096
   89e84:	18ffffc4 	addi	r3,r3,-1
   89e88:	118cb03a 	or	r6,r2,r6
   89e8c:	008000c4 	movi	r2,3
   89e90:	480a923a 	slli	r5,r9,8
   89e94:	68800015 	stw	r2,0(r13)
   89e98:	69000215 	stw	r4,8(r13)
   89e9c:	19800b36 	bltu	r3,r6,89ecc <__unpack_d+0x94>
   89ea0:	200f883a 	mov	r7,r4
   89ea4:	1811883a 	mov	r8,r3
   89ea8:	2945883a 	add	r2,r5,r5
   89eac:	1149803a 	cmpltu	r4,r2,r5
   89eb0:	3187883a 	add	r3,r6,r6
   89eb4:	20c9883a 	add	r4,r4,r3
   89eb8:	100b883a 	mov	r5,r2
   89ebc:	200d883a 	mov	r6,r4
   89ec0:	39ffffc4 	addi	r7,r7,-1
   89ec4:	413ff82e 	bgeu	r8,r4,89ea8 <__unpack_d+0x70>
   89ec8:	69c00215 	stw	r7,8(r13)
   89ecc:	69800415 	stw	r6,16(r13)
   89ed0:	69400315 	stw	r5,12(r13)
   89ed4:	f800283a 	ret
   89ed8:	00800084 	movi	r2,2
   89edc:	28800015 	stw	r2,0(r5)
   89ee0:	f800283a 	ret
   89ee4:	0081ffc4 	movi	r2,2047
   89ee8:	40800f26 	beq	r8,r2,89f28 <__unpack_d+0xf0>
   89eec:	480cd63a 	srli	r6,r9,24
   89ef0:	5006923a 	slli	r3,r10,8
   89ef4:	4804923a 	slli	r2,r9,8
   89ef8:	0009883a 	mov	r4,zero
   89efc:	30c6b03a 	or	r3,r6,r3
   89f00:	01440034 	movhi	r5,4096
   89f04:	110cb03a 	or	r6,r2,r4
   89f08:	423f0044 	addi	r8,r8,-1023
   89f0c:	194eb03a 	or	r7,r3,r5
   89f10:	008000c4 	movi	r2,3
   89f14:	69c00415 	stw	r7,16(r13)
   89f18:	6a000215 	stw	r8,8(r13)
   89f1c:	68800015 	stw	r2,0(r13)
   89f20:	69800315 	stw	r6,12(r13)
   89f24:	f800283a 	ret
   89f28:	4a84b03a 	or	r2,r9,r10
   89f2c:	1000031e 	bne	r2,zero,89f3c <__unpack_d+0x104>
   89f30:	00800104 	movi	r2,4
   89f34:	28800015 	stw	r2,0(r5)
   89f38:	f800283a 	ret
   89f3c:	0009883a 	mov	r4,zero
   89f40:	01400234 	movhi	r5,8
   89f44:	4904703a 	and	r2,r9,r4
   89f48:	5146703a 	and	r3,r10,r5
   89f4c:	10c4b03a 	or	r2,r2,r3
   89f50:	10000526 	beq	r2,zero,89f68 <__unpack_d+0x130>
   89f54:	00800044 	movi	r2,1
   89f58:	68800015 	stw	r2,0(r13)
   89f5c:	6b000415 	stw	r12,16(r13)
   89f60:	6ac00315 	stw	r11,12(r13)
   89f64:	f800283a 	ret
   89f68:	68000015 	stw	zero,0(r13)
   89f6c:	003ffb06 	br	89f5c <__unpack_d+0x124>

00089f70 <__fpcmp_parts_d>:
   89f70:	21800017 	ldw	r6,0(r4)
   89f74:	00c00044 	movi	r3,1
   89f78:	19800a2e 	bgeu	r3,r6,89fa4 <__fpcmp_parts_d+0x34>
   89f7c:	28800017 	ldw	r2,0(r5)
   89f80:	1880082e 	bgeu	r3,r2,89fa4 <__fpcmp_parts_d+0x34>
   89f84:	00c00104 	movi	r3,4
   89f88:	30c02626 	beq	r6,r3,8a024 <__fpcmp_parts_d+0xb4>
   89f8c:	10c02226 	beq	r2,r3,8a018 <__fpcmp_parts_d+0xa8>
   89f90:	00c00084 	movi	r3,2
   89f94:	30c00526 	beq	r6,r3,89fac <__fpcmp_parts_d+0x3c>
   89f98:	10c0071e 	bne	r2,r3,89fb8 <__fpcmp_parts_d+0x48>
   89f9c:	20800117 	ldw	r2,4(r4)
   89fa0:	1000091e 	bne	r2,zero,89fc8 <__fpcmp_parts_d+0x58>
   89fa4:	00800044 	movi	r2,1
   89fa8:	f800283a 	ret
   89fac:	10c01a1e 	bne	r2,r3,8a018 <__fpcmp_parts_d+0xa8>
   89fb0:	0005883a 	mov	r2,zero
   89fb4:	f800283a 	ret
   89fb8:	22000117 	ldw	r8,4(r4)
   89fbc:	28800117 	ldw	r2,4(r5)
   89fc0:	40800326 	beq	r8,r2,89fd0 <__fpcmp_parts_d+0x60>
   89fc4:	403ff726 	beq	r8,zero,89fa4 <__fpcmp_parts_d+0x34>
   89fc8:	00bfffc4 	movi	r2,-1
   89fcc:	f800283a 	ret
   89fd0:	20c00217 	ldw	r3,8(r4)
   89fd4:	28800217 	ldw	r2,8(r5)
   89fd8:	10fffa16 	blt	r2,r3,89fc4 <__fpcmp_parts_d+0x54>
   89fdc:	18800916 	blt	r3,r2,8a004 <__fpcmp_parts_d+0x94>
   89fe0:	21c00417 	ldw	r7,16(r4)
   89fe4:	28c00417 	ldw	r3,16(r5)
   89fe8:	21800317 	ldw	r6,12(r4)
   89fec:	28800317 	ldw	r2,12(r5)
   89ff0:	19fff436 	bltu	r3,r7,89fc4 <__fpcmp_parts_d+0x54>
   89ff4:	38c00526 	beq	r7,r3,8a00c <__fpcmp_parts_d+0x9c>
   89ff8:	38c00236 	bltu	r7,r3,8a004 <__fpcmp_parts_d+0x94>
   89ffc:	19ffec1e 	bne	r3,r7,89fb0 <__fpcmp_parts_d+0x40>
   8a000:	30bfeb2e 	bgeu	r6,r2,89fb0 <__fpcmp_parts_d+0x40>
   8a004:	403fe71e 	bne	r8,zero,89fa4 <__fpcmp_parts_d+0x34>
   8a008:	003fef06 	br	89fc8 <__fpcmp_parts_d+0x58>
   8a00c:	11bffa2e 	bgeu	r2,r6,89ff8 <__fpcmp_parts_d+0x88>
   8a010:	403fe426 	beq	r8,zero,89fa4 <__fpcmp_parts_d+0x34>
   8a014:	003fec06 	br	89fc8 <__fpcmp_parts_d+0x58>
   8a018:	28800117 	ldw	r2,4(r5)
   8a01c:	103fe11e 	bne	r2,zero,89fa4 <__fpcmp_parts_d+0x34>
   8a020:	003fe906 	br	89fc8 <__fpcmp_parts_d+0x58>
   8a024:	11bfdd1e 	bne	r2,r6,89f9c <__fpcmp_parts_d+0x2c>
   8a028:	28c00117 	ldw	r3,4(r5)
   8a02c:	20800117 	ldw	r2,4(r4)
   8a030:	1885c83a 	sub	r2,r3,r2
   8a034:	f800283a 	ret

0008a038 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8a038:	defff804 	addi	sp,sp,-32
   8a03c:	dfc00715 	stw	ra,28(sp)
   8a040:	df000615 	stw	fp,24(sp)
   8a044:	df000604 	addi	fp,sp,24
   8a048:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8a04c:	e0bffc17 	ldw	r2,-16(fp)
   8a050:	1004803a 	cmplt	r2,r2,zero
   8a054:	1000091e 	bne	r2,zero,8a07c <close+0x44>
   8a058:	e13ffc17 	ldw	r4,-16(fp)
   8a05c:	01400304 	movi	r5,12
   8a060:	00805cc0 	call	805cc <__mulsi3>
   8a064:	1007883a 	mov	r3,r2
   8a068:	00800274 	movhi	r2,9
   8a06c:	10b5f204 	addi	r2,r2,-10296
   8a070:	1887883a 	add	r3,r3,r2
   8a074:	e0ffff15 	stw	r3,-4(fp)
   8a078:	00000106 	br	8a080 <close+0x48>
   8a07c:	e03fff15 	stw	zero,-4(fp)
   8a080:	e0bfff17 	ldw	r2,-4(fp)
   8a084:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8a088:	e0bffb17 	ldw	r2,-20(fp)
   8a08c:	1005003a 	cmpeq	r2,r2,zero
   8a090:	10001d1e 	bne	r2,zero,8a108 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8a094:	e0bffb17 	ldw	r2,-20(fp)
   8a098:	10800017 	ldw	r2,0(r2)
   8a09c:	10800417 	ldw	r2,16(r2)
   8a0a0:	1005003a 	cmpeq	r2,r2,zero
   8a0a4:	1000071e 	bne	r2,zero,8a0c4 <close+0x8c>
   8a0a8:	e0bffb17 	ldw	r2,-20(fp)
   8a0ac:	10800017 	ldw	r2,0(r2)
   8a0b0:	10800417 	ldw	r2,16(r2)
   8a0b4:	e13ffb17 	ldw	r4,-20(fp)
   8a0b8:	103ee83a 	callr	r2
   8a0bc:	e0bffe15 	stw	r2,-8(fp)
   8a0c0:	00000106 	br	8a0c8 <close+0x90>
   8a0c4:	e03ffe15 	stw	zero,-8(fp)
   8a0c8:	e0bffe17 	ldw	r2,-8(fp)
   8a0cc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8a0d0:	e13ffc17 	ldw	r4,-16(fp)
   8a0d4:	008aa500 	call	8aa50 <alt_release_fd>
    if (rval < 0)
   8a0d8:	e0bffa17 	ldw	r2,-24(fp)
   8a0dc:	1004403a 	cmpge	r2,r2,zero
   8a0e0:	1000071e 	bne	r2,zero,8a100 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8a0e4:	008a1380 	call	8a138 <alt_get_errno>
   8a0e8:	e0fffa17 	ldw	r3,-24(fp)
   8a0ec:	00c7c83a 	sub	r3,zero,r3
   8a0f0:	10c00015 	stw	r3,0(r2)
      return -1;
   8a0f4:	00bfffc4 	movi	r2,-1
   8a0f8:	e0bffd15 	stw	r2,-12(fp)
   8a0fc:	00000806 	br	8a120 <close+0xe8>
    }
    return 0;
   8a100:	e03ffd15 	stw	zero,-12(fp)
   8a104:	00000606 	br	8a120 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8a108:	008a1380 	call	8a138 <alt_get_errno>
   8a10c:	1007883a 	mov	r3,r2
   8a110:	00801444 	movi	r2,81
   8a114:	18800015 	stw	r2,0(r3)
    return -1;
   8a118:	00bfffc4 	movi	r2,-1
   8a11c:	e0bffd15 	stw	r2,-12(fp)
   8a120:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8a124:	e037883a 	mov	sp,fp
   8a128:	dfc00117 	ldw	ra,4(sp)
   8a12c:	df000017 	ldw	fp,0(sp)
   8a130:	dec00204 	addi	sp,sp,8
   8a134:	f800283a 	ret

0008a138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a138:	defffd04 	addi	sp,sp,-12
   8a13c:	dfc00215 	stw	ra,8(sp)
   8a140:	df000115 	stw	fp,4(sp)
   8a144:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a148:	00800274 	movhi	r2,9
   8a14c:	10ba7504 	addi	r2,r2,-5676
   8a150:	10800017 	ldw	r2,0(r2)
   8a154:	1005003a 	cmpeq	r2,r2,zero
   8a158:	1000061e 	bne	r2,zero,8a174 <alt_get_errno+0x3c>
   8a15c:	00800274 	movhi	r2,9
   8a160:	10ba7504 	addi	r2,r2,-5676
   8a164:	10800017 	ldw	r2,0(r2)
   8a168:	103ee83a 	callr	r2
   8a16c:	e0bfff15 	stw	r2,-4(fp)
   8a170:	00000306 	br	8a180 <alt_get_errno+0x48>
   8a174:	00800274 	movhi	r2,9
   8a178:	10811704 	addi	r2,r2,1116
   8a17c:	e0bfff15 	stw	r2,-4(fp)
   8a180:	e0bfff17 	ldw	r2,-4(fp)
}
   8a184:	e037883a 	mov	sp,fp
   8a188:	dfc00117 	ldw	ra,4(sp)
   8a18c:	df000017 	ldw	fp,0(sp)
   8a190:	dec00204 	addi	sp,sp,8
   8a194:	f800283a 	ret

0008a198 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8a198:	defffc04 	addi	sp,sp,-16
   8a19c:	df000315 	stw	fp,12(sp)
   8a1a0:	df000304 	addi	fp,sp,12
   8a1a4:	e13ffd15 	stw	r4,-12(fp)
   8a1a8:	e17ffe15 	stw	r5,-8(fp)
   8a1ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8a1b0:	e0bfff17 	ldw	r2,-4(fp)
}
   8a1b4:	e037883a 	mov	sp,fp
   8a1b8:	df000017 	ldw	fp,0(sp)
   8a1bc:	dec00104 	addi	sp,sp,4
   8a1c0:	f800283a 	ret

0008a1c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8a1c4:	defff904 	addi	sp,sp,-28
   8a1c8:	dfc00615 	stw	ra,24(sp)
   8a1cc:	df000515 	stw	fp,20(sp)
   8a1d0:	df000504 	addi	fp,sp,20
   8a1d4:	e13ffc15 	stw	r4,-16(fp)
   8a1d8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a1dc:	e0bffc17 	ldw	r2,-16(fp)
   8a1e0:	1004803a 	cmplt	r2,r2,zero
   8a1e4:	1000091e 	bne	r2,zero,8a20c <fstat+0x48>
   8a1e8:	e13ffc17 	ldw	r4,-16(fp)
   8a1ec:	01400304 	movi	r5,12
   8a1f0:	00805cc0 	call	805cc <__mulsi3>
   8a1f4:	1007883a 	mov	r3,r2
   8a1f8:	00800274 	movhi	r2,9
   8a1fc:	10b5f204 	addi	r2,r2,-10296
   8a200:	1887883a 	add	r3,r3,r2
   8a204:	e0ffff15 	stw	r3,-4(fp)
   8a208:	00000106 	br	8a210 <fstat+0x4c>
   8a20c:	e03fff15 	stw	zero,-4(fp)
   8a210:	e0bfff17 	ldw	r2,-4(fp)
   8a214:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8a218:	e0bffb17 	ldw	r2,-20(fp)
   8a21c:	1005003a 	cmpeq	r2,r2,zero
   8a220:	1000121e 	bne	r2,zero,8a26c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8a224:	e0bffb17 	ldw	r2,-20(fp)
   8a228:	10800017 	ldw	r2,0(r2)
   8a22c:	10800817 	ldw	r2,32(r2)
   8a230:	1005003a 	cmpeq	r2,r2,zero
   8a234:	1000081e 	bne	r2,zero,8a258 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8a238:	e0bffb17 	ldw	r2,-20(fp)
   8a23c:	10800017 	ldw	r2,0(r2)
   8a240:	10800817 	ldw	r2,32(r2)
   8a244:	e13ffb17 	ldw	r4,-20(fp)
   8a248:	e17ffd17 	ldw	r5,-12(fp)
   8a24c:	103ee83a 	callr	r2
   8a250:	e0bffe15 	stw	r2,-8(fp)
   8a254:	00000b06 	br	8a284 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8a258:	e0fffd17 	ldw	r3,-12(fp)
   8a25c:	00880004 	movi	r2,8192
   8a260:	18800115 	stw	r2,4(r3)
      return 0;
   8a264:	e03ffe15 	stw	zero,-8(fp)
   8a268:	00000606 	br	8a284 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8a26c:	008a29c0 	call	8a29c <alt_get_errno>
   8a270:	1007883a 	mov	r3,r2
   8a274:	00801444 	movi	r2,81
   8a278:	18800015 	stw	r2,0(r3)
    return -1;
   8a27c:	00bfffc4 	movi	r2,-1
   8a280:	e0bffe15 	stw	r2,-8(fp)
   8a284:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8a288:	e037883a 	mov	sp,fp
   8a28c:	dfc00117 	ldw	ra,4(sp)
   8a290:	df000017 	ldw	fp,0(sp)
   8a294:	dec00204 	addi	sp,sp,8
   8a298:	f800283a 	ret

0008a29c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a29c:	defffd04 	addi	sp,sp,-12
   8a2a0:	dfc00215 	stw	ra,8(sp)
   8a2a4:	df000115 	stw	fp,4(sp)
   8a2a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a2ac:	00800274 	movhi	r2,9
   8a2b0:	10ba7504 	addi	r2,r2,-5676
   8a2b4:	10800017 	ldw	r2,0(r2)
   8a2b8:	1005003a 	cmpeq	r2,r2,zero
   8a2bc:	1000061e 	bne	r2,zero,8a2d8 <alt_get_errno+0x3c>
   8a2c0:	00800274 	movhi	r2,9
   8a2c4:	10ba7504 	addi	r2,r2,-5676
   8a2c8:	10800017 	ldw	r2,0(r2)
   8a2cc:	103ee83a 	callr	r2
   8a2d0:	e0bfff15 	stw	r2,-4(fp)
   8a2d4:	00000306 	br	8a2e4 <alt_get_errno+0x48>
   8a2d8:	00800274 	movhi	r2,9
   8a2dc:	10811704 	addi	r2,r2,1116
   8a2e0:	e0bfff15 	stw	r2,-4(fp)
   8a2e4:	e0bfff17 	ldw	r2,-4(fp)
}
   8a2e8:	e037883a 	mov	sp,fp
   8a2ec:	dfc00117 	ldw	ra,4(sp)
   8a2f0:	df000017 	ldw	fp,0(sp)
   8a2f4:	dec00204 	addi	sp,sp,8
   8a2f8:	f800283a 	ret

0008a2fc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8a2fc:	deffef04 	addi	sp,sp,-68
   8a300:	df001015 	stw	fp,64(sp)
   8a304:	df001004 	addi	fp,sp,64
   8a308:	e13ffc15 	stw	r4,-16(fp)
   8a30c:	e17ffd15 	stw	r5,-12(fp)
   8a310:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   8a314:	00bffa84 	movi	r2,-22
   8a318:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8a31c:	e0bffc17 	ldw	r2,-16(fp)
   8a320:	10800828 	cmpgeui	r2,r2,32
   8a324:	1000601e 	bne	r2,zero,8a4a8 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a328:	0005303a 	rdctl	r2,status
   8a32c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a330:	e0fff917 	ldw	r3,-28(fp)
   8a334:	00bfff84 	movi	r2,-2
   8a338:	1884703a 	and	r2,r3,r2
   8a33c:	1001703a 	wrctl	status,r2
  
  return context;
   8a340:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8a344:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   8a348:	e0bffc17 	ldw	r2,-16(fp)
   8a34c:	00c00274 	movhi	r3,9
   8a350:	18c12804 	addi	r3,r3,1184
   8a354:	100490fa 	slli	r2,r2,3
   8a358:	10c7883a 	add	r3,r2,r3
   8a35c:	e0bffe17 	ldw	r2,-8(fp)
   8a360:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   8a364:	e0bffc17 	ldw	r2,-16(fp)
   8a368:	00c00274 	movhi	r3,9
   8a36c:	18c12804 	addi	r3,r3,1184
   8a370:	100490fa 	slli	r2,r2,3
   8a374:	10c5883a 	add	r2,r2,r3
   8a378:	10c00104 	addi	r3,r2,4
   8a37c:	e0bffd17 	ldw	r2,-12(fp)
   8a380:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8a384:	e0bffe17 	ldw	r2,-8(fp)
   8a388:	1005003a 	cmpeq	r2,r2,zero
   8a38c:	1000201e 	bne	r2,zero,8a410 <alt_irq_register+0x114>
   8a390:	e0bffc17 	ldw	r2,-16(fp)
   8a394:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a398:	0005303a 	rdctl	r2,status
   8a39c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a3a0:	e0fff617 	ldw	r3,-40(fp)
   8a3a4:	00bfff84 	movi	r2,-2
   8a3a8:	1884703a 	and	r2,r3,r2
   8a3ac:	1001703a 	wrctl	status,r2
  
  return context;
   8a3b0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8a3b4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8a3b8:	e0fff717 	ldw	r3,-36(fp)
   8a3bc:	00800044 	movi	r2,1
   8a3c0:	10c4983a 	sll	r2,r2,r3
   8a3c4:	1007883a 	mov	r3,r2
   8a3c8:	00800274 	movhi	r2,9
   8a3cc:	10811804 	addi	r2,r2,1120
   8a3d0:	10800017 	ldw	r2,0(r2)
   8a3d4:	1886b03a 	or	r3,r3,r2
   8a3d8:	00800274 	movhi	r2,9
   8a3dc:	10811804 	addi	r2,r2,1120
   8a3e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8a3e4:	00800274 	movhi	r2,9
   8a3e8:	10811804 	addi	r2,r2,1120
   8a3ec:	10800017 	ldw	r2,0(r2)
   8a3f0:	100170fa 	wrctl	ienable,r2
   8a3f4:	e0bff817 	ldw	r2,-32(fp)
   8a3f8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a3fc:	e0bff517 	ldw	r2,-44(fp)
   8a400:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8a404:	0005883a 	mov	r2,zero
   8a408:	e0bfff15 	stw	r2,-4(fp)
   8a40c:	00002006 	br	8a490 <alt_irq_register+0x194>
   8a410:	e0bffc17 	ldw	r2,-16(fp)
   8a414:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a418:	0005303a 	rdctl	r2,status
   8a41c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a420:	e0fff217 	ldw	r3,-56(fp)
   8a424:	00bfff84 	movi	r2,-2
   8a428:	1884703a 	and	r2,r3,r2
   8a42c:	1001703a 	wrctl	status,r2
  
  return context;
   8a430:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8a434:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   8a438:	e0fff317 	ldw	r3,-52(fp)
   8a43c:	00800044 	movi	r2,1
   8a440:	10c4983a 	sll	r2,r2,r3
   8a444:	0084303a 	nor	r2,zero,r2
   8a448:	1007883a 	mov	r3,r2
   8a44c:	00800274 	movhi	r2,9
   8a450:	10811804 	addi	r2,r2,1120
   8a454:	10800017 	ldw	r2,0(r2)
   8a458:	1886703a 	and	r3,r3,r2
   8a45c:	00800274 	movhi	r2,9
   8a460:	10811804 	addi	r2,r2,1120
   8a464:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8a468:	00800274 	movhi	r2,9
   8a46c:	10811804 	addi	r2,r2,1120
   8a470:	10800017 	ldw	r2,0(r2)
   8a474:	100170fa 	wrctl	ienable,r2
   8a478:	e0bff417 	ldw	r2,-48(fp)
   8a47c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a480:	e0bff117 	ldw	r2,-60(fp)
   8a484:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8a488:	0005883a 	mov	r2,zero
   8a48c:	e0bfff15 	stw	r2,-4(fp)
   8a490:	e0bfff17 	ldw	r2,-4(fp)
   8a494:	e0bffb15 	stw	r2,-20(fp)
   8a498:	e0bffa17 	ldw	r2,-24(fp)
   8a49c:	e0bff015 	stw	r2,-64(fp)
   8a4a0:	e0bff017 	ldw	r2,-64(fp)
   8a4a4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8a4a8:	e0bffb17 	ldw	r2,-20(fp)
}
   8a4ac:	e037883a 	mov	sp,fp
   8a4b0:	df000017 	ldw	fp,0(sp)
   8a4b4:	dec00104 	addi	sp,sp,4
   8a4b8:	f800283a 	ret

0008a4bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8a4bc:	deffeb04 	addi	sp,sp,-84
   8a4c0:	dfc01415 	stw	ra,80(sp)
   8a4c4:	df001315 	stw	fp,76(sp)
   8a4c8:	df001304 	addi	fp,sp,76
   8a4cc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a4d0:	e0bffd17 	ldw	r2,-12(fp)
   8a4d4:	1004803a 	cmplt	r2,r2,zero
   8a4d8:	1000091e 	bne	r2,zero,8a500 <isatty+0x44>
   8a4dc:	e13ffd17 	ldw	r4,-12(fp)
   8a4e0:	01400304 	movi	r5,12
   8a4e4:	00805cc0 	call	805cc <__mulsi3>
   8a4e8:	1007883a 	mov	r3,r2
   8a4ec:	00800274 	movhi	r2,9
   8a4f0:	10b5f204 	addi	r2,r2,-10296
   8a4f4:	1887883a 	add	r3,r3,r2
   8a4f8:	e0ffff15 	stw	r3,-4(fp)
   8a4fc:	00000106 	br	8a504 <isatty+0x48>
   8a500:	e03fff15 	stw	zero,-4(fp)
   8a504:	e0bfff17 	ldw	r2,-4(fp)
   8a508:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8a50c:	e0bfed17 	ldw	r2,-76(fp)
   8a510:	1005003a 	cmpeq	r2,r2,zero
   8a514:	10000f1e 	bne	r2,zero,8a554 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8a518:	e0bfed17 	ldw	r2,-76(fp)
   8a51c:	10800017 	ldw	r2,0(r2)
   8a520:	10800817 	ldw	r2,32(r2)
   8a524:	1004c03a 	cmpne	r2,r2,zero
   8a528:	1000031e 	bne	r2,zero,8a538 <isatty+0x7c>
    {
      return 1;
   8a52c:	00800044 	movi	r2,1
   8a530:	e0bffe15 	stw	r2,-8(fp)
   8a534:	00000c06 	br	8a568 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8a538:	e17fee04 	addi	r5,fp,-72
   8a53c:	e13ffd17 	ldw	r4,-12(fp)
   8a540:	008a1c40 	call	8a1c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8a544:	e0bfef17 	ldw	r2,-68(fp)
   8a548:	10880020 	cmpeqi	r2,r2,8192
   8a54c:	e0bffe15 	stw	r2,-8(fp)
   8a550:	00000506 	br	8a568 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8a554:	008a5800 	call	8a580 <alt_get_errno>
   8a558:	1007883a 	mov	r3,r2
   8a55c:	00801444 	movi	r2,81
   8a560:	18800015 	stw	r2,0(r3)
    return 0;
   8a564:	e03ffe15 	stw	zero,-8(fp)
   8a568:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8a56c:	e037883a 	mov	sp,fp
   8a570:	dfc00117 	ldw	ra,4(sp)
   8a574:	df000017 	ldw	fp,0(sp)
   8a578:	dec00204 	addi	sp,sp,8
   8a57c:	f800283a 	ret

0008a580 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a580:	defffd04 	addi	sp,sp,-12
   8a584:	dfc00215 	stw	ra,8(sp)
   8a588:	df000115 	stw	fp,4(sp)
   8a58c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a590:	00800274 	movhi	r2,9
   8a594:	10ba7504 	addi	r2,r2,-5676
   8a598:	10800017 	ldw	r2,0(r2)
   8a59c:	1005003a 	cmpeq	r2,r2,zero
   8a5a0:	1000061e 	bne	r2,zero,8a5bc <alt_get_errno+0x3c>
   8a5a4:	00800274 	movhi	r2,9
   8a5a8:	10ba7504 	addi	r2,r2,-5676
   8a5ac:	10800017 	ldw	r2,0(r2)
   8a5b0:	103ee83a 	callr	r2
   8a5b4:	e0bfff15 	stw	r2,-4(fp)
   8a5b8:	00000306 	br	8a5c8 <alt_get_errno+0x48>
   8a5bc:	00800274 	movhi	r2,9
   8a5c0:	10811704 	addi	r2,r2,1116
   8a5c4:	e0bfff15 	stw	r2,-4(fp)
   8a5c8:	e0bfff17 	ldw	r2,-4(fp)
}
   8a5cc:	e037883a 	mov	sp,fp
   8a5d0:	dfc00117 	ldw	ra,4(sp)
   8a5d4:	df000017 	ldw	fp,0(sp)
   8a5d8:	dec00204 	addi	sp,sp,8
   8a5dc:	f800283a 	ret

0008a5e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8a5e0:	defffe04 	addi	sp,sp,-8
   8a5e4:	dfc00115 	stw	ra,4(sp)
   8a5e8:	df000015 	stw	fp,0(sp)
   8a5ec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8a5f0:	01000274 	movhi	r4,9
   8a5f4:	213a7a04 	addi	r4,r4,-5656
   8a5f8:	01400274 	movhi	r5,9
   8a5fc:	2973e304 	addi	r5,r5,-12404
   8a600:	01800274 	movhi	r6,9
   8a604:	31ba7a04 	addi	r6,r6,-5656
   8a608:	008a6600 	call	8a660 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8a60c:	01000234 	movhi	r4,8
   8a610:	21000804 	addi	r4,r4,32
   8a614:	01400234 	movhi	r5,8
   8a618:	29400804 	addi	r5,r5,32
   8a61c:	01800234 	movhi	r6,8
   8a620:	31806d04 	addi	r6,r6,436
   8a624:	008a6600 	call	8a660 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8a628:	01000274 	movhi	r4,9
   8a62c:	2132e304 	addi	r4,r4,-13428
   8a630:	01400274 	movhi	r5,9
   8a634:	2972e304 	addi	r5,r5,-13428
   8a638:	01800274 	movhi	r6,9
   8a63c:	31b3e304 	addi	r6,r6,-12404
   8a640:	008a6600 	call	8a660 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8a644:	008b9b80 	call	8b9b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8a648:	008bbb00 	call	8bbb0 <alt_icache_flush_all>
}
   8a64c:	e037883a 	mov	sp,fp
   8a650:	dfc00117 	ldw	ra,4(sp)
   8a654:	df000017 	ldw	fp,0(sp)
   8a658:	dec00204 	addi	sp,sp,8
   8a65c:	f800283a 	ret

0008a660 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8a660:	defffc04 	addi	sp,sp,-16
   8a664:	df000315 	stw	fp,12(sp)
   8a668:	df000304 	addi	fp,sp,12
   8a66c:	e13ffd15 	stw	r4,-12(fp)
   8a670:	e17ffe15 	stw	r5,-8(fp)
   8a674:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8a678:	e0fffe17 	ldw	r3,-8(fp)
   8a67c:	e0bffd17 	ldw	r2,-12(fp)
   8a680:	18800e26 	beq	r3,r2,8a6bc <alt_load_section+0x5c>
  {
    while( to != end )
   8a684:	00000a06 	br	8a6b0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8a688:	e0bffd17 	ldw	r2,-12(fp)
   8a68c:	10c00017 	ldw	r3,0(r2)
   8a690:	e0bffe17 	ldw	r2,-8(fp)
   8a694:	10c00015 	stw	r3,0(r2)
   8a698:	e0bffe17 	ldw	r2,-8(fp)
   8a69c:	10800104 	addi	r2,r2,4
   8a6a0:	e0bffe15 	stw	r2,-8(fp)
   8a6a4:	e0bffd17 	ldw	r2,-12(fp)
   8a6a8:	10800104 	addi	r2,r2,4
   8a6ac:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8a6b0:	e0fffe17 	ldw	r3,-8(fp)
   8a6b4:	e0bfff17 	ldw	r2,-4(fp)
   8a6b8:	18bff31e 	bne	r3,r2,8a688 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8a6bc:	e037883a 	mov	sp,fp
   8a6c0:	df000017 	ldw	fp,0(sp)
   8a6c4:	dec00104 	addi	sp,sp,4
   8a6c8:	f800283a 	ret

0008a6cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8a6cc:	defff804 	addi	sp,sp,-32
   8a6d0:	dfc00715 	stw	ra,28(sp)
   8a6d4:	df000615 	stw	fp,24(sp)
   8a6d8:	df000604 	addi	fp,sp,24
   8a6dc:	e13ffc15 	stw	r4,-16(fp)
   8a6e0:	e17ffd15 	stw	r5,-12(fp)
   8a6e4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8a6e8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a6ec:	e0bffc17 	ldw	r2,-16(fp)
   8a6f0:	1004803a 	cmplt	r2,r2,zero
   8a6f4:	1000091e 	bne	r2,zero,8a71c <lseek+0x50>
   8a6f8:	e13ffc17 	ldw	r4,-16(fp)
   8a6fc:	01400304 	movi	r5,12
   8a700:	00805cc0 	call	805cc <__mulsi3>
   8a704:	1007883a 	mov	r3,r2
   8a708:	00800274 	movhi	r2,9
   8a70c:	10b5f204 	addi	r2,r2,-10296
   8a710:	1887883a 	add	r3,r3,r2
   8a714:	e0ffff15 	stw	r3,-4(fp)
   8a718:	00000106 	br	8a720 <lseek+0x54>
   8a71c:	e03fff15 	stw	zero,-4(fp)
   8a720:	e0bfff17 	ldw	r2,-4(fp)
   8a724:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8a728:	e0bffb17 	ldw	r2,-20(fp)
   8a72c:	1005003a 	cmpeq	r2,r2,zero
   8a730:	1000111e 	bne	r2,zero,8a778 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8a734:	e0bffb17 	ldw	r2,-20(fp)
   8a738:	10800017 	ldw	r2,0(r2)
   8a73c:	10800717 	ldw	r2,28(r2)
   8a740:	1005003a 	cmpeq	r2,r2,zero
   8a744:	1000091e 	bne	r2,zero,8a76c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8a748:	e0bffb17 	ldw	r2,-20(fp)
   8a74c:	10800017 	ldw	r2,0(r2)
   8a750:	10800717 	ldw	r2,28(r2)
   8a754:	e13ffb17 	ldw	r4,-20(fp)
   8a758:	e17ffd17 	ldw	r5,-12(fp)
   8a75c:	e1bffe17 	ldw	r6,-8(fp)
   8a760:	103ee83a 	callr	r2
   8a764:	e0bffa15 	stw	r2,-24(fp)
   8a768:	00000506 	br	8a780 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8a76c:	00bfde84 	movi	r2,-134
   8a770:	e0bffa15 	stw	r2,-24(fp)
   8a774:	00000206 	br	8a780 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8a778:	00bfebc4 	movi	r2,-81
   8a77c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8a780:	e0bffa17 	ldw	r2,-24(fp)
   8a784:	1004403a 	cmpge	r2,r2,zero
   8a788:	1000071e 	bne	r2,zero,8a7a8 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8a78c:	008a7c00 	call	8a7c0 <alt_get_errno>
   8a790:	1007883a 	mov	r3,r2
   8a794:	e0bffa17 	ldw	r2,-24(fp)
   8a798:	0085c83a 	sub	r2,zero,r2
   8a79c:	18800015 	stw	r2,0(r3)
    rc = -1;
   8a7a0:	00bfffc4 	movi	r2,-1
   8a7a4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8a7a8:	e0bffa17 	ldw	r2,-24(fp)
}
   8a7ac:	e037883a 	mov	sp,fp
   8a7b0:	dfc00117 	ldw	ra,4(sp)
   8a7b4:	df000017 	ldw	fp,0(sp)
   8a7b8:	dec00204 	addi	sp,sp,8
   8a7bc:	f800283a 	ret

0008a7c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a7c0:	defffd04 	addi	sp,sp,-12
   8a7c4:	dfc00215 	stw	ra,8(sp)
   8a7c8:	df000115 	stw	fp,4(sp)
   8a7cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a7d0:	00800274 	movhi	r2,9
   8a7d4:	10ba7504 	addi	r2,r2,-5676
   8a7d8:	10800017 	ldw	r2,0(r2)
   8a7dc:	1005003a 	cmpeq	r2,r2,zero
   8a7e0:	1000061e 	bne	r2,zero,8a7fc <alt_get_errno+0x3c>
   8a7e4:	00800274 	movhi	r2,9
   8a7e8:	10ba7504 	addi	r2,r2,-5676
   8a7ec:	10800017 	ldw	r2,0(r2)
   8a7f0:	103ee83a 	callr	r2
   8a7f4:	e0bfff15 	stw	r2,-4(fp)
   8a7f8:	00000306 	br	8a808 <alt_get_errno+0x48>
   8a7fc:	00800274 	movhi	r2,9
   8a800:	10811704 	addi	r2,r2,1116
   8a804:	e0bfff15 	stw	r2,-4(fp)
   8a808:	e0bfff17 	ldw	r2,-4(fp)
}
   8a80c:	e037883a 	mov	sp,fp
   8a810:	dfc00117 	ldw	ra,4(sp)
   8a814:	df000017 	ldw	fp,0(sp)
   8a818:	dec00204 	addi	sp,sp,8
   8a81c:	f800283a 	ret

0008a820 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8a820:	defffd04 	addi	sp,sp,-12
   8a824:	dfc00215 	stw	ra,8(sp)
   8a828:	df000115 	stw	fp,4(sp)
   8a82c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8a830:	0009883a 	mov	r4,zero
   8a834:	008ad080 	call	8ad08 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8a838:	008ad3c0 	call	8ad3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8a83c:	01000274 	movhi	r4,9
   8a840:	2133d904 	addi	r4,r4,-12444
   8a844:	01400274 	movhi	r5,9
   8a848:	2973d904 	addi	r5,r5,-12444
   8a84c:	01800274 	movhi	r6,9
   8a850:	31b3d904 	addi	r6,r6,-12444
   8a854:	008bf700 	call	8bf70 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8a858:	008bae80 	call	8bae8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8a85c:	01000274 	movhi	r4,9
   8a860:	212ed304 	addi	r4,r4,-17588
   8a864:	008c7140 	call	8c714 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8a868:	d126af17 	ldw	r4,-25924(gp)
   8a86c:	d166b017 	ldw	r5,-25920(gp)
   8a870:	d1a6b117 	ldw	r6,-25916(gp)
   8a874:	008055c0 	call	8055c <main>
   8a878:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8a87c:	01000044 	movi	r4,1
   8a880:	008a0380 	call	8a038 <close>
  exit (result);
   8a884:	e13fff17 	ldw	r4,-4(fp)
   8a888:	008c7280 	call	8c728 <exit>

0008a88c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8a88c:	defffe04 	addi	sp,sp,-8
   8a890:	df000115 	stw	fp,4(sp)
   8a894:	df000104 	addi	fp,sp,4
   8a898:	e13fff15 	stw	r4,-4(fp)
}
   8a89c:	e037883a 	mov	sp,fp
   8a8a0:	df000017 	ldw	fp,0(sp)
   8a8a4:	dec00104 	addi	sp,sp,4
   8a8a8:	f800283a 	ret

0008a8ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8a8ac:	defffe04 	addi	sp,sp,-8
   8a8b0:	df000115 	stw	fp,4(sp)
   8a8b4:	df000104 	addi	fp,sp,4
   8a8b8:	e13fff15 	stw	r4,-4(fp)
}
   8a8bc:	e037883a 	mov	sp,fp
   8a8c0:	df000017 	ldw	fp,0(sp)
   8a8c4:	dec00104 	addi	sp,sp,4
   8a8c8:	f800283a 	ret

0008a8cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8a8cc:	defff704 	addi	sp,sp,-36
   8a8d0:	dfc00815 	stw	ra,32(sp)
   8a8d4:	df000715 	stw	fp,28(sp)
   8a8d8:	df000704 	addi	fp,sp,28
   8a8dc:	e13ffb15 	stw	r4,-20(fp)
   8a8e0:	e17ffc15 	stw	r5,-16(fp)
   8a8e4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a8e8:	e0bffb17 	ldw	r2,-20(fp)
   8a8ec:	1004803a 	cmplt	r2,r2,zero
   8a8f0:	1000091e 	bne	r2,zero,8a918 <read+0x4c>
   8a8f4:	e13ffb17 	ldw	r4,-20(fp)
   8a8f8:	01400304 	movi	r5,12
   8a8fc:	00805cc0 	call	805cc <__mulsi3>
   8a900:	1007883a 	mov	r3,r2
   8a904:	00800274 	movhi	r2,9
   8a908:	10b5f204 	addi	r2,r2,-10296
   8a90c:	1887883a 	add	r3,r3,r2
   8a910:	e0ffff15 	stw	r3,-4(fp)
   8a914:	00000106 	br	8a91c <read+0x50>
   8a918:	e03fff15 	stw	zero,-4(fp)
   8a91c:	e0bfff17 	ldw	r2,-4(fp)
   8a920:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8a924:	e0bffa17 	ldw	r2,-24(fp)
   8a928:	1005003a 	cmpeq	r2,r2,zero
   8a92c:	1000241e 	bne	r2,zero,8a9c0 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8a930:	e0bffa17 	ldw	r2,-24(fp)
   8a934:	10800217 	ldw	r2,8(r2)
   8a938:	108000cc 	andi	r2,r2,3
   8a93c:	10800060 	cmpeqi	r2,r2,1
   8a940:	10001a1e 	bne	r2,zero,8a9ac <read+0xe0>
   8a944:	e0bffa17 	ldw	r2,-24(fp)
   8a948:	10800017 	ldw	r2,0(r2)
   8a94c:	10800517 	ldw	r2,20(r2)
   8a950:	1005003a 	cmpeq	r2,r2,zero
   8a954:	1000151e 	bne	r2,zero,8a9ac <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8a958:	e0bffa17 	ldw	r2,-24(fp)
   8a95c:	10800017 	ldw	r2,0(r2)
   8a960:	10800517 	ldw	r2,20(r2)
   8a964:	e17ffc17 	ldw	r5,-16(fp)
   8a968:	e1bffd17 	ldw	r6,-12(fp)
   8a96c:	e13ffa17 	ldw	r4,-24(fp)
   8a970:	103ee83a 	callr	r2
   8a974:	e0bff915 	stw	r2,-28(fp)
   8a978:	e0bff917 	ldw	r2,-28(fp)
   8a97c:	1004403a 	cmpge	r2,r2,zero
   8a980:	1000071e 	bne	r2,zero,8a9a0 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8a984:	008a9f00 	call	8a9f0 <alt_get_errno>
   8a988:	e0fff917 	ldw	r3,-28(fp)
   8a98c:	00c7c83a 	sub	r3,zero,r3
   8a990:	10c00015 	stw	r3,0(r2)
          return -1;
   8a994:	00bfffc4 	movi	r2,-1
   8a998:	e0bffe15 	stw	r2,-8(fp)
   8a99c:	00000e06 	br	8a9d8 <read+0x10c>
        }
        return rval;
   8a9a0:	e0bff917 	ldw	r2,-28(fp)
   8a9a4:	e0bffe15 	stw	r2,-8(fp)
   8a9a8:	00000b06 	br	8a9d8 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8a9ac:	008a9f00 	call	8a9f0 <alt_get_errno>
   8a9b0:	1007883a 	mov	r3,r2
   8a9b4:	00800344 	movi	r2,13
   8a9b8:	18800015 	stw	r2,0(r3)
   8a9bc:	00000406 	br	8a9d0 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8a9c0:	008a9f00 	call	8a9f0 <alt_get_errno>
   8a9c4:	1007883a 	mov	r3,r2
   8a9c8:	00801444 	movi	r2,81
   8a9cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8a9d0:	00bfffc4 	movi	r2,-1
   8a9d4:	e0bffe15 	stw	r2,-8(fp)
   8a9d8:	e0bffe17 	ldw	r2,-8(fp)
}
   8a9dc:	e037883a 	mov	sp,fp
   8a9e0:	dfc00117 	ldw	ra,4(sp)
   8a9e4:	df000017 	ldw	fp,0(sp)
   8a9e8:	dec00204 	addi	sp,sp,8
   8a9ec:	f800283a 	ret

0008a9f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a9f0:	defffd04 	addi	sp,sp,-12
   8a9f4:	dfc00215 	stw	ra,8(sp)
   8a9f8:	df000115 	stw	fp,4(sp)
   8a9fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8aa00:	00800274 	movhi	r2,9
   8aa04:	10ba7504 	addi	r2,r2,-5676
   8aa08:	10800017 	ldw	r2,0(r2)
   8aa0c:	1005003a 	cmpeq	r2,r2,zero
   8aa10:	1000061e 	bne	r2,zero,8aa2c <alt_get_errno+0x3c>
   8aa14:	00800274 	movhi	r2,9
   8aa18:	10ba7504 	addi	r2,r2,-5676
   8aa1c:	10800017 	ldw	r2,0(r2)
   8aa20:	103ee83a 	callr	r2
   8aa24:	e0bfff15 	stw	r2,-4(fp)
   8aa28:	00000306 	br	8aa38 <alt_get_errno+0x48>
   8aa2c:	00800274 	movhi	r2,9
   8aa30:	10811704 	addi	r2,r2,1116
   8aa34:	e0bfff15 	stw	r2,-4(fp)
   8aa38:	e0bfff17 	ldw	r2,-4(fp)
}
   8aa3c:	e037883a 	mov	sp,fp
   8aa40:	dfc00117 	ldw	ra,4(sp)
   8aa44:	df000017 	ldw	fp,0(sp)
   8aa48:	dec00204 	addi	sp,sp,8
   8aa4c:	f800283a 	ret

0008aa50 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8aa50:	defffc04 	addi	sp,sp,-16
   8aa54:	dfc00315 	stw	ra,12(sp)
   8aa58:	df000215 	stw	fp,8(sp)
   8aa5c:	dc000115 	stw	r16,4(sp)
   8aa60:	df000104 	addi	fp,sp,4
   8aa64:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8aa68:	e0bfff17 	ldw	r2,-4(fp)
   8aa6c:	108000d0 	cmplti	r2,r2,3
   8aa70:	10000f1e 	bne	r2,zero,8aab0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8aa74:	e13fff17 	ldw	r4,-4(fp)
   8aa78:	04000274 	movhi	r16,9
   8aa7c:	8435f204 	addi	r16,r16,-10296
   8aa80:	01400304 	movi	r5,12
   8aa84:	00805cc0 	call	805cc <__mulsi3>
   8aa88:	1405883a 	add	r2,r2,r16
   8aa8c:	10800204 	addi	r2,r2,8
   8aa90:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8aa94:	e13fff17 	ldw	r4,-4(fp)
   8aa98:	04000274 	movhi	r16,9
   8aa9c:	8435f204 	addi	r16,r16,-10296
   8aaa0:	01400304 	movi	r5,12
   8aaa4:	00805cc0 	call	805cc <__mulsi3>
   8aaa8:	1405883a 	add	r2,r2,r16
   8aaac:	10000015 	stw	zero,0(r2)
  }
}
   8aab0:	e037883a 	mov	sp,fp
   8aab4:	dfc00217 	ldw	ra,8(sp)
   8aab8:	df000117 	ldw	fp,4(sp)
   8aabc:	dc000017 	ldw	r16,0(sp)
   8aac0:	dec00304 	addi	sp,sp,12
   8aac4:	f800283a 	ret

0008aac8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8aac8:	defff804 	addi	sp,sp,-32
   8aacc:	df000715 	stw	fp,28(sp)
   8aad0:	df000704 	addi	fp,sp,28
   8aad4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8aad8:	0005303a 	rdctl	r2,status
   8aadc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8aae0:	e0fffb17 	ldw	r3,-20(fp)
   8aae4:	00bfff84 	movi	r2,-2
   8aae8:	1884703a 	and	r2,r3,r2
   8aaec:	1001703a 	wrctl	status,r2
  
  return context;
   8aaf0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8aaf4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8aaf8:	d0a00d17 	ldw	r2,-32716(gp)
   8aafc:	10c000c4 	addi	r3,r2,3
   8ab00:	00bfff04 	movi	r2,-4
   8ab04:	1884703a 	and	r2,r3,r2
   8ab08:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8ab0c:	d0e00d17 	ldw	r3,-32716(gp)
   8ab10:	e0bffe17 	ldw	r2,-8(fp)
   8ab14:	1887883a 	add	r3,r3,r2
   8ab18:	00800434 	movhi	r2,16
   8ab1c:	10800004 	addi	r2,r2,0
   8ab20:	10c0072e 	bgeu	r2,r3,8ab40 <sbrk+0x78>
   8ab24:	e0bffd17 	ldw	r2,-12(fp)
   8ab28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ab2c:	e0bffa17 	ldw	r2,-24(fp)
   8ab30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8ab34:	00bfffc4 	movi	r2,-1
   8ab38:	e0bfff15 	stw	r2,-4(fp)
   8ab3c:	00000c06 	br	8ab70 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8ab40:	d0a00d17 	ldw	r2,-32716(gp)
   8ab44:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8ab48:	d0e00d17 	ldw	r3,-32716(gp)
   8ab4c:	e0bffe17 	ldw	r2,-8(fp)
   8ab50:	1885883a 	add	r2,r3,r2
   8ab54:	d0a00d15 	stw	r2,-32716(gp)
   8ab58:	e0bffd17 	ldw	r2,-12(fp)
   8ab5c:	e0bff915 	stw	r2,-28(fp)
   8ab60:	e0bff917 	ldw	r2,-28(fp)
   8ab64:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8ab68:	e0bffc17 	ldw	r2,-16(fp)
   8ab6c:	e0bfff15 	stw	r2,-4(fp)
   8ab70:	e0bfff17 	ldw	r2,-4(fp)
} 
   8ab74:	e037883a 	mov	sp,fp
   8ab78:	df000017 	ldw	fp,0(sp)
   8ab7c:	dec00104 	addi	sp,sp,4
   8ab80:	f800283a 	ret

0008ab84 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8ab84:	defff704 	addi	sp,sp,-36
   8ab88:	dfc00815 	stw	ra,32(sp)
   8ab8c:	df000715 	stw	fp,28(sp)
   8ab90:	df000704 	addi	fp,sp,28
   8ab94:	e13ffb15 	stw	r4,-20(fp)
   8ab98:	e17ffc15 	stw	r5,-16(fp)
   8ab9c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8aba0:	e0bffb17 	ldw	r2,-20(fp)
   8aba4:	1004803a 	cmplt	r2,r2,zero
   8aba8:	1000091e 	bne	r2,zero,8abd0 <write+0x4c>
   8abac:	e13ffb17 	ldw	r4,-20(fp)
   8abb0:	01400304 	movi	r5,12
   8abb4:	00805cc0 	call	805cc <__mulsi3>
   8abb8:	1007883a 	mov	r3,r2
   8abbc:	00800274 	movhi	r2,9
   8abc0:	10b5f204 	addi	r2,r2,-10296
   8abc4:	1887883a 	add	r3,r3,r2
   8abc8:	e0ffff15 	stw	r3,-4(fp)
   8abcc:	00000106 	br	8abd4 <write+0x50>
   8abd0:	e03fff15 	stw	zero,-4(fp)
   8abd4:	e0bfff17 	ldw	r2,-4(fp)
   8abd8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8abdc:	e0bffa17 	ldw	r2,-24(fp)
   8abe0:	1005003a 	cmpeq	r2,r2,zero
   8abe4:	1000241e 	bne	r2,zero,8ac78 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8abe8:	e0bffa17 	ldw	r2,-24(fp)
   8abec:	10800217 	ldw	r2,8(r2)
   8abf0:	108000cc 	andi	r2,r2,3
   8abf4:	1005003a 	cmpeq	r2,r2,zero
   8abf8:	10001a1e 	bne	r2,zero,8ac64 <write+0xe0>
   8abfc:	e0bffa17 	ldw	r2,-24(fp)
   8ac00:	10800017 	ldw	r2,0(r2)
   8ac04:	10800617 	ldw	r2,24(r2)
   8ac08:	1005003a 	cmpeq	r2,r2,zero
   8ac0c:	1000151e 	bne	r2,zero,8ac64 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8ac10:	e0bffa17 	ldw	r2,-24(fp)
   8ac14:	10800017 	ldw	r2,0(r2)
   8ac18:	10800617 	ldw	r2,24(r2)
   8ac1c:	e17ffc17 	ldw	r5,-16(fp)
   8ac20:	e1bffd17 	ldw	r6,-12(fp)
   8ac24:	e13ffa17 	ldw	r4,-24(fp)
   8ac28:	103ee83a 	callr	r2
   8ac2c:	e0bff915 	stw	r2,-28(fp)
   8ac30:	e0bff917 	ldw	r2,-28(fp)
   8ac34:	1004403a 	cmpge	r2,r2,zero
   8ac38:	1000071e 	bne	r2,zero,8ac58 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8ac3c:	008aca80 	call	8aca8 <alt_get_errno>
   8ac40:	e0fff917 	ldw	r3,-28(fp)
   8ac44:	00c7c83a 	sub	r3,zero,r3
   8ac48:	10c00015 	stw	r3,0(r2)
        return -1;
   8ac4c:	00bfffc4 	movi	r2,-1
   8ac50:	e0bffe15 	stw	r2,-8(fp)
   8ac54:	00000e06 	br	8ac90 <write+0x10c>
      }
      return rval;
   8ac58:	e0bff917 	ldw	r2,-28(fp)
   8ac5c:	e0bffe15 	stw	r2,-8(fp)
   8ac60:	00000b06 	br	8ac90 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8ac64:	008aca80 	call	8aca8 <alt_get_errno>
   8ac68:	1007883a 	mov	r3,r2
   8ac6c:	00800344 	movi	r2,13
   8ac70:	18800015 	stw	r2,0(r3)
   8ac74:	00000406 	br	8ac88 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8ac78:	008aca80 	call	8aca8 <alt_get_errno>
   8ac7c:	1007883a 	mov	r3,r2
   8ac80:	00801444 	movi	r2,81
   8ac84:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8ac88:	00bfffc4 	movi	r2,-1
   8ac8c:	e0bffe15 	stw	r2,-8(fp)
   8ac90:	e0bffe17 	ldw	r2,-8(fp)
}
   8ac94:	e037883a 	mov	sp,fp
   8ac98:	dfc00117 	ldw	ra,4(sp)
   8ac9c:	df000017 	ldw	fp,0(sp)
   8aca0:	dec00204 	addi	sp,sp,8
   8aca4:	f800283a 	ret

0008aca8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8aca8:	defffd04 	addi	sp,sp,-12
   8acac:	dfc00215 	stw	ra,8(sp)
   8acb0:	df000115 	stw	fp,4(sp)
   8acb4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8acb8:	00800274 	movhi	r2,9
   8acbc:	10ba7504 	addi	r2,r2,-5676
   8acc0:	10800017 	ldw	r2,0(r2)
   8acc4:	1005003a 	cmpeq	r2,r2,zero
   8acc8:	1000061e 	bne	r2,zero,8ace4 <alt_get_errno+0x3c>
   8accc:	00800274 	movhi	r2,9
   8acd0:	10ba7504 	addi	r2,r2,-5676
   8acd4:	10800017 	ldw	r2,0(r2)
   8acd8:	103ee83a 	callr	r2
   8acdc:	e0bfff15 	stw	r2,-4(fp)
   8ace0:	00000306 	br	8acf0 <alt_get_errno+0x48>
   8ace4:	00800274 	movhi	r2,9
   8ace8:	10811704 	addi	r2,r2,1116
   8acec:	e0bfff15 	stw	r2,-4(fp)
   8acf0:	e0bfff17 	ldw	r2,-4(fp)
}
   8acf4:	e037883a 	mov	sp,fp
   8acf8:	dfc00117 	ldw	ra,4(sp)
   8acfc:	df000017 	ldw	fp,0(sp)
   8ad00:	dec00204 	addi	sp,sp,8
   8ad04:	f800283a 	ret

0008ad08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8ad08:	defffd04 	addi	sp,sp,-12
   8ad0c:	dfc00215 	stw	ra,8(sp)
   8ad10:	df000115 	stw	fp,4(sp)
   8ad14:	df000104 	addi	fp,sp,4
   8ad18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   8ad1c:	008c4700 	call	8c470 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8ad20:	00800044 	movi	r2,1
   8ad24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8ad28:	e037883a 	mov	sp,fp
   8ad2c:	dfc00117 	ldw	ra,4(sp)
   8ad30:	df000017 	ldw	fp,0(sp)
   8ad34:	dec00204 	addi	sp,sp,8
   8ad38:	f800283a 	ret

0008ad3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8ad3c:	defffe04 	addi	sp,sp,-8
   8ad40:	dfc00115 	stw	ra,4(sp)
   8ad44:	df000015 	stw	fp,0(sp)
   8ad48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8ad4c:	01000274 	movhi	r4,9
   8ad50:	21365c04 	addi	r4,r4,-9872
   8ad54:	000b883a 	mov	r5,zero
   8ad58:	000d883a 	mov	r6,zero
   8ad5c:	008af000 	call	8af00 <altera_avalon_jtag_uart_init>
   8ad60:	01000274 	movhi	r4,9
   8ad64:	21365204 	addi	r4,r4,-9912
   8ad68:	008ad800 	call	8ad80 <alt_dev_reg>
}
   8ad6c:	e037883a 	mov	sp,fp
   8ad70:	dfc00117 	ldw	ra,4(sp)
   8ad74:	df000017 	ldw	fp,0(sp)
   8ad78:	dec00204 	addi	sp,sp,8
   8ad7c:	f800283a 	ret

0008ad80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8ad80:	defffd04 	addi	sp,sp,-12
   8ad84:	dfc00215 	stw	ra,8(sp)
   8ad88:	df000115 	stw	fp,4(sp)
   8ad8c:	df000104 	addi	fp,sp,4
   8ad90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8ad94:	e13fff17 	ldw	r4,-4(fp)
   8ad98:	01400274 	movhi	r5,9
   8ad9c:	297a7204 	addi	r5,r5,-5688
   8ada0:	008b9d40 	call	8b9d4 <alt_dev_llist_insert>
}
   8ada4:	e037883a 	mov	sp,fp
   8ada8:	dfc00117 	ldw	ra,4(sp)
   8adac:	df000017 	ldw	fp,0(sp)
   8adb0:	dec00204 	addi	sp,sp,8
   8adb4:	f800283a 	ret

0008adb8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8adb8:	defffa04 	addi	sp,sp,-24
   8adbc:	dfc00515 	stw	ra,20(sp)
   8adc0:	df000415 	stw	fp,16(sp)
   8adc4:	df000404 	addi	fp,sp,16
   8adc8:	e13ffd15 	stw	r4,-12(fp)
   8adcc:	e17ffe15 	stw	r5,-8(fp)
   8add0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8add4:	e0bffd17 	ldw	r2,-12(fp)
   8add8:	10800017 	ldw	r2,0(r2)
   8addc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8ade0:	e0bffc17 	ldw	r2,-16(fp)
   8ade4:	11000a04 	addi	r4,r2,40
   8ade8:	e0bffd17 	ldw	r2,-12(fp)
   8adec:	11c00217 	ldw	r7,8(r2)
   8adf0:	e17ffe17 	ldw	r5,-8(fp)
   8adf4:	e1bfff17 	ldw	r6,-4(fp)
   8adf8:	008b4000 	call	8b400 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8adfc:	e037883a 	mov	sp,fp
   8ae00:	dfc00117 	ldw	ra,4(sp)
   8ae04:	df000017 	ldw	fp,0(sp)
   8ae08:	dec00204 	addi	sp,sp,8
   8ae0c:	f800283a 	ret

0008ae10 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8ae10:	defffa04 	addi	sp,sp,-24
   8ae14:	dfc00515 	stw	ra,20(sp)
   8ae18:	df000415 	stw	fp,16(sp)
   8ae1c:	df000404 	addi	fp,sp,16
   8ae20:	e13ffd15 	stw	r4,-12(fp)
   8ae24:	e17ffe15 	stw	r5,-8(fp)
   8ae28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ae2c:	e0bffd17 	ldw	r2,-12(fp)
   8ae30:	10800017 	ldw	r2,0(r2)
   8ae34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8ae38:	e0bffc17 	ldw	r2,-16(fp)
   8ae3c:	11000a04 	addi	r4,r2,40
   8ae40:	e0bffd17 	ldw	r2,-12(fp)
   8ae44:	11c00217 	ldw	r7,8(r2)
   8ae48:	e17ffe17 	ldw	r5,-8(fp)
   8ae4c:	e1bfff17 	ldw	r6,-4(fp)
   8ae50:	008b6240 	call	8b624 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8ae54:	e037883a 	mov	sp,fp
   8ae58:	dfc00117 	ldw	ra,4(sp)
   8ae5c:	df000017 	ldw	fp,0(sp)
   8ae60:	dec00204 	addi	sp,sp,8
   8ae64:	f800283a 	ret

0008ae68 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8ae68:	defffc04 	addi	sp,sp,-16
   8ae6c:	dfc00315 	stw	ra,12(sp)
   8ae70:	df000215 	stw	fp,8(sp)
   8ae74:	df000204 	addi	fp,sp,8
   8ae78:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ae7c:	e0bfff17 	ldw	r2,-4(fp)
   8ae80:	10800017 	ldw	r2,0(r2)
   8ae84:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8ae88:	e0bffe17 	ldw	r2,-8(fp)
   8ae8c:	11000a04 	addi	r4,r2,40
   8ae90:	e0bfff17 	ldw	r2,-4(fp)
   8ae94:	11400217 	ldw	r5,8(r2)
   8ae98:	008b2980 	call	8b298 <altera_avalon_jtag_uart_close>
}
   8ae9c:	e037883a 	mov	sp,fp
   8aea0:	dfc00117 	ldw	ra,4(sp)
   8aea4:	df000017 	ldw	fp,0(sp)
   8aea8:	dec00204 	addi	sp,sp,8
   8aeac:	f800283a 	ret

0008aeb0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8aeb0:	defffa04 	addi	sp,sp,-24
   8aeb4:	dfc00515 	stw	ra,20(sp)
   8aeb8:	df000415 	stw	fp,16(sp)
   8aebc:	df000404 	addi	fp,sp,16
   8aec0:	e13ffd15 	stw	r4,-12(fp)
   8aec4:	e17ffe15 	stw	r5,-8(fp)
   8aec8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8aecc:	e0bffd17 	ldw	r2,-12(fp)
   8aed0:	10800017 	ldw	r2,0(r2)
   8aed4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8aed8:	e0bffc17 	ldw	r2,-16(fp)
   8aedc:	11000a04 	addi	r4,r2,40
   8aee0:	e17ffe17 	ldw	r5,-8(fp)
   8aee4:	e1bfff17 	ldw	r6,-4(fp)
   8aee8:	008b30c0 	call	8b30c <altera_avalon_jtag_uart_ioctl>
}
   8aeec:	e037883a 	mov	sp,fp
   8aef0:	dfc00117 	ldw	ra,4(sp)
   8aef4:	df000017 	ldw	fp,0(sp)
   8aef8:	dec00204 	addi	sp,sp,8
   8aefc:	f800283a 	ret

0008af00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8af00:	defffa04 	addi	sp,sp,-24
   8af04:	dfc00515 	stw	ra,20(sp)
   8af08:	df000415 	stw	fp,16(sp)
   8af0c:	df000404 	addi	fp,sp,16
   8af10:	e13ffd15 	stw	r4,-12(fp)
   8af14:	e17ffe15 	stw	r5,-8(fp)
   8af18:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8af1c:	e0fffd17 	ldw	r3,-12(fp)
   8af20:	00800044 	movi	r2,1
   8af24:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8af28:	e0bffd17 	ldw	r2,-12(fp)
   8af2c:	10800017 	ldw	r2,0(r2)
   8af30:	11000104 	addi	r4,r2,4
   8af34:	e0bffd17 	ldw	r2,-12(fp)
   8af38:	10800817 	ldw	r2,32(r2)
   8af3c:	1007883a 	mov	r3,r2
   8af40:	2005883a 	mov	r2,r4
   8af44:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8af48:	e13ffe17 	ldw	r4,-8(fp)
   8af4c:	e17fff17 	ldw	r5,-4(fp)
   8af50:	d8000015 	stw	zero,0(sp)
   8af54:	01800274 	movhi	r6,9
   8af58:	31abf004 	addi	r6,r6,-20544
   8af5c:	e1fffd17 	ldw	r7,-12(fp)
   8af60:	008bbcc0 	call	8bbcc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8af64:	e0bffd17 	ldw	r2,-12(fp)
   8af68:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8af6c:	e0bffd17 	ldw	r2,-12(fp)
   8af70:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8af74:	00800274 	movhi	r2,9
   8af78:	10811c04 	addi	r2,r2,1136
   8af7c:	10800017 	ldw	r2,0(r2)
   8af80:	100b883a 	mov	r5,r2
   8af84:	01800274 	movhi	r6,9
   8af88:	31ac7a04 	addi	r6,r6,-19992
   8af8c:	e1fffd17 	ldw	r7,-12(fp)
   8af90:	008b8640 	call	8b864 <alt_alarm_start>
   8af94:	1004403a 	cmpge	r2,r2,zero
   8af98:	1000041e 	bne	r2,zero,8afac <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8af9c:	e0fffd17 	ldw	r3,-12(fp)
   8afa0:	00a00034 	movhi	r2,32768
   8afa4:	10bfffc4 	addi	r2,r2,-1
   8afa8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8afac:	e037883a 	mov	sp,fp
   8afb0:	dfc00117 	ldw	ra,4(sp)
   8afb4:	df000017 	ldw	fp,0(sp)
   8afb8:	dec00204 	addi	sp,sp,8
   8afbc:	f800283a 	ret

0008afc0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8afc0:	defff804 	addi	sp,sp,-32
   8afc4:	df000715 	stw	fp,28(sp)
   8afc8:	df000704 	addi	fp,sp,28
   8afcc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8afd0:	e0bfff17 	ldw	r2,-4(fp)
   8afd4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   8afd8:	e0bffe17 	ldw	r2,-8(fp)
   8afdc:	10800017 	ldw	r2,0(r2)
   8afe0:	e0bffd15 	stw	r2,-12(fp)
   8afe4:	00000006 	br	8afe8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8afe8:	e0bffd17 	ldw	r2,-12(fp)
   8afec:	10800104 	addi	r2,r2,4
   8aff0:	10800037 	ldwio	r2,0(r2)
   8aff4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8aff8:	e0bffc17 	ldw	r2,-16(fp)
   8affc:	1080c00c 	andi	r2,r2,768
   8b000:	1005003a 	cmpeq	r2,r2,zero
   8b004:	1000741e 	bne	r2,zero,8b1d8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8b008:	e0bffc17 	ldw	r2,-16(fp)
   8b00c:	1080400c 	andi	r2,r2,256
   8b010:	1005003a 	cmpeq	r2,r2,zero
   8b014:	1000351e 	bne	r2,zero,8b0ec <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8b018:	00800074 	movhi	r2,1
   8b01c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b020:	e0bffe17 	ldw	r2,-8(fp)
   8b024:	10800a17 	ldw	r2,40(r2)
   8b028:	10800044 	addi	r2,r2,1
   8b02c:	1081ffcc 	andi	r2,r2,2047
   8b030:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   8b034:	e0bffe17 	ldw	r2,-8(fp)
   8b038:	10c00b17 	ldw	r3,44(r2)
   8b03c:	e0bffa17 	ldw	r2,-24(fp)
   8b040:	18801626 	beq	r3,r2,8b09c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8b044:	e0bffd17 	ldw	r2,-12(fp)
   8b048:	10800037 	ldwio	r2,0(r2)
   8b04c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8b050:	e0bffb17 	ldw	r2,-20(fp)
   8b054:	10a0000c 	andi	r2,r2,32768
   8b058:	1005003a 	cmpeq	r2,r2,zero
   8b05c:	10000f1e 	bne	r2,zero,8b09c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8b060:	e0bffe17 	ldw	r2,-8(fp)
   8b064:	10c00a17 	ldw	r3,40(r2)
   8b068:	e0bffb17 	ldw	r2,-20(fp)
   8b06c:	1009883a 	mov	r4,r2
   8b070:	e0bffe17 	ldw	r2,-8(fp)
   8b074:	1885883a 	add	r2,r3,r2
   8b078:	10800e04 	addi	r2,r2,56
   8b07c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b080:	e0bffe17 	ldw	r2,-8(fp)
   8b084:	10800a17 	ldw	r2,40(r2)
   8b088:	10800044 	addi	r2,r2,1
   8b08c:	10c1ffcc 	andi	r3,r2,2047
   8b090:	e0bffe17 	ldw	r2,-8(fp)
   8b094:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8b098:	003fe106 	br	8b020 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8b09c:	e0bffb17 	ldw	r2,-20(fp)
   8b0a0:	10bfffec 	andhi	r2,r2,65535
   8b0a4:	1005003a 	cmpeq	r2,r2,zero
   8b0a8:	1000101e 	bne	r2,zero,8b0ec <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8b0ac:	e0bffe17 	ldw	r2,-8(fp)
   8b0b0:	10c00817 	ldw	r3,32(r2)
   8b0b4:	00bfff84 	movi	r2,-2
   8b0b8:	1886703a 	and	r3,r3,r2
   8b0bc:	e0bffe17 	ldw	r2,-8(fp)
   8b0c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8b0c4:	e0bffd17 	ldw	r2,-12(fp)
   8b0c8:	11000104 	addi	r4,r2,4
   8b0cc:	e0bffe17 	ldw	r2,-8(fp)
   8b0d0:	10800817 	ldw	r2,32(r2)
   8b0d4:	1007883a 	mov	r3,r2
   8b0d8:	2005883a 	mov	r2,r4
   8b0dc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b0e0:	e0bffd17 	ldw	r2,-12(fp)
   8b0e4:	10800104 	addi	r2,r2,4
   8b0e8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8b0ec:	e0bffc17 	ldw	r2,-16(fp)
   8b0f0:	1080800c 	andi	r2,r2,512
   8b0f4:	1005003a 	cmpeq	r2,r2,zero
   8b0f8:	103fbb1e 	bne	r2,zero,8afe8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8b0fc:	e0bffc17 	ldw	r2,-16(fp)
   8b100:	10bfffec 	andhi	r2,r2,65535
   8b104:	1004d43a 	srli	r2,r2,16
   8b108:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8b10c:	00001506 	br	8b164 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8b110:	e13ffd17 	ldw	r4,-12(fp)
   8b114:	e0bffe17 	ldw	r2,-8(fp)
   8b118:	10c00d17 	ldw	r3,52(r2)
   8b11c:	e0bffe17 	ldw	r2,-8(fp)
   8b120:	1885883a 	add	r2,r3,r2
   8b124:	10820e04 	addi	r2,r2,2104
   8b128:	10800003 	ldbu	r2,0(r2)
   8b12c:	10c03fcc 	andi	r3,r2,255
   8b130:	18c0201c 	xori	r3,r3,128
   8b134:	18ffe004 	addi	r3,r3,-128
   8b138:	2005883a 	mov	r2,r4
   8b13c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b140:	e0bffe17 	ldw	r2,-8(fp)
   8b144:	10800d17 	ldw	r2,52(r2)
   8b148:	10800044 	addi	r2,r2,1
   8b14c:	10c1ffcc 	andi	r3,r2,2047
   8b150:	e0bffe17 	ldw	r2,-8(fp)
   8b154:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8b158:	e0bff917 	ldw	r2,-28(fp)
   8b15c:	10bfffc4 	addi	r2,r2,-1
   8b160:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8b164:	e0bff917 	ldw	r2,-28(fp)
   8b168:	1005003a 	cmpeq	r2,r2,zero
   8b16c:	1000051e 	bne	r2,zero,8b184 <altera_avalon_jtag_uart_irq+0x1c4>
   8b170:	e0bffe17 	ldw	r2,-8(fp)
   8b174:	10c00d17 	ldw	r3,52(r2)
   8b178:	e0bffe17 	ldw	r2,-8(fp)
   8b17c:	10800c17 	ldw	r2,48(r2)
   8b180:	18bfe31e 	bne	r3,r2,8b110 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8b184:	e0bff917 	ldw	r2,-28(fp)
   8b188:	1005003a 	cmpeq	r2,r2,zero
   8b18c:	103f961e 	bne	r2,zero,8afe8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8b190:	e0bffe17 	ldw	r2,-8(fp)
   8b194:	10c00817 	ldw	r3,32(r2)
   8b198:	00bfff44 	movi	r2,-3
   8b19c:	1886703a 	and	r3,r3,r2
   8b1a0:	e0bffe17 	ldw	r2,-8(fp)
   8b1a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8b1a8:	e0bffe17 	ldw	r2,-8(fp)
   8b1ac:	10800017 	ldw	r2,0(r2)
   8b1b0:	11000104 	addi	r4,r2,4
   8b1b4:	e0bffe17 	ldw	r2,-8(fp)
   8b1b8:	10800817 	ldw	r2,32(r2)
   8b1bc:	1007883a 	mov	r3,r2
   8b1c0:	2005883a 	mov	r2,r4
   8b1c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b1c8:	e0bffd17 	ldw	r2,-12(fp)
   8b1cc:	10800104 	addi	r2,r2,4
   8b1d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8b1d4:	003f8406 	br	8afe8 <altera_avalon_jtag_uart_irq+0x28>
}
   8b1d8:	e037883a 	mov	sp,fp
   8b1dc:	df000017 	ldw	fp,0(sp)
   8b1e0:	dec00104 	addi	sp,sp,4
   8b1e4:	f800283a 	ret

0008b1e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8b1e8:	defffc04 	addi	sp,sp,-16
   8b1ec:	df000315 	stw	fp,12(sp)
   8b1f0:	df000304 	addi	fp,sp,12
   8b1f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8b1f8:	e0bfff17 	ldw	r2,-4(fp)
   8b1fc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8b200:	e0bffe17 	ldw	r2,-8(fp)
   8b204:	10800017 	ldw	r2,0(r2)
   8b208:	10800104 	addi	r2,r2,4
   8b20c:	10800037 	ldwio	r2,0(r2)
   8b210:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8b214:	e0bffd17 	ldw	r2,-12(fp)
   8b218:	1081000c 	andi	r2,r2,1024
   8b21c:	1005003a 	cmpeq	r2,r2,zero
   8b220:	10000c1e 	bne	r2,zero,8b254 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8b224:	e0bffe17 	ldw	r2,-8(fp)
   8b228:	10800017 	ldw	r2,0(r2)
   8b22c:	11000104 	addi	r4,r2,4
   8b230:	e0bffe17 	ldw	r2,-8(fp)
   8b234:	10800817 	ldw	r2,32(r2)
   8b238:	10810014 	ori	r2,r2,1024
   8b23c:	1007883a 	mov	r3,r2
   8b240:	2005883a 	mov	r2,r4
   8b244:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8b248:	e0bffe17 	ldw	r2,-8(fp)
   8b24c:	10000915 	stw	zero,36(r2)
   8b250:	00000a06 	br	8b27c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8b254:	e0bffe17 	ldw	r2,-8(fp)
   8b258:	10c00917 	ldw	r3,36(r2)
   8b25c:	00a00034 	movhi	r2,32768
   8b260:	10bfff04 	addi	r2,r2,-4
   8b264:	10c00536 	bltu	r2,r3,8b27c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   8b268:	e0bffe17 	ldw	r2,-8(fp)
   8b26c:	10800917 	ldw	r2,36(r2)
   8b270:	10c00044 	addi	r3,r2,1
   8b274:	e0bffe17 	ldw	r2,-8(fp)
   8b278:	10c00915 	stw	r3,36(r2)
   8b27c:	00800274 	movhi	r2,9
   8b280:	10811c04 	addi	r2,r2,1136
   8b284:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8b288:	e037883a 	mov	sp,fp
   8b28c:	df000017 	ldw	fp,0(sp)
   8b290:	dec00104 	addi	sp,sp,4
   8b294:	f800283a 	ret

0008b298 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8b298:	defffc04 	addi	sp,sp,-16
   8b29c:	df000315 	stw	fp,12(sp)
   8b2a0:	df000304 	addi	fp,sp,12
   8b2a4:	e13ffd15 	stw	r4,-12(fp)
   8b2a8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8b2ac:	00000706 	br	8b2cc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8b2b0:	e0bffe17 	ldw	r2,-8(fp)
   8b2b4:	1090000c 	andi	r2,r2,16384
   8b2b8:	1005003a 	cmpeq	r2,r2,zero
   8b2bc:	1000031e 	bne	r2,zero,8b2cc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8b2c0:	00bffd44 	movi	r2,-11
   8b2c4:	e0bfff15 	stw	r2,-4(fp)
   8b2c8:	00000b06 	br	8b2f8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8b2cc:	e0bffd17 	ldw	r2,-12(fp)
   8b2d0:	10c00d17 	ldw	r3,52(r2)
   8b2d4:	e0bffd17 	ldw	r2,-12(fp)
   8b2d8:	10800c17 	ldw	r2,48(r2)
   8b2dc:	18800526 	beq	r3,r2,8b2f4 <altera_avalon_jtag_uart_close+0x5c>
   8b2e0:	e0bffd17 	ldw	r2,-12(fp)
   8b2e4:	10c00917 	ldw	r3,36(r2)
   8b2e8:	e0bffd17 	ldw	r2,-12(fp)
   8b2ec:	10800117 	ldw	r2,4(r2)
   8b2f0:	18bfef36 	bltu	r3,r2,8b2b0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8b2f4:	e03fff15 	stw	zero,-4(fp)
   8b2f8:	e0bfff17 	ldw	r2,-4(fp)
}
   8b2fc:	e037883a 	mov	sp,fp
   8b300:	df000017 	ldw	fp,0(sp)
   8b304:	dec00104 	addi	sp,sp,4
   8b308:	f800283a 	ret

0008b30c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8b30c:	defff804 	addi	sp,sp,-32
   8b310:	df000715 	stw	fp,28(sp)
   8b314:	df000704 	addi	fp,sp,28
   8b318:	e13ffb15 	stw	r4,-20(fp)
   8b31c:	e17ffc15 	stw	r5,-16(fp)
   8b320:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8b324:	00bff9c4 	movi	r2,-25
   8b328:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8b32c:	e0bffc17 	ldw	r2,-16(fp)
   8b330:	e0bfff15 	stw	r2,-4(fp)
   8b334:	e0ffff17 	ldw	r3,-4(fp)
   8b338:	189a8060 	cmpeqi	r2,r3,27137
   8b33c:	1000041e 	bne	r2,zero,8b350 <altera_avalon_jtag_uart_ioctl+0x44>
   8b340:	e0ffff17 	ldw	r3,-4(fp)
   8b344:	189a80a0 	cmpeqi	r2,r3,27138
   8b348:	10001b1e 	bne	r2,zero,8b3b8 <altera_avalon_jtag_uart_ioctl+0xac>
   8b34c:	00002706 	br	8b3ec <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8b350:	e0bffb17 	ldw	r2,-20(fp)
   8b354:	10c00117 	ldw	r3,4(r2)
   8b358:	00a00034 	movhi	r2,32768
   8b35c:	10bfffc4 	addi	r2,r2,-1
   8b360:	18802226 	beq	r3,r2,8b3ec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8b364:	e0bffd17 	ldw	r2,-12(fp)
   8b368:	10800017 	ldw	r2,0(r2)
   8b36c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8b370:	e0bff917 	ldw	r2,-28(fp)
   8b374:	10800090 	cmplti	r2,r2,2
   8b378:	1000071e 	bne	r2,zero,8b398 <altera_avalon_jtag_uart_ioctl+0x8c>
   8b37c:	e0fff917 	ldw	r3,-28(fp)
   8b380:	00a00034 	movhi	r2,32768
   8b384:	10bfffc4 	addi	r2,r2,-1
   8b388:	18800326 	beq	r3,r2,8b398 <altera_avalon_jtag_uart_ioctl+0x8c>
   8b38c:	e0bff917 	ldw	r2,-28(fp)
   8b390:	e0bffe15 	stw	r2,-8(fp)
   8b394:	00000306 	br	8b3a4 <altera_avalon_jtag_uart_ioctl+0x98>
   8b398:	00e00034 	movhi	r3,32768
   8b39c:	18ffff84 	addi	r3,r3,-2
   8b3a0:	e0fffe15 	stw	r3,-8(fp)
   8b3a4:	e0bffb17 	ldw	r2,-20(fp)
   8b3a8:	e0fffe17 	ldw	r3,-8(fp)
   8b3ac:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8b3b0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8b3b4:	00000d06 	br	8b3ec <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8b3b8:	e0bffb17 	ldw	r2,-20(fp)
   8b3bc:	10c00117 	ldw	r3,4(r2)
   8b3c0:	00a00034 	movhi	r2,32768
   8b3c4:	10bfffc4 	addi	r2,r2,-1
   8b3c8:	18800826 	beq	r3,r2,8b3ec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8b3cc:	e13ffd17 	ldw	r4,-12(fp)
   8b3d0:	e0bffb17 	ldw	r2,-20(fp)
   8b3d4:	10c00917 	ldw	r3,36(r2)
   8b3d8:	e0bffb17 	ldw	r2,-20(fp)
   8b3dc:	10800117 	ldw	r2,4(r2)
   8b3e0:	1885803a 	cmpltu	r2,r3,r2
   8b3e4:	20800015 	stw	r2,0(r4)
      rc = 0;
   8b3e8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8b3ec:	e0bffa17 	ldw	r2,-24(fp)
}
   8b3f0:	e037883a 	mov	sp,fp
   8b3f4:	df000017 	ldw	fp,0(sp)
   8b3f8:	dec00104 	addi	sp,sp,4
   8b3fc:	f800283a 	ret

0008b400 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8b400:	defff204 	addi	sp,sp,-56
   8b404:	dfc00d15 	stw	ra,52(sp)
   8b408:	df000c15 	stw	fp,48(sp)
   8b40c:	df000c04 	addi	fp,sp,48
   8b410:	e13ffb15 	stw	r4,-20(fp)
   8b414:	e17ffc15 	stw	r5,-16(fp)
   8b418:	e1bffd15 	stw	r6,-12(fp)
   8b41c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8b420:	e0bffc17 	ldw	r2,-16(fp)
   8b424:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8b428:	00004806 	br	8b54c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8b42c:	e0bffb17 	ldw	r2,-20(fp)
   8b430:	10800a17 	ldw	r2,40(r2)
   8b434:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8b438:	e0bffb17 	ldw	r2,-20(fp)
   8b43c:	10800b17 	ldw	r2,44(r2)
   8b440:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8b444:	e0fff717 	ldw	r3,-36(fp)
   8b448:	e0bff617 	ldw	r2,-40(fp)
   8b44c:	18800536 	bltu	r3,r2,8b464 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8b450:	e0bff717 	ldw	r2,-36(fp)
   8b454:	e0fff617 	ldw	r3,-40(fp)
   8b458:	10c5c83a 	sub	r2,r2,r3
   8b45c:	e0bff815 	stw	r2,-32(fp)
   8b460:	00000406 	br	8b474 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8b464:	00820004 	movi	r2,2048
   8b468:	e0fff617 	ldw	r3,-40(fp)
   8b46c:	10c5c83a 	sub	r2,r2,r3
   8b470:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8b474:	e0bff817 	ldw	r2,-32(fp)
   8b478:	1005003a 	cmpeq	r2,r2,zero
   8b47c:	10001f1e 	bne	r2,zero,8b4fc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8b480:	e0fffd17 	ldw	r3,-12(fp)
   8b484:	e0bff817 	ldw	r2,-32(fp)
   8b488:	1880022e 	bgeu	r3,r2,8b494 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8b48c:	e0bffd17 	ldw	r2,-12(fp)
   8b490:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8b494:	e0bffb17 	ldw	r2,-20(fp)
   8b498:	10c00e04 	addi	r3,r2,56
   8b49c:	e0bff617 	ldw	r2,-40(fp)
   8b4a0:	1887883a 	add	r3,r3,r2
   8b4a4:	e0bffa17 	ldw	r2,-24(fp)
   8b4a8:	1009883a 	mov	r4,r2
   8b4ac:	180b883a 	mov	r5,r3
   8b4b0:	e1bff817 	ldw	r6,-32(fp)
   8b4b4:	0085a140 	call	85a14 <memcpy>
      ptr   += n;
   8b4b8:	e0fff817 	ldw	r3,-32(fp)
   8b4bc:	e0bffa17 	ldw	r2,-24(fp)
   8b4c0:	10c5883a 	add	r2,r2,r3
   8b4c4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   8b4c8:	e0fffd17 	ldw	r3,-12(fp)
   8b4cc:	e0bff817 	ldw	r2,-32(fp)
   8b4d0:	1885c83a 	sub	r2,r3,r2
   8b4d4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b4d8:	e0fff617 	ldw	r3,-40(fp)
   8b4dc:	e0bff817 	ldw	r2,-32(fp)
   8b4e0:	1885883a 	add	r2,r3,r2
   8b4e4:	10c1ffcc 	andi	r3,r2,2047
   8b4e8:	e0bffb17 	ldw	r2,-20(fp)
   8b4ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8b4f0:	e0bffd17 	ldw	r2,-12(fp)
   8b4f4:	10800048 	cmpgei	r2,r2,1
   8b4f8:	103fcc1e 	bne	r2,zero,8b42c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8b4fc:	e0fffa17 	ldw	r3,-24(fp)
   8b500:	e0bffc17 	ldw	r2,-16(fp)
   8b504:	1880141e 	bne	r3,r2,8b558 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8b508:	e0bffe17 	ldw	r2,-8(fp)
   8b50c:	1090000c 	andi	r2,r2,16384
   8b510:	1004c03a 	cmpne	r2,r2,zero
   8b514:	1000101e 	bne	r2,zero,8b558 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8b518:	e0bffb17 	ldw	r2,-20(fp)
   8b51c:	10c00a17 	ldw	r3,40(r2)
   8b520:	e0bff717 	ldw	r2,-36(fp)
   8b524:	1880051e 	bne	r3,r2,8b53c <altera_avalon_jtag_uart_read+0x13c>
   8b528:	e0bffb17 	ldw	r2,-20(fp)
   8b52c:	10c00917 	ldw	r3,36(r2)
   8b530:	e0bffb17 	ldw	r2,-20(fp)
   8b534:	10800117 	ldw	r2,4(r2)
   8b538:	18bff736 	bltu	r3,r2,8b518 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8b53c:	e0bffb17 	ldw	r2,-20(fp)
   8b540:	10c00a17 	ldw	r3,40(r2)
   8b544:	e0bff717 	ldw	r2,-36(fp)
   8b548:	18800326 	beq	r3,r2,8b558 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8b54c:	e0bffd17 	ldw	r2,-12(fp)
   8b550:	10800048 	cmpgei	r2,r2,1
   8b554:	103fb51e 	bne	r2,zero,8b42c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8b558:	e0fffa17 	ldw	r3,-24(fp)
   8b55c:	e0bffc17 	ldw	r2,-16(fp)
   8b560:	18801926 	beq	r3,r2,8b5c8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b564:	0005303a 	rdctl	r2,status
   8b568:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b56c:	e0fff517 	ldw	r3,-44(fp)
   8b570:	00bfff84 	movi	r2,-2
   8b574:	1884703a 	and	r2,r3,r2
   8b578:	1001703a 	wrctl	status,r2
  
  return context;
   8b57c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8b580:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8b584:	e0bffb17 	ldw	r2,-20(fp)
   8b588:	10800817 	ldw	r2,32(r2)
   8b58c:	10c00054 	ori	r3,r2,1
   8b590:	e0bffb17 	ldw	r2,-20(fp)
   8b594:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8b598:	e0bffb17 	ldw	r2,-20(fp)
   8b59c:	10800017 	ldw	r2,0(r2)
   8b5a0:	11000104 	addi	r4,r2,4
   8b5a4:	e0bffb17 	ldw	r2,-20(fp)
   8b5a8:	10800817 	ldw	r2,32(r2)
   8b5ac:	1007883a 	mov	r3,r2
   8b5b0:	2005883a 	mov	r2,r4
   8b5b4:	10c00035 	stwio	r3,0(r2)
   8b5b8:	e0bff917 	ldw	r2,-28(fp)
   8b5bc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b5c0:	e0bff417 	ldw	r2,-48(fp)
   8b5c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8b5c8:	e0fffa17 	ldw	r3,-24(fp)
   8b5cc:	e0bffc17 	ldw	r2,-16(fp)
   8b5d0:	18800526 	beq	r3,r2,8b5e8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8b5d4:	e0fffa17 	ldw	r3,-24(fp)
   8b5d8:	e0bffc17 	ldw	r2,-16(fp)
   8b5dc:	1887c83a 	sub	r3,r3,r2
   8b5e0:	e0ffff15 	stw	r3,-4(fp)
   8b5e4:	00000906 	br	8b60c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   8b5e8:	e0bffe17 	ldw	r2,-8(fp)
   8b5ec:	1090000c 	andi	r2,r2,16384
   8b5f0:	1005003a 	cmpeq	r2,r2,zero
   8b5f4:	1000031e 	bne	r2,zero,8b604 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8b5f8:	00bffd44 	movi	r2,-11
   8b5fc:	e0bfff15 	stw	r2,-4(fp)
   8b600:	00000206 	br	8b60c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8b604:	00bffec4 	movi	r2,-5
   8b608:	e0bfff15 	stw	r2,-4(fp)
   8b60c:	e0bfff17 	ldw	r2,-4(fp)
}
   8b610:	e037883a 	mov	sp,fp
   8b614:	dfc00117 	ldw	ra,4(sp)
   8b618:	df000017 	ldw	fp,0(sp)
   8b61c:	dec00204 	addi	sp,sp,8
   8b620:	f800283a 	ret

0008b624 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8b624:	defff204 	addi	sp,sp,-56
   8b628:	dfc00d15 	stw	ra,52(sp)
   8b62c:	df000c15 	stw	fp,48(sp)
   8b630:	df000c04 	addi	fp,sp,48
   8b634:	e13ffb15 	stw	r4,-20(fp)
   8b638:	e17ffc15 	stw	r5,-16(fp)
   8b63c:	e1bffd15 	stw	r6,-12(fp)
   8b640:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8b644:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8b648:	e0bffc17 	ldw	r2,-16(fp)
   8b64c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8b650:	00003a06 	br	8b73c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8b654:	e0bffb17 	ldw	r2,-20(fp)
   8b658:	10800c17 	ldw	r2,48(r2)
   8b65c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8b660:	e0bffb17 	ldw	r2,-20(fp)
   8b664:	10800d17 	ldw	r2,52(r2)
   8b668:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8b66c:	e0fffa17 	ldw	r3,-24(fp)
   8b670:	e0bff917 	ldw	r2,-28(fp)
   8b674:	1880062e 	bgeu	r3,r2,8b690 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8b678:	e0fff917 	ldw	r3,-28(fp)
   8b67c:	e0bffa17 	ldw	r2,-24(fp)
   8b680:	1885c83a 	sub	r2,r3,r2
   8b684:	10bfffc4 	addi	r2,r2,-1
   8b688:	e0bff815 	stw	r2,-32(fp)
   8b68c:	00000c06 	br	8b6c0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8b690:	e0bff917 	ldw	r2,-28(fp)
   8b694:	1005003a 	cmpeq	r2,r2,zero
   8b698:	1000051e 	bne	r2,zero,8b6b0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8b69c:	00820004 	movi	r2,2048
   8b6a0:	e0fffa17 	ldw	r3,-24(fp)
   8b6a4:	10c5c83a 	sub	r2,r2,r3
   8b6a8:	e0bff815 	stw	r2,-32(fp)
   8b6ac:	00000406 	br	8b6c0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8b6b0:	0081ffc4 	movi	r2,2047
   8b6b4:	e0fffa17 	ldw	r3,-24(fp)
   8b6b8:	10c5c83a 	sub	r2,r2,r3
   8b6bc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8b6c0:	e0bff817 	ldw	r2,-32(fp)
   8b6c4:	1005003a 	cmpeq	r2,r2,zero
   8b6c8:	10001f1e 	bne	r2,zero,8b748 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   8b6cc:	e0fffd17 	ldw	r3,-12(fp)
   8b6d0:	e0bff817 	ldw	r2,-32(fp)
   8b6d4:	1880022e 	bgeu	r3,r2,8b6e0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8b6d8:	e0bffd17 	ldw	r2,-12(fp)
   8b6dc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8b6e0:	e0bffb17 	ldw	r2,-20(fp)
   8b6e4:	10c20e04 	addi	r3,r2,2104
   8b6e8:	e0bffa17 	ldw	r2,-24(fp)
   8b6ec:	1885883a 	add	r2,r3,r2
   8b6f0:	e0fffc17 	ldw	r3,-16(fp)
   8b6f4:	1009883a 	mov	r4,r2
   8b6f8:	180b883a 	mov	r5,r3
   8b6fc:	e1bff817 	ldw	r6,-32(fp)
   8b700:	0085a140 	call	85a14 <memcpy>
      ptr   += n;
   8b704:	e0fff817 	ldw	r3,-32(fp)
   8b708:	e0bffc17 	ldw	r2,-16(fp)
   8b70c:	10c5883a 	add	r2,r2,r3
   8b710:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8b714:	e0fffd17 	ldw	r3,-12(fp)
   8b718:	e0bff817 	ldw	r2,-32(fp)
   8b71c:	1885c83a 	sub	r2,r3,r2
   8b720:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b724:	e0fffa17 	ldw	r3,-24(fp)
   8b728:	e0bff817 	ldw	r2,-32(fp)
   8b72c:	1885883a 	add	r2,r3,r2
   8b730:	10c1ffcc 	andi	r3,r2,2047
   8b734:	e0bffb17 	ldw	r2,-20(fp)
   8b738:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8b73c:	e0bffd17 	ldw	r2,-12(fp)
   8b740:	10800048 	cmpgei	r2,r2,1
   8b744:	103fc31e 	bne	r2,zero,8b654 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b748:	0005303a 	rdctl	r2,status
   8b74c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b750:	e0fff517 	ldw	r3,-44(fp)
   8b754:	00bfff84 	movi	r2,-2
   8b758:	1884703a 	and	r2,r3,r2
   8b75c:	1001703a 	wrctl	status,r2
  
  return context;
   8b760:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8b764:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8b768:	e0bffb17 	ldw	r2,-20(fp)
   8b76c:	10800817 	ldw	r2,32(r2)
   8b770:	10c00094 	ori	r3,r2,2
   8b774:	e0bffb17 	ldw	r2,-20(fp)
   8b778:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8b77c:	e0bffb17 	ldw	r2,-20(fp)
   8b780:	10800017 	ldw	r2,0(r2)
   8b784:	11000104 	addi	r4,r2,4
   8b788:	e0bffb17 	ldw	r2,-20(fp)
   8b78c:	10800817 	ldw	r2,32(r2)
   8b790:	1007883a 	mov	r3,r2
   8b794:	2005883a 	mov	r2,r4
   8b798:	10c00035 	stwio	r3,0(r2)
   8b79c:	e0bff717 	ldw	r2,-36(fp)
   8b7a0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b7a4:	e0bff417 	ldw	r2,-48(fp)
   8b7a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8b7ac:	e0bffd17 	ldw	r2,-12(fp)
   8b7b0:	10800050 	cmplti	r2,r2,1
   8b7b4:	1000111e 	bne	r2,zero,8b7fc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   8b7b8:	e0bffe17 	ldw	r2,-8(fp)
   8b7bc:	1090000c 	andi	r2,r2,16384
   8b7c0:	1004c03a 	cmpne	r2,r2,zero
   8b7c4:	1000101e 	bne	r2,zero,8b808 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8b7c8:	e0bffb17 	ldw	r2,-20(fp)
   8b7cc:	10c00d17 	ldw	r3,52(r2)
   8b7d0:	e0bff917 	ldw	r2,-28(fp)
   8b7d4:	1880051e 	bne	r3,r2,8b7ec <altera_avalon_jtag_uart_write+0x1c8>
   8b7d8:	e0bffb17 	ldw	r2,-20(fp)
   8b7dc:	10c00917 	ldw	r3,36(r2)
   8b7e0:	e0bffb17 	ldw	r2,-20(fp)
   8b7e4:	10800117 	ldw	r2,4(r2)
   8b7e8:	18bff736 	bltu	r3,r2,8b7c8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8b7ec:	e0bffb17 	ldw	r2,-20(fp)
   8b7f0:	10c00d17 	ldw	r3,52(r2)
   8b7f4:	e0bff917 	ldw	r2,-28(fp)
   8b7f8:	18800326 	beq	r3,r2,8b808 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   8b7fc:	e0bffd17 	ldw	r2,-12(fp)
   8b800:	10800048 	cmpgei	r2,r2,1
   8b804:	103fcd1e 	bne	r2,zero,8b73c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8b808:	e0fffc17 	ldw	r3,-16(fp)
   8b80c:	e0bff617 	ldw	r2,-40(fp)
   8b810:	18800526 	beq	r3,r2,8b828 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8b814:	e0fffc17 	ldw	r3,-16(fp)
   8b818:	e0bff617 	ldw	r2,-40(fp)
   8b81c:	1887c83a 	sub	r3,r3,r2
   8b820:	e0ffff15 	stw	r3,-4(fp)
   8b824:	00000906 	br	8b84c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   8b828:	e0bffe17 	ldw	r2,-8(fp)
   8b82c:	1090000c 	andi	r2,r2,16384
   8b830:	1005003a 	cmpeq	r2,r2,zero
   8b834:	1000031e 	bne	r2,zero,8b844 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   8b838:	00bffd44 	movi	r2,-11
   8b83c:	e0bfff15 	stw	r2,-4(fp)
   8b840:	00000206 	br	8b84c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   8b844:	00bffec4 	movi	r2,-5
   8b848:	e0bfff15 	stw	r2,-4(fp)
   8b84c:	e0bfff17 	ldw	r2,-4(fp)
}
   8b850:	e037883a 	mov	sp,fp
   8b854:	dfc00117 	ldw	ra,4(sp)
   8b858:	df000017 	ldw	fp,0(sp)
   8b85c:	dec00204 	addi	sp,sp,8
   8b860:	f800283a 	ret

0008b864 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8b864:	defff404 	addi	sp,sp,-48
   8b868:	df000b15 	stw	fp,44(sp)
   8b86c:	df000b04 	addi	fp,sp,44
   8b870:	e13ffb15 	stw	r4,-20(fp)
   8b874:	e17ffc15 	stw	r5,-16(fp)
   8b878:	e1bffd15 	stw	r6,-12(fp)
   8b87c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8b880:	e03ff915 	stw	zero,-28(fp)
   8b884:	00800274 	movhi	r2,9
   8b888:	10811c04 	addi	r2,r2,1136
   8b88c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8b890:	1005003a 	cmpeq	r2,r2,zero
   8b894:	1000411e 	bne	r2,zero,8b99c <alt_alarm_start+0x138>
  {
    if (alarm)
   8b898:	e0bffb17 	ldw	r2,-20(fp)
   8b89c:	1005003a 	cmpeq	r2,r2,zero
   8b8a0:	10003b1e 	bne	r2,zero,8b990 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8b8a4:	e0fffb17 	ldw	r3,-20(fp)
   8b8a8:	e0bffd17 	ldw	r2,-12(fp)
   8b8ac:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8b8b0:	e0fffb17 	ldw	r3,-20(fp)
   8b8b4:	e0bffe17 	ldw	r2,-8(fp)
   8b8b8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b8bc:	0005303a 	rdctl	r2,status
   8b8c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b8c4:	e0fff817 	ldw	r3,-32(fp)
   8b8c8:	00bfff84 	movi	r2,-2
   8b8cc:	1884703a 	and	r2,r3,r2
   8b8d0:	1001703a 	wrctl	status,r2
  
  return context;
   8b8d4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8b8d8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8b8dc:	00800274 	movhi	r2,9
   8b8e0:	10811d04 	addi	r2,r2,1140
   8b8e4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8b8e8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8b8ec:	e0fffc17 	ldw	r3,-16(fp)
   8b8f0:	e0bff917 	ldw	r2,-28(fp)
   8b8f4:	1885883a 	add	r2,r3,r2
   8b8f8:	10c00044 	addi	r3,r2,1
   8b8fc:	e0bffb17 	ldw	r2,-20(fp)
   8b900:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8b904:	e0bffb17 	ldw	r2,-20(fp)
   8b908:	10c00217 	ldw	r3,8(r2)
   8b90c:	e0bff917 	ldw	r2,-28(fp)
   8b910:	1880042e 	bgeu	r3,r2,8b924 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8b914:	e0fffb17 	ldw	r3,-20(fp)
   8b918:	00800044 	movi	r2,1
   8b91c:	18800405 	stb	r2,16(r3)
   8b920:	00000206 	br	8b92c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8b924:	e0bffb17 	ldw	r2,-20(fp)
   8b928:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8b92c:	e0fffb17 	ldw	r3,-20(fp)
   8b930:	00800274 	movhi	r2,9
   8b934:	10ba7804 	addi	r2,r2,-5664
   8b938:	e0bff615 	stw	r2,-40(fp)
   8b93c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8b940:	e0fff717 	ldw	r3,-36(fp)
   8b944:	e0bff617 	ldw	r2,-40(fp)
   8b948:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8b94c:	e0bff617 	ldw	r2,-40(fp)
   8b950:	10c00017 	ldw	r3,0(r2)
   8b954:	e0bff717 	ldw	r2,-36(fp)
   8b958:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8b95c:	e0bff617 	ldw	r2,-40(fp)
   8b960:	10c00017 	ldw	r3,0(r2)
   8b964:	e0bff717 	ldw	r2,-36(fp)
   8b968:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8b96c:	e0fff617 	ldw	r3,-40(fp)
   8b970:	e0bff717 	ldw	r2,-36(fp)
   8b974:	18800015 	stw	r2,0(r3)
   8b978:	e0bffa17 	ldw	r2,-24(fp)
   8b97c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b980:	e0bff517 	ldw	r2,-44(fp)
   8b984:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8b988:	e03fff15 	stw	zero,-4(fp)
   8b98c:	00000506 	br	8b9a4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8b990:	00bffa84 	movi	r2,-22
   8b994:	e0bfff15 	stw	r2,-4(fp)
   8b998:	00000206 	br	8b9a4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8b99c:	00bfde84 	movi	r2,-134
   8b9a0:	e0bfff15 	stw	r2,-4(fp)
   8b9a4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8b9a8:	e037883a 	mov	sp,fp
   8b9ac:	df000017 	ldw	fp,0(sp)
   8b9b0:	dec00104 	addi	sp,sp,4
   8b9b4:	f800283a 	ret

0008b9b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8b9b8:	deffff04 	addi	sp,sp,-4
   8b9bc:	df000015 	stw	fp,0(sp)
   8b9c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8b9c4:	e037883a 	mov	sp,fp
   8b9c8:	df000017 	ldw	fp,0(sp)
   8b9cc:	dec00104 	addi	sp,sp,4
   8b9d0:	f800283a 	ret

0008b9d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8b9d4:	defff904 	addi	sp,sp,-28
   8b9d8:	dfc00615 	stw	ra,24(sp)
   8b9dc:	df000515 	stw	fp,20(sp)
   8b9e0:	df000504 	addi	fp,sp,20
   8b9e4:	e13ffd15 	stw	r4,-12(fp)
   8b9e8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8b9ec:	e0bffd17 	ldw	r2,-12(fp)
   8b9f0:	1005003a 	cmpeq	r2,r2,zero
   8b9f4:	1000041e 	bne	r2,zero,8ba08 <alt_dev_llist_insert+0x34>
   8b9f8:	e0bffd17 	ldw	r2,-12(fp)
   8b9fc:	10800217 	ldw	r2,8(r2)
   8ba00:	1004c03a 	cmpne	r2,r2,zero
   8ba04:	1000071e 	bne	r2,zero,8ba24 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   8ba08:	008ba880 	call	8ba88 <alt_get_errno>
   8ba0c:	1007883a 	mov	r3,r2
   8ba10:	00800584 	movi	r2,22
   8ba14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8ba18:	00bffa84 	movi	r2,-22
   8ba1c:	e0bfff15 	stw	r2,-4(fp)
   8ba20:	00001306 	br	8ba70 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8ba24:	e0fffd17 	ldw	r3,-12(fp)
   8ba28:	e0bffe17 	ldw	r2,-8(fp)
   8ba2c:	e0bffb15 	stw	r2,-20(fp)
   8ba30:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8ba34:	e0fffc17 	ldw	r3,-16(fp)
   8ba38:	e0bffb17 	ldw	r2,-20(fp)
   8ba3c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8ba40:	e0bffb17 	ldw	r2,-20(fp)
   8ba44:	10c00017 	ldw	r3,0(r2)
   8ba48:	e0bffc17 	ldw	r2,-16(fp)
   8ba4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8ba50:	e0bffb17 	ldw	r2,-20(fp)
   8ba54:	10c00017 	ldw	r3,0(r2)
   8ba58:	e0bffc17 	ldw	r2,-16(fp)
   8ba5c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8ba60:	e0fffb17 	ldw	r3,-20(fp)
   8ba64:	e0bffc17 	ldw	r2,-16(fp)
   8ba68:	18800015 	stw	r2,0(r3)

  return 0;  
   8ba6c:	e03fff15 	stw	zero,-4(fp)
   8ba70:	e0bfff17 	ldw	r2,-4(fp)
}
   8ba74:	e037883a 	mov	sp,fp
   8ba78:	dfc00117 	ldw	ra,4(sp)
   8ba7c:	df000017 	ldw	fp,0(sp)
   8ba80:	dec00204 	addi	sp,sp,8
   8ba84:	f800283a 	ret

0008ba88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ba88:	defffd04 	addi	sp,sp,-12
   8ba8c:	dfc00215 	stw	ra,8(sp)
   8ba90:	df000115 	stw	fp,4(sp)
   8ba94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8ba98:	00800274 	movhi	r2,9
   8ba9c:	10ba7504 	addi	r2,r2,-5676
   8baa0:	10800017 	ldw	r2,0(r2)
   8baa4:	1005003a 	cmpeq	r2,r2,zero
   8baa8:	1000061e 	bne	r2,zero,8bac4 <alt_get_errno+0x3c>
   8baac:	00800274 	movhi	r2,9
   8bab0:	10ba7504 	addi	r2,r2,-5676
   8bab4:	10800017 	ldw	r2,0(r2)
   8bab8:	103ee83a 	callr	r2
   8babc:	e0bfff15 	stw	r2,-4(fp)
   8bac0:	00000306 	br	8bad0 <alt_get_errno+0x48>
   8bac4:	00800274 	movhi	r2,9
   8bac8:	10811704 	addi	r2,r2,1116
   8bacc:	e0bfff15 	stw	r2,-4(fp)
   8bad0:	e0bfff17 	ldw	r2,-4(fp)
}
   8bad4:	e037883a 	mov	sp,fp
   8bad8:	dfc00117 	ldw	ra,4(sp)
   8badc:	df000017 	ldw	fp,0(sp)
   8bae0:	dec00204 	addi	sp,sp,8
   8bae4:	f800283a 	ret

0008bae8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8bae8:	defffd04 	addi	sp,sp,-12
   8baec:	dfc00215 	stw	ra,8(sp)
   8baf0:	df000115 	stw	fp,4(sp)
   8baf4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8baf8:	00bfff04 	movi	r2,-4
   8bafc:	00c00274 	movhi	r3,9
   8bb00:	18f2e304 	addi	r3,r3,-13428
   8bb04:	1885883a 	add	r2,r3,r2
   8bb08:	e0bfff15 	stw	r2,-4(fp)
   8bb0c:	00000606 	br	8bb28 <_do_ctors+0x40>
        (*ctor) (); 
   8bb10:	e0bfff17 	ldw	r2,-4(fp)
   8bb14:	10800017 	ldw	r2,0(r2)
   8bb18:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8bb1c:	e0bfff17 	ldw	r2,-4(fp)
   8bb20:	10bfff04 	addi	r2,r2,-4
   8bb24:	e0bfff15 	stw	r2,-4(fp)
   8bb28:	e0ffff17 	ldw	r3,-4(fp)
   8bb2c:	00800274 	movhi	r2,9
   8bb30:	10b2e204 	addi	r2,r2,-13432
   8bb34:	18bff62e 	bgeu	r3,r2,8bb10 <_do_ctors+0x28>
        (*ctor) (); 
}
   8bb38:	e037883a 	mov	sp,fp
   8bb3c:	dfc00117 	ldw	ra,4(sp)
   8bb40:	df000017 	ldw	fp,0(sp)
   8bb44:	dec00204 	addi	sp,sp,8
   8bb48:	f800283a 	ret

0008bb4c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8bb4c:	defffd04 	addi	sp,sp,-12
   8bb50:	dfc00215 	stw	ra,8(sp)
   8bb54:	df000115 	stw	fp,4(sp)
   8bb58:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8bb5c:	00bfff04 	movi	r2,-4
   8bb60:	00c00274 	movhi	r3,9
   8bb64:	18f2e304 	addi	r3,r3,-13428
   8bb68:	1885883a 	add	r2,r3,r2
   8bb6c:	e0bfff15 	stw	r2,-4(fp)
   8bb70:	00000606 	br	8bb8c <_do_dtors+0x40>
        (*dtor) (); 
   8bb74:	e0bfff17 	ldw	r2,-4(fp)
   8bb78:	10800017 	ldw	r2,0(r2)
   8bb7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8bb80:	e0bfff17 	ldw	r2,-4(fp)
   8bb84:	10bfff04 	addi	r2,r2,-4
   8bb88:	e0bfff15 	stw	r2,-4(fp)
   8bb8c:	e0ffff17 	ldw	r3,-4(fp)
   8bb90:	00800274 	movhi	r2,9
   8bb94:	10b2e304 	addi	r2,r2,-13428
   8bb98:	18bff62e 	bgeu	r3,r2,8bb74 <_do_dtors+0x28>
        (*dtor) (); 
}
   8bb9c:	e037883a 	mov	sp,fp
   8bba0:	dfc00117 	ldw	ra,4(sp)
   8bba4:	df000017 	ldw	fp,0(sp)
   8bba8:	dec00204 	addi	sp,sp,8
   8bbac:	f800283a 	ret

0008bbb0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8bbb0:	deffff04 	addi	sp,sp,-4
   8bbb4:	df000015 	stw	fp,0(sp)
   8bbb8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8bbbc:	e037883a 	mov	sp,fp
   8bbc0:	df000017 	ldw	fp,0(sp)
   8bbc4:	dec00104 	addi	sp,sp,4
   8bbc8:	f800283a 	ret

0008bbcc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8bbcc:	defff904 	addi	sp,sp,-28
   8bbd0:	dfc00615 	stw	ra,24(sp)
   8bbd4:	df000515 	stw	fp,20(sp)
   8bbd8:	df000504 	addi	fp,sp,20
   8bbdc:	e13ffc15 	stw	r4,-16(fp)
   8bbe0:	e17ffd15 	stw	r5,-12(fp)
   8bbe4:	e1bffe15 	stw	r6,-8(fp)
   8bbe8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8bbec:	e0800217 	ldw	r2,8(fp)
   8bbf0:	d8800015 	stw	r2,0(sp)
   8bbf4:	e13ffc17 	ldw	r4,-16(fp)
   8bbf8:	e17ffd17 	ldw	r5,-12(fp)
   8bbfc:	e1bffe17 	ldw	r6,-8(fp)
   8bc00:	e1ffff17 	ldw	r7,-4(fp)
   8bc04:	008bda00 	call	8bda0 <alt_iic_isr_register>
}  
   8bc08:	e037883a 	mov	sp,fp
   8bc0c:	dfc00117 	ldw	ra,4(sp)
   8bc10:	df000017 	ldw	fp,0(sp)
   8bc14:	dec00204 	addi	sp,sp,8
   8bc18:	f800283a 	ret

0008bc1c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8bc1c:	defff904 	addi	sp,sp,-28
   8bc20:	df000615 	stw	fp,24(sp)
   8bc24:	df000604 	addi	fp,sp,24
   8bc28:	e13ffe15 	stw	r4,-8(fp)
   8bc2c:	e17fff15 	stw	r5,-4(fp)
   8bc30:	e0bfff17 	ldw	r2,-4(fp)
   8bc34:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bc38:	0005303a 	rdctl	r2,status
   8bc3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bc40:	e0fffb17 	ldw	r3,-20(fp)
   8bc44:	00bfff84 	movi	r2,-2
   8bc48:	1884703a 	and	r2,r3,r2
   8bc4c:	1001703a 	wrctl	status,r2
  
  return context;
   8bc50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8bc54:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8bc58:	e0fffc17 	ldw	r3,-16(fp)
   8bc5c:	00800044 	movi	r2,1
   8bc60:	10c4983a 	sll	r2,r2,r3
   8bc64:	1007883a 	mov	r3,r2
   8bc68:	00800274 	movhi	r2,9
   8bc6c:	10811804 	addi	r2,r2,1120
   8bc70:	10800017 	ldw	r2,0(r2)
   8bc74:	1886b03a 	or	r3,r3,r2
   8bc78:	00800274 	movhi	r2,9
   8bc7c:	10811804 	addi	r2,r2,1120
   8bc80:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8bc84:	00800274 	movhi	r2,9
   8bc88:	10811804 	addi	r2,r2,1120
   8bc8c:	10800017 	ldw	r2,0(r2)
   8bc90:	100170fa 	wrctl	ienable,r2
   8bc94:	e0bffd17 	ldw	r2,-12(fp)
   8bc98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bc9c:	e0bffa17 	ldw	r2,-24(fp)
   8bca0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8bca4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8bca8:	e037883a 	mov	sp,fp
   8bcac:	df000017 	ldw	fp,0(sp)
   8bcb0:	dec00104 	addi	sp,sp,4
   8bcb4:	f800283a 	ret

0008bcb8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8bcb8:	defff904 	addi	sp,sp,-28
   8bcbc:	df000615 	stw	fp,24(sp)
   8bcc0:	df000604 	addi	fp,sp,24
   8bcc4:	e13ffe15 	stw	r4,-8(fp)
   8bcc8:	e17fff15 	stw	r5,-4(fp)
   8bccc:	e0bfff17 	ldw	r2,-4(fp)
   8bcd0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bcd4:	0005303a 	rdctl	r2,status
   8bcd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bcdc:	e0fffb17 	ldw	r3,-20(fp)
   8bce0:	00bfff84 	movi	r2,-2
   8bce4:	1884703a 	and	r2,r3,r2
   8bce8:	1001703a 	wrctl	status,r2
  
  return context;
   8bcec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8bcf0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8bcf4:	e0fffc17 	ldw	r3,-16(fp)
   8bcf8:	00800044 	movi	r2,1
   8bcfc:	10c4983a 	sll	r2,r2,r3
   8bd00:	0084303a 	nor	r2,zero,r2
   8bd04:	1007883a 	mov	r3,r2
   8bd08:	00800274 	movhi	r2,9
   8bd0c:	10811804 	addi	r2,r2,1120
   8bd10:	10800017 	ldw	r2,0(r2)
   8bd14:	1886703a 	and	r3,r3,r2
   8bd18:	00800274 	movhi	r2,9
   8bd1c:	10811804 	addi	r2,r2,1120
   8bd20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8bd24:	00800274 	movhi	r2,9
   8bd28:	10811804 	addi	r2,r2,1120
   8bd2c:	10800017 	ldw	r2,0(r2)
   8bd30:	100170fa 	wrctl	ienable,r2
   8bd34:	e0bffd17 	ldw	r2,-12(fp)
   8bd38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bd3c:	e0bffa17 	ldw	r2,-24(fp)
   8bd40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8bd44:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8bd48:	e037883a 	mov	sp,fp
   8bd4c:	df000017 	ldw	fp,0(sp)
   8bd50:	dec00104 	addi	sp,sp,4
   8bd54:	f800283a 	ret

0008bd58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8bd58:	defffc04 	addi	sp,sp,-16
   8bd5c:	df000315 	stw	fp,12(sp)
   8bd60:	df000304 	addi	fp,sp,12
   8bd64:	e13ffe15 	stw	r4,-8(fp)
   8bd68:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8bd6c:	000530fa 	rdctl	r2,ienable
   8bd70:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8bd74:	e0ffff17 	ldw	r3,-4(fp)
   8bd78:	00800044 	movi	r2,1
   8bd7c:	10c4983a 	sll	r2,r2,r3
   8bd80:	1007883a 	mov	r3,r2
   8bd84:	e0bffd17 	ldw	r2,-12(fp)
   8bd88:	1884703a 	and	r2,r3,r2
   8bd8c:	1004c03a 	cmpne	r2,r2,zero
}
   8bd90:	e037883a 	mov	sp,fp
   8bd94:	df000017 	ldw	fp,0(sp)
   8bd98:	dec00104 	addi	sp,sp,4
   8bd9c:	f800283a 	ret

0008bda0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8bda0:	defff404 	addi	sp,sp,-48
   8bda4:	dfc00b15 	stw	ra,44(sp)
   8bda8:	df000a15 	stw	fp,40(sp)
   8bdac:	df000a04 	addi	fp,sp,40
   8bdb0:	e13ffb15 	stw	r4,-20(fp)
   8bdb4:	e17ffc15 	stw	r5,-16(fp)
   8bdb8:	e1bffd15 	stw	r6,-12(fp)
   8bdbc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8bdc0:	00bffa84 	movi	r2,-22
   8bdc4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8bdc8:	e0bffc17 	ldw	r2,-16(fp)
   8bdcc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8bdd0:	e0bff917 	ldw	r2,-28(fp)
   8bdd4:	10800808 	cmpgei	r2,r2,32
   8bdd8:	1000291e 	bne	r2,zero,8be80 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bddc:	0005303a 	rdctl	r2,status
   8bde0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bde4:	e0fff717 	ldw	r3,-36(fp)
   8bde8:	00bfff84 	movi	r2,-2
   8bdec:	1884703a 	and	r2,r3,r2
   8bdf0:	1001703a 	wrctl	status,r2
  
  return context;
   8bdf4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8bdf8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8bdfc:	e0bff917 	ldw	r2,-28(fp)
   8be00:	00c00274 	movhi	r3,9
   8be04:	18c12804 	addi	r3,r3,1184
   8be08:	100490fa 	slli	r2,r2,3
   8be0c:	10c7883a 	add	r3,r2,r3
   8be10:	e0bffd17 	ldw	r2,-12(fp)
   8be14:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8be18:	e0bff917 	ldw	r2,-28(fp)
   8be1c:	00c00274 	movhi	r3,9
   8be20:	18c12804 	addi	r3,r3,1184
   8be24:	100490fa 	slli	r2,r2,3
   8be28:	10c5883a 	add	r2,r2,r3
   8be2c:	10c00104 	addi	r3,r2,4
   8be30:	e0bffe17 	ldw	r2,-8(fp)
   8be34:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8be38:	e0bffd17 	ldw	r2,-12(fp)
   8be3c:	1005003a 	cmpeq	r2,r2,zero
   8be40:	1000051e 	bne	r2,zero,8be58 <alt_iic_isr_register+0xb8>
   8be44:	e17ff917 	ldw	r5,-28(fp)
   8be48:	e13ffb17 	ldw	r4,-20(fp)
   8be4c:	008bc1c0 	call	8bc1c <alt_ic_irq_enable>
   8be50:	e0bfff15 	stw	r2,-4(fp)
   8be54:	00000406 	br	8be68 <alt_iic_isr_register+0xc8>
   8be58:	e17ff917 	ldw	r5,-28(fp)
   8be5c:	e13ffb17 	ldw	r4,-20(fp)
   8be60:	008bcb80 	call	8bcb8 <alt_ic_irq_disable>
   8be64:	e0bfff15 	stw	r2,-4(fp)
   8be68:	e0bfff17 	ldw	r2,-4(fp)
   8be6c:	e0bffa15 	stw	r2,-24(fp)
   8be70:	e0bff817 	ldw	r2,-32(fp)
   8be74:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8be78:	e0bff617 	ldw	r2,-40(fp)
   8be7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8be80:	e0bffa17 	ldw	r2,-24(fp)
}
   8be84:	e037883a 	mov	sp,fp
   8be88:	dfc00117 	ldw	ra,4(sp)
   8be8c:	df000017 	ldw	fp,0(sp)
   8be90:	dec00204 	addi	sp,sp,8
   8be94:	f800283a 	ret

0008be98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8be98:	defff804 	addi	sp,sp,-32
   8be9c:	dfc00715 	stw	ra,28(sp)
   8bea0:	df000615 	stw	fp,24(sp)
   8bea4:	dc000515 	stw	r16,20(sp)
   8bea8:	df000504 	addi	fp,sp,20
   8beac:	e13ffc15 	stw	r4,-16(fp)
   8beb0:	e17ffd15 	stw	r5,-12(fp)
   8beb4:	e1bffe15 	stw	r6,-8(fp)
   8beb8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8bebc:	e13ffd17 	ldw	r4,-12(fp)
   8bec0:	e17ffe17 	ldw	r5,-8(fp)
   8bec4:	e1bfff17 	ldw	r6,-4(fp)
   8bec8:	008c0e00 	call	8c0e0 <open>
   8becc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8bed0:	e0bffb17 	ldw	r2,-20(fp)
   8bed4:	1004803a 	cmplt	r2,r2,zero
   8bed8:	10001f1e 	bne	r2,zero,8bf58 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8bedc:	e13ffb17 	ldw	r4,-20(fp)
   8bee0:	04000274 	movhi	r16,9
   8bee4:	8435f204 	addi	r16,r16,-10296
   8bee8:	01400304 	movi	r5,12
   8beec:	00805cc0 	call	805cc <__mulsi3>
   8bef0:	1405883a 	add	r2,r2,r16
   8bef4:	10c00017 	ldw	r3,0(r2)
   8bef8:	e0bffc17 	ldw	r2,-16(fp)
   8befc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8bf00:	e13ffb17 	ldw	r4,-20(fp)
   8bf04:	04000274 	movhi	r16,9
   8bf08:	8435f204 	addi	r16,r16,-10296
   8bf0c:	01400304 	movi	r5,12
   8bf10:	00805cc0 	call	805cc <__mulsi3>
   8bf14:	1405883a 	add	r2,r2,r16
   8bf18:	10800104 	addi	r2,r2,4
   8bf1c:	10c00017 	ldw	r3,0(r2)
   8bf20:	e0bffc17 	ldw	r2,-16(fp)
   8bf24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8bf28:	e13ffb17 	ldw	r4,-20(fp)
   8bf2c:	04000274 	movhi	r16,9
   8bf30:	8435f204 	addi	r16,r16,-10296
   8bf34:	01400304 	movi	r5,12
   8bf38:	00805cc0 	call	805cc <__mulsi3>
   8bf3c:	1405883a 	add	r2,r2,r16
   8bf40:	10800204 	addi	r2,r2,8
   8bf44:	10c00017 	ldw	r3,0(r2)
   8bf48:	e0bffc17 	ldw	r2,-16(fp)
   8bf4c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8bf50:	e13ffb17 	ldw	r4,-20(fp)
   8bf54:	008aa500 	call	8aa50 <alt_release_fd>
  }
} 
   8bf58:	e037883a 	mov	sp,fp
   8bf5c:	dfc00217 	ldw	ra,8(sp)
   8bf60:	df000117 	ldw	fp,4(sp)
   8bf64:	dc000017 	ldw	r16,0(sp)
   8bf68:	dec00304 	addi	sp,sp,12
   8bf6c:	f800283a 	ret

0008bf70 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8bf70:	defffb04 	addi	sp,sp,-20
   8bf74:	dfc00415 	stw	ra,16(sp)
   8bf78:	df000315 	stw	fp,12(sp)
   8bf7c:	df000304 	addi	fp,sp,12
   8bf80:	e13ffd15 	stw	r4,-12(fp)
   8bf84:	e17ffe15 	stw	r5,-8(fp)
   8bf88:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8bf8c:	01000274 	movhi	r4,9
   8bf90:	2135f504 	addi	r4,r4,-10284
   8bf94:	e17ffd17 	ldw	r5,-12(fp)
   8bf98:	01800044 	movi	r6,1
   8bf9c:	01c07fc4 	movi	r7,511
   8bfa0:	008be980 	call	8be98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8bfa4:	01000274 	movhi	r4,9
   8bfa8:	2135f204 	addi	r4,r4,-10296
   8bfac:	e17ffe17 	ldw	r5,-8(fp)
   8bfb0:	000d883a 	mov	r6,zero
   8bfb4:	01c07fc4 	movi	r7,511
   8bfb8:	008be980 	call	8be98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8bfbc:	01000274 	movhi	r4,9
   8bfc0:	2135f804 	addi	r4,r4,-10272
   8bfc4:	e17fff17 	ldw	r5,-4(fp)
   8bfc8:	01800044 	movi	r6,1
   8bfcc:	01c07fc4 	movi	r7,511
   8bfd0:	008be980 	call	8be98 <alt_open_fd>
}  
   8bfd4:	e037883a 	mov	sp,fp
   8bfd8:	dfc00117 	ldw	ra,4(sp)
   8bfdc:	df000017 	ldw	fp,0(sp)
   8bfe0:	dec00204 	addi	sp,sp,8
   8bfe4:	f800283a 	ret

0008bfe8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8bfe8:	defffa04 	addi	sp,sp,-24
   8bfec:	dfc00515 	stw	ra,20(sp)
   8bff0:	df000415 	stw	fp,16(sp)
   8bff4:	dc000315 	stw	r16,12(sp)
   8bff8:	df000304 	addi	fp,sp,12
   8bffc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8c000:	e0bffe17 	ldw	r2,-8(fp)
   8c004:	10800217 	ldw	r2,8(r2)
   8c008:	10d00034 	orhi	r3,r2,16384
   8c00c:	e0bffe17 	ldw	r2,-8(fp)
   8c010:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c014:	e03ffd15 	stw	zero,-12(fp)
   8c018:	00002306 	br	8c0a8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8c01c:	e13ffd17 	ldw	r4,-12(fp)
   8c020:	04000274 	movhi	r16,9
   8c024:	8435f204 	addi	r16,r16,-10296
   8c028:	01400304 	movi	r5,12
   8c02c:	00805cc0 	call	805cc <__mulsi3>
   8c030:	1405883a 	add	r2,r2,r16
   8c034:	10c00017 	ldw	r3,0(r2)
   8c038:	e0bffe17 	ldw	r2,-8(fp)
   8c03c:	10800017 	ldw	r2,0(r2)
   8c040:	1880161e 	bne	r3,r2,8c09c <alt_file_locked+0xb4>
   8c044:	e13ffd17 	ldw	r4,-12(fp)
   8c048:	04000274 	movhi	r16,9
   8c04c:	8435f204 	addi	r16,r16,-10296
   8c050:	01400304 	movi	r5,12
   8c054:	00805cc0 	call	805cc <__mulsi3>
   8c058:	1405883a 	add	r2,r2,r16
   8c05c:	10800204 	addi	r2,r2,8
   8c060:	10800017 	ldw	r2,0(r2)
   8c064:	1004403a 	cmpge	r2,r2,zero
   8c068:	10000c1e 	bne	r2,zero,8c09c <alt_file_locked+0xb4>
   8c06c:	e13ffd17 	ldw	r4,-12(fp)
   8c070:	01400304 	movi	r5,12
   8c074:	00805cc0 	call	805cc <__mulsi3>
   8c078:	1007883a 	mov	r3,r2
   8c07c:	00800274 	movhi	r2,9
   8c080:	10b5f204 	addi	r2,r2,-10296
   8c084:	1887883a 	add	r3,r3,r2
   8c088:	e0bffe17 	ldw	r2,-8(fp)
   8c08c:	18800326 	beq	r3,r2,8c09c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8c090:	00bffcc4 	movi	r2,-13
   8c094:	e0bfff15 	stw	r2,-4(fp)
   8c098:	00000a06 	br	8c0c4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c09c:	e0bffd17 	ldw	r2,-12(fp)
   8c0a0:	10800044 	addi	r2,r2,1
   8c0a4:	e0bffd15 	stw	r2,-12(fp)
   8c0a8:	00800274 	movhi	r2,9
   8c0ac:	10ba7404 	addi	r2,r2,-5680
   8c0b0:	10800017 	ldw	r2,0(r2)
   8c0b4:	1007883a 	mov	r3,r2
   8c0b8:	e0bffd17 	ldw	r2,-12(fp)
   8c0bc:	18bfd72e 	bgeu	r3,r2,8c01c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8c0c0:	e03fff15 	stw	zero,-4(fp)
   8c0c4:	e0bfff17 	ldw	r2,-4(fp)
}
   8c0c8:	e037883a 	mov	sp,fp
   8c0cc:	dfc00217 	ldw	ra,8(sp)
   8c0d0:	df000117 	ldw	fp,4(sp)
   8c0d4:	dc000017 	ldw	r16,0(sp)
   8c0d8:	dec00304 	addi	sp,sp,12
   8c0dc:	f800283a 	ret

0008c0e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8c0e0:	defff404 	addi	sp,sp,-48
   8c0e4:	dfc00b15 	stw	ra,44(sp)
   8c0e8:	df000a15 	stw	fp,40(sp)
   8c0ec:	df000a04 	addi	fp,sp,40
   8c0f0:	e13ffb15 	stw	r4,-20(fp)
   8c0f4:	e17ffc15 	stw	r5,-16(fp)
   8c0f8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8c0fc:	00bfffc4 	movi	r2,-1
   8c100:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8c104:	00bffb44 	movi	r2,-19
   8c108:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8c10c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8c110:	e13ffb17 	ldw	r4,-20(fp)
   8c114:	01400274 	movhi	r5,9
   8c118:	297a7204 	addi	r5,r5,-5688
   8c11c:	008c4900 	call	8c490 <alt_find_dev>
   8c120:	e0bffa15 	stw	r2,-24(fp)
   8c124:	e0bffa17 	ldw	r2,-24(fp)
   8c128:	1004c03a 	cmpne	r2,r2,zero
   8c12c:	1000051e 	bne	r2,zero,8c144 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8c130:	e13ffb17 	ldw	r4,-20(fp)
   8c134:	008c5240 	call	8c524 <alt_find_file>
   8c138:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8c13c:	00800044 	movi	r2,1
   8c140:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8c144:	e0bffa17 	ldw	r2,-24(fp)
   8c148:	1005003a 	cmpeq	r2,r2,zero
   8c14c:	1000311e 	bne	r2,zero,8c214 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8c150:	e13ffa17 	ldw	r4,-24(fp)
   8c154:	008c6440 	call	8c644 <alt_get_fd>
   8c158:	e0bff815 	stw	r2,-32(fp)
   8c15c:	e0bff817 	ldw	r2,-32(fp)
   8c160:	1004403a 	cmpge	r2,r2,zero
   8c164:	1000031e 	bne	r2,zero,8c174 <open+0x94>
    {
      status = index;
   8c168:	e0bff817 	ldw	r2,-32(fp)
   8c16c:	e0bff715 	stw	r2,-36(fp)
   8c170:	00002a06 	br	8c21c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8c174:	e13ff817 	ldw	r4,-32(fp)
   8c178:	01400304 	movi	r5,12
   8c17c:	00805cc0 	call	805cc <__mulsi3>
   8c180:	1007883a 	mov	r3,r2
   8c184:	00800274 	movhi	r2,9
   8c188:	10b5f204 	addi	r2,r2,-10296
   8c18c:	1885883a 	add	r2,r3,r2
   8c190:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8c194:	e0fffc17 	ldw	r3,-16(fp)
   8c198:	00900034 	movhi	r2,16384
   8c19c:	10bfffc4 	addi	r2,r2,-1
   8c1a0:	1886703a 	and	r3,r3,r2
   8c1a4:	e0bff917 	ldw	r2,-28(fp)
   8c1a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8c1ac:	e0bff617 	ldw	r2,-40(fp)
   8c1b0:	1004c03a 	cmpne	r2,r2,zero
   8c1b4:	1000061e 	bne	r2,zero,8c1d0 <open+0xf0>
   8c1b8:	e13ff917 	ldw	r4,-28(fp)
   8c1bc:	008bfe80 	call	8bfe8 <alt_file_locked>
   8c1c0:	e0bff715 	stw	r2,-36(fp)
   8c1c4:	e0bff717 	ldw	r2,-36(fp)
   8c1c8:	1004803a 	cmplt	r2,r2,zero
   8c1cc:	1000131e 	bne	r2,zero,8c21c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8c1d0:	e0bffa17 	ldw	r2,-24(fp)
   8c1d4:	10800317 	ldw	r2,12(r2)
   8c1d8:	1005003a 	cmpeq	r2,r2,zero
   8c1dc:	1000091e 	bne	r2,zero,8c204 <open+0x124>
   8c1e0:	e0bffa17 	ldw	r2,-24(fp)
   8c1e4:	10800317 	ldw	r2,12(r2)
   8c1e8:	e13ff917 	ldw	r4,-28(fp)
   8c1ec:	e17ffb17 	ldw	r5,-20(fp)
   8c1f0:	e1bffc17 	ldw	r6,-16(fp)
   8c1f4:	e1fffd17 	ldw	r7,-12(fp)
   8c1f8:	103ee83a 	callr	r2
   8c1fc:	e0bfff15 	stw	r2,-4(fp)
   8c200:	00000106 	br	8c208 <open+0x128>
   8c204:	e03fff15 	stw	zero,-4(fp)
   8c208:	e0bfff17 	ldw	r2,-4(fp)
   8c20c:	e0bff715 	stw	r2,-36(fp)
   8c210:	00000206 	br	8c21c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8c214:	00bffb44 	movi	r2,-19
   8c218:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8c21c:	e0bff717 	ldw	r2,-36(fp)
   8c220:	1004403a 	cmpge	r2,r2,zero
   8c224:	1000091e 	bne	r2,zero,8c24c <open+0x16c>
  {
    alt_release_fd (index);  
   8c228:	e13ff817 	ldw	r4,-32(fp)
   8c22c:	008aa500 	call	8aa50 <alt_release_fd>
    ALT_ERRNO = -status;
   8c230:	008c26c0 	call	8c26c <alt_get_errno>
   8c234:	e0fff717 	ldw	r3,-36(fp)
   8c238:	00c7c83a 	sub	r3,zero,r3
   8c23c:	10c00015 	stw	r3,0(r2)
    return -1;
   8c240:	00bfffc4 	movi	r2,-1
   8c244:	e0bffe15 	stw	r2,-8(fp)
   8c248:	00000206 	br	8c254 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8c24c:	e0bff817 	ldw	r2,-32(fp)
   8c250:	e0bffe15 	stw	r2,-8(fp)
   8c254:	e0bffe17 	ldw	r2,-8(fp)
}
   8c258:	e037883a 	mov	sp,fp
   8c25c:	dfc00117 	ldw	ra,4(sp)
   8c260:	df000017 	ldw	fp,0(sp)
   8c264:	dec00204 	addi	sp,sp,8
   8c268:	f800283a 	ret

0008c26c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c26c:	defffd04 	addi	sp,sp,-12
   8c270:	dfc00215 	stw	ra,8(sp)
   8c274:	df000115 	stw	fp,4(sp)
   8c278:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c27c:	00800274 	movhi	r2,9
   8c280:	10ba7504 	addi	r2,r2,-5676
   8c284:	10800017 	ldw	r2,0(r2)
   8c288:	1005003a 	cmpeq	r2,r2,zero
   8c28c:	1000061e 	bne	r2,zero,8c2a8 <alt_get_errno+0x3c>
   8c290:	00800274 	movhi	r2,9
   8c294:	10ba7504 	addi	r2,r2,-5676
   8c298:	10800017 	ldw	r2,0(r2)
   8c29c:	103ee83a 	callr	r2
   8c2a0:	e0bfff15 	stw	r2,-4(fp)
   8c2a4:	00000306 	br	8c2b4 <alt_get_errno+0x48>
   8c2a8:	00800274 	movhi	r2,9
   8c2ac:	10811704 	addi	r2,r2,1116
   8c2b0:	e0bfff15 	stw	r2,-4(fp)
   8c2b4:	e0bfff17 	ldw	r2,-4(fp)
}
   8c2b8:	e037883a 	mov	sp,fp
   8c2bc:	dfc00117 	ldw	ra,4(sp)
   8c2c0:	df000017 	ldw	fp,0(sp)
   8c2c4:	dec00204 	addi	sp,sp,8
   8c2c8:	f800283a 	ret

0008c2cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8c2cc:	defffa04 	addi	sp,sp,-24
   8c2d0:	df000515 	stw	fp,20(sp)
   8c2d4:	df000504 	addi	fp,sp,20
   8c2d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c2dc:	0005303a 	rdctl	r2,status
   8c2e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c2e4:	e0fffd17 	ldw	r3,-12(fp)
   8c2e8:	00bfff84 	movi	r2,-2
   8c2ec:	1884703a 	and	r2,r3,r2
   8c2f0:	1001703a 	wrctl	status,r2
  
  return context;
   8c2f4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8c2f8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8c2fc:	e0bfff17 	ldw	r2,-4(fp)
   8c300:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8c304:	e0bffc17 	ldw	r2,-16(fp)
   8c308:	10c00017 	ldw	r3,0(r2)
   8c30c:	e0bffc17 	ldw	r2,-16(fp)
   8c310:	10800117 	ldw	r2,4(r2)
   8c314:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8c318:	e0bffc17 	ldw	r2,-16(fp)
   8c31c:	10c00117 	ldw	r3,4(r2)
   8c320:	e0bffc17 	ldw	r2,-16(fp)
   8c324:	10800017 	ldw	r2,0(r2)
   8c328:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8c32c:	e0fffc17 	ldw	r3,-16(fp)
   8c330:	e0bffc17 	ldw	r2,-16(fp)
   8c334:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8c338:	e0fffc17 	ldw	r3,-16(fp)
   8c33c:	e0bffc17 	ldw	r2,-16(fp)
   8c340:	18800015 	stw	r2,0(r3)
   8c344:	e0bffe17 	ldw	r2,-8(fp)
   8c348:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c34c:	e0bffb17 	ldw	r2,-20(fp)
   8c350:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8c354:	e037883a 	mov	sp,fp
   8c358:	df000017 	ldw	fp,0(sp)
   8c35c:	dec00104 	addi	sp,sp,4
   8c360:	f800283a 	ret

0008c364 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8c364:	defffb04 	addi	sp,sp,-20
   8c368:	dfc00415 	stw	ra,16(sp)
   8c36c:	df000315 	stw	fp,12(sp)
   8c370:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8c374:	d0a00e17 	ldw	r2,-32712(gp)
   8c378:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8c37c:	d0a6b317 	ldw	r2,-25908(gp)
   8c380:	10800044 	addi	r2,r2,1
   8c384:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8c388:	00003106 	br	8c450 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8c38c:	e0bffe17 	ldw	r2,-8(fp)
   8c390:	10800017 	ldw	r2,0(r2)
   8c394:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8c398:	e0bffe17 	ldw	r2,-8(fp)
   8c39c:	10800403 	ldbu	r2,16(r2)
   8c3a0:	10803fcc 	andi	r2,r2,255
   8c3a4:	1005003a 	cmpeq	r2,r2,zero
   8c3a8:	1000051e 	bne	r2,zero,8c3c0 <alt_tick+0x5c>
   8c3ac:	d0a6b317 	ldw	r2,-25908(gp)
   8c3b0:	1004c03a 	cmpne	r2,r2,zero
   8c3b4:	1000021e 	bne	r2,zero,8c3c0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8c3b8:	e0bffe17 	ldw	r2,-8(fp)
   8c3bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8c3c0:	e0bffe17 	ldw	r2,-8(fp)
   8c3c4:	10c00217 	ldw	r3,8(r2)
   8c3c8:	d0a6b317 	ldw	r2,-25908(gp)
   8c3cc:	10c01e36 	bltu	r2,r3,8c448 <alt_tick+0xe4>
   8c3d0:	e0bffe17 	ldw	r2,-8(fp)
   8c3d4:	10800403 	ldbu	r2,16(r2)
   8c3d8:	10803fcc 	andi	r2,r2,255
   8c3dc:	1004c03a 	cmpne	r2,r2,zero
   8c3e0:	1000191e 	bne	r2,zero,8c448 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8c3e4:	e0bffe17 	ldw	r2,-8(fp)
   8c3e8:	10c00317 	ldw	r3,12(r2)
   8c3ec:	e0bffe17 	ldw	r2,-8(fp)
   8c3f0:	11000517 	ldw	r4,20(r2)
   8c3f4:	183ee83a 	callr	r3
   8c3f8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8c3fc:	e0bffd17 	ldw	r2,-12(fp)
   8c400:	1004c03a 	cmpne	r2,r2,zero
   8c404:	1000031e 	bne	r2,zero,8c414 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8c408:	e13ffe17 	ldw	r4,-8(fp)
   8c40c:	008c2cc0 	call	8c2cc <alt_alarm_stop>
   8c410:	00000d06 	br	8c448 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8c414:	e0bffe17 	ldw	r2,-8(fp)
   8c418:	10c00217 	ldw	r3,8(r2)
   8c41c:	e0bffd17 	ldw	r2,-12(fp)
   8c420:	1887883a 	add	r3,r3,r2
   8c424:	e0bffe17 	ldw	r2,-8(fp)
   8c428:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8c42c:	e0bffe17 	ldw	r2,-8(fp)
   8c430:	10c00217 	ldw	r3,8(r2)
   8c434:	d0a6b317 	ldw	r2,-25908(gp)
   8c438:	1880032e 	bgeu	r3,r2,8c448 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8c43c:	e0fffe17 	ldw	r3,-8(fp)
   8c440:	00800044 	movi	r2,1
   8c444:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8c448:	e0bfff17 	ldw	r2,-4(fp)
   8c44c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8c450:	d0e00e04 	addi	r3,gp,-32712
   8c454:	e0bffe17 	ldw	r2,-8(fp)
   8c458:	10ffcc1e 	bne	r2,r3,8c38c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8c45c:	e037883a 	mov	sp,fp
   8c460:	dfc00117 	ldw	ra,4(sp)
   8c464:	df000017 	ldw	fp,0(sp)
   8c468:	dec00204 	addi	sp,sp,8
   8c46c:	f800283a 	ret

0008c470 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8c470:	deffff04 	addi	sp,sp,-4
   8c474:	df000015 	stw	fp,0(sp)
   8c478:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8c47c:	000170fa 	wrctl	ienable,zero
}
   8c480:	e037883a 	mov	sp,fp
   8c484:	df000017 	ldw	fp,0(sp)
   8c488:	dec00104 	addi	sp,sp,4
   8c48c:	f800283a 	ret

0008c490 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8c490:	defff904 	addi	sp,sp,-28
   8c494:	dfc00615 	stw	ra,24(sp)
   8c498:	df000515 	stw	fp,20(sp)
   8c49c:	df000504 	addi	fp,sp,20
   8c4a0:	e13ffd15 	stw	r4,-12(fp)
   8c4a4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8c4a8:	e0bffe17 	ldw	r2,-8(fp)
   8c4ac:	10800017 	ldw	r2,0(r2)
   8c4b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8c4b4:	e13ffd17 	ldw	r4,-12(fp)
   8c4b8:	00807300 	call	80730 <strlen>
   8c4bc:	10800044 	addi	r2,r2,1
   8c4c0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8c4c4:	00000d06 	br	8c4fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8c4c8:	e0bffc17 	ldw	r2,-16(fp)
   8c4cc:	11000217 	ldw	r4,8(r2)
   8c4d0:	e1bffb17 	ldw	r6,-20(fp)
   8c4d4:	e17ffd17 	ldw	r5,-12(fp)
   8c4d8:	008c7600 	call	8c760 <memcmp>
   8c4dc:	1004c03a 	cmpne	r2,r2,zero
   8c4e0:	1000031e 	bne	r2,zero,8c4f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8c4e4:	e0bffc17 	ldw	r2,-16(fp)
   8c4e8:	e0bfff15 	stw	r2,-4(fp)
   8c4ec:	00000706 	br	8c50c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8c4f0:	e0bffc17 	ldw	r2,-16(fp)
   8c4f4:	10800017 	ldw	r2,0(r2)
   8c4f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8c4fc:	e0fffe17 	ldw	r3,-8(fp)
   8c500:	e0bffc17 	ldw	r2,-16(fp)
   8c504:	10fff01e 	bne	r2,r3,8c4c8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8c508:	e03fff15 	stw	zero,-4(fp)
   8c50c:	e0bfff17 	ldw	r2,-4(fp)
}
   8c510:	e037883a 	mov	sp,fp
   8c514:	dfc00117 	ldw	ra,4(sp)
   8c518:	df000017 	ldw	fp,0(sp)
   8c51c:	dec00204 	addi	sp,sp,8
   8c520:	f800283a 	ret

0008c524 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8c524:	defffa04 	addi	sp,sp,-24
   8c528:	dfc00515 	stw	ra,20(sp)
   8c52c:	df000415 	stw	fp,16(sp)
   8c530:	df000404 	addi	fp,sp,16
   8c534:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8c538:	00800274 	movhi	r2,9
   8c53c:	10ba7004 	addi	r2,r2,-5696
   8c540:	10800017 	ldw	r2,0(r2)
   8c544:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8c548:	00003306 	br	8c618 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8c54c:	e0bffd17 	ldw	r2,-12(fp)
   8c550:	11000217 	ldw	r4,8(r2)
   8c554:	00807300 	call	80730 <strlen>
   8c558:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8c55c:	e0bffd17 	ldw	r2,-12(fp)
   8c560:	10c00217 	ldw	r3,8(r2)
   8c564:	e0bffc17 	ldw	r2,-16(fp)
   8c568:	1885883a 	add	r2,r3,r2
   8c56c:	10bfffc4 	addi	r2,r2,-1
   8c570:	10800003 	ldbu	r2,0(r2)
   8c574:	10803fcc 	andi	r2,r2,255
   8c578:	1080201c 	xori	r2,r2,128
   8c57c:	10bfe004 	addi	r2,r2,-128
   8c580:	10800bd8 	cmpnei	r2,r2,47
   8c584:	1000031e 	bne	r2,zero,8c594 <alt_find_file+0x70>
    {
      len -= 1;
   8c588:	e0bffc17 	ldw	r2,-16(fp)
   8c58c:	10bfffc4 	addi	r2,r2,-1
   8c590:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8c594:	e0bffc17 	ldw	r2,-16(fp)
   8c598:	1007883a 	mov	r3,r2
   8c59c:	e0bffe17 	ldw	r2,-8(fp)
   8c5a0:	1885883a 	add	r2,r3,r2
   8c5a4:	10800003 	ldbu	r2,0(r2)
   8c5a8:	10803fcc 	andi	r2,r2,255
   8c5ac:	1080201c 	xori	r2,r2,128
   8c5b0:	10bfe004 	addi	r2,r2,-128
   8c5b4:	10800be0 	cmpeqi	r2,r2,47
   8c5b8:	10000a1e 	bne	r2,zero,8c5e4 <alt_find_file+0xc0>
   8c5bc:	e0bffc17 	ldw	r2,-16(fp)
   8c5c0:	1007883a 	mov	r3,r2
   8c5c4:	e0bffe17 	ldw	r2,-8(fp)
   8c5c8:	1885883a 	add	r2,r3,r2
   8c5cc:	10800003 	ldbu	r2,0(r2)
   8c5d0:	10803fcc 	andi	r2,r2,255
   8c5d4:	1080201c 	xori	r2,r2,128
   8c5d8:	10bfe004 	addi	r2,r2,-128
   8c5dc:	1004c03a 	cmpne	r2,r2,zero
   8c5e0:	10000a1e 	bne	r2,zero,8c60c <alt_find_file+0xe8>
   8c5e4:	e0bffd17 	ldw	r2,-12(fp)
   8c5e8:	11000217 	ldw	r4,8(r2)
   8c5ec:	e1bffc17 	ldw	r6,-16(fp)
   8c5f0:	e17ffe17 	ldw	r5,-8(fp)
   8c5f4:	008c7600 	call	8c760 <memcmp>
   8c5f8:	1004c03a 	cmpne	r2,r2,zero
   8c5fc:	1000031e 	bne	r2,zero,8c60c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8c600:	e0bffd17 	ldw	r2,-12(fp)
   8c604:	e0bfff15 	stw	r2,-4(fp)
   8c608:	00000806 	br	8c62c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8c60c:	e0bffd17 	ldw	r2,-12(fp)
   8c610:	10800017 	ldw	r2,0(r2)
   8c614:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8c618:	00c00274 	movhi	r3,9
   8c61c:	18fa7004 	addi	r3,r3,-5696
   8c620:	e0bffd17 	ldw	r2,-12(fp)
   8c624:	10ffc91e 	bne	r2,r3,8c54c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8c628:	e03fff15 	stw	zero,-4(fp)
   8c62c:	e0bfff17 	ldw	r2,-4(fp)
}
   8c630:	e037883a 	mov	sp,fp
   8c634:	dfc00117 	ldw	ra,4(sp)
   8c638:	df000017 	ldw	fp,0(sp)
   8c63c:	dec00204 	addi	sp,sp,8
   8c640:	f800283a 	ret

0008c644 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8c644:	defffa04 	addi	sp,sp,-24
   8c648:	dfc00515 	stw	ra,20(sp)
   8c64c:	df000415 	stw	fp,16(sp)
   8c650:	dc000315 	stw	r16,12(sp)
   8c654:	df000304 	addi	fp,sp,12
   8c658:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8c65c:	00bffa04 	movi	r2,-24
   8c660:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8c664:	e03ffe15 	stw	zero,-8(fp)
   8c668:	00002006 	br	8c6ec <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   8c66c:	e13ffe17 	ldw	r4,-8(fp)
   8c670:	04000274 	movhi	r16,9
   8c674:	8435f204 	addi	r16,r16,-10296
   8c678:	01400304 	movi	r5,12
   8c67c:	00805cc0 	call	805cc <__mulsi3>
   8c680:	1405883a 	add	r2,r2,r16
   8c684:	10800017 	ldw	r2,0(r2)
   8c688:	1004c03a 	cmpne	r2,r2,zero
   8c68c:	1000141e 	bne	r2,zero,8c6e0 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   8c690:	e13ffe17 	ldw	r4,-8(fp)
   8c694:	04000274 	movhi	r16,9
   8c698:	8435f204 	addi	r16,r16,-10296
   8c69c:	01400304 	movi	r5,12
   8c6a0:	00805cc0 	call	805cc <__mulsi3>
   8c6a4:	1407883a 	add	r3,r2,r16
   8c6a8:	e0bfff17 	ldw	r2,-4(fp)
   8c6ac:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8c6b0:	00800274 	movhi	r2,9
   8c6b4:	10ba7404 	addi	r2,r2,-5680
   8c6b8:	10c00017 	ldw	r3,0(r2)
   8c6bc:	e0bffe17 	ldw	r2,-8(fp)
   8c6c0:	1880040e 	bge	r3,r2,8c6d4 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   8c6c4:	00c00274 	movhi	r3,9
   8c6c8:	18fa7404 	addi	r3,r3,-5680
   8c6cc:	e0bffe17 	ldw	r2,-8(fp)
   8c6d0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8c6d4:	e0bffe17 	ldw	r2,-8(fp)
   8c6d8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   8c6dc:	00000606 	br	8c6f8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8c6e0:	e0bffe17 	ldw	r2,-8(fp)
   8c6e4:	10800044 	addi	r2,r2,1
   8c6e8:	e0bffe15 	stw	r2,-8(fp)
   8c6ec:	e0bffe17 	ldw	r2,-8(fp)
   8c6f0:	10800810 	cmplti	r2,r2,32
   8c6f4:	103fdd1e 	bne	r2,zero,8c66c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8c6f8:	e0bffd17 	ldw	r2,-12(fp)
}
   8c6fc:	e037883a 	mov	sp,fp
   8c700:	dfc00217 	ldw	ra,8(sp)
   8c704:	df000117 	ldw	fp,4(sp)
   8c708:	dc000017 	ldw	r16,0(sp)
   8c70c:	dec00304 	addi	sp,sp,12
   8c710:	f800283a 	ret

0008c714 <atexit>:
   8c714:	200b883a 	mov	r5,r4
   8c718:	000d883a 	mov	r6,zero
   8c71c:	0009883a 	mov	r4,zero
   8c720:	000f883a 	mov	r7,zero
   8c724:	008c7d41 	jmpi	8c7d4 <__register_exitproc>

0008c728 <exit>:
   8c728:	defffe04 	addi	sp,sp,-8
   8c72c:	000b883a 	mov	r5,zero
   8c730:	dc000015 	stw	r16,0(sp)
   8c734:	dfc00115 	stw	ra,4(sp)
   8c738:	2021883a 	mov	r16,r4
   8c73c:	008c90c0 	call	8c90c <__call_exitprocs>
   8c740:	00800274 	movhi	r2,9
   8c744:	10ba6b04 	addi	r2,r2,-5716
   8c748:	11000017 	ldw	r4,0(r2)
   8c74c:	20800f17 	ldw	r2,60(r4)
   8c750:	10000126 	beq	r2,zero,8c758 <exit+0x30>
   8c754:	103ee83a 	callr	r2
   8c758:	8009883a 	mov	r4,r16
   8c75c:	008cafc0 	call	8cafc <_exit>

0008c760 <memcmp>:
   8c760:	00c000c4 	movi	r3,3
   8c764:	1980032e 	bgeu	r3,r6,8c774 <memcmp+0x14>
   8c768:	2144b03a 	or	r2,r4,r5
   8c76c:	10c4703a 	and	r2,r2,r3
   8c770:	10000f26 	beq	r2,zero,8c7b0 <memcmp+0x50>
   8c774:	31ffffc4 	addi	r7,r6,-1
   8c778:	3000061e 	bne	r6,zero,8c794 <memcmp+0x34>
   8c77c:	00000a06 	br	8c7a8 <memcmp+0x48>
   8c780:	39ffffc4 	addi	r7,r7,-1
   8c784:	00bfffc4 	movi	r2,-1
   8c788:	21000044 	addi	r4,r4,1
   8c78c:	29400044 	addi	r5,r5,1
   8c790:	38800526 	beq	r7,r2,8c7a8 <memcmp+0x48>
   8c794:	20c00003 	ldbu	r3,0(r4)
   8c798:	28800003 	ldbu	r2,0(r5)
   8c79c:	18bff826 	beq	r3,r2,8c780 <memcmp+0x20>
   8c7a0:	1885c83a 	sub	r2,r3,r2
   8c7a4:	f800283a 	ret
   8c7a8:	0005883a 	mov	r2,zero
   8c7ac:	f800283a 	ret
   8c7b0:	180f883a 	mov	r7,r3
   8c7b4:	20c00017 	ldw	r3,0(r4)
   8c7b8:	28800017 	ldw	r2,0(r5)
   8c7bc:	18bfed1e 	bne	r3,r2,8c774 <memcmp+0x14>
   8c7c0:	31bfff04 	addi	r6,r6,-4
   8c7c4:	21000104 	addi	r4,r4,4
   8c7c8:	29400104 	addi	r5,r5,4
   8c7cc:	39bff936 	bltu	r7,r6,8c7b4 <memcmp+0x54>
   8c7d0:	003fe806 	br	8c774 <memcmp+0x14>

0008c7d4 <__register_exitproc>:
   8c7d4:	defffa04 	addi	sp,sp,-24
   8c7d8:	00800274 	movhi	r2,9
   8c7dc:	10ba6b04 	addi	r2,r2,-5716
   8c7e0:	dc000015 	stw	r16,0(sp)
   8c7e4:	14000017 	ldw	r16,0(r2)
   8c7e8:	dd000415 	stw	r20,16(sp)
   8c7ec:	2829883a 	mov	r20,r5
   8c7f0:	81405217 	ldw	r5,328(r16)
   8c7f4:	dcc00315 	stw	r19,12(sp)
   8c7f8:	dc800215 	stw	r18,8(sp)
   8c7fc:	dc400115 	stw	r17,4(sp)
   8c800:	dfc00515 	stw	ra,20(sp)
   8c804:	2023883a 	mov	r17,r4
   8c808:	3027883a 	mov	r19,r6
   8c80c:	3825883a 	mov	r18,r7
   8c810:	28002526 	beq	r5,zero,8c8a8 <__register_exitproc+0xd4>
   8c814:	29000117 	ldw	r4,4(r5)
   8c818:	008007c4 	movi	r2,31
   8c81c:	11002716 	blt	r2,r4,8c8bc <__register_exitproc+0xe8>
   8c820:	8800101e 	bne	r17,zero,8c864 <__register_exitproc+0x90>
   8c824:	2105883a 	add	r2,r4,r4
   8c828:	1085883a 	add	r2,r2,r2
   8c82c:	20c00044 	addi	r3,r4,1
   8c830:	1145883a 	add	r2,r2,r5
   8c834:	0009883a 	mov	r4,zero
   8c838:	15000215 	stw	r20,8(r2)
   8c83c:	28c00115 	stw	r3,4(r5)
   8c840:	2005883a 	mov	r2,r4
   8c844:	dfc00517 	ldw	ra,20(sp)
   8c848:	dd000417 	ldw	r20,16(sp)
   8c84c:	dcc00317 	ldw	r19,12(sp)
   8c850:	dc800217 	ldw	r18,8(sp)
   8c854:	dc400117 	ldw	r17,4(sp)
   8c858:	dc000017 	ldw	r16,0(sp)
   8c85c:	dec00604 	addi	sp,sp,24
   8c860:	f800283a 	ret
   8c864:	29802204 	addi	r6,r5,136
   8c868:	00800044 	movi	r2,1
   8c86c:	110e983a 	sll	r7,r2,r4
   8c870:	30c04017 	ldw	r3,256(r6)
   8c874:	2105883a 	add	r2,r4,r4
   8c878:	1085883a 	add	r2,r2,r2
   8c87c:	1185883a 	add	r2,r2,r6
   8c880:	19c6b03a 	or	r3,r3,r7
   8c884:	14802015 	stw	r18,128(r2)
   8c888:	14c00015 	stw	r19,0(r2)
   8c88c:	00800084 	movi	r2,2
   8c890:	30c04015 	stw	r3,256(r6)
   8c894:	88bfe31e 	bne	r17,r2,8c824 <__register_exitproc+0x50>
   8c898:	30804117 	ldw	r2,260(r6)
   8c89c:	11c4b03a 	or	r2,r2,r7
   8c8a0:	30804115 	stw	r2,260(r6)
   8c8a4:	003fdf06 	br	8c824 <__register_exitproc+0x50>
   8c8a8:	00800274 	movhi	r2,9
   8c8ac:	10816804 	addi	r2,r2,1440
   8c8b0:	100b883a 	mov	r5,r2
   8c8b4:	80805215 	stw	r2,328(r16)
   8c8b8:	003fd606 	br	8c814 <__register_exitproc+0x40>
   8c8bc:	00800034 	movhi	r2,0
   8c8c0:	10800004 	addi	r2,r2,0
   8c8c4:	1000021e 	bne	r2,zero,8c8d0 <__register_exitproc+0xfc>
   8c8c8:	013fffc4 	movi	r4,-1
   8c8cc:	003fdc06 	br	8c840 <__register_exitproc+0x6c>
   8c8d0:	01006404 	movi	r4,400
   8c8d4:	103ee83a 	callr	r2
   8c8d8:	1007883a 	mov	r3,r2
   8c8dc:	103ffa26 	beq	r2,zero,8c8c8 <__register_exitproc+0xf4>
   8c8e0:	80805217 	ldw	r2,328(r16)
   8c8e4:	180b883a 	mov	r5,r3
   8c8e8:	18000115 	stw	zero,4(r3)
   8c8ec:	18800015 	stw	r2,0(r3)
   8c8f0:	80c05215 	stw	r3,328(r16)
   8c8f4:	18006215 	stw	zero,392(r3)
   8c8f8:	18006315 	stw	zero,396(r3)
   8c8fc:	0009883a 	mov	r4,zero
   8c900:	883fc826 	beq	r17,zero,8c824 <__register_exitproc+0x50>
   8c904:	003fd706 	br	8c864 <__register_exitproc+0x90>

0008c908 <register_fini>:
   8c908:	f800283a 	ret

0008c90c <__call_exitprocs>:
   8c90c:	00800274 	movhi	r2,9
   8c910:	10ba6b04 	addi	r2,r2,-5716
   8c914:	10800017 	ldw	r2,0(r2)
   8c918:	defff304 	addi	sp,sp,-52
   8c91c:	df000b15 	stw	fp,44(sp)
   8c920:	d8800115 	stw	r2,4(sp)
   8c924:	00800034 	movhi	r2,0
   8c928:	10800004 	addi	r2,r2,0
   8c92c:	1005003a 	cmpeq	r2,r2,zero
   8c930:	d8800215 	stw	r2,8(sp)
   8c934:	d8800117 	ldw	r2,4(sp)
   8c938:	dd400815 	stw	r21,32(sp)
   8c93c:	dd000715 	stw	r20,28(sp)
   8c940:	10805204 	addi	r2,r2,328
   8c944:	dfc00c15 	stw	ra,48(sp)
   8c948:	ddc00a15 	stw	r23,40(sp)
   8c94c:	dd800915 	stw	r22,36(sp)
   8c950:	dcc00615 	stw	r19,24(sp)
   8c954:	dc800515 	stw	r18,20(sp)
   8c958:	dc400415 	stw	r17,16(sp)
   8c95c:	dc000315 	stw	r16,12(sp)
   8c960:	282b883a 	mov	r21,r5
   8c964:	2039883a 	mov	fp,r4
   8c968:	d8800015 	stw	r2,0(sp)
   8c96c:	2829003a 	cmpeq	r20,r5,zero
   8c970:	d8800117 	ldw	r2,4(sp)
   8c974:	14405217 	ldw	r17,328(r2)
   8c978:	88001026 	beq	r17,zero,8c9bc <__call_exitprocs+0xb0>
   8c97c:	ddc00017 	ldw	r23,0(sp)
   8c980:	88800117 	ldw	r2,4(r17)
   8c984:	8c802204 	addi	r18,r17,136
   8c988:	143fffc4 	addi	r16,r2,-1
   8c98c:	80000916 	blt	r16,zero,8c9b4 <__call_exitprocs+0xa8>
   8c990:	05bfffc4 	movi	r22,-1
   8c994:	a000151e 	bne	r20,zero,8c9ec <__call_exitprocs+0xe0>
   8c998:	8409883a 	add	r4,r16,r16
   8c99c:	2105883a 	add	r2,r4,r4
   8c9a0:	1485883a 	add	r2,r2,r18
   8c9a4:	10c02017 	ldw	r3,128(r2)
   8c9a8:	a8c01126 	beq	r21,r3,8c9f0 <__call_exitprocs+0xe4>
   8c9ac:	843fffc4 	addi	r16,r16,-1
   8c9b0:	85bff81e 	bne	r16,r22,8c994 <__call_exitprocs+0x88>
   8c9b4:	d8800217 	ldw	r2,8(sp)
   8c9b8:	10003126 	beq	r2,zero,8ca80 <__call_exitprocs+0x174>
   8c9bc:	dfc00c17 	ldw	ra,48(sp)
   8c9c0:	df000b17 	ldw	fp,44(sp)
   8c9c4:	ddc00a17 	ldw	r23,40(sp)
   8c9c8:	dd800917 	ldw	r22,36(sp)
   8c9cc:	dd400817 	ldw	r21,32(sp)
   8c9d0:	dd000717 	ldw	r20,28(sp)
   8c9d4:	dcc00617 	ldw	r19,24(sp)
   8c9d8:	dc800517 	ldw	r18,20(sp)
   8c9dc:	dc400417 	ldw	r17,16(sp)
   8c9e0:	dc000317 	ldw	r16,12(sp)
   8c9e4:	dec00d04 	addi	sp,sp,52
   8c9e8:	f800283a 	ret
   8c9ec:	8409883a 	add	r4,r16,r16
   8c9f0:	88c00117 	ldw	r3,4(r17)
   8c9f4:	2105883a 	add	r2,r4,r4
   8c9f8:	1445883a 	add	r2,r2,r17
   8c9fc:	18ffffc4 	addi	r3,r3,-1
   8ca00:	11800217 	ldw	r6,8(r2)
   8ca04:	1c001526 	beq	r3,r16,8ca5c <__call_exitprocs+0x150>
   8ca08:	10000215 	stw	zero,8(r2)
   8ca0c:	303fe726 	beq	r6,zero,8c9ac <__call_exitprocs+0xa0>
   8ca10:	00c00044 	movi	r3,1
   8ca14:	1c06983a 	sll	r3,r3,r16
   8ca18:	90804017 	ldw	r2,256(r18)
   8ca1c:	8cc00117 	ldw	r19,4(r17)
   8ca20:	1884703a 	and	r2,r3,r2
   8ca24:	10001426 	beq	r2,zero,8ca78 <__call_exitprocs+0x16c>
   8ca28:	90804117 	ldw	r2,260(r18)
   8ca2c:	1884703a 	and	r2,r3,r2
   8ca30:	10000c1e 	bne	r2,zero,8ca64 <__call_exitprocs+0x158>
   8ca34:	2105883a 	add	r2,r4,r4
   8ca38:	1485883a 	add	r2,r2,r18
   8ca3c:	11400017 	ldw	r5,0(r2)
   8ca40:	e009883a 	mov	r4,fp
   8ca44:	303ee83a 	callr	r6
   8ca48:	88800117 	ldw	r2,4(r17)
   8ca4c:	98bfc81e 	bne	r19,r2,8c970 <__call_exitprocs+0x64>
   8ca50:	b8800017 	ldw	r2,0(r23)
   8ca54:	147fd526 	beq	r2,r17,8c9ac <__call_exitprocs+0xa0>
   8ca58:	003fc506 	br	8c970 <__call_exitprocs+0x64>
   8ca5c:	8c000115 	stw	r16,4(r17)
   8ca60:	003fea06 	br	8ca0c <__call_exitprocs+0x100>
   8ca64:	2105883a 	add	r2,r4,r4
   8ca68:	1485883a 	add	r2,r2,r18
   8ca6c:	11000017 	ldw	r4,0(r2)
   8ca70:	303ee83a 	callr	r6
   8ca74:	003ff406 	br	8ca48 <__call_exitprocs+0x13c>
   8ca78:	303ee83a 	callr	r6
   8ca7c:	003ff206 	br	8ca48 <__call_exitprocs+0x13c>
   8ca80:	88800117 	ldw	r2,4(r17)
   8ca84:	1000081e 	bne	r2,zero,8caa8 <__call_exitprocs+0x19c>
   8ca88:	89000017 	ldw	r4,0(r17)
   8ca8c:	20000726 	beq	r4,zero,8caac <__call_exitprocs+0x1a0>
   8ca90:	b9000015 	stw	r4,0(r23)
   8ca94:	8809883a 	mov	r4,r17
   8ca98:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   8ca9c:	bc400017 	ldw	r17,0(r23)
   8caa0:	883fb71e 	bne	r17,zero,8c980 <__call_exitprocs+0x74>
   8caa4:	003fc506 	br	8c9bc <__call_exitprocs+0xb0>
   8caa8:	89000017 	ldw	r4,0(r17)
   8caac:	882f883a 	mov	r23,r17
   8cab0:	2023883a 	mov	r17,r4
   8cab4:	883fb21e 	bne	r17,zero,8c980 <__call_exitprocs+0x74>
   8cab8:	003fc006 	br	8c9bc <__call_exitprocs+0xb0>

0008cabc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8cabc:	defffd04 	addi	sp,sp,-12
   8cac0:	df000215 	stw	fp,8(sp)
   8cac4:	df000204 	addi	fp,sp,8
   8cac8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8cacc:	e0bfff17 	ldw	r2,-4(fp)
   8cad0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8cad4:	e0bffe17 	ldw	r2,-8(fp)
   8cad8:	1005003a 	cmpeq	r2,r2,zero
   8cadc:	1000021e 	bne	r2,zero,8cae8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8cae0:	002af070 	cmpltui	zero,zero,43969
   8cae4:	00000106 	br	8caec <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8cae8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8caec:	e037883a 	mov	sp,fp
   8caf0:	df000017 	ldw	fp,0(sp)
   8caf4:	dec00104 	addi	sp,sp,4
   8caf8:	f800283a 	ret

0008cafc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8cafc:	defffd04 	addi	sp,sp,-12
   8cb00:	dfc00215 	stw	ra,8(sp)
   8cb04:	df000115 	stw	fp,4(sp)
   8cb08:	df000104 	addi	fp,sp,4
   8cb0c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8cb10:	e13fff17 	ldw	r4,-4(fp)
   8cb14:	008cabc0 	call	8cabc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8cb18:	003fff06 	br	8cb18 <_exit+0x1c>
   8cb1c:	00000010 	cmplti	zero,zero,0
   8cb20:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   8cb24:	00527a01 	jmpi	527a0 <__alt_mem_sram_0-0x2d860>
   8cb28:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0x1f7c0>
   8cb2c:	001b0c0b 	ldhu	zero,27696(zero)
   8cb30:	00000028 	cmpgeui	zero,zero,0
   8cb34:	00000018 	cmpnei	zero,zero,0
   8cb38:	00087a3c 	xorhi	zero,zero,8680
   8cb3c:	0000066c 	andhi	zero,zero,25
   8cb40:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3b0e440>
   8cb44:	910a9074 	orhi	r4,r18,10817
   8cb48:	94089209 	0x94089209
   8cb4c:	97049606 	br	8dda8 <jtag_uart_0+0x460>
   8cb50:	93019f03 	ldbu	r12,1660(r18)
   8cb54:	9c059507 	ldb	r16,5716(r19)
   8cb58:	00000002 	0x2
   8cb5c:	00000028 	cmpgeui	zero,zero,0
   8cb60:	00000044 	movi	zero,1
   8cb64:	000880a8 	cmpgeui	zero,zero,8706
   8cb68:	00000660 	cmpeqi	zero,zero,25
   8cb6c:	400e4400 	call	400e440 <__alt_data_end+0x3f0e440>
   8cb70:	92099170 	cmpltui	r8,r18,9797
   8cb74:	96069408 	cmpgei	et,r18,6736
   8cb78:	9c039704 	addi	r16,r19,3676
   8cb7c:	90019f02 	0x90019f02
   8cb80:	9507930a 	0x9507930a
   8cb84:	00000005 	stb	zero,0(zero)
   8cb88:	0008c908 	cmpgei	zero,zero,8996
