
experiment1.elf:     file format elf32-littlenios2
experiment1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00005ac4 memsz 0x00005ac4 flags r-x
    LOAD off    0x00006ae4 vaddr 0x00085ae4 paddr 0x00087530 align 2**12
         filesz 0x00001a4c memsz 0x00001a4c flags rw-
    LOAD off    0x00008f7c vaddr 0x00088f7c paddr 0x00088f7c align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000058e4  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00085a98  00085a98  00006a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a4c  00085ae4  00087530  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00088f7c  00088f7c  00008f7c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00008530  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  00008558  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d7c  00000000  00000000  00008e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019c89  00000000  00000000  00009bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004f9a  00000000  00000000  00023855  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cb1e  00000000  00000000  000287ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000104c  00000000  00000000  00035310  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000173d  00000000  00000000  0003635c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003ec5  00000000  00000000  00037a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003b960  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003b970  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003e121  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003e124  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003e129  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003e12a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003e12b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003e136  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003e141  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0003e14c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000041  00000000  00000000  0003e157  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002c868  00000000  00000000  0003e198  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
00085a98 l    d  .rodata	00000000 .rodata
00085ae4 l    d  .rwdata	00000000 .rwdata
00088f7c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 experiment1.c
000874f4 l     O .rwdata	00000004 width.2253
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00085ae4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00081f6c l     F .text	00000058 std
00082078 l     F .text	00000008 __fp_lock
00082080 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000830b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00083110 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00083214 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000834f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000835d8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00083738 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00083968 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00087524 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00083c20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00086494 l     O .rwdata	00001060 jtag_uart_0
00083cf8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00083f38 l     F .text	00000228 altera_avalon_jtag_uart_irq
00084160 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00084a00 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00084e10 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00084f60 l     F .text	000000f8 alt_file_locked
000851e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00085880 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00085a34 l     F .text	00000040 alt_sim_halt
00082e18 g     F .text	00000070 _isatty_r
00083798 g     F .text	0000006c alt_main
00080634 g     F .text	000000a0 _puts_r
00088fcc g     O .bss	00000100 alt_irq
00082e88 g     F .text	00000078 _lseek_r
00087530 g       *ABS*	00000000 __flash_rwdata_start
0008925c g       *ABS*	00000000 __alt_heap_start
00082a54 g     F .text	00000068 __sseek
00081fd4 g     F .text	000000a4 __sinit
000820d4 g     F .text	0000009c __sfmoreglue
00083824 g     F .text	00000020 __malloc_unlock
000814bc g     F .text	000000e0 memmove
000820c4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00082da4 g     F .text	00000074 _fstat_r
00088f88 g     O .bss	00000004 errno
00088f94 g     O .bss	00000004 alt_argv
0008f4f4 g       *ABS*	00000000 _gp
00103000 g       *ABS*	00000000 __alt_mem_Nios_LCD_Component_0_Image
00086314 g     O .rwdata	00000180 alt_fd_list
00085408 g     F .text	00000094 alt_find_dev
0008141c g     F .text	000000a0 memcpy
000820b8 g     F .text	0000000c _cleanup_r
00084ee8 g     F .text	00000078 alt_io_redirect
00085a98 g       *ABS*	00000000 __DTOR_END__
000806d4 g     F .text	00000014 puts
00100000 g       *ABS*	00000000 __alt_mem_Nios_LCD_Component_0_Console
00084378 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000801f0 g     F .text	000000f4 RGB_colour
00083434 g     F .text	000000c4 isatty
00088f7c g     O .bss	00000004 __malloc_top_pad
0008075c g     F .text	0000049c __sfvwrite_r
00081b90 g     F .text	00000070 _sbrk_r
00082f00 g     F .text	00000078 _read_r
00087518 g     O .rwdata	00000004 alt_max_fd
00082c80 g     F .text	00000110 _fclose_r
00081f38 g     F .text	00000034 fflush
00088f80 g     O .bss	00000004 __malloc_max_sbrked_mem
00083274 g     F .text	000001c0 alt_irq_register
00083644 g     F .text	000000f4 lseek
000874fc g     O .rwdata	00000004 _global_impure_ptr
0008159c g     F .text	000005f4 _realloc_r
0008925c g       *ABS*	00000000 __bss_end
00084d18 g     F .text	000000f8 alt_iic_isr_register
000852dc g     F .text	0000010c alt_tick
000820a0 g     F .text	00000018 __fp_lock_all
00084cd0 g     F .text	00000048 alt_ic_irq_enabled
00085244 g     F .text	00000098 alt_alarm_stop
00088f8c g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
000862ec g     O .rwdata	00000028 alt_dev_null
00084930 g     F .text	0000001c alt_dcache_flush_all
00087530 g       *ABS*	00000000 __ram_rwdata_end
00087510 g     O .rwdata	00000008 alt_dev_list
00083afc g     F .text	00000124 write
00085ae4 g       *ABS*	00000000 __ram_rodata_end
0008313c g     F .text	000000d8 fstat
0008925c g       *ABS*	00000000 end
00083e78 g     F .text	000000c0 altera_avalon_jtag_uart_init
00085a94 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0008459c g     F .text	00000240 altera_avalon_jtag_uart_write
00081fc4 g     F .text	00000004 __sfp_lock_acquire
00081338 g     F .text	000000e4 memchr
000802e4 g     F .text	0000023c TouchPanel_int
0008238c g     F .text	00000314 _free_r
00085884 g     F .text	000001b0 __call_exitprocs
00087504 g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
00088f9c g     O .bss	00000004 _alt_tick_rate
00088fa0 g     O .bss	00000004 _alt_nticks
00083844 g     F .text	00000124 read
00083cb4 g     F .text	00000044 alt_sys_init
0008574c g     F .text	00000134 __register_exitproc
00084210 g     F .text	00000074 altera_avalon_jtag_uart_close
00082f78 g     F .text	00000038 __mulsi3
00085ae4 g       *ABS*	00000000 __ram_rwdata_start
00085a98 g       *ABS*	00000000 __ram_rodata_start
00088fa4 g     O .bss	00000028 __malloc_current_mallinfo
00083d30 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000855bc g     F .text	000000d0 alt_get_fd
00082c10 g     F .text	00000070 _close_r
000856d8 g     F .text	00000074 memcmp
00083de0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0008925c g       *ABS*	00000000 __alt_stack_base
00083e28 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00081c00 g     F .text	0000013c __swsetup_r
00082170 g     F .text	000000f0 __sfp
00085ee4 g     O .rwdata	00000408 __malloc_av_
00081fd0 g     F .text	00000004 __sinit_lock_release
00082b38 g     F .text	00000060 __sread
0008549c g     F .text	00000120 alt_find_file
0008494c g     F .text	000000b4 alt_dev_llist_insert
00083804 g     F .text	00000020 __malloc_lock
00083a40 g     F .text	000000bc sbrk
00081d3c g     F .text	000001fc _fflush_r
00088f7c g       *ABS*	00000000 __bss_start
000829b4 g     F .text	00000098 memset
000805f0 g     F .text	00000044 main
00088f98 g     O .bss	00000004 alt_envp
00088f84 g     O .bss	00000004 __malloc_max_total_mem
00083d88 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00082a4c g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
00082d90 g     F .text	00000014 fclose
000890cc g     O .bss	00000190 _atexit0
00080bf8 g     F .text	00000740 _malloc_r
0008751c g     O .rwdata	00000004 alt_errno
00082768 g     F .text	000000b8 _fwalk
00082260 g     F .text	0000012c _malloc_trim_r
00085a98 g       *ABS*	00000000 __CTOR_END__
00085a98 g       *ABS*	00000000 __flash_rodata_start
00085a98 g       *ABS*	00000000 __DTOR_LIST__
00080000 g       *ABS*	00000000 __alt_mem_sram_0
00083c80 g     F .text	00000034 alt_irq_init
000839c8 g     F .text	00000078 alt_release_fd
0008568c g     F .text	00000014 atexit
00082b98 g     F .text	00000078 _write_r
000874f8 g     O .rwdata	00000004 _impure_ptr
00088f90 g     O .bss	00000004 alt_argc
00084ac4 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00082088 g     F .text	00000018 __fp_unlock_all
00087508 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00080520 g     F .text	000000d0 draw_horizontal_bars
00084b44 g     F .text	00000050 alt_ic_isr_register
00087530 g       *ABS*	00000000 _edata
0008925c g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
00084284 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00084c30 g     F .text	000000a0 alt_ic_irq_disable
00082abc g     F .text	0000007c __swrite
00087500 g     O .rwdata	00000004 __malloc_trim_threshold
000853e8 g     F .text	00000020 altera_nios2_qsys_irq_init
000856a0 g     F .text	00000038 exit
000826a0 g     F .text	000000c8 _fwalk_reent
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00081fc8 g     F .text	00000004 __sfp_lock_release
00085a74 g     F .text	00000020 _exit
000847dc g     F .text	00000154 alt_alarm_start
00082820 g     F .text	00000194 __smakebuf_r
000806e8 g     F .text	00000074 strlen
00085058 g     F .text	0000018c open
00084b28 g     F .text	0000001c alt_icache_flush_all
00087520 g     O .rwdata	00000004 alt_priority_mask
00084b94 g     F .text	0000009c alt_ic_irq_enable
00087528 g     O .rwdata	00000008 alt_alarm_list
00084a60 g     F .text	00000064 _do_ctors
00082fb0 g     F .text	00000100 close
00083558 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00081fcc g     F .text	00000004 __sinit_lock_acquire
00103040 g       *ABS*	00000000 __alt_mem_Nios_LCD_Component_0_Touchpanel



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18e3f304 	addi	r3,r3,-28724
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18e3f304 	addi	r3,r3,-28724
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   801c0:	d6bd3d14 	ori	gp,gp,62708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801c8:	10a3df14 	ori	r2,r2,36732

    movhi r3, %hi(__bss_end)
   801cc:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801d0:	18e49714 	ori	r3,r3,37468

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	00835580 	call	83558 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	00837980 	call	83798 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <RGB_colour>:
#include "system.h"
#include "sys/alt_irq.h"
#include "sys/alt_stdio.h"
#include "priv/alt_busy_sleep.h"

int RGB_colour(int colour) {
   801f0:	defffc04 	addi	sp,sp,-16
   801f4:	df000315 	stw	fp,12(sp)
   801f8:	df000304 	addi	fp,sp,12
   801fc:	e13ffd15 	stw	r4,-12(fp)
    switch (colour & 0x7) {
   80200:	e0bffd17 	ldw	r2,-12(fp)
   80204:	108001cc 	andi	r2,r2,7
   80208:	e0bfff15 	stw	r2,-4(fp)
   8020c:	e0ffff17 	ldw	r3,-4(fp)
   80210:	18800228 	cmpgeui	r2,r3,8
   80214:	10002d1e 	bne	r2,zero,802cc <RGB_colour+0xdc>
   80218:	e13fff17 	ldw	r4,-4(fp)
   8021c:	e13fff17 	ldw	r4,-4(fp)
   80220:	2105883a 	add	r2,r4,r4
   80224:	1087883a 	add	r3,r2,r2
   80228:	00800234 	movhi	r2,8
   8022c:	10808f04 	addi	r2,r2,572
   80230:	1885883a 	add	r2,r3,r2
   80234:	10800017 	ldw	r2,0(r2)
   80238:	1000683a 	jmp	r2
   8023c:	0008025c 	xori	zero,zero,8201
   80240:	00080264 	muli	zero,zero,8201
   80244:	00080270 	cmpltui	zero,zero,8201
   80248:	00080280 	call	8028 <__alt_mem_sram_0-0x77fd8>
   8024c:	00080290 	cmplti	zero,zero,8202
   80250:	0008029c 	xori	zero,zero,8202
   80254:	000802ac 	andhi	zero,zero,8202
   80258:	000802bc 	xorhi	zero,zero,8202
        case 0 : return 0x00000000; // black 
   8025c:	e03ffe15 	stw	zero,-8(fp)
   80260:	00001b06 	br	802d0 <RGB_colour+0xe0>
        case 1 : return 0x000003FF; // red 
   80264:	0080ffc4 	movi	r2,1023
   80268:	e0bffe15 	stw	r2,-8(fp)
   8026c:	00001806 	br	802d0 <RGB_colour+0xe0>
        case 2 : return 0x7C007C00; // green 
   80270:	00df0034 	movhi	r3,31744
   80274:	18df0004 	addi	r3,r3,31744
   80278:	e0fffe15 	stw	r3,-8(fp)
   8027c:	00001406 	br	802d0 <RGB_colour+0xe0>
        case 3 : return 0x7C007FFF; // yellow
   80280:	011f0034 	movhi	r4,31744
   80284:	211fffc4 	addi	r4,r4,32767
   80288:	e13ffe15 	stw	r4,-8(fp)
   8028c:	00001006 	br	802d0 <RGB_colour+0xe0>
        case 4 : return 0x03FF0000; // blue
   80290:	0080fff4 	movhi	r2,1023
   80294:	e0bffe15 	stw	r2,-8(fp)
   80298:	00000d06 	br	802d0 <RGB_colour+0xe0>
        case 5 : return 0x03FF03FF; // magenta
   8029c:	00c0fff4 	movhi	r3,1023
   802a0:	18c0ffc4 	addi	r3,r3,1023
   802a4:	e0fffe15 	stw	r3,-8(fp)
   802a8:	00000906 	br	802d0 <RGB_colour+0xe0>
        case 6 : return 0x7FFF7C00; // cyan
   802ac:	011ffff4 	movhi	r4,32767
   802b0:	211f0004 	addi	r4,r4,31744
   802b4:	e13ffe15 	stw	r4,-8(fp)
   802b8:	00000506 	br	802d0 <RGB_colour+0xe0>
        case 7 : return 0x7FFF7FFF; // white
   802bc:	009ffff4 	movhi	r2,32767
   802c0:	109fffc4 	addi	r2,r2,32767
   802c4:	e0bffe15 	stw	r2,-8(fp)
   802c8:	00000106 	br	802d0 <RGB_colour+0xe0>
    }
    return 0x00000000;
   802cc:	e03ffe15 	stw	zero,-8(fp)
   802d0:	e0bffe17 	ldw	r2,-8(fp)
}    
   802d4:	e037883a 	mov	sp,fp
   802d8:	df000017 	ldw	fp,0(sp)
   802dc:	dec00104 	addi	sp,sp,4
   802e0:	f800283a 	ret

000802e4 <TouchPanel_int>:

void draw_horizontal_bars(int width);

void TouchPanel_int(void) {
   802e4:	defffa04 	addi	sp,sp,-24
   802e8:	dfc00515 	stw	ra,20(sp)
   802ec:	df000415 	stw	fp,16(sp)
   802f0:	df000404 	addi	fp,sp,16
    static int width = 32;
    int TP_val, x_val, y_val, key = 6;
   802f4:	00800184 	movi	r2,6
   802f8:	e0bffc15 	stw	r2,-16(fp)

    TP_val = IORD(NIOS_LCD_COMPONENT_0_TOUCHPANEL_BASE, 0);
   802fc:	00800434 	movhi	r2,16
   80300:	108c1004 	addi	r2,r2,12352
   80304:	10800037 	ldwio	r2,0(r2)
   80308:	e0bfff15 	stw	r2,-4(fp)
    x_val = (TP_val >> 20) & 0xFF; y_val = (TP_val >> 4) & 0xFF;
   8030c:	e0bfff17 	ldw	r2,-4(fp)
   80310:	1005d53a 	srai	r2,r2,20
   80314:	10803fcc 	andi	r2,r2,255
   80318:	e0bffe15 	stw	r2,-8(fp)
   8031c:	e0bfff17 	ldw	r2,-4(fp)
   80320:	1005d13a 	srai	r2,r2,4
   80324:	10803fcc 	andi	r2,r2,255
   80328:	e0bffd15 	stw	r2,-12(fp)

    if (((TP_val >> 31) & 0x1) && (x_val >= 0xC9) && (x_val <= 0xF1)) {
   8032c:	e0bfff17 	ldw	r2,-4(fp)
   80330:	1005d7fa 	srai	r2,r2,31
   80334:	1080004c 	andi	r2,r2,1
   80338:	1080005c 	xori	r2,r2,1
   8033c:	10803fcc 	andi	r2,r2,255
   80340:	1004c03a 	cmpne	r2,r2,zero
   80344:	1000481e 	bne	r2,zero,80468 <TouchPanel_int+0x184>
   80348:	e0bffe17 	ldw	r2,-8(fp)
   8034c:	10803250 	cmplti	r2,r2,201
   80350:	1000451e 	bne	r2,zero,80468 <TouchPanel_int+0x184>
   80354:	e0bffe17 	ldw	r2,-8(fp)
   80358:	10803c88 	cmpgei	r2,r2,242
   8035c:	1000421e 	bne	r2,zero,80468 <TouchPanel_int+0x184>
        if ((y_val >= 0x17) && (y_val <= 0x33)) { // Key 0
   80360:	e0bffd17 	ldw	r2,-12(fp)
   80364:	108005d0 	cmplti	r2,r2,23
   80368:	1000071e 	bne	r2,zero,80388 <TouchPanel_int+0xa4>
   8036c:	e0bffd17 	ldw	r2,-12(fp)
   80370:	10800d08 	cmpgei	r2,r2,52
   80374:	1000041e 	bne	r2,zero,80388 <TouchPanel_int+0xa4>
            key = 0;
   80378:	e03ffc15 	stw	zero,-16(fp)
            IOWR(NIOS_LCD_COMPONENT_0_CONSOLE_BASE, 0, 0x1);
   8037c:	00c00434 	movhi	r3,16
   80380:	00800044 	movi	r2,1
   80384:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0x3D) && (y_val <= 0x58)) { // Key 1
   80388:	e0bffd17 	ldw	r2,-12(fp)
   8038c:	10800f50 	cmplti	r2,r2,61
   80390:	1000081e 	bne	r2,zero,803b4 <TouchPanel_int+0xd0>
   80394:	e0bffd17 	ldw	r2,-12(fp)
   80398:	10801648 	cmpgei	r2,r2,89
   8039c:	1000051e 	bne	r2,zero,803b4 <TouchPanel_int+0xd0>
            key = 1;
   803a0:	00800044 	movi	r2,1
   803a4:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_COMPONENT_0_CONSOLE_BASE, 0, 0x2);
   803a8:	00c00434 	movhi	r3,16
   803ac:	00800084 	movi	r2,2
   803b0:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0x62) && (y_val <= 0x7E)) { // Key 2
   803b4:	e0bffd17 	ldw	r2,-12(fp)
   803b8:	10801890 	cmplti	r2,r2,98
   803bc:	1000081e 	bne	r2,zero,803e0 <TouchPanel_int+0xfc>
   803c0:	e0bffd17 	ldw	r2,-12(fp)
   803c4:	10801fc8 	cmpgei	r2,r2,127
   803c8:	1000051e 	bne	r2,zero,803e0 <TouchPanel_int+0xfc>
            key = 2;
   803cc:	00800084 	movi	r2,2
   803d0:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_COMPONENT_0_CONSOLE_BASE, 0, 0x4);
   803d4:	00c00434 	movhi	r3,16
   803d8:	00800104 	movi	r2,4
   803dc:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0x88) && (y_val <= 0xA4)) { // Key 3
   803e0:	e0bffd17 	ldw	r2,-12(fp)
   803e4:	10802210 	cmplti	r2,r2,136
   803e8:	1000081e 	bne	r2,zero,8040c <TouchPanel_int+0x128>
   803ec:	e0bffd17 	ldw	r2,-12(fp)
   803f0:	10802948 	cmpgei	r2,r2,165
   803f4:	1000051e 	bne	r2,zero,8040c <TouchPanel_int+0x128>
            key = 3;
   803f8:	008000c4 	movi	r2,3
   803fc:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_COMPONENT_0_CONSOLE_BASE, 0, 0x8);
   80400:	00c00434 	movhi	r3,16
   80404:	00800204 	movi	r2,8
   80408:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0xAE) && (y_val <= 0xC9)) { // Key 4
   8040c:	e0bffd17 	ldw	r2,-12(fp)
   80410:	10802b90 	cmplti	r2,r2,174
   80414:	1000081e 	bne	r2,zero,80438 <TouchPanel_int+0x154>
   80418:	e0bffd17 	ldw	r2,-12(fp)
   8041c:	10803288 	cmpgei	r2,r2,202
   80420:	1000051e 	bne	r2,zero,80438 <TouchPanel_int+0x154>
            key = 4;
   80424:	00800104 	movi	r2,4
   80428:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_COMPONENT_0_CONSOLE_BASE, 0, 0x10);
   8042c:	00c00434 	movhi	r3,16
   80430:	00800404 	movi	r2,16
   80434:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0xD3) && (y_val <= 0xEF)) { // Key 5
   80438:	e0bffd17 	ldw	r2,-12(fp)
   8043c:	108034d0 	cmplti	r2,r2,211
   80440:	10000b1e 	bne	r2,zero,80470 <TouchPanel_int+0x18c>
   80444:	e0bffd17 	ldw	r2,-12(fp)
   80448:	10803c08 	cmpgei	r2,r2,240
   8044c:	1000081e 	bne	r2,zero,80470 <TouchPanel_int+0x18c>
            key = 5;
   80450:	00800144 	movi	r2,5
   80454:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_COMPONENT_0_CONSOLE_BASE, 0, 0x20);
   80458:	00c00434 	movhi	r3,16
   8045c:	00800804 	movi	r2,32
   80460:	18800035 	stwio	r2,0(r3)
    int TP_val, x_val, y_val, key = 6;

    TP_val = IORD(NIOS_LCD_COMPONENT_0_TOUCHPANEL_BASE, 0);
    x_val = (TP_val >> 20) & 0xFF; y_val = (TP_val >> 4) & 0xFF;

    if (((TP_val >> 31) & 0x1) && (x_val >= 0xC9) && (x_val <= 0xF1)) {
   80464:	00000206 	br	80470 <TouchPanel_int+0x18c>
        }
        if ((y_val >= 0xD3) && (y_val <= 0xEF)) { // Key 5
            key = 5;
            IOWR(NIOS_LCD_COMPONENT_0_CONSOLE_BASE, 0, 0x20);
        }
    } else IOWR(NIOS_LCD_COMPONENT_0_CONSOLE_BASE, 0, 0x0);
   80468:	00800434 	movhi	r2,16
   8046c:	10000035 	stwio	zero,0(r2)
        
    if (IORD(NIOS_LCD_COMPONENT_0_TOUCHPANEL_BASE, 2) & 0x2) { // posedge
   80470:	00800434 	movhi	r2,16
   80474:	108c1204 	addi	r2,r2,12360
   80478:	10800037 	ldwio	r2,0(r2)
   8047c:	1080008c 	andi	r2,r2,2
   80480:	1005003a 	cmpeq	r2,r2,zero
   80484:	1000161e 	bne	r2,zero,804e0 <TouchPanel_int+0x1fc>
        if ((key == 0) && (width < 480)) {
   80488:	e0bffc17 	ldw	r2,-16(fp)
   8048c:	1004c03a 	cmpne	r2,r2,zero
   80490:	1000081e 	bne	r2,zero,804b4 <TouchPanel_int+0x1d0>
   80494:	d0a00017 	ldw	r2,-32768(gp)
   80498:	10807808 	cmpgei	r2,r2,480
   8049c:	1000051e 	bne	r2,zero,804b4 <TouchPanel_int+0x1d0>
            width++; draw_horizontal_bars(width);
   804a0:	d0a00017 	ldw	r2,-32768(gp)
   804a4:	10800044 	addi	r2,r2,1
   804a8:	d0a00015 	stw	r2,-32768(gp)
   804ac:	d1200017 	ldw	r4,-32768(gp)
   804b0:	00805200 	call	80520 <draw_horizontal_bars>
        }
        if ((key == 1) && (width > 1)) {
   804b4:	e0bffc17 	ldw	r2,-16(fp)
   804b8:	10800058 	cmpnei	r2,r2,1
   804bc:	1000081e 	bne	r2,zero,804e0 <TouchPanel_int+0x1fc>
   804c0:	d0a00017 	ldw	r2,-32768(gp)
   804c4:	10800090 	cmplti	r2,r2,2
   804c8:	1000051e 	bne	r2,zero,804e0 <TouchPanel_int+0x1fc>
            width--; draw_horizontal_bars(width);
   804cc:	d0a00017 	ldw	r2,-32768(gp)
   804d0:	10bfffc4 	addi	r2,r2,-1
   804d4:	d0a00015 	stw	r2,-32768(gp)
   804d8:	d1200017 	ldw	r4,-32768(gp)
   804dc:	00805200 	call	80520 <draw_horizontal_bars>
        }
    }

    IOWR(NIOS_LCD_COMPONENT_0_CONSOLE_BASE, 0, 0x0);
   804e0:	00800434 	movhi	r2,16
   804e4:	10000035 	stwio	zero,0(r2)
    TP_val = IORD(NIOS_LCD_COMPONENT_0_TOUCHPANEL_BASE, 2);
   804e8:	00800434 	movhi	r2,16
   804ec:	108c1204 	addi	r2,r2,12360
   804f0:	10800037 	ldwio	r2,0(r2)
   804f4:	e0bfff15 	stw	r2,-4(fp)
    IOWR(NIOS_LCD_COMPONENT_0_TOUCHPANEL_BASE, 2, TP_val & 0x30);
   804f8:	e0bfff17 	ldw	r2,-4(fp)
   804fc:	10c00c0c 	andi	r3,r2,48
   80500:	00800434 	movhi	r2,16
   80504:	108c1204 	addi	r2,r2,12360
   80508:	10c00035 	stwio	r3,0(r2)
}
   8050c:	e037883a 	mov	sp,fp
   80510:	dfc00117 	ldw	ra,4(sp)
   80514:	df000017 	ldw	fp,0(sp)
   80518:	dec00204 	addi	sp,sp,8
   8051c:	f800283a 	ret

00080520 <draw_horizontal_bars>:

void draw_horizontal_bars(int width) {
   80520:	defff804 	addi	sp,sp,-32
   80524:	dfc00715 	stw	ra,28(sp)
   80528:	df000615 	stw	fp,24(sp)
   8052c:	df000604 	addi	fp,sp,24
   80530:	e13fff15 	stw	r4,-4(fp)
    int i, j, colour = 0;
   80534:	e03ffc15 	stw	zero,-16(fp)
    int RGB = RGB_colour(colour);
   80538:	e13ffc17 	ldw	r4,-16(fp)
   8053c:	00801f00 	call	801f0 <RGB_colour>
   80540:	e0bffb15 	stw	r2,-20(fp)
    int width_counter = 0;
   80544:	e03ffa15 	stw	zero,-24(fp)
    
    // Set pixel position to top-left corner
    IOWR(NIOS_LCD_COMPONENT_0_IMAGE_BASE, 2, 0x1);
   80548:	00c00434 	movhi	r3,16
   8054c:	18cc0204 	addi	r3,r3,12296
   80550:	00800044 	movi	r2,1
   80554:	18800035 	stwio	r2,0(r3)

    for (i = 0; i < 480; i++) {
   80558:	e03ffe15 	stw	zero,-8(fp)
   8055c:	00001c06 	br	805d0 <draw_horizontal_bars+0xb0>
        for (j = 0; j < 640; j++) {
   80560:	e03ffd15 	stw	zero,-12(fp)
   80564:	00000706 	br	80584 <draw_horizontal_bars+0x64>
            IOWR(NIOS_LCD_COMPONENT_0_IMAGE_BASE, 0, RGB);
   80568:	00c00434 	movhi	r3,16
   8056c:	18cc0004 	addi	r3,r3,12288
   80570:	e0bffb17 	ldw	r2,-20(fp)
   80574:	18800035 	stwio	r2,0(r3)
    
    // Set pixel position to top-left corner
    IOWR(NIOS_LCD_COMPONENT_0_IMAGE_BASE, 2, 0x1);

    for (i = 0; i < 480; i++) {
        for (j = 0; j < 640; j++) {
   80578:	e0bffd17 	ldw	r2,-12(fp)
   8057c:	10800044 	addi	r2,r2,1
   80580:	e0bffd15 	stw	r2,-12(fp)
   80584:	e0bffd17 	ldw	r2,-12(fp)
   80588:	1080a010 	cmplti	r2,r2,640
   8058c:	103ff61e 	bne	r2,zero,80568 <draw_horizontal_bars+0x48>
            IOWR(NIOS_LCD_COMPONENT_0_IMAGE_BASE, 0, RGB);
        }
        width_counter++;
   80590:	e0bffa17 	ldw	r2,-24(fp)
   80594:	10800044 	addi	r2,r2,1
   80598:	e0bffa15 	stw	r2,-24(fp)
        if (width_counter == width) {
   8059c:	e0fffa17 	ldw	r3,-24(fp)
   805a0:	e0bfff17 	ldw	r2,-4(fp)
   805a4:	1880071e 	bne	r3,r2,805c4 <draw_horizontal_bars+0xa4>
            colour++;
   805a8:	e0bffc17 	ldw	r2,-16(fp)
   805ac:	10800044 	addi	r2,r2,1
   805b0:	e0bffc15 	stw	r2,-16(fp)
            width_counter = 0;
   805b4:	e03ffa15 	stw	zero,-24(fp)
            RGB = RGB_colour(colour);
   805b8:	e13ffc17 	ldw	r4,-16(fp)
   805bc:	00801f00 	call	801f0 <RGB_colour>
   805c0:	e0bffb15 	stw	r2,-20(fp)
    int width_counter = 0;
    
    // Set pixel position to top-left corner
    IOWR(NIOS_LCD_COMPONENT_0_IMAGE_BASE, 2, 0x1);

    for (i = 0; i < 480; i++) {
   805c4:	e0bffe17 	ldw	r2,-8(fp)
   805c8:	10800044 	addi	r2,r2,1
   805cc:	e0bffe15 	stw	r2,-8(fp)
   805d0:	e0bffe17 	ldw	r2,-8(fp)
   805d4:	10807810 	cmplti	r2,r2,480
   805d8:	103fe11e 	bne	r2,zero,80560 <draw_horizontal_bars+0x40>
            colour++;
            width_counter = 0;
            RGB = RGB_colour(colour);
        }
    }
}
   805dc:	e037883a 	mov	sp,fp
   805e0:	dfc00117 	ldw	ra,4(sp)
   805e4:	df000017 	ldw	fp,0(sp)
   805e8:	dec00204 	addi	sp,sp,8
   805ec:	f800283a 	ret

000805f0 <main>:

int main()
{
   805f0:	defffe04 	addi	sp,sp,-8
   805f4:	dfc00115 	stw	ra,4(sp)
   805f8:	df000015 	stw	fp,0(sp)
   805fc:	d839883a 	mov	fp,sp

    printf("Experiment 1!\n");
   80600:	01000234 	movhi	r4,8
   80604:	2116a604 	addi	r4,r4,23192
   80608:	00806d40 	call	806d4 <puts>
    alt_irq_register(NIOS_LCD_COMPONENT_0_TOUCHPANEL_IRQ, NULL, (void *)TouchPanel_int);
   8060c:	01000044 	movi	r4,1
   80610:	000b883a 	mov	r5,zero
   80614:	01800234 	movhi	r6,8
   80618:	3180b904 	addi	r6,r6,740
   8061c:	00832740 	call	83274 <alt_irq_register>

    // Turn button indicators off
    IOWR(NIOS_LCD_COMPONENT_0_CONSOLE_BASE, 0, 0x0);
   80620:	00800434 	movhi	r2,16
   80624:	10000035 	stwio	zero,0(r2)

    draw_horizontal_bars(32);
   80628:	01000804 	movi	r4,32
   8062c:	00805200 	call	80520 <draw_horizontal_bars>

    while (1);        
   80630:	003fff06 	br	80630 <main+0x40>

00080634 <_puts_r>:
   80634:	defff604 	addi	sp,sp,-40
   80638:	dc400715 	stw	r17,28(sp)
   8063c:	2023883a 	mov	r17,r4
   80640:	2809883a 	mov	r4,r5
   80644:	dfc00915 	stw	ra,36(sp)
   80648:	dcc00815 	stw	r19,32(sp)
   8064c:	2827883a 	mov	r19,r5
   80650:	00806e80 	call	806e8 <strlen>
   80654:	89400217 	ldw	r5,8(r17)
   80658:	00c00234 	movhi	r3,8
   8065c:	18d6aa04 	addi	r3,r3,23208
   80660:	01c00044 	movi	r7,1
   80664:	12000044 	addi	r8,r2,1
   80668:	d8c00515 	stw	r3,20(sp)
   8066c:	d9c00615 	stw	r7,24(sp)
   80670:	d8c00304 	addi	r3,sp,12
   80674:	01c00084 	movi	r7,2
   80678:	8809883a 	mov	r4,r17
   8067c:	d80d883a 	mov	r6,sp
   80680:	d8c00015 	stw	r3,0(sp)
   80684:	dcc00315 	stw	r19,12(sp)
   80688:	da000215 	stw	r8,8(sp)
   8068c:	d9c00115 	stw	r7,4(sp)
   80690:	d8800415 	stw	r2,16(sp)
   80694:	008075c0 	call	8075c <__sfvwrite_r>
   80698:	00ffffc4 	movi	r3,-1
   8069c:	10000626 	beq	r2,zero,806b8 <_puts_r+0x84>
   806a0:	1805883a 	mov	r2,r3
   806a4:	dfc00917 	ldw	ra,36(sp)
   806a8:	dcc00817 	ldw	r19,32(sp)
   806ac:	dc400717 	ldw	r17,28(sp)
   806b0:	dec00a04 	addi	sp,sp,40
   806b4:	f800283a 	ret
   806b8:	00c00284 	movi	r3,10
   806bc:	1805883a 	mov	r2,r3
   806c0:	dfc00917 	ldw	ra,36(sp)
   806c4:	dcc00817 	ldw	r19,32(sp)
   806c8:	dc400717 	ldw	r17,28(sp)
   806cc:	dec00a04 	addi	sp,sp,40
   806d0:	f800283a 	ret

000806d4 <puts>:
   806d4:	00800234 	movhi	r2,8
   806d8:	109d3e04 	addi	r2,r2,29944
   806dc:	200b883a 	mov	r5,r4
   806e0:	11000017 	ldw	r4,0(r2)
   806e4:	00806341 	jmpi	80634 <_puts_r>

000806e8 <strlen>:
   806e8:	208000cc 	andi	r2,r4,3
   806ec:	2011883a 	mov	r8,r4
   806f0:	1000161e 	bne	r2,zero,8074c <strlen+0x64>
   806f4:	20c00017 	ldw	r3,0(r4)
   806f8:	017fbff4 	movhi	r5,65279
   806fc:	297fbfc4 	addi	r5,r5,-257
   80700:	01e02074 	movhi	r7,32897
   80704:	39e02004 	addi	r7,r7,-32640
   80708:	1945883a 	add	r2,r3,r5
   8070c:	11c4703a 	and	r2,r2,r7
   80710:	00c6303a 	nor	r3,zero,r3
   80714:	1886703a 	and	r3,r3,r2
   80718:	18000c1e 	bne	r3,zero,8074c <strlen+0x64>
   8071c:	280d883a 	mov	r6,r5
   80720:	380b883a 	mov	r5,r7
   80724:	21000104 	addi	r4,r4,4
   80728:	20800017 	ldw	r2,0(r4)
   8072c:	1187883a 	add	r3,r2,r6
   80730:	1946703a 	and	r3,r3,r5
   80734:	0084303a 	nor	r2,zero,r2
   80738:	10c4703a 	and	r2,r2,r3
   8073c:	103ff926 	beq	r2,zero,80724 <strlen+0x3c>
   80740:	20800007 	ldb	r2,0(r4)
   80744:	10000326 	beq	r2,zero,80754 <strlen+0x6c>
   80748:	21000044 	addi	r4,r4,1
   8074c:	20800007 	ldb	r2,0(r4)
   80750:	103ffd1e 	bne	r2,zero,80748 <strlen+0x60>
   80754:	2205c83a 	sub	r2,r4,r8
   80758:	f800283a 	ret

0008075c <__sfvwrite_r>:
   8075c:	30800217 	ldw	r2,8(r6)
   80760:	defff504 	addi	sp,sp,-44
   80764:	df000915 	stw	fp,36(sp)
   80768:	dd800715 	stw	r22,28(sp)
   8076c:	dc800315 	stw	r18,12(sp)
   80770:	dfc00a15 	stw	ra,40(sp)
   80774:	ddc00815 	stw	r23,32(sp)
   80778:	dd400615 	stw	r21,24(sp)
   8077c:	dd000515 	stw	r20,20(sp)
   80780:	dcc00415 	stw	r19,16(sp)
   80784:	dc400215 	stw	r17,8(sp)
   80788:	dc000115 	stw	r16,4(sp)
   8078c:	302d883a 	mov	r22,r6
   80790:	2039883a 	mov	fp,r4
   80794:	2825883a 	mov	r18,r5
   80798:	10001c26 	beq	r2,zero,8080c <__sfvwrite_r+0xb0>
   8079c:	29c0030b 	ldhu	r7,12(r5)
   807a0:	3880020c 	andi	r2,r7,8
   807a4:	10002726 	beq	r2,zero,80844 <__sfvwrite_r+0xe8>
   807a8:	28800417 	ldw	r2,16(r5)
   807ac:	10002526 	beq	r2,zero,80844 <__sfvwrite_r+0xe8>
   807b0:	3880008c 	andi	r2,r7,2
   807b4:	b5400017 	ldw	r21,0(r22)
   807b8:	10002826 	beq	r2,zero,8085c <__sfvwrite_r+0x100>
   807bc:	0021883a 	mov	r16,zero
   807c0:	0023883a 	mov	r17,zero
   807c4:	880d883a 	mov	r6,r17
   807c8:	e009883a 	mov	r4,fp
   807cc:	00810004 	movi	r2,1024
   807d0:	80006e26 	beq	r16,zero,8098c <__sfvwrite_r+0x230>
   807d4:	800f883a 	mov	r7,r16
   807d8:	91400717 	ldw	r5,28(r18)
   807dc:	1400012e 	bgeu	r2,r16,807e4 <__sfvwrite_r+0x88>
   807e0:	100f883a 	mov	r7,r2
   807e4:	90c00917 	ldw	r3,36(r18)
   807e8:	183ee83a 	callr	r3
   807ec:	1007883a 	mov	r3,r2
   807f0:	80a1c83a 	sub	r16,r16,r2
   807f4:	88a3883a 	add	r17,r17,r2
   807f8:	00806d0e 	bge	zero,r2,809b0 <__sfvwrite_r+0x254>
   807fc:	b0800217 	ldw	r2,8(r22)
   80800:	10c5c83a 	sub	r2,r2,r3
   80804:	b0800215 	stw	r2,8(r22)
   80808:	103fee1e 	bne	r2,zero,807c4 <__sfvwrite_r+0x68>
   8080c:	0009883a 	mov	r4,zero
   80810:	2005883a 	mov	r2,r4
   80814:	dfc00a17 	ldw	ra,40(sp)
   80818:	df000917 	ldw	fp,36(sp)
   8081c:	ddc00817 	ldw	r23,32(sp)
   80820:	dd800717 	ldw	r22,28(sp)
   80824:	dd400617 	ldw	r21,24(sp)
   80828:	dd000517 	ldw	r20,20(sp)
   8082c:	dcc00417 	ldw	r19,16(sp)
   80830:	dc800317 	ldw	r18,12(sp)
   80834:	dc400217 	ldw	r17,8(sp)
   80838:	dc000117 	ldw	r16,4(sp)
   8083c:	dec00b04 	addi	sp,sp,44
   80840:	f800283a 	ret
   80844:	0081c000 	call	81c00 <__swsetup_r>
   80848:	1000e41e 	bne	r2,zero,80bdc <__sfvwrite_r+0x480>
   8084c:	91c0030b 	ldhu	r7,12(r18)
   80850:	b5400017 	ldw	r21,0(r22)
   80854:	3880008c 	andi	r2,r7,2
   80858:	103fd81e 	bne	r2,zero,807bc <__sfvwrite_r+0x60>
   8085c:	3880004c 	andi	r2,r7,1
   80860:	1005003a 	cmpeq	r2,r2,zero
   80864:	10005726 	beq	r2,zero,809c4 <__sfvwrite_r+0x268>
   80868:	0029883a 	mov	r20,zero
   8086c:	002f883a 	mov	r23,zero
   80870:	a0004226 	beq	r20,zero,8097c <__sfvwrite_r+0x220>
   80874:	3880800c 	andi	r2,r7,512
   80878:	94000217 	ldw	r16,8(r18)
   8087c:	10008b26 	beq	r2,zero,80aac <__sfvwrite_r+0x350>
   80880:	800d883a 	mov	r6,r16
   80884:	a400a536 	bltu	r20,r16,80b1c <__sfvwrite_r+0x3c0>
   80888:	3881200c 	andi	r2,r7,1152
   8088c:	10002726 	beq	r2,zero,8092c <__sfvwrite_r+0x1d0>
   80890:	90800517 	ldw	r2,20(r18)
   80894:	92000417 	ldw	r8,16(r18)
   80898:	91400017 	ldw	r5,0(r18)
   8089c:	1087883a 	add	r3,r2,r2
   808a0:	1887883a 	add	r3,r3,r2
   808a4:	1808d7fa 	srli	r4,r3,31
   808a8:	2a21c83a 	sub	r16,r5,r8
   808ac:	80800044 	addi	r2,r16,1
   808b0:	20c9883a 	add	r4,r4,r3
   808b4:	2027d07a 	srai	r19,r4,1
   808b8:	a085883a 	add	r2,r20,r2
   808bc:	980d883a 	mov	r6,r19
   808c0:	9880022e 	bgeu	r19,r2,808cc <__sfvwrite_r+0x170>
   808c4:	1027883a 	mov	r19,r2
   808c8:	100d883a 	mov	r6,r2
   808cc:	3881000c 	andi	r2,r7,1024
   808d0:	1000b826 	beq	r2,zero,80bb4 <__sfvwrite_r+0x458>
   808d4:	300b883a 	mov	r5,r6
   808d8:	e009883a 	mov	r4,fp
   808dc:	0080bf80 	call	80bf8 <_malloc_r>
   808e0:	10003126 	beq	r2,zero,809a8 <__sfvwrite_r+0x24c>
   808e4:	91400417 	ldw	r5,16(r18)
   808e8:	1009883a 	mov	r4,r2
   808ec:	800d883a 	mov	r6,r16
   808f0:	1023883a 	mov	r17,r2
   808f4:	008141c0 	call	8141c <memcpy>
   808f8:	90c0030b 	ldhu	r3,12(r18)
   808fc:	00beffc4 	movi	r2,-1025
   80900:	1886703a 	and	r3,r3,r2
   80904:	18c02014 	ori	r3,r3,128
   80908:	90c0030d 	sth	r3,12(r18)
   8090c:	9c07c83a 	sub	r3,r19,r16
   80910:	8c05883a 	add	r2,r17,r16
   80914:	a00d883a 	mov	r6,r20
   80918:	a021883a 	mov	r16,r20
   8091c:	90800015 	stw	r2,0(r18)
   80920:	90c00215 	stw	r3,8(r18)
   80924:	94400415 	stw	r17,16(r18)
   80928:	94c00515 	stw	r19,20(r18)
   8092c:	91000017 	ldw	r4,0(r18)
   80930:	b80b883a 	mov	r5,r23
   80934:	a023883a 	mov	r17,r20
   80938:	00814bc0 	call	814bc <memmove>
   8093c:	90c00217 	ldw	r3,8(r18)
   80940:	90800017 	ldw	r2,0(r18)
   80944:	a027883a 	mov	r19,r20
   80948:	1c07c83a 	sub	r3,r3,r16
   8094c:	1405883a 	add	r2,r2,r16
   80950:	90c00215 	stw	r3,8(r18)
   80954:	a021883a 	mov	r16,r20
   80958:	90800015 	stw	r2,0(r18)
   8095c:	b0800217 	ldw	r2,8(r22)
   80960:	1405c83a 	sub	r2,r2,r16
   80964:	b0800215 	stw	r2,8(r22)
   80968:	103fa826 	beq	r2,zero,8080c <__sfvwrite_r+0xb0>
   8096c:	a469c83a 	sub	r20,r20,r17
   80970:	91c0030b 	ldhu	r7,12(r18)
   80974:	bcef883a 	add	r23,r23,r19
   80978:	a03fbe1e 	bne	r20,zero,80874 <__sfvwrite_r+0x118>
   8097c:	adc00017 	ldw	r23,0(r21)
   80980:	ad000117 	ldw	r20,4(r21)
   80984:	ad400204 	addi	r21,r21,8
   80988:	003fb906 	br	80870 <__sfvwrite_r+0x114>
   8098c:	ac400017 	ldw	r17,0(r21)
   80990:	ac000117 	ldw	r16,4(r21)
   80994:	ad400204 	addi	r21,r21,8
   80998:	003f8a06 	br	807c4 <__sfvwrite_r+0x68>
   8099c:	91400417 	ldw	r5,16(r18)
   809a0:	e009883a 	mov	r4,fp
   809a4:	008238c0 	call	8238c <_free_r>
   809a8:	00800304 	movi	r2,12
   809ac:	e0800015 	stw	r2,0(fp)
   809b0:	9080030b 	ldhu	r2,12(r18)
   809b4:	013fffc4 	movi	r4,-1
   809b8:	10801014 	ori	r2,r2,64
   809bc:	9080030d 	sth	r2,12(r18)
   809c0:	003f9306 	br	80810 <__sfvwrite_r+0xb4>
   809c4:	0027883a 	mov	r19,zero
   809c8:	002f883a 	mov	r23,zero
   809cc:	d8000015 	stw	zero,0(sp)
   809d0:	0029883a 	mov	r20,zero
   809d4:	98001e26 	beq	r19,zero,80a50 <__sfvwrite_r+0x2f4>
   809d8:	d8c00017 	ldw	r3,0(sp)
   809dc:	1804c03a 	cmpne	r2,r3,zero
   809e0:	10005e26 	beq	r2,zero,80b5c <__sfvwrite_r+0x400>
   809e4:	9821883a 	mov	r16,r19
   809e8:	a4c0012e 	bgeu	r20,r19,809f0 <__sfvwrite_r+0x294>
   809ec:	a021883a 	mov	r16,r20
   809f0:	91000017 	ldw	r4,0(r18)
   809f4:	90800417 	ldw	r2,16(r18)
   809f8:	91800217 	ldw	r6,8(r18)
   809fc:	91c00517 	ldw	r7,20(r18)
   80a00:	1100022e 	bgeu	r2,r4,80a0c <__sfvwrite_r+0x2b0>
   80a04:	31e3883a 	add	r17,r6,r7
   80a08:	8c001616 	blt	r17,r16,80a64 <__sfvwrite_r+0x308>
   80a0c:	81c03816 	blt	r16,r7,80af0 <__sfvwrite_r+0x394>
   80a10:	90c00917 	ldw	r3,36(r18)
   80a14:	91400717 	ldw	r5,28(r18)
   80a18:	e009883a 	mov	r4,fp
   80a1c:	b80d883a 	mov	r6,r23
   80a20:	183ee83a 	callr	r3
   80a24:	1023883a 	mov	r17,r2
   80a28:	00bfe10e 	bge	zero,r2,809b0 <__sfvwrite_r+0x254>
   80a2c:	a469c83a 	sub	r20,r20,r17
   80a30:	a0001826 	beq	r20,zero,80a94 <__sfvwrite_r+0x338>
   80a34:	b0800217 	ldw	r2,8(r22)
   80a38:	1445c83a 	sub	r2,r2,r17
   80a3c:	b0800215 	stw	r2,8(r22)
   80a40:	103f7226 	beq	r2,zero,8080c <__sfvwrite_r+0xb0>
   80a44:	9c67c83a 	sub	r19,r19,r17
   80a48:	bc6f883a 	add	r23,r23,r17
   80a4c:	983fe21e 	bne	r19,zero,809d8 <__sfvwrite_r+0x27c>
   80a50:	adc00017 	ldw	r23,0(r21)
   80a54:	acc00117 	ldw	r19,4(r21)
   80a58:	ad400204 	addi	r21,r21,8
   80a5c:	d8000015 	stw	zero,0(sp)
   80a60:	003fdc06 	br	809d4 <__sfvwrite_r+0x278>
   80a64:	b80b883a 	mov	r5,r23
   80a68:	880d883a 	mov	r6,r17
   80a6c:	00814bc0 	call	814bc <memmove>
   80a70:	90c00017 	ldw	r3,0(r18)
   80a74:	e009883a 	mov	r4,fp
   80a78:	900b883a 	mov	r5,r18
   80a7c:	1c47883a 	add	r3,r3,r17
   80a80:	90c00015 	stw	r3,0(r18)
   80a84:	0081d3c0 	call	81d3c <_fflush_r>
   80a88:	103fc91e 	bne	r2,zero,809b0 <__sfvwrite_r+0x254>
   80a8c:	a469c83a 	sub	r20,r20,r17
   80a90:	a03fe81e 	bne	r20,zero,80a34 <__sfvwrite_r+0x2d8>
   80a94:	e009883a 	mov	r4,fp
   80a98:	900b883a 	mov	r5,r18
   80a9c:	0081d3c0 	call	81d3c <_fflush_r>
   80aa0:	103fc31e 	bne	r2,zero,809b0 <__sfvwrite_r+0x254>
   80aa4:	d8000015 	stw	zero,0(sp)
   80aa8:	003fe206 	br	80a34 <__sfvwrite_r+0x2d8>
   80aac:	91000017 	ldw	r4,0(r18)
   80ab0:	90800417 	ldw	r2,16(r18)
   80ab4:	1100022e 	bgeu	r2,r4,80ac0 <__sfvwrite_r+0x364>
   80ab8:	8023883a 	mov	r17,r16
   80abc:	85003136 	bltu	r16,r20,80b84 <__sfvwrite_r+0x428>
   80ac0:	91c00517 	ldw	r7,20(r18)
   80ac4:	a1c01836 	bltu	r20,r7,80b28 <__sfvwrite_r+0x3cc>
   80ac8:	90c00917 	ldw	r3,36(r18)
   80acc:	91400717 	ldw	r5,28(r18)
   80ad0:	e009883a 	mov	r4,fp
   80ad4:	b80d883a 	mov	r6,r23
   80ad8:	183ee83a 	callr	r3
   80adc:	1021883a 	mov	r16,r2
   80ae0:	00bfb30e 	bge	zero,r2,809b0 <__sfvwrite_r+0x254>
   80ae4:	1023883a 	mov	r17,r2
   80ae8:	1027883a 	mov	r19,r2
   80aec:	003f9b06 	br	8095c <__sfvwrite_r+0x200>
   80af0:	b80b883a 	mov	r5,r23
   80af4:	800d883a 	mov	r6,r16
   80af8:	00814bc0 	call	814bc <memmove>
   80afc:	90c00217 	ldw	r3,8(r18)
   80b00:	90800017 	ldw	r2,0(r18)
   80b04:	8023883a 	mov	r17,r16
   80b08:	1c07c83a 	sub	r3,r3,r16
   80b0c:	1405883a 	add	r2,r2,r16
   80b10:	90c00215 	stw	r3,8(r18)
   80b14:	90800015 	stw	r2,0(r18)
   80b18:	003fc406 	br	80a2c <__sfvwrite_r+0x2d0>
   80b1c:	a00d883a 	mov	r6,r20
   80b20:	a021883a 	mov	r16,r20
   80b24:	003f8106 	br	8092c <__sfvwrite_r+0x1d0>
   80b28:	b80b883a 	mov	r5,r23
   80b2c:	a00d883a 	mov	r6,r20
   80b30:	00814bc0 	call	814bc <memmove>
   80b34:	90c00217 	ldw	r3,8(r18)
   80b38:	90800017 	ldw	r2,0(r18)
   80b3c:	a021883a 	mov	r16,r20
   80b40:	1d07c83a 	sub	r3,r3,r20
   80b44:	1505883a 	add	r2,r2,r20
   80b48:	a023883a 	mov	r17,r20
   80b4c:	a027883a 	mov	r19,r20
   80b50:	90c00215 	stw	r3,8(r18)
   80b54:	90800015 	stw	r2,0(r18)
   80b58:	003f8006 	br	8095c <__sfvwrite_r+0x200>
   80b5c:	b809883a 	mov	r4,r23
   80b60:	01400284 	movi	r5,10
   80b64:	980d883a 	mov	r6,r19
   80b68:	00813380 	call	81338 <memchr>
   80b6c:	10001726 	beq	r2,zero,80bcc <__sfvwrite_r+0x470>
   80b70:	15c5c83a 	sub	r2,r2,r23
   80b74:	15000044 	addi	r20,r2,1
   80b78:	00800044 	movi	r2,1
   80b7c:	d8800015 	stw	r2,0(sp)
   80b80:	003f9806 	br	809e4 <__sfvwrite_r+0x288>
   80b84:	b80b883a 	mov	r5,r23
   80b88:	800d883a 	mov	r6,r16
   80b8c:	00814bc0 	call	814bc <memmove>
   80b90:	90c00017 	ldw	r3,0(r18)
   80b94:	e009883a 	mov	r4,fp
   80b98:	900b883a 	mov	r5,r18
   80b9c:	1c07883a 	add	r3,r3,r16
   80ba0:	90c00015 	stw	r3,0(r18)
   80ba4:	8027883a 	mov	r19,r16
   80ba8:	0081d3c0 	call	81d3c <_fflush_r>
   80bac:	103f6b26 	beq	r2,zero,8095c <__sfvwrite_r+0x200>
   80bb0:	003f7f06 	br	809b0 <__sfvwrite_r+0x254>
   80bb4:	400b883a 	mov	r5,r8
   80bb8:	e009883a 	mov	r4,fp
   80bbc:	008159c0 	call	8159c <_realloc_r>
   80bc0:	103f7626 	beq	r2,zero,8099c <__sfvwrite_r+0x240>
   80bc4:	1023883a 	mov	r17,r2
   80bc8:	003f5006 	br	8090c <__sfvwrite_r+0x1b0>
   80bcc:	00c00044 	movi	r3,1
   80bd0:	9d000044 	addi	r20,r19,1
   80bd4:	d8c00015 	stw	r3,0(sp)
   80bd8:	003f8206 	br	809e4 <__sfvwrite_r+0x288>
   80bdc:	9080030b 	ldhu	r2,12(r18)
   80be0:	00c00244 	movi	r3,9
   80be4:	013fffc4 	movi	r4,-1
   80be8:	10801014 	ori	r2,r2,64
   80bec:	9080030d 	sth	r2,12(r18)
   80bf0:	e0c00015 	stw	r3,0(fp)
   80bf4:	003f0606 	br	80810 <__sfvwrite_r+0xb4>

00080bf8 <_malloc_r>:
   80bf8:	defff604 	addi	sp,sp,-40
   80bfc:	28c002c4 	addi	r3,r5,11
   80c00:	00800584 	movi	r2,22
   80c04:	dc800215 	stw	r18,8(sp)
   80c08:	dfc00915 	stw	ra,36(sp)
   80c0c:	df000815 	stw	fp,32(sp)
   80c10:	ddc00715 	stw	r23,28(sp)
   80c14:	dd800615 	stw	r22,24(sp)
   80c18:	dd400515 	stw	r21,20(sp)
   80c1c:	dd000415 	stw	r20,16(sp)
   80c20:	dcc00315 	stw	r19,12(sp)
   80c24:	dc400115 	stw	r17,4(sp)
   80c28:	dc000015 	stw	r16,0(sp)
   80c2c:	2025883a 	mov	r18,r4
   80c30:	10c01236 	bltu	r2,r3,80c7c <_malloc_r+0x84>
   80c34:	04400404 	movi	r17,16
   80c38:	8940142e 	bgeu	r17,r5,80c8c <_malloc_r+0x94>
   80c3c:	00800304 	movi	r2,12
   80c40:	0007883a 	mov	r3,zero
   80c44:	90800015 	stw	r2,0(r18)
   80c48:	1805883a 	mov	r2,r3
   80c4c:	dfc00917 	ldw	ra,36(sp)
   80c50:	df000817 	ldw	fp,32(sp)
   80c54:	ddc00717 	ldw	r23,28(sp)
   80c58:	dd800617 	ldw	r22,24(sp)
   80c5c:	dd400517 	ldw	r21,20(sp)
   80c60:	dd000417 	ldw	r20,16(sp)
   80c64:	dcc00317 	ldw	r19,12(sp)
   80c68:	dc800217 	ldw	r18,8(sp)
   80c6c:	dc400117 	ldw	r17,4(sp)
   80c70:	dc000017 	ldw	r16,0(sp)
   80c74:	dec00a04 	addi	sp,sp,40
   80c78:	f800283a 	ret
   80c7c:	00bffe04 	movi	r2,-8
   80c80:	18a2703a 	and	r17,r3,r2
   80c84:	883fed16 	blt	r17,zero,80c3c <_malloc_r+0x44>
   80c88:	897fec36 	bltu	r17,r5,80c3c <_malloc_r+0x44>
   80c8c:	9009883a 	mov	r4,r18
   80c90:	00838040 	call	83804 <__malloc_lock>
   80c94:	00807dc4 	movi	r2,503
   80c98:	14402b2e 	bgeu	r2,r17,80d48 <_malloc_r+0x150>
   80c9c:	8806d27a 	srli	r3,r17,9
   80ca0:	18003f1e 	bne	r3,zero,80da0 <_malloc_r+0x1a8>
   80ca4:	880cd0fa 	srli	r6,r17,3
   80ca8:	300490fa 	slli	r2,r6,3
   80cac:	02c00234 	movhi	r11,8
   80cb0:	5ad7b904 	addi	r11,r11,24292
   80cb4:	12cb883a 	add	r5,r2,r11
   80cb8:	2c000317 	ldw	r16,12(r5)
   80cbc:	580f883a 	mov	r7,r11
   80cc0:	2c00041e 	bne	r5,r16,80cd4 <_malloc_r+0xdc>
   80cc4:	00000a06 	br	80cf0 <_malloc_r+0xf8>
   80cc8:	1800860e 	bge	r3,zero,80ee4 <_malloc_r+0x2ec>
   80ccc:	84000317 	ldw	r16,12(r16)
   80cd0:	2c000726 	beq	r5,r16,80cf0 <_malloc_r+0xf8>
   80cd4:	80800117 	ldw	r2,4(r16)
   80cd8:	00ffff04 	movi	r3,-4
   80cdc:	10c8703a 	and	r4,r2,r3
   80ce0:	2447c83a 	sub	r3,r4,r17
   80ce4:	008003c4 	movi	r2,15
   80ce8:	10fff70e 	bge	r2,r3,80cc8 <_malloc_r+0xd0>
   80cec:	31bfffc4 	addi	r6,r6,-1
   80cf0:	32400044 	addi	r9,r6,1
   80cf4:	02800234 	movhi	r10,8
   80cf8:	5297bb04 	addi	r10,r10,24300
   80cfc:	54000217 	ldw	r16,8(r10)
   80d00:	8280a026 	beq	r16,r10,80f84 <_malloc_r+0x38c>
   80d04:	80800117 	ldw	r2,4(r16)
   80d08:	00ffff04 	movi	r3,-4
   80d0c:	10ca703a 	and	r5,r2,r3
   80d10:	2c4dc83a 	sub	r6,r5,r17
   80d14:	008003c4 	movi	r2,15
   80d18:	11808316 	blt	r2,r6,80f28 <_malloc_r+0x330>
   80d1c:	52800315 	stw	r10,12(r10)
   80d20:	52800215 	stw	r10,8(r10)
   80d24:	30002916 	blt	r6,zero,80dcc <_malloc_r+0x1d4>
   80d28:	8147883a 	add	r3,r16,r5
   80d2c:	18800117 	ldw	r2,4(r3)
   80d30:	9009883a 	mov	r4,r18
   80d34:	10800054 	ori	r2,r2,1
   80d38:	18800115 	stw	r2,4(r3)
   80d3c:	00838240 	call	83824 <__malloc_unlock>
   80d40:	80c00204 	addi	r3,r16,8
   80d44:	003fc006 	br	80c48 <_malloc_r+0x50>
   80d48:	02c00234 	movhi	r11,8
   80d4c:	5ad7b904 	addi	r11,r11,24292
   80d50:	8ac5883a 	add	r2,r17,r11
   80d54:	14000317 	ldw	r16,12(r2)
   80d58:	580f883a 	mov	r7,r11
   80d5c:	8806d0fa 	srli	r3,r17,3
   80d60:	14006c26 	beq	r2,r16,80f14 <_malloc_r+0x31c>
   80d64:	80c00117 	ldw	r3,4(r16)
   80d68:	00bfff04 	movi	r2,-4
   80d6c:	81800317 	ldw	r6,12(r16)
   80d70:	1886703a 	and	r3,r3,r2
   80d74:	80c7883a 	add	r3,r16,r3
   80d78:	18800117 	ldw	r2,4(r3)
   80d7c:	81400217 	ldw	r5,8(r16)
   80d80:	9009883a 	mov	r4,r18
   80d84:	10800054 	ori	r2,r2,1
   80d88:	18800115 	stw	r2,4(r3)
   80d8c:	31400215 	stw	r5,8(r6)
   80d90:	29800315 	stw	r6,12(r5)
   80d94:	00838240 	call	83824 <__malloc_unlock>
   80d98:	80c00204 	addi	r3,r16,8
   80d9c:	003faa06 	br	80c48 <_malloc_r+0x50>
   80da0:	00800104 	movi	r2,4
   80da4:	10c0052e 	bgeu	r2,r3,80dbc <_malloc_r+0x1c4>
   80da8:	00800504 	movi	r2,20
   80dac:	10c07836 	bltu	r2,r3,80f90 <_malloc_r+0x398>
   80db0:	198016c4 	addi	r6,r3,91
   80db4:	300490fa 	slli	r2,r6,3
   80db8:	003fbc06 	br	80cac <_malloc_r+0xb4>
   80dbc:	8804d1ba 	srli	r2,r17,6
   80dc0:	11800e04 	addi	r6,r2,56
   80dc4:	300490fa 	slli	r2,r6,3
   80dc8:	003fb806 	br	80cac <_malloc_r+0xb4>
   80dcc:	00807fc4 	movi	r2,511
   80dd0:	1140bb36 	bltu	r2,r5,810c0 <_malloc_r+0x4c8>
   80dd4:	2806d0fa 	srli	r3,r5,3
   80dd8:	573ffe04 	addi	fp,r10,-8
   80ddc:	00800044 	movi	r2,1
   80de0:	180890fa 	slli	r4,r3,3
   80de4:	1807d0ba 	srai	r3,r3,2
   80de8:	e1c00117 	ldw	r7,4(fp)
   80dec:	5909883a 	add	r4,r11,r4
   80df0:	21400217 	ldw	r5,8(r4)
   80df4:	10c4983a 	sll	r2,r2,r3
   80df8:	81000315 	stw	r4,12(r16)
   80dfc:	81400215 	stw	r5,8(r16)
   80e00:	388eb03a 	or	r7,r7,r2
   80e04:	2c000315 	stw	r16,12(r5)
   80e08:	24000215 	stw	r16,8(r4)
   80e0c:	e1c00115 	stw	r7,4(fp)
   80e10:	4807883a 	mov	r3,r9
   80e14:	4800cd16 	blt	r9,zero,8114c <_malloc_r+0x554>
   80e18:	1807d0ba 	srai	r3,r3,2
   80e1c:	00800044 	movi	r2,1
   80e20:	10c8983a 	sll	r4,r2,r3
   80e24:	39004436 	bltu	r7,r4,80f38 <_malloc_r+0x340>
   80e28:	21c4703a 	and	r2,r4,r7
   80e2c:	10000a1e 	bne	r2,zero,80e58 <_malloc_r+0x260>
   80e30:	2109883a 	add	r4,r4,r4
   80e34:	00bfff04 	movi	r2,-4
   80e38:	4884703a 	and	r2,r9,r2
   80e3c:	3906703a 	and	r3,r7,r4
   80e40:	12400104 	addi	r9,r2,4
   80e44:	1800041e 	bne	r3,zero,80e58 <_malloc_r+0x260>
   80e48:	2109883a 	add	r4,r4,r4
   80e4c:	3904703a 	and	r2,r7,r4
   80e50:	4a400104 	addi	r9,r9,4
   80e54:	103ffc26 	beq	r2,zero,80e48 <_malloc_r+0x250>
   80e58:	480490fa 	slli	r2,r9,3
   80e5c:	4819883a 	mov	r12,r9
   80e60:	023fff04 	movi	r8,-4
   80e64:	589b883a 	add	r13,r11,r2
   80e68:	6807883a 	mov	r3,r13
   80e6c:	014003c4 	movi	r5,15
   80e70:	1c000317 	ldw	r16,12(r3)
   80e74:	1c00041e 	bne	r3,r16,80e88 <_malloc_r+0x290>
   80e78:	0000a706 	br	81118 <_malloc_r+0x520>
   80e7c:	3000ab0e 	bge	r6,zero,8112c <_malloc_r+0x534>
   80e80:	84000317 	ldw	r16,12(r16)
   80e84:	1c00a426 	beq	r3,r16,81118 <_malloc_r+0x520>
   80e88:	80800117 	ldw	r2,4(r16)
   80e8c:	1204703a 	and	r2,r2,r8
   80e90:	144dc83a 	sub	r6,r2,r17
   80e94:	29bff90e 	bge	r5,r6,80e7c <_malloc_r+0x284>
   80e98:	81000317 	ldw	r4,12(r16)
   80e9c:	80c00217 	ldw	r3,8(r16)
   80ea0:	89400054 	ori	r5,r17,1
   80ea4:	8445883a 	add	r2,r16,r17
   80ea8:	20c00215 	stw	r3,8(r4)
   80eac:	19000315 	stw	r4,12(r3)
   80eb0:	81400115 	stw	r5,4(r16)
   80eb4:	1187883a 	add	r3,r2,r6
   80eb8:	31000054 	ori	r4,r6,1
   80ebc:	50800315 	stw	r2,12(r10)
   80ec0:	50800215 	stw	r2,8(r10)
   80ec4:	19800015 	stw	r6,0(r3)
   80ec8:	11000115 	stw	r4,4(r2)
   80ecc:	12800215 	stw	r10,8(r2)
   80ed0:	12800315 	stw	r10,12(r2)
   80ed4:	9009883a 	mov	r4,r18
   80ed8:	00838240 	call	83824 <__malloc_unlock>
   80edc:	80c00204 	addi	r3,r16,8
   80ee0:	003f5906 	br	80c48 <_malloc_r+0x50>
   80ee4:	8109883a 	add	r4,r16,r4
   80ee8:	20800117 	ldw	r2,4(r4)
   80eec:	80c00217 	ldw	r3,8(r16)
   80ef0:	81400317 	ldw	r5,12(r16)
   80ef4:	10800054 	ori	r2,r2,1
   80ef8:	20800115 	stw	r2,4(r4)
   80efc:	28c00215 	stw	r3,8(r5)
   80f00:	19400315 	stw	r5,12(r3)
   80f04:	9009883a 	mov	r4,r18
   80f08:	00838240 	call	83824 <__malloc_unlock>
   80f0c:	80c00204 	addi	r3,r16,8
   80f10:	003f4d06 	br	80c48 <_malloc_r+0x50>
   80f14:	80800204 	addi	r2,r16,8
   80f18:	14000317 	ldw	r16,12(r2)
   80f1c:	143f911e 	bne	r2,r16,80d64 <_malloc_r+0x16c>
   80f20:	1a400084 	addi	r9,r3,2
   80f24:	003f7306 	br	80cf4 <_malloc_r+0xfc>
   80f28:	88c00054 	ori	r3,r17,1
   80f2c:	8445883a 	add	r2,r16,r17
   80f30:	80c00115 	stw	r3,4(r16)
   80f34:	003fdf06 	br	80eb4 <_malloc_r+0x2bc>
   80f38:	e4000217 	ldw	r16,8(fp)
   80f3c:	00bfff04 	movi	r2,-4
   80f40:	80c00117 	ldw	r3,4(r16)
   80f44:	802d883a 	mov	r22,r16
   80f48:	18aa703a 	and	r21,r3,r2
   80f4c:	ac401636 	bltu	r21,r17,80fa8 <_malloc_r+0x3b0>
   80f50:	ac49c83a 	sub	r4,r21,r17
   80f54:	008003c4 	movi	r2,15
   80f58:	1100130e 	bge	r2,r4,80fa8 <_malloc_r+0x3b0>
   80f5c:	88800054 	ori	r2,r17,1
   80f60:	8447883a 	add	r3,r16,r17
   80f64:	80800115 	stw	r2,4(r16)
   80f68:	20800054 	ori	r2,r4,1
   80f6c:	18800115 	stw	r2,4(r3)
   80f70:	e0c00215 	stw	r3,8(fp)
   80f74:	9009883a 	mov	r4,r18
   80f78:	00838240 	call	83824 <__malloc_unlock>
   80f7c:	80c00204 	addi	r3,r16,8
   80f80:	003f3106 	br	80c48 <_malloc_r+0x50>
   80f84:	39c00117 	ldw	r7,4(r7)
   80f88:	573ffe04 	addi	fp,r10,-8
   80f8c:	003fa006 	br	80e10 <_malloc_r+0x218>
   80f90:	00801504 	movi	r2,84
   80f94:	10c06736 	bltu	r2,r3,81134 <_malloc_r+0x53c>
   80f98:	8804d33a 	srli	r2,r17,12
   80f9c:	11801b84 	addi	r6,r2,110
   80fa0:	300490fa 	slli	r2,r6,3
   80fa4:	003f4106 	br	80cac <_malloc_r+0xb4>
   80fa8:	d0a6a217 	ldw	r2,-25976(gp)
   80fac:	d0e00417 	ldw	r3,-32752(gp)
   80fb0:	053fffc4 	movi	r20,-1
   80fb4:	10800404 	addi	r2,r2,16
   80fb8:	88a7883a 	add	r19,r17,r2
   80fbc:	1d000326 	beq	r3,r20,80fcc <_malloc_r+0x3d4>
   80fc0:	98c3ffc4 	addi	r3,r19,4095
   80fc4:	00bc0004 	movi	r2,-4096
   80fc8:	18a6703a 	and	r19,r3,r2
   80fcc:	9009883a 	mov	r4,r18
   80fd0:	980b883a 	mov	r5,r19
   80fd4:	0081b900 	call	81b90 <_sbrk_r>
   80fd8:	1009883a 	mov	r4,r2
   80fdc:	15000426 	beq	r2,r20,80ff0 <_malloc_r+0x3f8>
   80fe0:	854b883a 	add	r5,r16,r21
   80fe4:	1029883a 	mov	r20,r2
   80fe8:	11405a2e 	bgeu	r2,r5,81154 <_malloc_r+0x55c>
   80fec:	87000c26 	beq	r16,fp,81020 <_malloc_r+0x428>
   80ff0:	e4000217 	ldw	r16,8(fp)
   80ff4:	80c00117 	ldw	r3,4(r16)
   80ff8:	00bfff04 	movi	r2,-4
   80ffc:	1884703a 	and	r2,r3,r2
   81000:	14400336 	bltu	r2,r17,81010 <_malloc_r+0x418>
   81004:	1449c83a 	sub	r4,r2,r17
   81008:	008003c4 	movi	r2,15
   8100c:	113fd316 	blt	r2,r4,80f5c <_malloc_r+0x364>
   81010:	9009883a 	mov	r4,r18
   81014:	00838240 	call	83824 <__malloc_unlock>
   81018:	0007883a 	mov	r3,zero
   8101c:	003f0a06 	br	80c48 <_malloc_r+0x50>
   81020:	05c00274 	movhi	r23,9
   81024:	bde3e904 	addi	r23,r23,-28764
   81028:	b8800017 	ldw	r2,0(r23)
   8102c:	988d883a 	add	r6,r19,r2
   81030:	b9800015 	stw	r6,0(r23)
   81034:	d0e00417 	ldw	r3,-32752(gp)
   81038:	00bfffc4 	movi	r2,-1
   8103c:	18808e26 	beq	r3,r2,81278 <_malloc_r+0x680>
   81040:	2145c83a 	sub	r2,r4,r5
   81044:	3085883a 	add	r2,r6,r2
   81048:	b8800015 	stw	r2,0(r23)
   8104c:	20c001cc 	andi	r3,r4,7
   81050:	18005f1e 	bne	r3,zero,811d0 <_malloc_r+0x5d8>
   81054:	000b883a 	mov	r5,zero
   81058:	a4c5883a 	add	r2,r20,r19
   8105c:	1083ffcc 	andi	r2,r2,4095
   81060:	00c40004 	movi	r3,4096
   81064:	1887c83a 	sub	r3,r3,r2
   81068:	28e7883a 	add	r19,r5,r3
   8106c:	9009883a 	mov	r4,r18
   81070:	980b883a 	mov	r5,r19
   81074:	0081b900 	call	81b90 <_sbrk_r>
   81078:	1007883a 	mov	r3,r2
   8107c:	00bfffc4 	movi	r2,-1
   81080:	18807a26 	beq	r3,r2,8126c <_malloc_r+0x674>
   81084:	1d05c83a 	sub	r2,r3,r20
   81088:	9885883a 	add	r2,r19,r2
   8108c:	10c00054 	ori	r3,r2,1
   81090:	b8800017 	ldw	r2,0(r23)
   81094:	a021883a 	mov	r16,r20
   81098:	a0c00115 	stw	r3,4(r20)
   8109c:	9885883a 	add	r2,r19,r2
   810a0:	b8800015 	stw	r2,0(r23)
   810a4:	e5000215 	stw	r20,8(fp)
   810a8:	b7003626 	beq	r22,fp,81184 <_malloc_r+0x58c>
   810ac:	018003c4 	movi	r6,15
   810b0:	35404b36 	bltu	r6,r21,811e0 <_malloc_r+0x5e8>
   810b4:	00800044 	movi	r2,1
   810b8:	a0800115 	stw	r2,4(r20)
   810bc:	003fcd06 	br	80ff4 <_malloc_r+0x3fc>
   810c0:	2808d27a 	srli	r4,r5,9
   810c4:	2000371e 	bne	r4,zero,811a4 <_malloc_r+0x5ac>
   810c8:	2808d0fa 	srli	r4,r5,3
   810cc:	200690fa 	slli	r3,r4,3
   810d0:	1ad1883a 	add	r8,r3,r11
   810d4:	41800217 	ldw	r6,8(r8)
   810d8:	41805b26 	beq	r8,r6,81248 <_malloc_r+0x650>
   810dc:	30800117 	ldw	r2,4(r6)
   810e0:	00ffff04 	movi	r3,-4
   810e4:	10c4703a 	and	r2,r2,r3
   810e8:	2880022e 	bgeu	r5,r2,810f4 <_malloc_r+0x4fc>
   810ec:	31800217 	ldw	r6,8(r6)
   810f0:	41bffa1e 	bne	r8,r6,810dc <_malloc_r+0x4e4>
   810f4:	32000317 	ldw	r8,12(r6)
   810f8:	39c00117 	ldw	r7,4(r7)
   810fc:	82000315 	stw	r8,12(r16)
   81100:	81800215 	stw	r6,8(r16)
   81104:	07000234 	movhi	fp,8
   81108:	e717b904 	addi	fp,fp,24292
   8110c:	34000315 	stw	r16,12(r6)
   81110:	44000215 	stw	r16,8(r8)
   81114:	003f3e06 	br	80e10 <_malloc_r+0x218>
   81118:	63000044 	addi	r12,r12,1
   8111c:	608000cc 	andi	r2,r12,3
   81120:	10005d26 	beq	r2,zero,81298 <_malloc_r+0x6a0>
   81124:	18c00204 	addi	r3,r3,8
   81128:	003f5106 	br	80e70 <_malloc_r+0x278>
   8112c:	8089883a 	add	r4,r16,r2
   81130:	003f6d06 	br	80ee8 <_malloc_r+0x2f0>
   81134:	00805504 	movi	r2,340
   81138:	10c02036 	bltu	r2,r3,811bc <_malloc_r+0x5c4>
   8113c:	8804d3fa 	srli	r2,r17,15
   81140:	11801dc4 	addi	r6,r2,119
   81144:	300490fa 	slli	r2,r6,3
   81148:	003ed806 	br	80cac <_malloc_r+0xb4>
   8114c:	48c000c4 	addi	r3,r9,3
   81150:	003f3106 	br	80e18 <_malloc_r+0x220>
   81154:	05c00274 	movhi	r23,9
   81158:	bde3e904 	addi	r23,r23,-28764
   8115c:	b8800017 	ldw	r2,0(r23)
   81160:	988d883a 	add	r6,r19,r2
   81164:	b9800015 	stw	r6,0(r23)
   81168:	293fb21e 	bne	r5,r4,81034 <_malloc_r+0x43c>
   8116c:	2083ffcc 	andi	r2,r4,4095
   81170:	103fb01e 	bne	r2,zero,81034 <_malloc_r+0x43c>
   81174:	e4000217 	ldw	r16,8(fp)
   81178:	9d45883a 	add	r2,r19,r21
   8117c:	10800054 	ori	r2,r2,1
   81180:	80800115 	stw	r2,4(r16)
   81184:	b8c00017 	ldw	r3,0(r23)
   81188:	d0a6a317 	ldw	r2,-25972(gp)
   8118c:	10c0012e 	bgeu	r2,r3,81194 <_malloc_r+0x59c>
   81190:	d0e6a315 	stw	r3,-25972(gp)
   81194:	d0a6a417 	ldw	r2,-25968(gp)
   81198:	10ff962e 	bgeu	r2,r3,80ff4 <_malloc_r+0x3fc>
   8119c:	d0e6a415 	stw	r3,-25968(gp)
   811a0:	003f9406 	br	80ff4 <_malloc_r+0x3fc>
   811a4:	00800104 	movi	r2,4
   811a8:	11001e36 	bltu	r2,r4,81224 <_malloc_r+0x62c>
   811ac:	2804d1ba 	srli	r2,r5,6
   811b0:	11000e04 	addi	r4,r2,56
   811b4:	200690fa 	slli	r3,r4,3
   811b8:	003fc506 	br	810d0 <_malloc_r+0x4d8>
   811bc:	00815504 	movi	r2,1364
   811c0:	10c01d2e 	bgeu	r2,r3,81238 <_malloc_r+0x640>
   811c4:	01801f84 	movi	r6,126
   811c8:	0080fc04 	movi	r2,1008
   811cc:	003eb706 	br	80cac <_malloc_r+0xb4>
   811d0:	00800204 	movi	r2,8
   811d4:	10cbc83a 	sub	r5,r2,r3
   811d8:	2169883a 	add	r20,r4,r5
   811dc:	003f9e06 	br	81058 <_malloc_r+0x460>
   811e0:	00bffe04 	movi	r2,-8
   811e4:	a93ffd04 	addi	r4,r21,-12
   811e8:	2088703a 	and	r4,r4,r2
   811ec:	b10b883a 	add	r5,r22,r4
   811f0:	00c00144 	movi	r3,5
   811f4:	28c00215 	stw	r3,8(r5)
   811f8:	28c00115 	stw	r3,4(r5)
   811fc:	b0800117 	ldw	r2,4(r22)
   81200:	1080004c 	andi	r2,r2,1
   81204:	2084b03a 	or	r2,r4,r2
   81208:	b0800115 	stw	r2,4(r22)
   8120c:	313fdd2e 	bgeu	r6,r4,81184 <_malloc_r+0x58c>
   81210:	b1400204 	addi	r5,r22,8
   81214:	9009883a 	mov	r4,r18
   81218:	008238c0 	call	8238c <_free_r>
   8121c:	e4000217 	ldw	r16,8(fp)
   81220:	003fd806 	br	81184 <_malloc_r+0x58c>
   81224:	00800504 	movi	r2,20
   81228:	11001536 	bltu	r2,r4,81280 <_malloc_r+0x688>
   8122c:	210016c4 	addi	r4,r4,91
   81230:	200690fa 	slli	r3,r4,3
   81234:	003fa606 	br	810d0 <_malloc_r+0x4d8>
   81238:	8804d4ba 	srli	r2,r17,18
   8123c:	11801f04 	addi	r6,r2,124
   81240:	300490fa 	slli	r2,r6,3
   81244:	003e9906 	br	80cac <_malloc_r+0xb4>
   81248:	2009d0ba 	srai	r4,r4,2
   8124c:	01400234 	movhi	r5,8
   81250:	2957b904 	addi	r5,r5,24292
   81254:	00c00044 	movi	r3,1
   81258:	28800117 	ldw	r2,4(r5)
   8125c:	1906983a 	sll	r3,r3,r4
   81260:	10c4b03a 	or	r2,r2,r3
   81264:	28800115 	stw	r2,4(r5)
   81268:	003fa306 	br	810f8 <_malloc_r+0x500>
   8126c:	0027883a 	mov	r19,zero
   81270:	00c00044 	movi	r3,1
   81274:	003f8606 	br	81090 <_malloc_r+0x498>
   81278:	d1200415 	stw	r4,-32752(gp)
   8127c:	003f7306 	br	8104c <_malloc_r+0x454>
   81280:	00801504 	movi	r2,84
   81284:	11001936 	bltu	r2,r4,812ec <_malloc_r+0x6f4>
   81288:	2804d33a 	srli	r2,r5,12
   8128c:	11001b84 	addi	r4,r2,110
   81290:	200690fa 	slli	r3,r4,3
   81294:	003f8e06 	br	810d0 <_malloc_r+0x4d8>
   81298:	480b883a 	mov	r5,r9
   8129c:	6807883a 	mov	r3,r13
   812a0:	288000cc 	andi	r2,r5,3
   812a4:	18fffe04 	addi	r3,r3,-8
   812a8:	297fffc4 	addi	r5,r5,-1
   812ac:	10001526 	beq	r2,zero,81304 <_malloc_r+0x70c>
   812b0:	18800217 	ldw	r2,8(r3)
   812b4:	10fffa26 	beq	r2,r3,812a0 <_malloc_r+0x6a8>
   812b8:	2109883a 	add	r4,r4,r4
   812bc:	393f1e36 	bltu	r7,r4,80f38 <_malloc_r+0x340>
   812c0:	203f1d26 	beq	r4,zero,80f38 <_malloc_r+0x340>
   812c4:	21c4703a 	and	r2,r4,r7
   812c8:	10000226 	beq	r2,zero,812d4 <_malloc_r+0x6dc>
   812cc:	6013883a 	mov	r9,r12
   812d0:	003ee106 	br	80e58 <_malloc_r+0x260>
   812d4:	2109883a 	add	r4,r4,r4
   812d8:	3904703a 	and	r2,r7,r4
   812dc:	63000104 	addi	r12,r12,4
   812e0:	103ffc26 	beq	r2,zero,812d4 <_malloc_r+0x6dc>
   812e4:	6013883a 	mov	r9,r12
   812e8:	003edb06 	br	80e58 <_malloc_r+0x260>
   812ec:	00805504 	movi	r2,340
   812f0:	11000836 	bltu	r2,r4,81314 <_malloc_r+0x71c>
   812f4:	2804d3fa 	srli	r2,r5,15
   812f8:	11001dc4 	addi	r4,r2,119
   812fc:	200690fa 	slli	r3,r4,3
   81300:	003f7306 	br	810d0 <_malloc_r+0x4d8>
   81304:	0104303a 	nor	r2,zero,r4
   81308:	388e703a 	and	r7,r7,r2
   8130c:	e1c00115 	stw	r7,4(fp)
   81310:	003fe906 	br	812b8 <_malloc_r+0x6c0>
   81314:	00815504 	movi	r2,1364
   81318:	1100032e 	bgeu	r2,r4,81328 <_malloc_r+0x730>
   8131c:	01001f84 	movi	r4,126
   81320:	00c0fc04 	movi	r3,1008
   81324:	003f6a06 	br	810d0 <_malloc_r+0x4d8>
   81328:	2804d4ba 	srli	r2,r5,18
   8132c:	11001f04 	addi	r4,r2,124
   81330:	200690fa 	slli	r3,r4,3
   81334:	003f6606 	br	810d0 <_malloc_r+0x4d8>

00081338 <memchr>:
   81338:	008000c4 	movi	r2,3
   8133c:	29403fcc 	andi	r5,r5,255
   81340:	2007883a 	mov	r3,r4
   81344:	1180022e 	bgeu	r2,r6,81350 <memchr+0x18>
   81348:	2084703a 	and	r2,r4,r2
   8134c:	10000b26 	beq	r2,zero,8137c <memchr+0x44>
   81350:	313fffc4 	addi	r4,r6,-1
   81354:	3000051e 	bne	r6,zero,8136c <memchr+0x34>
   81358:	00002c06 	br	8140c <memchr+0xd4>
   8135c:	213fffc4 	addi	r4,r4,-1
   81360:	00bfffc4 	movi	r2,-1
   81364:	18c00044 	addi	r3,r3,1
   81368:	20802826 	beq	r4,r2,8140c <memchr+0xd4>
   8136c:	18800003 	ldbu	r2,0(r3)
   81370:	28bffa1e 	bne	r5,r2,8135c <memchr+0x24>
   81374:	1805883a 	mov	r2,r3
   81378:	f800283a 	ret
   8137c:	0011883a 	mov	r8,zero
   81380:	0007883a 	mov	r3,zero
   81384:	01c00104 	movi	r7,4
   81388:	4004923a 	slli	r2,r8,8
   8138c:	18c00044 	addi	r3,r3,1
   81390:	1151883a 	add	r8,r2,r5
   81394:	19fffc1e 	bne	r3,r7,81388 <memchr+0x50>
   81398:	02bfbff4 	movhi	r10,65279
   8139c:	52bfbfc4 	addi	r10,r10,-257
   813a0:	02602074 	movhi	r9,32897
   813a4:	4a602004 	addi	r9,r9,-32640
   813a8:	02c000c4 	movi	r11,3
   813ac:	20800017 	ldw	r2,0(r4)
   813b0:	31bfff04 	addi	r6,r6,-4
   813b4:	200f883a 	mov	r7,r4
   813b8:	1204f03a 	xor	r2,r2,r8
   813bc:	1287883a 	add	r3,r2,r10
   813c0:	1a46703a 	and	r3,r3,r9
   813c4:	0084303a 	nor	r2,zero,r2
   813c8:	10c4703a 	and	r2,r2,r3
   813cc:	10000b26 	beq	r2,zero,813fc <memchr+0xc4>
   813d0:	20800003 	ldbu	r2,0(r4)
   813d4:	28800f26 	beq	r5,r2,81414 <memchr+0xdc>
   813d8:	20800043 	ldbu	r2,1(r4)
   813dc:	21c00044 	addi	r7,r4,1
   813e0:	28800c26 	beq	r5,r2,81414 <memchr+0xdc>
   813e4:	20800083 	ldbu	r2,2(r4)
   813e8:	21c00084 	addi	r7,r4,2
   813ec:	28800926 	beq	r5,r2,81414 <memchr+0xdc>
   813f0:	208000c3 	ldbu	r2,3(r4)
   813f4:	21c000c4 	addi	r7,r4,3
   813f8:	28800626 	beq	r5,r2,81414 <memchr+0xdc>
   813fc:	21000104 	addi	r4,r4,4
   81400:	59bfea36 	bltu	r11,r6,813ac <memchr+0x74>
   81404:	2007883a 	mov	r3,r4
   81408:	003fd106 	br	81350 <memchr+0x18>
   8140c:	0005883a 	mov	r2,zero
   81410:	f800283a 	ret
   81414:	3805883a 	mov	r2,r7
   81418:	f800283a 	ret

0008141c <memcpy>:
   8141c:	01c003c4 	movi	r7,15
   81420:	2007883a 	mov	r3,r4
   81424:	3980032e 	bgeu	r7,r6,81434 <memcpy+0x18>
   81428:	2904b03a 	or	r2,r5,r4
   8142c:	108000cc 	andi	r2,r2,3
   81430:	10000926 	beq	r2,zero,81458 <memcpy+0x3c>
   81434:	30000626 	beq	r6,zero,81450 <memcpy+0x34>
   81438:	30cd883a 	add	r6,r6,r3
   8143c:	28800003 	ldbu	r2,0(r5)
   81440:	29400044 	addi	r5,r5,1
   81444:	18800005 	stb	r2,0(r3)
   81448:	18c00044 	addi	r3,r3,1
   8144c:	30fffb1e 	bne	r6,r3,8143c <memcpy+0x20>
   81450:	2005883a 	mov	r2,r4
   81454:	f800283a 	ret
   81458:	3811883a 	mov	r8,r7
   8145c:	200f883a 	mov	r7,r4
   81460:	28c00017 	ldw	r3,0(r5)
   81464:	31bffc04 	addi	r6,r6,-16
   81468:	38c00015 	stw	r3,0(r7)
   8146c:	28800117 	ldw	r2,4(r5)
   81470:	38800115 	stw	r2,4(r7)
   81474:	28c00217 	ldw	r3,8(r5)
   81478:	38c00215 	stw	r3,8(r7)
   8147c:	28800317 	ldw	r2,12(r5)
   81480:	29400404 	addi	r5,r5,16
   81484:	38800315 	stw	r2,12(r7)
   81488:	39c00404 	addi	r7,r7,16
   8148c:	41bff436 	bltu	r8,r6,81460 <memcpy+0x44>
   81490:	008000c4 	movi	r2,3
   81494:	1180072e 	bgeu	r2,r6,814b4 <memcpy+0x98>
   81498:	1007883a 	mov	r3,r2
   8149c:	28800017 	ldw	r2,0(r5)
   814a0:	31bfff04 	addi	r6,r6,-4
   814a4:	29400104 	addi	r5,r5,4
   814a8:	38800015 	stw	r2,0(r7)
   814ac:	39c00104 	addi	r7,r7,4
   814b0:	19bffa36 	bltu	r3,r6,8149c <memcpy+0x80>
   814b4:	3807883a 	mov	r3,r7
   814b8:	003fde06 	br	81434 <memcpy+0x18>

000814bc <memmove>:
   814bc:	2807883a 	mov	r3,r5
   814c0:	2011883a 	mov	r8,r4
   814c4:	29000c2e 	bgeu	r5,r4,814f8 <memmove+0x3c>
   814c8:	298f883a 	add	r7,r5,r6
   814cc:	21c00a2e 	bgeu	r4,r7,814f8 <memmove+0x3c>
   814d0:	30000726 	beq	r6,zero,814f0 <memmove+0x34>
   814d4:	2187883a 	add	r3,r4,r6
   814d8:	198dc83a 	sub	r6,r3,r6
   814dc:	39ffffc4 	addi	r7,r7,-1
   814e0:	38800003 	ldbu	r2,0(r7)
   814e4:	18ffffc4 	addi	r3,r3,-1
   814e8:	18800005 	stb	r2,0(r3)
   814ec:	19bffb1e 	bne	r3,r6,814dc <memmove+0x20>
   814f0:	2005883a 	mov	r2,r4
   814f4:	f800283a 	ret
   814f8:	01c003c4 	movi	r7,15
   814fc:	39800a36 	bltu	r7,r6,81528 <memmove+0x6c>
   81500:	303ffb26 	beq	r6,zero,814f0 <memmove+0x34>
   81504:	400f883a 	mov	r7,r8
   81508:	320d883a 	add	r6,r6,r8
   8150c:	28800003 	ldbu	r2,0(r5)
   81510:	29400044 	addi	r5,r5,1
   81514:	38800005 	stb	r2,0(r7)
   81518:	39c00044 	addi	r7,r7,1
   8151c:	39bffb1e 	bne	r7,r6,8150c <memmove+0x50>
   81520:	2005883a 	mov	r2,r4
   81524:	f800283a 	ret
   81528:	1904b03a 	or	r2,r3,r4
   8152c:	108000cc 	andi	r2,r2,3
   81530:	103ff31e 	bne	r2,zero,81500 <memmove+0x44>
   81534:	3811883a 	mov	r8,r7
   81538:	180b883a 	mov	r5,r3
   8153c:	200f883a 	mov	r7,r4
   81540:	28c00017 	ldw	r3,0(r5)
   81544:	31bffc04 	addi	r6,r6,-16
   81548:	38c00015 	stw	r3,0(r7)
   8154c:	28800117 	ldw	r2,4(r5)
   81550:	38800115 	stw	r2,4(r7)
   81554:	28c00217 	ldw	r3,8(r5)
   81558:	38c00215 	stw	r3,8(r7)
   8155c:	28800317 	ldw	r2,12(r5)
   81560:	29400404 	addi	r5,r5,16
   81564:	38800315 	stw	r2,12(r7)
   81568:	39c00404 	addi	r7,r7,16
   8156c:	41bff436 	bltu	r8,r6,81540 <memmove+0x84>
   81570:	008000c4 	movi	r2,3
   81574:	1180072e 	bgeu	r2,r6,81594 <memmove+0xd8>
   81578:	1007883a 	mov	r3,r2
   8157c:	28800017 	ldw	r2,0(r5)
   81580:	31bfff04 	addi	r6,r6,-4
   81584:	29400104 	addi	r5,r5,4
   81588:	38800015 	stw	r2,0(r7)
   8158c:	39c00104 	addi	r7,r7,4
   81590:	19bffa36 	bltu	r3,r6,8157c <memmove+0xc0>
   81594:	3811883a 	mov	r8,r7
   81598:	003fd906 	br	81500 <memmove+0x44>

0008159c <_realloc_r>:
   8159c:	defff404 	addi	sp,sp,-48
   815a0:	dd800815 	stw	r22,32(sp)
   815a4:	dc800415 	stw	r18,16(sp)
   815a8:	dc400315 	stw	r17,12(sp)
   815ac:	dfc00b15 	stw	ra,44(sp)
   815b0:	df000a15 	stw	fp,40(sp)
   815b4:	ddc00915 	stw	r23,36(sp)
   815b8:	dd400715 	stw	r21,28(sp)
   815bc:	dd000615 	stw	r20,24(sp)
   815c0:	dcc00515 	stw	r19,20(sp)
   815c4:	dc000215 	stw	r16,8(sp)
   815c8:	2825883a 	mov	r18,r5
   815cc:	3023883a 	mov	r17,r6
   815d0:	202d883a 	mov	r22,r4
   815d4:	2800c926 	beq	r5,zero,818fc <_realloc_r+0x360>
   815d8:	00838040 	call	83804 <__malloc_lock>
   815dc:	943ffe04 	addi	r16,r18,-8
   815e0:	88c002c4 	addi	r3,r17,11
   815e4:	00800584 	movi	r2,22
   815e8:	82000117 	ldw	r8,4(r16)
   815ec:	10c01b2e 	bgeu	r2,r3,8165c <_realloc_r+0xc0>
   815f0:	00bffe04 	movi	r2,-8
   815f4:	188e703a 	and	r7,r3,r2
   815f8:	3839883a 	mov	fp,r7
   815fc:	38001a16 	blt	r7,zero,81668 <_realloc_r+0xcc>
   81600:	e4401936 	bltu	fp,r17,81668 <_realloc_r+0xcc>
   81604:	013fff04 	movi	r4,-4
   81608:	4126703a 	and	r19,r8,r4
   8160c:	99c02616 	blt	r19,r7,816a8 <_realloc_r+0x10c>
   81610:	802b883a 	mov	r21,r16
   81614:	9829883a 	mov	r20,r19
   81618:	84000204 	addi	r16,r16,8
   8161c:	a80f883a 	mov	r7,r21
   81620:	a70dc83a 	sub	r6,r20,fp
   81624:	008003c4 	movi	r2,15
   81628:	1180c136 	bltu	r2,r6,81930 <_realloc_r+0x394>
   8162c:	38800117 	ldw	r2,4(r7)
   81630:	a549883a 	add	r4,r20,r21
   81634:	1080004c 	andi	r2,r2,1
   81638:	a084b03a 	or	r2,r20,r2
   8163c:	38800115 	stw	r2,4(r7)
   81640:	20c00117 	ldw	r3,4(r4)
   81644:	18c00054 	ori	r3,r3,1
   81648:	20c00115 	stw	r3,4(r4)
   8164c:	b009883a 	mov	r4,r22
   81650:	00838240 	call	83824 <__malloc_unlock>
   81654:	8023883a 	mov	r17,r16
   81658:	00000606 	br	81674 <_realloc_r+0xd8>
   8165c:	01c00404 	movi	r7,16
   81660:	3839883a 	mov	fp,r7
   81664:	e47fe72e 	bgeu	fp,r17,81604 <_realloc_r+0x68>
   81668:	00800304 	movi	r2,12
   8166c:	0023883a 	mov	r17,zero
   81670:	b0800015 	stw	r2,0(r22)
   81674:	8805883a 	mov	r2,r17
   81678:	dfc00b17 	ldw	ra,44(sp)
   8167c:	df000a17 	ldw	fp,40(sp)
   81680:	ddc00917 	ldw	r23,36(sp)
   81684:	dd800817 	ldw	r22,32(sp)
   81688:	dd400717 	ldw	r21,28(sp)
   8168c:	dd000617 	ldw	r20,24(sp)
   81690:	dcc00517 	ldw	r19,20(sp)
   81694:	dc800417 	ldw	r18,16(sp)
   81698:	dc400317 	ldw	r17,12(sp)
   8169c:	dc000217 	ldw	r16,8(sp)
   816a0:	dec00c04 	addi	sp,sp,48
   816a4:	f800283a 	ret
   816a8:	00800234 	movhi	r2,8
   816ac:	1097b904 	addi	r2,r2,24292
   816b0:	12400217 	ldw	r9,8(r2)
   816b4:	84cd883a 	add	r6,r16,r19
   816b8:	802b883a 	mov	r21,r16
   816bc:	3240b926 	beq	r6,r9,819a4 <_realloc_r+0x408>
   816c0:	31400117 	ldw	r5,4(r6)
   816c4:	00bfff84 	movi	r2,-2
   816c8:	2884703a 	and	r2,r5,r2
   816cc:	1185883a 	add	r2,r2,r6
   816d0:	10c00117 	ldw	r3,4(r2)
   816d4:	18c0004c 	andi	r3,r3,1
   816d8:	1807003a 	cmpeq	r3,r3,zero
   816dc:	1800a326 	beq	r3,zero,8196c <_realloc_r+0x3d0>
   816e0:	2908703a 	and	r4,r5,r4
   816e4:	9929883a 	add	r20,r19,r4
   816e8:	a1c0a30e 	bge	r20,r7,81978 <_realloc_r+0x3dc>
   816ec:	4080004c 	andi	r2,r8,1
   816f0:	1000551e 	bne	r2,zero,81848 <_realloc_r+0x2ac>
   816f4:	80800017 	ldw	r2,0(r16)
   816f8:	80afc83a 	sub	r23,r16,r2
   816fc:	b8c00117 	ldw	r3,4(r23)
   81700:	00bfff04 	movi	r2,-4
   81704:	1884703a 	and	r2,r3,r2
   81708:	30002e26 	beq	r6,zero,817c4 <_realloc_r+0x228>
   8170c:	3240b926 	beq	r6,r9,819f4 <_realloc_r+0x458>
   81710:	98a9883a 	add	r20,r19,r2
   81714:	2509883a 	add	r4,r4,r20
   81718:	d9000015 	stw	r4,0(sp)
   8171c:	21c02a16 	blt	r4,r7,817c8 <_realloc_r+0x22c>
   81720:	30800317 	ldw	r2,12(r6)
   81724:	30c00217 	ldw	r3,8(r6)
   81728:	01400904 	movi	r5,36
   8172c:	99bfff04 	addi	r6,r19,-4
   81730:	18800315 	stw	r2,12(r3)
   81734:	10c00215 	stw	r3,8(r2)
   81738:	b9000317 	ldw	r4,12(r23)
   8173c:	b8800217 	ldw	r2,8(r23)
   81740:	b82b883a 	mov	r21,r23
   81744:	bc000204 	addi	r16,r23,8
   81748:	20800215 	stw	r2,8(r4)
   8174c:	11000315 	stw	r4,12(r2)
   81750:	2980e436 	bltu	r5,r6,81ae4 <_realloc_r+0x548>
   81754:	008004c4 	movi	r2,19
   81758:	9009883a 	mov	r4,r18
   8175c:	8011883a 	mov	r8,r16
   81760:	11800f2e 	bgeu	r2,r6,817a0 <_realloc_r+0x204>
   81764:	90800017 	ldw	r2,0(r18)
   81768:	ba000404 	addi	r8,r23,16
   8176c:	91000204 	addi	r4,r18,8
   81770:	b8800215 	stw	r2,8(r23)
   81774:	90c00117 	ldw	r3,4(r18)
   81778:	008006c4 	movi	r2,27
   8177c:	b8c00315 	stw	r3,12(r23)
   81780:	1180072e 	bgeu	r2,r6,817a0 <_realloc_r+0x204>
   81784:	90c00217 	ldw	r3,8(r18)
   81788:	ba000604 	addi	r8,r23,24
   8178c:	91000404 	addi	r4,r18,16
   81790:	b8c00415 	stw	r3,16(r23)
   81794:	90800317 	ldw	r2,12(r18)
   81798:	b8800515 	stw	r2,20(r23)
   8179c:	3140e726 	beq	r6,r5,81b3c <_realloc_r+0x5a0>
   817a0:	20800017 	ldw	r2,0(r4)
   817a4:	dd000017 	ldw	r20,0(sp)
   817a8:	b80f883a 	mov	r7,r23
   817ac:	40800015 	stw	r2,0(r8)
   817b0:	20c00117 	ldw	r3,4(r4)
   817b4:	40c00115 	stw	r3,4(r8)
   817b8:	20800217 	ldw	r2,8(r4)
   817bc:	40800215 	stw	r2,8(r8)
   817c0:	003f9706 	br	81620 <_realloc_r+0x84>
   817c4:	98a9883a 	add	r20,r19,r2
   817c8:	a1c01f16 	blt	r20,r7,81848 <_realloc_r+0x2ac>
   817cc:	b8c00317 	ldw	r3,12(r23)
   817d0:	b8800217 	ldw	r2,8(r23)
   817d4:	99bfff04 	addi	r6,r19,-4
   817d8:	01400904 	movi	r5,36
   817dc:	b82b883a 	mov	r21,r23
   817e0:	18800215 	stw	r2,8(r3)
   817e4:	10c00315 	stw	r3,12(r2)
   817e8:	bc000204 	addi	r16,r23,8
   817ec:	2980c336 	bltu	r5,r6,81afc <_realloc_r+0x560>
   817f0:	008004c4 	movi	r2,19
   817f4:	9009883a 	mov	r4,r18
   817f8:	8011883a 	mov	r8,r16
   817fc:	11800f2e 	bgeu	r2,r6,8183c <_realloc_r+0x2a0>
   81800:	90800017 	ldw	r2,0(r18)
   81804:	ba000404 	addi	r8,r23,16
   81808:	91000204 	addi	r4,r18,8
   8180c:	b8800215 	stw	r2,8(r23)
   81810:	90c00117 	ldw	r3,4(r18)
   81814:	008006c4 	movi	r2,27
   81818:	b8c00315 	stw	r3,12(r23)
   8181c:	1180072e 	bgeu	r2,r6,8183c <_realloc_r+0x2a0>
   81820:	90c00217 	ldw	r3,8(r18)
   81824:	ba000604 	addi	r8,r23,24
   81828:	91000404 	addi	r4,r18,16
   8182c:	b8c00415 	stw	r3,16(r23)
   81830:	90800317 	ldw	r2,12(r18)
   81834:	b8800515 	stw	r2,20(r23)
   81838:	3140c726 	beq	r6,r5,81b58 <_realloc_r+0x5bc>
   8183c:	20800017 	ldw	r2,0(r4)
   81840:	b80f883a 	mov	r7,r23
   81844:	003fd906 	br	817ac <_realloc_r+0x210>
   81848:	880b883a 	mov	r5,r17
   8184c:	b009883a 	mov	r4,r22
   81850:	0080bf80 	call	80bf8 <_malloc_r>
   81854:	1023883a 	mov	r17,r2
   81858:	10002526 	beq	r2,zero,818f0 <_realloc_r+0x354>
   8185c:	80800117 	ldw	r2,4(r16)
   81860:	00ffff84 	movi	r3,-2
   81864:	893ffe04 	addi	r4,r17,-8
   81868:	10c4703a 	and	r2,r2,r3
   8186c:	8085883a 	add	r2,r16,r2
   81870:	20809526 	beq	r4,r2,81ac8 <_realloc_r+0x52c>
   81874:	99bfff04 	addi	r6,r19,-4
   81878:	01c00904 	movi	r7,36
   8187c:	39804536 	bltu	r7,r6,81994 <_realloc_r+0x3f8>
   81880:	008004c4 	movi	r2,19
   81884:	9009883a 	mov	r4,r18
   81888:	880b883a 	mov	r5,r17
   8188c:	11800f2e 	bgeu	r2,r6,818cc <_realloc_r+0x330>
   81890:	90800017 	ldw	r2,0(r18)
   81894:	89400204 	addi	r5,r17,8
   81898:	91000204 	addi	r4,r18,8
   8189c:	88800015 	stw	r2,0(r17)
   818a0:	90c00117 	ldw	r3,4(r18)
   818a4:	008006c4 	movi	r2,27
   818a8:	88c00115 	stw	r3,4(r17)
   818ac:	1180072e 	bgeu	r2,r6,818cc <_realloc_r+0x330>
   818b0:	90c00217 	ldw	r3,8(r18)
   818b4:	89400404 	addi	r5,r17,16
   818b8:	91000404 	addi	r4,r18,16
   818bc:	88c00215 	stw	r3,8(r17)
   818c0:	90800317 	ldw	r2,12(r18)
   818c4:	88800315 	stw	r2,12(r17)
   818c8:	31c09126 	beq	r6,r7,81b10 <_realloc_r+0x574>
   818cc:	20800017 	ldw	r2,0(r4)
   818d0:	28800015 	stw	r2,0(r5)
   818d4:	20c00117 	ldw	r3,4(r4)
   818d8:	28c00115 	stw	r3,4(r5)
   818dc:	20800217 	ldw	r2,8(r4)
   818e0:	28800215 	stw	r2,8(r5)
   818e4:	900b883a 	mov	r5,r18
   818e8:	b009883a 	mov	r4,r22
   818ec:	008238c0 	call	8238c <_free_r>
   818f0:	b009883a 	mov	r4,r22
   818f4:	00838240 	call	83824 <__malloc_unlock>
   818f8:	003f5e06 	br	81674 <_realloc_r+0xd8>
   818fc:	300b883a 	mov	r5,r6
   81900:	dfc00b17 	ldw	ra,44(sp)
   81904:	df000a17 	ldw	fp,40(sp)
   81908:	ddc00917 	ldw	r23,36(sp)
   8190c:	dd800817 	ldw	r22,32(sp)
   81910:	dd400717 	ldw	r21,28(sp)
   81914:	dd000617 	ldw	r20,24(sp)
   81918:	dcc00517 	ldw	r19,20(sp)
   8191c:	dc800417 	ldw	r18,16(sp)
   81920:	dc400317 	ldw	r17,12(sp)
   81924:	dc000217 	ldw	r16,8(sp)
   81928:	dec00c04 	addi	sp,sp,48
   8192c:	0080bf81 	jmpi	80bf8 <_malloc_r>
   81930:	38800117 	ldw	r2,4(r7)
   81934:	e54b883a 	add	r5,fp,r21
   81938:	31000054 	ori	r4,r6,1
   8193c:	1080004c 	andi	r2,r2,1
   81940:	1704b03a 	or	r2,r2,fp
   81944:	38800115 	stw	r2,4(r7)
   81948:	29000115 	stw	r4,4(r5)
   8194c:	2987883a 	add	r3,r5,r6
   81950:	18800117 	ldw	r2,4(r3)
   81954:	29400204 	addi	r5,r5,8
   81958:	b009883a 	mov	r4,r22
   8195c:	10800054 	ori	r2,r2,1
   81960:	18800115 	stw	r2,4(r3)
   81964:	008238c0 	call	8238c <_free_r>
   81968:	003f3806 	br	8164c <_realloc_r+0xb0>
   8196c:	000d883a 	mov	r6,zero
   81970:	0009883a 	mov	r4,zero
   81974:	003f5d06 	br	816ec <_realloc_r+0x150>
   81978:	30c00217 	ldw	r3,8(r6)
   8197c:	30800317 	ldw	r2,12(r6)
   81980:	800f883a 	mov	r7,r16
   81984:	84000204 	addi	r16,r16,8
   81988:	10c00215 	stw	r3,8(r2)
   8198c:	18800315 	stw	r2,12(r3)
   81990:	003f2306 	br	81620 <_realloc_r+0x84>
   81994:	8809883a 	mov	r4,r17
   81998:	900b883a 	mov	r5,r18
   8199c:	00814bc0 	call	814bc <memmove>
   819a0:	003fd006 	br	818e4 <_realloc_r+0x348>
   819a4:	30800117 	ldw	r2,4(r6)
   819a8:	e0c00404 	addi	r3,fp,16
   819ac:	1108703a 	and	r4,r2,r4
   819b0:	9905883a 	add	r2,r19,r4
   819b4:	10ff4d16 	blt	r2,r3,816ec <_realloc_r+0x150>
   819b8:	1705c83a 	sub	r2,r2,fp
   819bc:	870b883a 	add	r5,r16,fp
   819c0:	10800054 	ori	r2,r2,1
   819c4:	28800115 	stw	r2,4(r5)
   819c8:	80c00117 	ldw	r3,4(r16)
   819cc:	00800234 	movhi	r2,8
   819d0:	1097b904 	addi	r2,r2,24292
   819d4:	b009883a 	mov	r4,r22
   819d8:	18c0004c 	andi	r3,r3,1
   819dc:	e0c6b03a 	or	r3,fp,r3
   819e0:	11400215 	stw	r5,8(r2)
   819e4:	80c00115 	stw	r3,4(r16)
   819e8:	00838240 	call	83824 <__malloc_unlock>
   819ec:	84400204 	addi	r17,r16,8
   819f0:	003f2006 	br	81674 <_realloc_r+0xd8>
   819f4:	98a9883a 	add	r20,r19,r2
   819f8:	2509883a 	add	r4,r4,r20
   819fc:	e0800404 	addi	r2,fp,16
   81a00:	d9000115 	stw	r4,4(sp)
   81a04:	20bf7016 	blt	r4,r2,817c8 <_realloc_r+0x22c>
   81a08:	b8c00317 	ldw	r3,12(r23)
   81a0c:	b8800217 	ldw	r2,8(r23)
   81a10:	99bfff04 	addi	r6,r19,-4
   81a14:	01400904 	movi	r5,36
   81a18:	18800215 	stw	r2,8(r3)
   81a1c:	10c00315 	stw	r3,12(r2)
   81a20:	bc400204 	addi	r17,r23,8
   81a24:	29804136 	bltu	r5,r6,81b2c <_realloc_r+0x590>
   81a28:	008004c4 	movi	r2,19
   81a2c:	9009883a 	mov	r4,r18
   81a30:	880f883a 	mov	r7,r17
   81a34:	11800f2e 	bgeu	r2,r6,81a74 <_realloc_r+0x4d8>
   81a38:	90800017 	ldw	r2,0(r18)
   81a3c:	b9c00404 	addi	r7,r23,16
   81a40:	91000204 	addi	r4,r18,8
   81a44:	b8800215 	stw	r2,8(r23)
   81a48:	90c00117 	ldw	r3,4(r18)
   81a4c:	008006c4 	movi	r2,27
   81a50:	b8c00315 	stw	r3,12(r23)
   81a54:	1180072e 	bgeu	r2,r6,81a74 <_realloc_r+0x4d8>
   81a58:	90c00217 	ldw	r3,8(r18)
   81a5c:	b9c00604 	addi	r7,r23,24
   81a60:	91000404 	addi	r4,r18,16
   81a64:	b8c00415 	stw	r3,16(r23)
   81a68:	90800317 	ldw	r2,12(r18)
   81a6c:	b8800515 	stw	r2,20(r23)
   81a70:	31404026 	beq	r6,r5,81b74 <_realloc_r+0x5d8>
   81a74:	20800017 	ldw	r2,0(r4)
   81a78:	38800015 	stw	r2,0(r7)
   81a7c:	20c00117 	ldw	r3,4(r4)
   81a80:	38c00115 	stw	r3,4(r7)
   81a84:	20800217 	ldw	r2,8(r4)
   81a88:	38800215 	stw	r2,8(r7)
   81a8c:	d8c00117 	ldw	r3,4(sp)
   81a90:	bf0b883a 	add	r5,r23,fp
   81a94:	b009883a 	mov	r4,r22
   81a98:	1f05c83a 	sub	r2,r3,fp
   81a9c:	10800054 	ori	r2,r2,1
   81aa0:	28800115 	stw	r2,4(r5)
   81aa4:	b8c00117 	ldw	r3,4(r23)
   81aa8:	00800234 	movhi	r2,8
   81aac:	1097b904 	addi	r2,r2,24292
   81ab0:	11400215 	stw	r5,8(r2)
   81ab4:	18c0004c 	andi	r3,r3,1
   81ab8:	e0c6b03a 	or	r3,fp,r3
   81abc:	b8c00115 	stw	r3,4(r23)
   81ac0:	00838240 	call	83824 <__malloc_unlock>
   81ac4:	003eeb06 	br	81674 <_realloc_r+0xd8>
   81ac8:	20800117 	ldw	r2,4(r4)
   81acc:	00ffff04 	movi	r3,-4
   81ad0:	800f883a 	mov	r7,r16
   81ad4:	10c4703a 	and	r2,r2,r3
   81ad8:	98a9883a 	add	r20,r19,r2
   81adc:	84000204 	addi	r16,r16,8
   81ae0:	003ecf06 	br	81620 <_realloc_r+0x84>
   81ae4:	900b883a 	mov	r5,r18
   81ae8:	8009883a 	mov	r4,r16
   81aec:	00814bc0 	call	814bc <memmove>
   81af0:	dd000017 	ldw	r20,0(sp)
   81af4:	b80f883a 	mov	r7,r23
   81af8:	003ec906 	br	81620 <_realloc_r+0x84>
   81afc:	900b883a 	mov	r5,r18
   81b00:	8009883a 	mov	r4,r16
   81b04:	00814bc0 	call	814bc <memmove>
   81b08:	b80f883a 	mov	r7,r23
   81b0c:	003ec406 	br	81620 <_realloc_r+0x84>
   81b10:	90c00417 	ldw	r3,16(r18)
   81b14:	89400604 	addi	r5,r17,24
   81b18:	91000604 	addi	r4,r18,24
   81b1c:	88c00415 	stw	r3,16(r17)
   81b20:	90800517 	ldw	r2,20(r18)
   81b24:	88800515 	stw	r2,20(r17)
   81b28:	003f6806 	br	818cc <_realloc_r+0x330>
   81b2c:	900b883a 	mov	r5,r18
   81b30:	8809883a 	mov	r4,r17
   81b34:	00814bc0 	call	814bc <memmove>
   81b38:	003fd406 	br	81a8c <_realloc_r+0x4f0>
   81b3c:	90c00417 	ldw	r3,16(r18)
   81b40:	91000604 	addi	r4,r18,24
   81b44:	ba000804 	addi	r8,r23,32
   81b48:	b8c00615 	stw	r3,24(r23)
   81b4c:	90800517 	ldw	r2,20(r18)
   81b50:	b8800715 	stw	r2,28(r23)
   81b54:	003f1206 	br	817a0 <_realloc_r+0x204>
   81b58:	90c00417 	ldw	r3,16(r18)
   81b5c:	91000604 	addi	r4,r18,24
   81b60:	ba000804 	addi	r8,r23,32
   81b64:	b8c00615 	stw	r3,24(r23)
   81b68:	90800517 	ldw	r2,20(r18)
   81b6c:	b8800715 	stw	r2,28(r23)
   81b70:	003f3206 	br	8183c <_realloc_r+0x2a0>
   81b74:	90c00417 	ldw	r3,16(r18)
   81b78:	91000604 	addi	r4,r18,24
   81b7c:	b9c00804 	addi	r7,r23,32
   81b80:	b8c00615 	stw	r3,24(r23)
   81b84:	90800517 	ldw	r2,20(r18)
   81b88:	b8800715 	stw	r2,28(r23)
   81b8c:	003fb906 	br	81a74 <_realloc_r+0x4d8>

00081b90 <_sbrk_r>:
   81b90:	defffd04 	addi	sp,sp,-12
   81b94:	dc000015 	stw	r16,0(sp)
   81b98:	04000274 	movhi	r16,9
   81b9c:	8423e204 	addi	r16,r16,-28792
   81ba0:	dc400115 	stw	r17,4(sp)
   81ba4:	80000015 	stw	zero,0(r16)
   81ba8:	2023883a 	mov	r17,r4
   81bac:	2809883a 	mov	r4,r5
   81bb0:	dfc00215 	stw	ra,8(sp)
   81bb4:	0083a400 	call	83a40 <sbrk>
   81bb8:	1007883a 	mov	r3,r2
   81bbc:	00bfffc4 	movi	r2,-1
   81bc0:	18800626 	beq	r3,r2,81bdc <_sbrk_r+0x4c>
   81bc4:	1805883a 	mov	r2,r3
   81bc8:	dfc00217 	ldw	ra,8(sp)
   81bcc:	dc400117 	ldw	r17,4(sp)
   81bd0:	dc000017 	ldw	r16,0(sp)
   81bd4:	dec00304 	addi	sp,sp,12
   81bd8:	f800283a 	ret
   81bdc:	80800017 	ldw	r2,0(r16)
   81be0:	103ff826 	beq	r2,zero,81bc4 <_sbrk_r+0x34>
   81be4:	88800015 	stw	r2,0(r17)
   81be8:	1805883a 	mov	r2,r3
   81bec:	dfc00217 	ldw	ra,8(sp)
   81bf0:	dc400117 	ldw	r17,4(sp)
   81bf4:	dc000017 	ldw	r16,0(sp)
   81bf8:	dec00304 	addi	sp,sp,12
   81bfc:	f800283a 	ret

00081c00 <__swsetup_r>:
   81c00:	00800234 	movhi	r2,8
   81c04:	109d3e04 	addi	r2,r2,29944
   81c08:	10c00017 	ldw	r3,0(r2)
   81c0c:	defffd04 	addi	sp,sp,-12
   81c10:	dc400115 	stw	r17,4(sp)
   81c14:	dc000015 	stw	r16,0(sp)
   81c18:	dfc00215 	stw	ra,8(sp)
   81c1c:	2023883a 	mov	r17,r4
   81c20:	2821883a 	mov	r16,r5
   81c24:	18000226 	beq	r3,zero,81c30 <__swsetup_r+0x30>
   81c28:	18800e17 	ldw	r2,56(r3)
   81c2c:	10001f26 	beq	r2,zero,81cac <__swsetup_r+0xac>
   81c30:	8100030b 	ldhu	r4,12(r16)
   81c34:	2080020c 	andi	r2,r4,8
   81c38:	10002826 	beq	r2,zero,81cdc <__swsetup_r+0xdc>
   81c3c:	81400417 	ldw	r5,16(r16)
   81c40:	28001d26 	beq	r5,zero,81cb8 <__swsetup_r+0xb8>
   81c44:	2080004c 	andi	r2,r4,1
   81c48:	1005003a 	cmpeq	r2,r2,zero
   81c4c:	10000b26 	beq	r2,zero,81c7c <__swsetup_r+0x7c>
   81c50:	2080008c 	andi	r2,r4,2
   81c54:	10001226 	beq	r2,zero,81ca0 <__swsetup_r+0xa0>
   81c58:	0005883a 	mov	r2,zero
   81c5c:	80800215 	stw	r2,8(r16)
   81c60:	28000b26 	beq	r5,zero,81c90 <__swsetup_r+0x90>
   81c64:	0005883a 	mov	r2,zero
   81c68:	dfc00217 	ldw	ra,8(sp)
   81c6c:	dc400117 	ldw	r17,4(sp)
   81c70:	dc000017 	ldw	r16,0(sp)
   81c74:	dec00304 	addi	sp,sp,12
   81c78:	f800283a 	ret
   81c7c:	80800517 	ldw	r2,20(r16)
   81c80:	80000215 	stw	zero,8(r16)
   81c84:	0085c83a 	sub	r2,zero,r2
   81c88:	80800615 	stw	r2,24(r16)
   81c8c:	283ff51e 	bne	r5,zero,81c64 <__swsetup_r+0x64>
   81c90:	2080200c 	andi	r2,r4,128
   81c94:	103ff326 	beq	r2,zero,81c64 <__swsetup_r+0x64>
   81c98:	00bfffc4 	movi	r2,-1
   81c9c:	003ff206 	br	81c68 <__swsetup_r+0x68>
   81ca0:	80800517 	ldw	r2,20(r16)
   81ca4:	80800215 	stw	r2,8(r16)
   81ca8:	003fed06 	br	81c60 <__swsetup_r+0x60>
   81cac:	1809883a 	mov	r4,r3
   81cb0:	0081fd40 	call	81fd4 <__sinit>
   81cb4:	003fde06 	br	81c30 <__swsetup_r+0x30>
   81cb8:	20c0a00c 	andi	r3,r4,640
   81cbc:	00808004 	movi	r2,512
   81cc0:	18bfe026 	beq	r3,r2,81c44 <__swsetup_r+0x44>
   81cc4:	8809883a 	mov	r4,r17
   81cc8:	800b883a 	mov	r5,r16
   81ccc:	00828200 	call	82820 <__smakebuf_r>
   81cd0:	8100030b 	ldhu	r4,12(r16)
   81cd4:	81400417 	ldw	r5,16(r16)
   81cd8:	003fda06 	br	81c44 <__swsetup_r+0x44>
   81cdc:	2080040c 	andi	r2,r4,16
   81ce0:	103fed26 	beq	r2,zero,81c98 <__swsetup_r+0x98>
   81ce4:	2080010c 	andi	r2,r4,4
   81ce8:	10001226 	beq	r2,zero,81d34 <__swsetup_r+0x134>
   81cec:	81400c17 	ldw	r5,48(r16)
   81cf0:	28000526 	beq	r5,zero,81d08 <__swsetup_r+0x108>
   81cf4:	80801004 	addi	r2,r16,64
   81cf8:	28800226 	beq	r5,r2,81d04 <__swsetup_r+0x104>
   81cfc:	8809883a 	mov	r4,r17
   81d00:	008238c0 	call	8238c <_free_r>
   81d04:	80000c15 	stw	zero,48(r16)
   81d08:	8080030b 	ldhu	r2,12(r16)
   81d0c:	81400417 	ldw	r5,16(r16)
   81d10:	80000115 	stw	zero,4(r16)
   81d14:	10bff6cc 	andi	r2,r2,65499
   81d18:	8080030d 	sth	r2,12(r16)
   81d1c:	81400015 	stw	r5,0(r16)
   81d20:	8080030b 	ldhu	r2,12(r16)
   81d24:	10800214 	ori	r2,r2,8
   81d28:	113fffcc 	andi	r4,r2,65535
   81d2c:	8080030d 	sth	r2,12(r16)
   81d30:	003fc306 	br	81c40 <__swsetup_r+0x40>
   81d34:	81400417 	ldw	r5,16(r16)
   81d38:	003ff906 	br	81d20 <__swsetup_r+0x120>

00081d3c <_fflush_r>:
   81d3c:	defffb04 	addi	sp,sp,-20
   81d40:	dcc00315 	stw	r19,12(sp)
   81d44:	dc800215 	stw	r18,8(sp)
   81d48:	dfc00415 	stw	ra,16(sp)
   81d4c:	dc400115 	stw	r17,4(sp)
   81d50:	dc000015 	stw	r16,0(sp)
   81d54:	2027883a 	mov	r19,r4
   81d58:	2825883a 	mov	r18,r5
   81d5c:	20000226 	beq	r4,zero,81d68 <_fflush_r+0x2c>
   81d60:	20800e17 	ldw	r2,56(r4)
   81d64:	10005626 	beq	r2,zero,81ec0 <_fflush_r+0x184>
   81d68:	9100030b 	ldhu	r4,12(r18)
   81d6c:	20ffffcc 	andi	r3,r4,65535
   81d70:	18e0001c 	xori	r3,r3,32768
   81d74:	18e00004 	addi	r3,r3,-32768
   81d78:	1880020c 	andi	r2,r3,8
   81d7c:	1000261e 	bne	r2,zero,81e18 <_fflush_r+0xdc>
   81d80:	90c00117 	ldw	r3,4(r18)
   81d84:	20820014 	ori	r2,r4,2048
   81d88:	9080030d 	sth	r2,12(r18)
   81d8c:	1009883a 	mov	r4,r2
   81d90:	00c0400e 	bge	zero,r3,81e94 <_fflush_r+0x158>
   81d94:	92000a17 	ldw	r8,40(r18)
   81d98:	40004026 	beq	r8,zero,81e9c <_fflush_r+0x160>
   81d9c:	2084000c 	andi	r2,r4,4096
   81da0:	10005326 	beq	r2,zero,81ef0 <_fflush_r+0x1b4>
   81da4:	94001417 	ldw	r16,80(r18)
   81da8:	9080030b 	ldhu	r2,12(r18)
   81dac:	1080010c 	andi	r2,r2,4
   81db0:	1000481e 	bne	r2,zero,81ed4 <_fflush_r+0x198>
   81db4:	91400717 	ldw	r5,28(r18)
   81db8:	9809883a 	mov	r4,r19
   81dbc:	800d883a 	mov	r6,r16
   81dc0:	000f883a 	mov	r7,zero
   81dc4:	403ee83a 	callr	r8
   81dc8:	8080261e 	bne	r16,r2,81e64 <_fflush_r+0x128>
   81dcc:	9080030b 	ldhu	r2,12(r18)
   81dd0:	91000417 	ldw	r4,16(r18)
   81dd4:	90000115 	stw	zero,4(r18)
   81dd8:	10bdffcc 	andi	r2,r2,63487
   81ddc:	10ffffcc 	andi	r3,r2,65535
   81de0:	18c4000c 	andi	r3,r3,4096
   81de4:	9080030d 	sth	r2,12(r18)
   81de8:	91000015 	stw	r4,0(r18)
   81dec:	18002b26 	beq	r3,zero,81e9c <_fflush_r+0x160>
   81df0:	0007883a 	mov	r3,zero
   81df4:	1805883a 	mov	r2,r3
   81df8:	94001415 	stw	r16,80(r18)
   81dfc:	dfc00417 	ldw	ra,16(sp)
   81e00:	dcc00317 	ldw	r19,12(sp)
   81e04:	dc800217 	ldw	r18,8(sp)
   81e08:	dc400117 	ldw	r17,4(sp)
   81e0c:	dc000017 	ldw	r16,0(sp)
   81e10:	dec00504 	addi	sp,sp,20
   81e14:	f800283a 	ret
   81e18:	94400417 	ldw	r17,16(r18)
   81e1c:	88001f26 	beq	r17,zero,81e9c <_fflush_r+0x160>
   81e20:	90800017 	ldw	r2,0(r18)
   81e24:	18c000cc 	andi	r3,r3,3
   81e28:	94400015 	stw	r17,0(r18)
   81e2c:	1461c83a 	sub	r16,r2,r17
   81e30:	18002526 	beq	r3,zero,81ec8 <_fflush_r+0x18c>
   81e34:	0005883a 	mov	r2,zero
   81e38:	90800215 	stw	r2,8(r18)
   81e3c:	0400170e 	bge	zero,r16,81e9c <_fflush_r+0x160>
   81e40:	90c00917 	ldw	r3,36(r18)
   81e44:	91400717 	ldw	r5,28(r18)
   81e48:	880d883a 	mov	r6,r17
   81e4c:	800f883a 	mov	r7,r16
   81e50:	9809883a 	mov	r4,r19
   81e54:	183ee83a 	callr	r3
   81e58:	88a3883a 	add	r17,r17,r2
   81e5c:	80a1c83a 	sub	r16,r16,r2
   81e60:	00bff616 	blt	zero,r2,81e3c <_fflush_r+0x100>
   81e64:	9080030b 	ldhu	r2,12(r18)
   81e68:	00ffffc4 	movi	r3,-1
   81e6c:	10801014 	ori	r2,r2,64
   81e70:	9080030d 	sth	r2,12(r18)
   81e74:	1805883a 	mov	r2,r3
   81e78:	dfc00417 	ldw	ra,16(sp)
   81e7c:	dcc00317 	ldw	r19,12(sp)
   81e80:	dc800217 	ldw	r18,8(sp)
   81e84:	dc400117 	ldw	r17,4(sp)
   81e88:	dc000017 	ldw	r16,0(sp)
   81e8c:	dec00504 	addi	sp,sp,20
   81e90:	f800283a 	ret
   81e94:	90800f17 	ldw	r2,60(r18)
   81e98:	00bfbe16 	blt	zero,r2,81d94 <_fflush_r+0x58>
   81e9c:	0007883a 	mov	r3,zero
   81ea0:	1805883a 	mov	r2,r3
   81ea4:	dfc00417 	ldw	ra,16(sp)
   81ea8:	dcc00317 	ldw	r19,12(sp)
   81eac:	dc800217 	ldw	r18,8(sp)
   81eb0:	dc400117 	ldw	r17,4(sp)
   81eb4:	dc000017 	ldw	r16,0(sp)
   81eb8:	dec00504 	addi	sp,sp,20
   81ebc:	f800283a 	ret
   81ec0:	0081fd40 	call	81fd4 <__sinit>
   81ec4:	003fa806 	br	81d68 <_fflush_r+0x2c>
   81ec8:	90800517 	ldw	r2,20(r18)
   81ecc:	90800215 	stw	r2,8(r18)
   81ed0:	003fda06 	br	81e3c <_fflush_r+0x100>
   81ed4:	90800117 	ldw	r2,4(r18)
   81ed8:	90c00c17 	ldw	r3,48(r18)
   81edc:	80a1c83a 	sub	r16,r16,r2
   81ee0:	183fb426 	beq	r3,zero,81db4 <_fflush_r+0x78>
   81ee4:	90800f17 	ldw	r2,60(r18)
   81ee8:	80a1c83a 	sub	r16,r16,r2
   81eec:	003fb106 	br	81db4 <_fflush_r+0x78>
   81ef0:	91400717 	ldw	r5,28(r18)
   81ef4:	9809883a 	mov	r4,r19
   81ef8:	000d883a 	mov	r6,zero
   81efc:	01c00044 	movi	r7,1
   81f00:	403ee83a 	callr	r8
   81f04:	1021883a 	mov	r16,r2
   81f08:	00bfffc4 	movi	r2,-1
   81f0c:	80800226 	beq	r16,r2,81f18 <_fflush_r+0x1dc>
   81f10:	92000a17 	ldw	r8,40(r18)
   81f14:	003fa406 	br	81da8 <_fflush_r+0x6c>
   81f18:	98c00017 	ldw	r3,0(r19)
   81f1c:	00800744 	movi	r2,29
   81f20:	18bfde26 	beq	r3,r2,81e9c <_fflush_r+0x160>
   81f24:	9080030b 	ldhu	r2,12(r18)
   81f28:	8007883a 	mov	r3,r16
   81f2c:	10801014 	ori	r2,r2,64
   81f30:	9080030d 	sth	r2,12(r18)
   81f34:	003fcf06 	br	81e74 <_fflush_r+0x138>

00081f38 <fflush>:
   81f38:	01400234 	movhi	r5,8
   81f3c:	29474f04 	addi	r5,r5,7484
   81f40:	2007883a 	mov	r3,r4
   81f44:	20000526 	beq	r4,zero,81f5c <fflush+0x24>
   81f48:	00800234 	movhi	r2,8
   81f4c:	109d3e04 	addi	r2,r2,29944
   81f50:	11000017 	ldw	r4,0(r2)
   81f54:	180b883a 	mov	r5,r3
   81f58:	0081d3c1 	jmpi	81d3c <_fflush_r>
   81f5c:	00800234 	movhi	r2,8
   81f60:	109d3f04 	addi	r2,r2,29948
   81f64:	11000017 	ldw	r4,0(r2)
   81f68:	00826a01 	jmpi	826a0 <_fwalk_reent>

00081f6c <std>:
   81f6c:	00800234 	movhi	r2,8
   81f70:	108a9304 	addi	r2,r2,10828
   81f74:	20800b15 	stw	r2,44(r4)
   81f78:	00800234 	movhi	r2,8
   81f7c:	108ace04 	addi	r2,r2,11064
   81f80:	20800815 	stw	r2,32(r4)
   81f84:	00c00234 	movhi	r3,8
   81f88:	18caaf04 	addi	r3,r3,10940
   81f8c:	00800234 	movhi	r2,8
   81f90:	108a9504 	addi	r2,r2,10836
   81f94:	2140030d 	sth	r5,12(r4)
   81f98:	2180038d 	sth	r6,14(r4)
   81f9c:	20c00915 	stw	r3,36(r4)
   81fa0:	20800a15 	stw	r2,40(r4)
   81fa4:	20000015 	stw	zero,0(r4)
   81fa8:	20000115 	stw	zero,4(r4)
   81fac:	20000215 	stw	zero,8(r4)
   81fb0:	20000415 	stw	zero,16(r4)
   81fb4:	20000515 	stw	zero,20(r4)
   81fb8:	20000615 	stw	zero,24(r4)
   81fbc:	21000715 	stw	r4,28(r4)
   81fc0:	f800283a 	ret

00081fc4 <__sfp_lock_acquire>:
   81fc4:	f800283a 	ret

00081fc8 <__sfp_lock_release>:
   81fc8:	f800283a 	ret

00081fcc <__sinit_lock_acquire>:
   81fcc:	f800283a 	ret

00081fd0 <__sinit_lock_release>:
   81fd0:	f800283a 	ret

00081fd4 <__sinit>:
   81fd4:	20800e17 	ldw	r2,56(r4)
   81fd8:	defffd04 	addi	sp,sp,-12
   81fdc:	dc400115 	stw	r17,4(sp)
   81fe0:	dc000015 	stw	r16,0(sp)
   81fe4:	dfc00215 	stw	ra,8(sp)
   81fe8:	04400044 	movi	r17,1
   81fec:	01400104 	movi	r5,4
   81ff0:	000d883a 	mov	r6,zero
   81ff4:	2021883a 	mov	r16,r4
   81ff8:	2200bb04 	addi	r8,r4,748
   81ffc:	200f883a 	mov	r7,r4
   82000:	10000526 	beq	r2,zero,82018 <__sinit+0x44>
   82004:	dfc00217 	ldw	ra,8(sp)
   82008:	dc400117 	ldw	r17,4(sp)
   8200c:	dc000017 	ldw	r16,0(sp)
   82010:	dec00304 	addi	sp,sp,12
   82014:	f800283a 	ret
   82018:	21000117 	ldw	r4,4(r4)
   8201c:	00800234 	movhi	r2,8
   82020:	10882e04 	addi	r2,r2,8376
   82024:	00c000c4 	movi	r3,3
   82028:	80800f15 	stw	r2,60(r16)
   8202c:	80c0b915 	stw	r3,740(r16)
   82030:	8200ba15 	stw	r8,744(r16)
   82034:	84400e15 	stw	r17,56(r16)
   82038:	8000b815 	stw	zero,736(r16)
   8203c:	0081f6c0 	call	81f6c <std>
   82040:	81000217 	ldw	r4,8(r16)
   82044:	880d883a 	mov	r6,r17
   82048:	800f883a 	mov	r7,r16
   8204c:	01400284 	movi	r5,10
   82050:	0081f6c0 	call	81f6c <std>
   82054:	81000317 	ldw	r4,12(r16)
   82058:	800f883a 	mov	r7,r16
   8205c:	01400484 	movi	r5,18
   82060:	01800084 	movi	r6,2
   82064:	dfc00217 	ldw	ra,8(sp)
   82068:	dc400117 	ldw	r17,4(sp)
   8206c:	dc000017 	ldw	r16,0(sp)
   82070:	dec00304 	addi	sp,sp,12
   82074:	0081f6c1 	jmpi	81f6c <std>

00082078 <__fp_lock>:
   82078:	0005883a 	mov	r2,zero
   8207c:	f800283a 	ret

00082080 <__fp_unlock>:
   82080:	0005883a 	mov	r2,zero
   82084:	f800283a 	ret

00082088 <__fp_unlock_all>:
   82088:	00800234 	movhi	r2,8
   8208c:	109d3e04 	addi	r2,r2,29944
   82090:	11000017 	ldw	r4,0(r2)
   82094:	01400234 	movhi	r5,8
   82098:	29482004 	addi	r5,r5,8320
   8209c:	00827681 	jmpi	82768 <_fwalk>

000820a0 <__fp_lock_all>:
   820a0:	00800234 	movhi	r2,8
   820a4:	109d3e04 	addi	r2,r2,29944
   820a8:	11000017 	ldw	r4,0(r2)
   820ac:	01400234 	movhi	r5,8
   820b0:	29481e04 	addi	r5,r5,8312
   820b4:	00827681 	jmpi	82768 <_fwalk>

000820b8 <_cleanup_r>:
   820b8:	01400234 	movhi	r5,8
   820bc:	294b6404 	addi	r5,r5,11664
   820c0:	00827681 	jmpi	82768 <_fwalk>

000820c4 <_cleanup>:
   820c4:	00800234 	movhi	r2,8
   820c8:	109d3f04 	addi	r2,r2,29948
   820cc:	11000017 	ldw	r4,0(r2)
   820d0:	00820b81 	jmpi	820b8 <_cleanup_r>

000820d4 <__sfmoreglue>:
   820d4:	defffc04 	addi	sp,sp,-16
   820d8:	dc000015 	stw	r16,0(sp)
   820dc:	2821883a 	mov	r16,r5
   820e0:	dc400115 	stw	r17,4(sp)
   820e4:	01401704 	movi	r5,92
   820e8:	2023883a 	mov	r17,r4
   820ec:	8009883a 	mov	r4,r16
   820f0:	dfc00315 	stw	ra,12(sp)
   820f4:	dcc00215 	stw	r19,8(sp)
   820f8:	0082f780 	call	82f78 <__mulsi3>
   820fc:	11400304 	addi	r5,r2,12
   82100:	8809883a 	mov	r4,r17
   82104:	1027883a 	mov	r19,r2
   82108:	0080bf80 	call	80bf8 <_malloc_r>
   8210c:	10c00304 	addi	r3,r2,12
   82110:	1023883a 	mov	r17,r2
   82114:	1809883a 	mov	r4,r3
   82118:	980d883a 	mov	r6,r19
   8211c:	000b883a 	mov	r5,zero
   82120:	10000b26 	beq	r2,zero,82150 <__sfmoreglue+0x7c>
   82124:	14000115 	stw	r16,4(r2)
   82128:	10c00215 	stw	r3,8(r2)
   8212c:	10000015 	stw	zero,0(r2)
   82130:	00829b40 	call	829b4 <memset>
   82134:	8805883a 	mov	r2,r17
   82138:	dfc00317 	ldw	ra,12(sp)
   8213c:	dcc00217 	ldw	r19,8(sp)
   82140:	dc400117 	ldw	r17,4(sp)
   82144:	dc000017 	ldw	r16,0(sp)
   82148:	dec00404 	addi	sp,sp,16
   8214c:	f800283a 	ret
   82150:	0023883a 	mov	r17,zero
   82154:	8805883a 	mov	r2,r17
   82158:	dfc00317 	ldw	ra,12(sp)
   8215c:	dcc00217 	ldw	r19,8(sp)
   82160:	dc400117 	ldw	r17,4(sp)
   82164:	dc000017 	ldw	r16,0(sp)
   82168:	dec00404 	addi	sp,sp,16
   8216c:	f800283a 	ret

00082170 <__sfp>:
   82170:	defffd04 	addi	sp,sp,-12
   82174:	00800234 	movhi	r2,8
   82178:	109d3f04 	addi	r2,r2,29948
   8217c:	dc000015 	stw	r16,0(sp)
   82180:	14000017 	ldw	r16,0(r2)
   82184:	dc400115 	stw	r17,4(sp)
   82188:	dfc00215 	stw	ra,8(sp)
   8218c:	80800e17 	ldw	r2,56(r16)
   82190:	2023883a 	mov	r17,r4
   82194:	10002626 	beq	r2,zero,82230 <__sfp+0xc0>
   82198:	8400b804 	addi	r16,r16,736
   8219c:	80800117 	ldw	r2,4(r16)
   821a0:	81000217 	ldw	r4,8(r16)
   821a4:	10ffffc4 	addi	r3,r2,-1
   821a8:	18000916 	blt	r3,zero,821d0 <__sfp+0x60>
   821ac:	2080030f 	ldh	r2,12(r4)
   821b0:	10000b26 	beq	r2,zero,821e0 <__sfp+0x70>
   821b4:	017fffc4 	movi	r5,-1
   821b8:	00000206 	br	821c4 <__sfp+0x54>
   821bc:	2080030f 	ldh	r2,12(r4)
   821c0:	10000726 	beq	r2,zero,821e0 <__sfp+0x70>
   821c4:	18ffffc4 	addi	r3,r3,-1
   821c8:	21001704 	addi	r4,r4,92
   821cc:	197ffb1e 	bne	r3,r5,821bc <__sfp+0x4c>
   821d0:	80800017 	ldw	r2,0(r16)
   821d4:	10001926 	beq	r2,zero,8223c <__sfp+0xcc>
   821d8:	1021883a 	mov	r16,r2
   821dc:	003fef06 	br	8219c <__sfp+0x2c>
   821e0:	00bfffc4 	movi	r2,-1
   821e4:	00c00044 	movi	r3,1
   821e8:	2080038d 	sth	r2,14(r4)
   821ec:	20c0030d 	sth	r3,12(r4)
   821f0:	20000015 	stw	zero,0(r4)
   821f4:	20000215 	stw	zero,8(r4)
   821f8:	20000115 	stw	zero,4(r4)
   821fc:	20000415 	stw	zero,16(r4)
   82200:	20000515 	stw	zero,20(r4)
   82204:	20000615 	stw	zero,24(r4)
   82208:	20000c15 	stw	zero,48(r4)
   8220c:	20000d15 	stw	zero,52(r4)
   82210:	20001115 	stw	zero,68(r4)
   82214:	20001215 	stw	zero,72(r4)
   82218:	2005883a 	mov	r2,r4
   8221c:	dfc00217 	ldw	ra,8(sp)
   82220:	dc400117 	ldw	r17,4(sp)
   82224:	dc000017 	ldw	r16,0(sp)
   82228:	dec00304 	addi	sp,sp,12
   8222c:	f800283a 	ret
   82230:	8009883a 	mov	r4,r16
   82234:	0081fd40 	call	81fd4 <__sinit>
   82238:	003fd706 	br	82198 <__sfp+0x28>
   8223c:	8809883a 	mov	r4,r17
   82240:	01400104 	movi	r5,4
   82244:	00820d40 	call	820d4 <__sfmoreglue>
   82248:	80800015 	stw	r2,0(r16)
   8224c:	103fe21e 	bne	r2,zero,821d8 <__sfp+0x68>
   82250:	00800304 	movi	r2,12
   82254:	0009883a 	mov	r4,zero
   82258:	88800015 	stw	r2,0(r17)
   8225c:	003fee06 	br	82218 <__sfp+0xa8>

00082260 <_malloc_trim_r>:
   82260:	defffb04 	addi	sp,sp,-20
   82264:	dcc00315 	stw	r19,12(sp)
   82268:	04c00234 	movhi	r19,8
   8226c:	9cd7b904 	addi	r19,r19,24292
   82270:	dc800215 	stw	r18,8(sp)
   82274:	dc400115 	stw	r17,4(sp)
   82278:	dc000015 	stw	r16,0(sp)
   8227c:	2823883a 	mov	r17,r5
   82280:	2025883a 	mov	r18,r4
   82284:	dfc00415 	stw	ra,16(sp)
   82288:	00838040 	call	83804 <__malloc_lock>
   8228c:	98800217 	ldw	r2,8(r19)
   82290:	9009883a 	mov	r4,r18
   82294:	000b883a 	mov	r5,zero
   82298:	10c00117 	ldw	r3,4(r2)
   8229c:	00bfff04 	movi	r2,-4
   822a0:	18a0703a 	and	r16,r3,r2
   822a4:	8463c83a 	sub	r17,r16,r17
   822a8:	8c43fbc4 	addi	r17,r17,4079
   822ac:	8822d33a 	srli	r17,r17,12
   822b0:	0083ffc4 	movi	r2,4095
   822b4:	8c7fffc4 	addi	r17,r17,-1
   822b8:	8822933a 	slli	r17,r17,12
   822bc:	1440060e 	bge	r2,r17,822d8 <_malloc_trim_r+0x78>
   822c0:	0081b900 	call	81b90 <_sbrk_r>
   822c4:	98c00217 	ldw	r3,8(r19)
   822c8:	9009883a 	mov	r4,r18
   822cc:	044bc83a 	sub	r5,zero,r17
   822d0:	80c7883a 	add	r3,r16,r3
   822d4:	10c00926 	beq	r2,r3,822fc <_malloc_trim_r+0x9c>
   822d8:	00838240 	call	83824 <__malloc_unlock>
   822dc:	0005883a 	mov	r2,zero
   822e0:	dfc00417 	ldw	ra,16(sp)
   822e4:	dcc00317 	ldw	r19,12(sp)
   822e8:	dc800217 	ldw	r18,8(sp)
   822ec:	dc400117 	ldw	r17,4(sp)
   822f0:	dc000017 	ldw	r16,0(sp)
   822f4:	dec00504 	addi	sp,sp,20
   822f8:	f800283a 	ret
   822fc:	9009883a 	mov	r4,r18
   82300:	0081b900 	call	81b90 <_sbrk_r>
   82304:	844dc83a 	sub	r6,r16,r17
   82308:	00ffffc4 	movi	r3,-1
   8230c:	9009883a 	mov	r4,r18
   82310:	000b883a 	mov	r5,zero
   82314:	01c00274 	movhi	r7,9
   82318:	39e3e904 	addi	r7,r7,-28764
   8231c:	31800054 	ori	r6,r6,1
   82320:	10c00926 	beq	r2,r3,82348 <_malloc_trim_r+0xe8>
   82324:	38800017 	ldw	r2,0(r7)
   82328:	98c00217 	ldw	r3,8(r19)
   8232c:	9009883a 	mov	r4,r18
   82330:	1445c83a 	sub	r2,r2,r17
   82334:	38800015 	stw	r2,0(r7)
   82338:	19800115 	stw	r6,4(r3)
   8233c:	00838240 	call	83824 <__malloc_unlock>
   82340:	00800044 	movi	r2,1
   82344:	003fe606 	br	822e0 <_malloc_trim_r+0x80>
   82348:	0081b900 	call	81b90 <_sbrk_r>
   8234c:	99800217 	ldw	r6,8(r19)
   82350:	100f883a 	mov	r7,r2
   82354:	9009883a 	mov	r4,r18
   82358:	1187c83a 	sub	r3,r2,r6
   8235c:	008003c4 	movi	r2,15
   82360:	19400054 	ori	r5,r3,1
   82364:	10ffdc0e 	bge	r2,r3,822d8 <_malloc_trim_r+0x78>
   82368:	00800234 	movhi	r2,8
   8236c:	109d4104 	addi	r2,r2,29956
   82370:	10c00017 	ldw	r3,0(r2)
   82374:	00800274 	movhi	r2,9
   82378:	10a3e904 	addi	r2,r2,-28764
   8237c:	31400115 	stw	r5,4(r6)
   82380:	38c7c83a 	sub	r3,r7,r3
   82384:	10c00015 	stw	r3,0(r2)
   82388:	003fd306 	br	822d8 <_malloc_trim_r+0x78>

0008238c <_free_r>:
   8238c:	defffd04 	addi	sp,sp,-12
   82390:	dc400115 	stw	r17,4(sp)
   82394:	dc000015 	stw	r16,0(sp)
   82398:	dfc00215 	stw	ra,8(sp)
   8239c:	2821883a 	mov	r16,r5
   823a0:	2023883a 	mov	r17,r4
   823a4:	28005a26 	beq	r5,zero,82510 <_free_r+0x184>
   823a8:	00838040 	call	83804 <__malloc_lock>
   823ac:	823ffe04 	addi	r8,r16,-8
   823b0:	41400117 	ldw	r5,4(r8)
   823b4:	00bfff84 	movi	r2,-2
   823b8:	02800234 	movhi	r10,8
   823bc:	5297b904 	addi	r10,r10,24292
   823c0:	288e703a 	and	r7,r5,r2
   823c4:	41cd883a 	add	r6,r8,r7
   823c8:	30c00117 	ldw	r3,4(r6)
   823cc:	51000217 	ldw	r4,8(r10)
   823d0:	00bfff04 	movi	r2,-4
   823d4:	1892703a 	and	r9,r3,r2
   823d8:	5017883a 	mov	r11,r10
   823dc:	31006726 	beq	r6,r4,8257c <_free_r+0x1f0>
   823e0:	2880004c 	andi	r2,r5,1
   823e4:	1005003a 	cmpeq	r2,r2,zero
   823e8:	32400115 	stw	r9,4(r6)
   823ec:	10001a1e 	bne	r2,zero,82458 <_free_r+0xcc>
   823f0:	000b883a 	mov	r5,zero
   823f4:	3247883a 	add	r3,r6,r9
   823f8:	18800117 	ldw	r2,4(r3)
   823fc:	1080004c 	andi	r2,r2,1
   82400:	1000231e 	bne	r2,zero,82490 <_free_r+0x104>
   82404:	280ac03a 	cmpne	r5,r5,zero
   82408:	3a4f883a 	add	r7,r7,r9
   8240c:	2800451e 	bne	r5,zero,82524 <_free_r+0x198>
   82410:	31000217 	ldw	r4,8(r6)
   82414:	00800234 	movhi	r2,8
   82418:	1097bb04 	addi	r2,r2,24300
   8241c:	20807b26 	beq	r4,r2,8260c <_free_r+0x280>
   82420:	30800317 	ldw	r2,12(r6)
   82424:	3a07883a 	add	r3,r7,r8
   82428:	19c00015 	stw	r7,0(r3)
   8242c:	11000215 	stw	r4,8(r2)
   82430:	20800315 	stw	r2,12(r4)
   82434:	38800054 	ori	r2,r7,1
   82438:	40800115 	stw	r2,4(r8)
   8243c:	28001a26 	beq	r5,zero,824a8 <_free_r+0x11c>
   82440:	8809883a 	mov	r4,r17
   82444:	dfc00217 	ldw	ra,8(sp)
   82448:	dc400117 	ldw	r17,4(sp)
   8244c:	dc000017 	ldw	r16,0(sp)
   82450:	dec00304 	addi	sp,sp,12
   82454:	00838241 	jmpi	83824 <__malloc_unlock>
   82458:	80bffe17 	ldw	r2,-8(r16)
   8245c:	50c00204 	addi	r3,r10,8
   82460:	4091c83a 	sub	r8,r8,r2
   82464:	41000217 	ldw	r4,8(r8)
   82468:	388f883a 	add	r7,r7,r2
   8246c:	20c06126 	beq	r4,r3,825f4 <_free_r+0x268>
   82470:	40800317 	ldw	r2,12(r8)
   82474:	3247883a 	add	r3,r6,r9
   82478:	000b883a 	mov	r5,zero
   8247c:	11000215 	stw	r4,8(r2)
   82480:	20800315 	stw	r2,12(r4)
   82484:	18800117 	ldw	r2,4(r3)
   82488:	1080004c 	andi	r2,r2,1
   8248c:	103fdd26 	beq	r2,zero,82404 <_free_r+0x78>
   82490:	38800054 	ori	r2,r7,1
   82494:	3a07883a 	add	r3,r7,r8
   82498:	280ac03a 	cmpne	r5,r5,zero
   8249c:	40800115 	stw	r2,4(r8)
   824a0:	19c00015 	stw	r7,0(r3)
   824a4:	283fe61e 	bne	r5,zero,82440 <_free_r+0xb4>
   824a8:	00807fc4 	movi	r2,511
   824ac:	11c01f2e 	bgeu	r2,r7,8252c <_free_r+0x1a0>
   824b0:	3806d27a 	srli	r3,r7,9
   824b4:	1800481e 	bne	r3,zero,825d8 <_free_r+0x24c>
   824b8:	3804d0fa 	srli	r2,r7,3
   824bc:	100690fa 	slli	r3,r2,3
   824c0:	1acd883a 	add	r6,r3,r11
   824c4:	31400217 	ldw	r5,8(r6)
   824c8:	31405926 	beq	r6,r5,82630 <_free_r+0x2a4>
   824cc:	28800117 	ldw	r2,4(r5)
   824d0:	00ffff04 	movi	r3,-4
   824d4:	10c4703a 	and	r2,r2,r3
   824d8:	3880022e 	bgeu	r7,r2,824e4 <_free_r+0x158>
   824dc:	29400217 	ldw	r5,8(r5)
   824e0:	317ffa1e 	bne	r6,r5,824cc <_free_r+0x140>
   824e4:	29800317 	ldw	r6,12(r5)
   824e8:	41800315 	stw	r6,12(r8)
   824ec:	41400215 	stw	r5,8(r8)
   824f0:	8809883a 	mov	r4,r17
   824f4:	2a000315 	stw	r8,12(r5)
   824f8:	32000215 	stw	r8,8(r6)
   824fc:	dfc00217 	ldw	ra,8(sp)
   82500:	dc400117 	ldw	r17,4(sp)
   82504:	dc000017 	ldw	r16,0(sp)
   82508:	dec00304 	addi	sp,sp,12
   8250c:	00838241 	jmpi	83824 <__malloc_unlock>
   82510:	dfc00217 	ldw	ra,8(sp)
   82514:	dc400117 	ldw	r17,4(sp)
   82518:	dc000017 	ldw	r16,0(sp)
   8251c:	dec00304 	addi	sp,sp,12
   82520:	f800283a 	ret
   82524:	31000217 	ldw	r4,8(r6)
   82528:	003fbd06 	br	82420 <_free_r+0x94>
   8252c:	3806d0fa 	srli	r3,r7,3
   82530:	00800044 	movi	r2,1
   82534:	51400117 	ldw	r5,4(r10)
   82538:	180890fa 	slli	r4,r3,3
   8253c:	1807d0ba 	srai	r3,r3,2
   82540:	22c9883a 	add	r4,r4,r11
   82544:	21800217 	ldw	r6,8(r4)
   82548:	10c4983a 	sll	r2,r2,r3
   8254c:	41000315 	stw	r4,12(r8)
   82550:	41800215 	stw	r6,8(r8)
   82554:	288ab03a 	or	r5,r5,r2
   82558:	22000215 	stw	r8,8(r4)
   8255c:	8809883a 	mov	r4,r17
   82560:	51400115 	stw	r5,4(r10)
   82564:	32000315 	stw	r8,12(r6)
   82568:	dfc00217 	ldw	ra,8(sp)
   8256c:	dc400117 	ldw	r17,4(sp)
   82570:	dc000017 	ldw	r16,0(sp)
   82574:	dec00304 	addi	sp,sp,12
   82578:	00838241 	jmpi	83824 <__malloc_unlock>
   8257c:	2880004c 	andi	r2,r5,1
   82580:	3a4d883a 	add	r6,r7,r9
   82584:	1000071e 	bne	r2,zero,825a4 <_free_r+0x218>
   82588:	80bffe17 	ldw	r2,-8(r16)
   8258c:	4091c83a 	sub	r8,r8,r2
   82590:	41000317 	ldw	r4,12(r8)
   82594:	40c00217 	ldw	r3,8(r8)
   82598:	308d883a 	add	r6,r6,r2
   8259c:	20c00215 	stw	r3,8(r4)
   825a0:	19000315 	stw	r4,12(r3)
   825a4:	00800234 	movhi	r2,8
   825a8:	109d4004 	addi	r2,r2,29952
   825ac:	11000017 	ldw	r4,0(r2)
   825b0:	30c00054 	ori	r3,r6,1
   825b4:	52000215 	stw	r8,8(r10)
   825b8:	40c00115 	stw	r3,4(r8)
   825bc:	313fa036 	bltu	r6,r4,82440 <_free_r+0xb4>
   825c0:	00800274 	movhi	r2,9
   825c4:	10a3df04 	addi	r2,r2,-28804
   825c8:	11400017 	ldw	r5,0(r2)
   825cc:	8809883a 	mov	r4,r17
   825d0:	00822600 	call	82260 <_malloc_trim_r>
   825d4:	003f9a06 	br	82440 <_free_r+0xb4>
   825d8:	00800104 	movi	r2,4
   825dc:	10c0072e 	bgeu	r2,r3,825fc <_free_r+0x270>
   825e0:	00800504 	movi	r2,20
   825e4:	10c01936 	bltu	r2,r3,8264c <_free_r+0x2c0>
   825e8:	188016c4 	addi	r2,r3,91
   825ec:	100690fa 	slli	r3,r2,3
   825f0:	003fb306 	br	824c0 <_free_r+0x134>
   825f4:	01400044 	movi	r5,1
   825f8:	003f7e06 	br	823f4 <_free_r+0x68>
   825fc:	3804d1ba 	srli	r2,r7,6
   82600:	10800e04 	addi	r2,r2,56
   82604:	100690fa 	slli	r3,r2,3
   82608:	003fad06 	br	824c0 <_free_r+0x134>
   8260c:	22000315 	stw	r8,12(r4)
   82610:	22000215 	stw	r8,8(r4)
   82614:	3a05883a 	add	r2,r7,r8
   82618:	38c00054 	ori	r3,r7,1
   8261c:	11c00015 	stw	r7,0(r2)
   82620:	41000215 	stw	r4,8(r8)
   82624:	40c00115 	stw	r3,4(r8)
   82628:	41000315 	stw	r4,12(r8)
   8262c:	003f8406 	br	82440 <_free_r+0xb4>
   82630:	1005d0ba 	srai	r2,r2,2
   82634:	00c00044 	movi	r3,1
   82638:	51000117 	ldw	r4,4(r10)
   8263c:	1886983a 	sll	r3,r3,r2
   82640:	20c8b03a 	or	r4,r4,r3
   82644:	51000115 	stw	r4,4(r10)
   82648:	003fa706 	br	824e8 <_free_r+0x15c>
   8264c:	00801504 	movi	r2,84
   82650:	10c00436 	bltu	r2,r3,82664 <_free_r+0x2d8>
   82654:	3804d33a 	srli	r2,r7,12
   82658:	10801b84 	addi	r2,r2,110
   8265c:	100690fa 	slli	r3,r2,3
   82660:	003f9706 	br	824c0 <_free_r+0x134>
   82664:	00805504 	movi	r2,340
   82668:	10c00436 	bltu	r2,r3,8267c <_free_r+0x2f0>
   8266c:	3804d3fa 	srli	r2,r7,15
   82670:	10801dc4 	addi	r2,r2,119
   82674:	100690fa 	slli	r3,r2,3
   82678:	003f9106 	br	824c0 <_free_r+0x134>
   8267c:	00815504 	movi	r2,1364
   82680:	10c0032e 	bgeu	r2,r3,82690 <_free_r+0x304>
   82684:	00801f84 	movi	r2,126
   82688:	00c0fc04 	movi	r3,1008
   8268c:	003f8c06 	br	824c0 <_free_r+0x134>
   82690:	3804d4ba 	srli	r2,r7,18
   82694:	10801f04 	addi	r2,r2,124
   82698:	100690fa 	slli	r3,r2,3
   8269c:	003f8806 	br	824c0 <_free_r+0x134>

000826a0 <_fwalk_reent>:
   826a0:	defff704 	addi	sp,sp,-36
   826a4:	dcc00315 	stw	r19,12(sp)
   826a8:	24c0b804 	addi	r19,r4,736
   826ac:	dd800615 	stw	r22,24(sp)
   826b0:	dd400515 	stw	r21,20(sp)
   826b4:	dfc00815 	stw	ra,32(sp)
   826b8:	ddc00715 	stw	r23,28(sp)
   826bc:	dd000415 	stw	r20,16(sp)
   826c0:	dc800215 	stw	r18,8(sp)
   826c4:	dc400115 	stw	r17,4(sp)
   826c8:	dc000015 	stw	r16,0(sp)
   826cc:	202b883a 	mov	r21,r4
   826d0:	282d883a 	mov	r22,r5
   826d4:	0081fc40 	call	81fc4 <__sfp_lock_acquire>
   826d8:	98002126 	beq	r19,zero,82760 <_fwalk_reent+0xc0>
   826dc:	002f883a 	mov	r23,zero
   826e0:	9c800117 	ldw	r18,4(r19)
   826e4:	9c000217 	ldw	r16,8(r19)
   826e8:	90bfffc4 	addi	r2,r18,-1
   826ec:	10000d16 	blt	r2,zero,82724 <_fwalk_reent+0x84>
   826f0:	0023883a 	mov	r17,zero
   826f4:	053fffc4 	movi	r20,-1
   826f8:	8080030f 	ldh	r2,12(r16)
   826fc:	8c400044 	addi	r17,r17,1
   82700:	10000626 	beq	r2,zero,8271c <_fwalk_reent+0x7c>
   82704:	8080038f 	ldh	r2,14(r16)
   82708:	800b883a 	mov	r5,r16
   8270c:	a809883a 	mov	r4,r21
   82710:	15000226 	beq	r2,r20,8271c <_fwalk_reent+0x7c>
   82714:	b03ee83a 	callr	r22
   82718:	b8aeb03a 	or	r23,r23,r2
   8271c:	84001704 	addi	r16,r16,92
   82720:	947ff51e 	bne	r18,r17,826f8 <_fwalk_reent+0x58>
   82724:	9cc00017 	ldw	r19,0(r19)
   82728:	983fed1e 	bne	r19,zero,826e0 <_fwalk_reent+0x40>
   8272c:	0081fc80 	call	81fc8 <__sfp_lock_release>
   82730:	b805883a 	mov	r2,r23
   82734:	dfc00817 	ldw	ra,32(sp)
   82738:	ddc00717 	ldw	r23,28(sp)
   8273c:	dd800617 	ldw	r22,24(sp)
   82740:	dd400517 	ldw	r21,20(sp)
   82744:	dd000417 	ldw	r20,16(sp)
   82748:	dcc00317 	ldw	r19,12(sp)
   8274c:	dc800217 	ldw	r18,8(sp)
   82750:	dc400117 	ldw	r17,4(sp)
   82754:	dc000017 	ldw	r16,0(sp)
   82758:	dec00904 	addi	sp,sp,36
   8275c:	f800283a 	ret
   82760:	002f883a 	mov	r23,zero
   82764:	003ff106 	br	8272c <_fwalk_reent+0x8c>

00082768 <_fwalk>:
   82768:	defff804 	addi	sp,sp,-32
   8276c:	dcc00315 	stw	r19,12(sp)
   82770:	24c0b804 	addi	r19,r4,736
   82774:	dd400515 	stw	r21,20(sp)
   82778:	dfc00715 	stw	ra,28(sp)
   8277c:	dd800615 	stw	r22,24(sp)
   82780:	dd000415 	stw	r20,16(sp)
   82784:	dc800215 	stw	r18,8(sp)
   82788:	dc400115 	stw	r17,4(sp)
   8278c:	dc000015 	stw	r16,0(sp)
   82790:	282b883a 	mov	r21,r5
   82794:	0081fc40 	call	81fc4 <__sfp_lock_acquire>
   82798:	98001f26 	beq	r19,zero,82818 <_fwalk+0xb0>
   8279c:	002d883a 	mov	r22,zero
   827a0:	9c800117 	ldw	r18,4(r19)
   827a4:	9c000217 	ldw	r16,8(r19)
   827a8:	90bfffc4 	addi	r2,r18,-1
   827ac:	10000c16 	blt	r2,zero,827e0 <_fwalk+0x78>
   827b0:	0023883a 	mov	r17,zero
   827b4:	053fffc4 	movi	r20,-1
   827b8:	8080030f 	ldh	r2,12(r16)
   827bc:	8c400044 	addi	r17,r17,1
   827c0:	10000526 	beq	r2,zero,827d8 <_fwalk+0x70>
   827c4:	8080038f 	ldh	r2,14(r16)
   827c8:	8009883a 	mov	r4,r16
   827cc:	15000226 	beq	r2,r20,827d8 <_fwalk+0x70>
   827d0:	a83ee83a 	callr	r21
   827d4:	b0acb03a 	or	r22,r22,r2
   827d8:	84001704 	addi	r16,r16,92
   827dc:	947ff61e 	bne	r18,r17,827b8 <_fwalk+0x50>
   827e0:	9cc00017 	ldw	r19,0(r19)
   827e4:	983fee1e 	bne	r19,zero,827a0 <_fwalk+0x38>
   827e8:	0081fc80 	call	81fc8 <__sfp_lock_release>
   827ec:	b005883a 	mov	r2,r22
   827f0:	dfc00717 	ldw	ra,28(sp)
   827f4:	dd800617 	ldw	r22,24(sp)
   827f8:	dd400517 	ldw	r21,20(sp)
   827fc:	dd000417 	ldw	r20,16(sp)
   82800:	dcc00317 	ldw	r19,12(sp)
   82804:	dc800217 	ldw	r18,8(sp)
   82808:	dc400117 	ldw	r17,4(sp)
   8280c:	dc000017 	ldw	r16,0(sp)
   82810:	dec00804 	addi	sp,sp,32
   82814:	f800283a 	ret
   82818:	002d883a 	mov	r22,zero
   8281c:	003ff206 	br	827e8 <_fwalk+0x80>

00082820 <__smakebuf_r>:
   82820:	2880030b 	ldhu	r2,12(r5)
   82824:	deffed04 	addi	sp,sp,-76
   82828:	dc401015 	stw	r17,64(sp)
   8282c:	1080008c 	andi	r2,r2,2
   82830:	dc000f15 	stw	r16,60(sp)
   82834:	dfc01215 	stw	ra,72(sp)
   82838:	dc801115 	stw	r18,68(sp)
   8283c:	2821883a 	mov	r16,r5
   82840:	2023883a 	mov	r17,r4
   82844:	10000b26 	beq	r2,zero,82874 <__smakebuf_r+0x54>
   82848:	28c010c4 	addi	r3,r5,67
   8284c:	00800044 	movi	r2,1
   82850:	28800515 	stw	r2,20(r5)
   82854:	28c00415 	stw	r3,16(r5)
   82858:	28c00015 	stw	r3,0(r5)
   8285c:	dfc01217 	ldw	ra,72(sp)
   82860:	dc801117 	ldw	r18,68(sp)
   82864:	dc401017 	ldw	r17,64(sp)
   82868:	dc000f17 	ldw	r16,60(sp)
   8286c:	dec01304 	addi	sp,sp,76
   82870:	f800283a 	ret
   82874:	2940038f 	ldh	r5,14(r5)
   82878:	28002116 	blt	r5,zero,82900 <__smakebuf_r+0xe0>
   8287c:	d80d883a 	mov	r6,sp
   82880:	0082da40 	call	82da4 <_fstat_r>
   82884:	10001e16 	blt	r2,zero,82900 <__smakebuf_r+0xe0>
   82888:	d8800117 	ldw	r2,4(sp)
   8288c:	00e00014 	movui	r3,32768
   82890:	113c000c 	andi	r4,r2,61440
   82894:	20c03126 	beq	r4,r3,8295c <__smakebuf_r+0x13c>
   82898:	8080030b 	ldhu	r2,12(r16)
   8289c:	00c80004 	movi	r3,8192
   828a0:	10820014 	ori	r2,r2,2048
   828a4:	8080030d 	sth	r2,12(r16)
   828a8:	20c01e26 	beq	r4,r3,82924 <__smakebuf_r+0x104>
   828ac:	04810004 	movi	r18,1024
   828b0:	8809883a 	mov	r4,r17
   828b4:	900b883a 	mov	r5,r18
   828b8:	0080bf80 	call	80bf8 <_malloc_r>
   828bc:	1009883a 	mov	r4,r2
   828c0:	10003126 	beq	r2,zero,82988 <__smakebuf_r+0x168>
   828c4:	80c0030b 	ldhu	r3,12(r16)
   828c8:	00800234 	movhi	r2,8
   828cc:	10882e04 	addi	r2,r2,8376
   828d0:	88800f15 	stw	r2,60(r17)
   828d4:	18c02014 	ori	r3,r3,128
   828d8:	84800515 	stw	r18,20(r16)
   828dc:	80c0030d 	sth	r3,12(r16)
   828e0:	81000415 	stw	r4,16(r16)
   828e4:	81000015 	stw	r4,0(r16)
   828e8:	dfc01217 	ldw	ra,72(sp)
   828ec:	dc801117 	ldw	r18,68(sp)
   828f0:	dc401017 	ldw	r17,64(sp)
   828f4:	dc000f17 	ldw	r16,60(sp)
   828f8:	dec01304 	addi	sp,sp,76
   828fc:	f800283a 	ret
   82900:	80c0030b 	ldhu	r3,12(r16)
   82904:	1880200c 	andi	r2,r3,128
   82908:	10000426 	beq	r2,zero,8291c <__smakebuf_r+0xfc>
   8290c:	04801004 	movi	r18,64
   82910:	18820014 	ori	r2,r3,2048
   82914:	8080030d 	sth	r2,12(r16)
   82918:	003fe506 	br	828b0 <__smakebuf_r+0x90>
   8291c:	04810004 	movi	r18,1024
   82920:	003ffb06 	br	82910 <__smakebuf_r+0xf0>
   82924:	8140038f 	ldh	r5,14(r16)
   82928:	8809883a 	mov	r4,r17
   8292c:	0082e180 	call	82e18 <_isatty_r>
   82930:	103fde26 	beq	r2,zero,828ac <__smakebuf_r+0x8c>
   82934:	8080030b 	ldhu	r2,12(r16)
   82938:	80c010c4 	addi	r3,r16,67
   8293c:	04810004 	movi	r18,1024
   82940:	10800054 	ori	r2,r2,1
   82944:	8080030d 	sth	r2,12(r16)
   82948:	00800044 	movi	r2,1
   8294c:	80c00415 	stw	r3,16(r16)
   82950:	80800515 	stw	r2,20(r16)
   82954:	80c00015 	stw	r3,0(r16)
   82958:	003fd506 	br	828b0 <__smakebuf_r+0x90>
   8295c:	80c00a17 	ldw	r3,40(r16)
   82960:	00800234 	movhi	r2,8
   82964:	108a9504 	addi	r2,r2,10836
   82968:	18bfcb1e 	bne	r3,r2,82898 <__smakebuf_r+0x78>
   8296c:	8080030b 	ldhu	r2,12(r16)
   82970:	00c10004 	movi	r3,1024
   82974:	1825883a 	mov	r18,r3
   82978:	10c4b03a 	or	r2,r2,r3
   8297c:	8080030d 	sth	r2,12(r16)
   82980:	80c01315 	stw	r3,76(r16)
   82984:	003fca06 	br	828b0 <__smakebuf_r+0x90>
   82988:	8100030b 	ldhu	r4,12(r16)
   8298c:	2080800c 	andi	r2,r4,512
   82990:	103fb21e 	bne	r2,zero,8285c <__smakebuf_r+0x3c>
   82994:	80c010c4 	addi	r3,r16,67
   82998:	21000094 	ori	r4,r4,2
   8299c:	00800044 	movi	r2,1
   829a0:	80800515 	stw	r2,20(r16)
   829a4:	8100030d 	sth	r4,12(r16)
   829a8:	80c00415 	stw	r3,16(r16)
   829ac:	80c00015 	stw	r3,0(r16)
   829b0:	003faa06 	br	8285c <__smakebuf_r+0x3c>

000829b4 <memset>:
   829b4:	008000c4 	movi	r2,3
   829b8:	29403fcc 	andi	r5,r5,255
   829bc:	2007883a 	mov	r3,r4
   829c0:	1180022e 	bgeu	r2,r6,829cc <memset+0x18>
   829c4:	2084703a 	and	r2,r4,r2
   829c8:	10000826 	beq	r2,zero,829ec <memset+0x38>
   829cc:	30000526 	beq	r6,zero,829e4 <memset+0x30>
   829d0:	2805883a 	mov	r2,r5
   829d4:	30cd883a 	add	r6,r6,r3
   829d8:	18800005 	stb	r2,0(r3)
   829dc:	18c00044 	addi	r3,r3,1
   829e0:	19bffd1e 	bne	r3,r6,829d8 <memset+0x24>
   829e4:	2005883a 	mov	r2,r4
   829e8:	f800283a 	ret
   829ec:	2804923a 	slli	r2,r5,8
   829f0:	020003c4 	movi	r8,15
   829f4:	200f883a 	mov	r7,r4
   829f8:	2884b03a 	or	r2,r5,r2
   829fc:	1006943a 	slli	r3,r2,16
   82a00:	10c6b03a 	or	r3,r2,r3
   82a04:	41800a2e 	bgeu	r8,r6,82a30 <memset+0x7c>
   82a08:	4005883a 	mov	r2,r8
   82a0c:	31bffc04 	addi	r6,r6,-16
   82a10:	38c00015 	stw	r3,0(r7)
   82a14:	38c00115 	stw	r3,4(r7)
   82a18:	38c00215 	stw	r3,8(r7)
   82a1c:	38c00315 	stw	r3,12(r7)
   82a20:	39c00404 	addi	r7,r7,16
   82a24:	11bff936 	bltu	r2,r6,82a0c <memset+0x58>
   82a28:	008000c4 	movi	r2,3
   82a2c:	1180052e 	bgeu	r2,r6,82a44 <memset+0x90>
   82a30:	31bfff04 	addi	r6,r6,-4
   82a34:	008000c4 	movi	r2,3
   82a38:	38c00015 	stw	r3,0(r7)
   82a3c:	39c00104 	addi	r7,r7,4
   82a40:	11bffb36 	bltu	r2,r6,82a30 <memset+0x7c>
   82a44:	3807883a 	mov	r3,r7
   82a48:	003fe006 	br	829cc <memset+0x18>

00082a4c <__sclose>:
   82a4c:	2940038f 	ldh	r5,14(r5)
   82a50:	0082c101 	jmpi	82c10 <_close_r>

00082a54 <__sseek>:
   82a54:	defffe04 	addi	sp,sp,-8
   82a58:	dc000015 	stw	r16,0(sp)
   82a5c:	2821883a 	mov	r16,r5
   82a60:	2940038f 	ldh	r5,14(r5)
   82a64:	dfc00115 	stw	ra,4(sp)
   82a68:	0082e880 	call	82e88 <_lseek_r>
   82a6c:	1007883a 	mov	r3,r2
   82a70:	00bfffc4 	movi	r2,-1
   82a74:	18800926 	beq	r3,r2,82a9c <__sseek+0x48>
   82a78:	8080030b 	ldhu	r2,12(r16)
   82a7c:	80c01415 	stw	r3,80(r16)
   82a80:	10840014 	ori	r2,r2,4096
   82a84:	8080030d 	sth	r2,12(r16)
   82a88:	1805883a 	mov	r2,r3
   82a8c:	dfc00117 	ldw	ra,4(sp)
   82a90:	dc000017 	ldw	r16,0(sp)
   82a94:	dec00204 	addi	sp,sp,8
   82a98:	f800283a 	ret
   82a9c:	8080030b 	ldhu	r2,12(r16)
   82aa0:	10bbffcc 	andi	r2,r2,61439
   82aa4:	8080030d 	sth	r2,12(r16)
   82aa8:	1805883a 	mov	r2,r3
   82aac:	dfc00117 	ldw	ra,4(sp)
   82ab0:	dc000017 	ldw	r16,0(sp)
   82ab4:	dec00204 	addi	sp,sp,8
   82ab8:	f800283a 	ret

00082abc <__swrite>:
   82abc:	2880030b 	ldhu	r2,12(r5)
   82ac0:	defffb04 	addi	sp,sp,-20
   82ac4:	dcc00315 	stw	r19,12(sp)
   82ac8:	1080400c 	andi	r2,r2,256
   82acc:	dc800215 	stw	r18,8(sp)
   82ad0:	dc400115 	stw	r17,4(sp)
   82ad4:	dc000015 	stw	r16,0(sp)
   82ad8:	3027883a 	mov	r19,r6
   82adc:	3825883a 	mov	r18,r7
   82ae0:	dfc00415 	stw	ra,16(sp)
   82ae4:	2821883a 	mov	r16,r5
   82ae8:	000d883a 	mov	r6,zero
   82aec:	01c00084 	movi	r7,2
   82af0:	2023883a 	mov	r17,r4
   82af4:	10000226 	beq	r2,zero,82b00 <__swrite+0x44>
   82af8:	2940038f 	ldh	r5,14(r5)
   82afc:	0082e880 	call	82e88 <_lseek_r>
   82b00:	8080030b 	ldhu	r2,12(r16)
   82b04:	8140038f 	ldh	r5,14(r16)
   82b08:	8809883a 	mov	r4,r17
   82b0c:	10bbffcc 	andi	r2,r2,61439
   82b10:	980d883a 	mov	r6,r19
   82b14:	900f883a 	mov	r7,r18
   82b18:	8080030d 	sth	r2,12(r16)
   82b1c:	dfc00417 	ldw	ra,16(sp)
   82b20:	dcc00317 	ldw	r19,12(sp)
   82b24:	dc800217 	ldw	r18,8(sp)
   82b28:	dc400117 	ldw	r17,4(sp)
   82b2c:	dc000017 	ldw	r16,0(sp)
   82b30:	dec00504 	addi	sp,sp,20
   82b34:	0082b981 	jmpi	82b98 <_write_r>

00082b38 <__sread>:
   82b38:	defffe04 	addi	sp,sp,-8
   82b3c:	dc000015 	stw	r16,0(sp)
   82b40:	2821883a 	mov	r16,r5
   82b44:	2940038f 	ldh	r5,14(r5)
   82b48:	dfc00115 	stw	ra,4(sp)
   82b4c:	0082f000 	call	82f00 <_read_r>
   82b50:	1007883a 	mov	r3,r2
   82b54:	10000816 	blt	r2,zero,82b78 <__sread+0x40>
   82b58:	80801417 	ldw	r2,80(r16)
   82b5c:	10c5883a 	add	r2,r2,r3
   82b60:	80801415 	stw	r2,80(r16)
   82b64:	1805883a 	mov	r2,r3
   82b68:	dfc00117 	ldw	ra,4(sp)
   82b6c:	dc000017 	ldw	r16,0(sp)
   82b70:	dec00204 	addi	sp,sp,8
   82b74:	f800283a 	ret
   82b78:	8080030b 	ldhu	r2,12(r16)
   82b7c:	10bbffcc 	andi	r2,r2,61439
   82b80:	8080030d 	sth	r2,12(r16)
   82b84:	1805883a 	mov	r2,r3
   82b88:	dfc00117 	ldw	ra,4(sp)
   82b8c:	dc000017 	ldw	r16,0(sp)
   82b90:	dec00204 	addi	sp,sp,8
   82b94:	f800283a 	ret

00082b98 <_write_r>:
   82b98:	defffd04 	addi	sp,sp,-12
   82b9c:	dc000015 	stw	r16,0(sp)
   82ba0:	04000274 	movhi	r16,9
   82ba4:	8423e204 	addi	r16,r16,-28792
   82ba8:	dc400115 	stw	r17,4(sp)
   82bac:	80000015 	stw	zero,0(r16)
   82bb0:	2023883a 	mov	r17,r4
   82bb4:	2809883a 	mov	r4,r5
   82bb8:	300b883a 	mov	r5,r6
   82bbc:	380d883a 	mov	r6,r7
   82bc0:	dfc00215 	stw	ra,8(sp)
   82bc4:	0083afc0 	call	83afc <write>
   82bc8:	1007883a 	mov	r3,r2
   82bcc:	00bfffc4 	movi	r2,-1
   82bd0:	18800626 	beq	r3,r2,82bec <_write_r+0x54>
   82bd4:	1805883a 	mov	r2,r3
   82bd8:	dfc00217 	ldw	ra,8(sp)
   82bdc:	dc400117 	ldw	r17,4(sp)
   82be0:	dc000017 	ldw	r16,0(sp)
   82be4:	dec00304 	addi	sp,sp,12
   82be8:	f800283a 	ret
   82bec:	80800017 	ldw	r2,0(r16)
   82bf0:	103ff826 	beq	r2,zero,82bd4 <_write_r+0x3c>
   82bf4:	88800015 	stw	r2,0(r17)
   82bf8:	1805883a 	mov	r2,r3
   82bfc:	dfc00217 	ldw	ra,8(sp)
   82c00:	dc400117 	ldw	r17,4(sp)
   82c04:	dc000017 	ldw	r16,0(sp)
   82c08:	dec00304 	addi	sp,sp,12
   82c0c:	f800283a 	ret

00082c10 <_close_r>:
   82c10:	defffd04 	addi	sp,sp,-12
   82c14:	dc000015 	stw	r16,0(sp)
   82c18:	04000274 	movhi	r16,9
   82c1c:	8423e204 	addi	r16,r16,-28792
   82c20:	dc400115 	stw	r17,4(sp)
   82c24:	80000015 	stw	zero,0(r16)
   82c28:	2023883a 	mov	r17,r4
   82c2c:	2809883a 	mov	r4,r5
   82c30:	dfc00215 	stw	ra,8(sp)
   82c34:	0082fb00 	call	82fb0 <close>
   82c38:	1007883a 	mov	r3,r2
   82c3c:	00bfffc4 	movi	r2,-1
   82c40:	18800626 	beq	r3,r2,82c5c <_close_r+0x4c>
   82c44:	1805883a 	mov	r2,r3
   82c48:	dfc00217 	ldw	ra,8(sp)
   82c4c:	dc400117 	ldw	r17,4(sp)
   82c50:	dc000017 	ldw	r16,0(sp)
   82c54:	dec00304 	addi	sp,sp,12
   82c58:	f800283a 	ret
   82c5c:	80800017 	ldw	r2,0(r16)
   82c60:	103ff826 	beq	r2,zero,82c44 <_close_r+0x34>
   82c64:	88800015 	stw	r2,0(r17)
   82c68:	1805883a 	mov	r2,r3
   82c6c:	dfc00217 	ldw	ra,8(sp)
   82c70:	dc400117 	ldw	r17,4(sp)
   82c74:	dc000017 	ldw	r16,0(sp)
   82c78:	dec00304 	addi	sp,sp,12
   82c7c:	f800283a 	ret

00082c80 <_fclose_r>:
   82c80:	defffc04 	addi	sp,sp,-16
   82c84:	dc400115 	stw	r17,4(sp)
   82c88:	dc000015 	stw	r16,0(sp)
   82c8c:	dfc00315 	stw	ra,12(sp)
   82c90:	dc800215 	stw	r18,8(sp)
   82c94:	2821883a 	mov	r16,r5
   82c98:	2023883a 	mov	r17,r4
   82c9c:	28002926 	beq	r5,zero,82d44 <_fclose_r+0xc4>
   82ca0:	0081fc40 	call	81fc4 <__sfp_lock_acquire>
   82ca4:	88000226 	beq	r17,zero,82cb0 <_fclose_r+0x30>
   82ca8:	88800e17 	ldw	r2,56(r17)
   82cac:	10002d26 	beq	r2,zero,82d64 <_fclose_r+0xe4>
   82cb0:	8080030f 	ldh	r2,12(r16)
   82cb4:	10002226 	beq	r2,zero,82d40 <_fclose_r+0xc0>
   82cb8:	8809883a 	mov	r4,r17
   82cbc:	800b883a 	mov	r5,r16
   82cc0:	0081d3c0 	call	81d3c <_fflush_r>
   82cc4:	1025883a 	mov	r18,r2
   82cc8:	80800b17 	ldw	r2,44(r16)
   82ccc:	10000426 	beq	r2,zero,82ce0 <_fclose_r+0x60>
   82cd0:	81400717 	ldw	r5,28(r16)
   82cd4:	8809883a 	mov	r4,r17
   82cd8:	103ee83a 	callr	r2
   82cdc:	10002a16 	blt	r2,zero,82d88 <_fclose_r+0x108>
   82ce0:	8080030b 	ldhu	r2,12(r16)
   82ce4:	1080200c 	andi	r2,r2,128
   82ce8:	1000231e 	bne	r2,zero,82d78 <_fclose_r+0xf8>
   82cec:	81400c17 	ldw	r5,48(r16)
   82cf0:	28000526 	beq	r5,zero,82d08 <_fclose_r+0x88>
   82cf4:	80801004 	addi	r2,r16,64
   82cf8:	28800226 	beq	r5,r2,82d04 <_fclose_r+0x84>
   82cfc:	8809883a 	mov	r4,r17
   82d00:	008238c0 	call	8238c <_free_r>
   82d04:	80000c15 	stw	zero,48(r16)
   82d08:	81401117 	ldw	r5,68(r16)
   82d0c:	28000326 	beq	r5,zero,82d1c <_fclose_r+0x9c>
   82d10:	8809883a 	mov	r4,r17
   82d14:	008238c0 	call	8238c <_free_r>
   82d18:	80001115 	stw	zero,68(r16)
   82d1c:	8000030d 	sth	zero,12(r16)
   82d20:	0081fc80 	call	81fc8 <__sfp_lock_release>
   82d24:	9005883a 	mov	r2,r18
   82d28:	dfc00317 	ldw	ra,12(sp)
   82d2c:	dc800217 	ldw	r18,8(sp)
   82d30:	dc400117 	ldw	r17,4(sp)
   82d34:	dc000017 	ldw	r16,0(sp)
   82d38:	dec00404 	addi	sp,sp,16
   82d3c:	f800283a 	ret
   82d40:	0081fc80 	call	81fc8 <__sfp_lock_release>
   82d44:	0025883a 	mov	r18,zero
   82d48:	9005883a 	mov	r2,r18
   82d4c:	dfc00317 	ldw	ra,12(sp)
   82d50:	dc800217 	ldw	r18,8(sp)
   82d54:	dc400117 	ldw	r17,4(sp)
   82d58:	dc000017 	ldw	r16,0(sp)
   82d5c:	dec00404 	addi	sp,sp,16
   82d60:	f800283a 	ret
   82d64:	8809883a 	mov	r4,r17
   82d68:	0081fd40 	call	81fd4 <__sinit>
   82d6c:	8080030f 	ldh	r2,12(r16)
   82d70:	103fd11e 	bne	r2,zero,82cb8 <_fclose_r+0x38>
   82d74:	003ff206 	br	82d40 <_fclose_r+0xc0>
   82d78:	81400417 	ldw	r5,16(r16)
   82d7c:	8809883a 	mov	r4,r17
   82d80:	008238c0 	call	8238c <_free_r>
   82d84:	003fd906 	br	82cec <_fclose_r+0x6c>
   82d88:	04bfffc4 	movi	r18,-1
   82d8c:	003fd406 	br	82ce0 <_fclose_r+0x60>

00082d90 <fclose>:
   82d90:	00800234 	movhi	r2,8
   82d94:	109d3e04 	addi	r2,r2,29944
   82d98:	200b883a 	mov	r5,r4
   82d9c:	11000017 	ldw	r4,0(r2)
   82da0:	0082c801 	jmpi	82c80 <_fclose_r>

00082da4 <_fstat_r>:
   82da4:	defffd04 	addi	sp,sp,-12
   82da8:	dc000015 	stw	r16,0(sp)
   82dac:	04000274 	movhi	r16,9
   82db0:	8423e204 	addi	r16,r16,-28792
   82db4:	dc400115 	stw	r17,4(sp)
   82db8:	80000015 	stw	zero,0(r16)
   82dbc:	2023883a 	mov	r17,r4
   82dc0:	2809883a 	mov	r4,r5
   82dc4:	300b883a 	mov	r5,r6
   82dc8:	dfc00215 	stw	ra,8(sp)
   82dcc:	008313c0 	call	8313c <fstat>
   82dd0:	1007883a 	mov	r3,r2
   82dd4:	00bfffc4 	movi	r2,-1
   82dd8:	18800626 	beq	r3,r2,82df4 <_fstat_r+0x50>
   82ddc:	1805883a 	mov	r2,r3
   82de0:	dfc00217 	ldw	ra,8(sp)
   82de4:	dc400117 	ldw	r17,4(sp)
   82de8:	dc000017 	ldw	r16,0(sp)
   82dec:	dec00304 	addi	sp,sp,12
   82df0:	f800283a 	ret
   82df4:	80800017 	ldw	r2,0(r16)
   82df8:	103ff826 	beq	r2,zero,82ddc <_fstat_r+0x38>
   82dfc:	88800015 	stw	r2,0(r17)
   82e00:	1805883a 	mov	r2,r3
   82e04:	dfc00217 	ldw	ra,8(sp)
   82e08:	dc400117 	ldw	r17,4(sp)
   82e0c:	dc000017 	ldw	r16,0(sp)
   82e10:	dec00304 	addi	sp,sp,12
   82e14:	f800283a 	ret

00082e18 <_isatty_r>:
   82e18:	defffd04 	addi	sp,sp,-12
   82e1c:	dc000015 	stw	r16,0(sp)
   82e20:	04000274 	movhi	r16,9
   82e24:	8423e204 	addi	r16,r16,-28792
   82e28:	dc400115 	stw	r17,4(sp)
   82e2c:	80000015 	stw	zero,0(r16)
   82e30:	2023883a 	mov	r17,r4
   82e34:	2809883a 	mov	r4,r5
   82e38:	dfc00215 	stw	ra,8(sp)
   82e3c:	00834340 	call	83434 <isatty>
   82e40:	1007883a 	mov	r3,r2
   82e44:	00bfffc4 	movi	r2,-1
   82e48:	18800626 	beq	r3,r2,82e64 <_isatty_r+0x4c>
   82e4c:	1805883a 	mov	r2,r3
   82e50:	dfc00217 	ldw	ra,8(sp)
   82e54:	dc400117 	ldw	r17,4(sp)
   82e58:	dc000017 	ldw	r16,0(sp)
   82e5c:	dec00304 	addi	sp,sp,12
   82e60:	f800283a 	ret
   82e64:	80800017 	ldw	r2,0(r16)
   82e68:	103ff826 	beq	r2,zero,82e4c <_isatty_r+0x34>
   82e6c:	88800015 	stw	r2,0(r17)
   82e70:	1805883a 	mov	r2,r3
   82e74:	dfc00217 	ldw	ra,8(sp)
   82e78:	dc400117 	ldw	r17,4(sp)
   82e7c:	dc000017 	ldw	r16,0(sp)
   82e80:	dec00304 	addi	sp,sp,12
   82e84:	f800283a 	ret

00082e88 <_lseek_r>:
   82e88:	defffd04 	addi	sp,sp,-12
   82e8c:	dc000015 	stw	r16,0(sp)
   82e90:	04000274 	movhi	r16,9
   82e94:	8423e204 	addi	r16,r16,-28792
   82e98:	dc400115 	stw	r17,4(sp)
   82e9c:	80000015 	stw	zero,0(r16)
   82ea0:	2023883a 	mov	r17,r4
   82ea4:	2809883a 	mov	r4,r5
   82ea8:	300b883a 	mov	r5,r6
   82eac:	380d883a 	mov	r6,r7
   82eb0:	dfc00215 	stw	ra,8(sp)
   82eb4:	00836440 	call	83644 <lseek>
   82eb8:	1007883a 	mov	r3,r2
   82ebc:	00bfffc4 	movi	r2,-1
   82ec0:	18800626 	beq	r3,r2,82edc <_lseek_r+0x54>
   82ec4:	1805883a 	mov	r2,r3
   82ec8:	dfc00217 	ldw	ra,8(sp)
   82ecc:	dc400117 	ldw	r17,4(sp)
   82ed0:	dc000017 	ldw	r16,0(sp)
   82ed4:	dec00304 	addi	sp,sp,12
   82ed8:	f800283a 	ret
   82edc:	80800017 	ldw	r2,0(r16)
   82ee0:	103ff826 	beq	r2,zero,82ec4 <_lseek_r+0x3c>
   82ee4:	88800015 	stw	r2,0(r17)
   82ee8:	1805883a 	mov	r2,r3
   82eec:	dfc00217 	ldw	ra,8(sp)
   82ef0:	dc400117 	ldw	r17,4(sp)
   82ef4:	dc000017 	ldw	r16,0(sp)
   82ef8:	dec00304 	addi	sp,sp,12
   82efc:	f800283a 	ret

00082f00 <_read_r>:
   82f00:	defffd04 	addi	sp,sp,-12
   82f04:	dc000015 	stw	r16,0(sp)
   82f08:	04000274 	movhi	r16,9
   82f0c:	8423e204 	addi	r16,r16,-28792
   82f10:	dc400115 	stw	r17,4(sp)
   82f14:	80000015 	stw	zero,0(r16)
   82f18:	2023883a 	mov	r17,r4
   82f1c:	2809883a 	mov	r4,r5
   82f20:	300b883a 	mov	r5,r6
   82f24:	380d883a 	mov	r6,r7
   82f28:	dfc00215 	stw	ra,8(sp)
   82f2c:	00838440 	call	83844 <read>
   82f30:	1007883a 	mov	r3,r2
   82f34:	00bfffc4 	movi	r2,-1
   82f38:	18800626 	beq	r3,r2,82f54 <_read_r+0x54>
   82f3c:	1805883a 	mov	r2,r3
   82f40:	dfc00217 	ldw	ra,8(sp)
   82f44:	dc400117 	ldw	r17,4(sp)
   82f48:	dc000017 	ldw	r16,0(sp)
   82f4c:	dec00304 	addi	sp,sp,12
   82f50:	f800283a 	ret
   82f54:	80800017 	ldw	r2,0(r16)
   82f58:	103ff826 	beq	r2,zero,82f3c <_read_r+0x3c>
   82f5c:	88800015 	stw	r2,0(r17)
   82f60:	1805883a 	mov	r2,r3
   82f64:	dfc00217 	ldw	ra,8(sp)
   82f68:	dc400117 	ldw	r17,4(sp)
   82f6c:	dc000017 	ldw	r16,0(sp)
   82f70:	dec00304 	addi	sp,sp,12
   82f74:	f800283a 	ret

00082f78 <__mulsi3>:
   82f78:	20000a26 	beq	r4,zero,82fa4 <__mulsi3+0x2c>
   82f7c:	0007883a 	mov	r3,zero
   82f80:	2080004c 	andi	r2,r4,1
   82f84:	1005003a 	cmpeq	r2,r2,zero
   82f88:	2008d07a 	srli	r4,r4,1
   82f8c:	1000011e 	bne	r2,zero,82f94 <__mulsi3+0x1c>
   82f90:	1947883a 	add	r3,r3,r5
   82f94:	294b883a 	add	r5,r5,r5
   82f98:	203ff91e 	bne	r4,zero,82f80 <__mulsi3+0x8>
   82f9c:	1805883a 	mov	r2,r3
   82fa0:	f800283a 	ret
   82fa4:	0007883a 	mov	r3,zero
   82fa8:	1805883a 	mov	r2,r3
   82fac:	f800283a 	ret

00082fb0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   82fb0:	defff804 	addi	sp,sp,-32
   82fb4:	dfc00715 	stw	ra,28(sp)
   82fb8:	df000615 	stw	fp,24(sp)
   82fbc:	df000604 	addi	fp,sp,24
   82fc0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   82fc4:	e0bffc17 	ldw	r2,-16(fp)
   82fc8:	1004803a 	cmplt	r2,r2,zero
   82fcc:	1000091e 	bne	r2,zero,82ff4 <close+0x44>
   82fd0:	e13ffc17 	ldw	r4,-16(fp)
   82fd4:	01400304 	movi	r5,12
   82fd8:	0082f780 	call	82f78 <__mulsi3>
   82fdc:	1007883a 	mov	r3,r2
   82fe0:	00800234 	movhi	r2,8
   82fe4:	1098c504 	addi	r2,r2,25364
   82fe8:	1887883a 	add	r3,r3,r2
   82fec:	e0ffff15 	stw	r3,-4(fp)
   82ff0:	00000106 	br	82ff8 <close+0x48>
   82ff4:	e03fff15 	stw	zero,-4(fp)
   82ff8:	e0bfff17 	ldw	r2,-4(fp)
   82ffc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   83000:	e0bffb17 	ldw	r2,-20(fp)
   83004:	1005003a 	cmpeq	r2,r2,zero
   83008:	10001d1e 	bne	r2,zero,83080 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8300c:	e0bffb17 	ldw	r2,-20(fp)
   83010:	10800017 	ldw	r2,0(r2)
   83014:	10800417 	ldw	r2,16(r2)
   83018:	1005003a 	cmpeq	r2,r2,zero
   8301c:	1000071e 	bne	r2,zero,8303c <close+0x8c>
   83020:	e0bffb17 	ldw	r2,-20(fp)
   83024:	10800017 	ldw	r2,0(r2)
   83028:	10800417 	ldw	r2,16(r2)
   8302c:	e13ffb17 	ldw	r4,-20(fp)
   83030:	103ee83a 	callr	r2
   83034:	e0bffe15 	stw	r2,-8(fp)
   83038:	00000106 	br	83040 <close+0x90>
   8303c:	e03ffe15 	stw	zero,-8(fp)
   83040:	e0bffe17 	ldw	r2,-8(fp)
   83044:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   83048:	e13ffc17 	ldw	r4,-16(fp)
   8304c:	00839c80 	call	839c8 <alt_release_fd>
    if (rval < 0)
   83050:	e0bffa17 	ldw	r2,-24(fp)
   83054:	1004403a 	cmpge	r2,r2,zero
   83058:	1000071e 	bne	r2,zero,83078 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8305c:	00830b00 	call	830b0 <alt_get_errno>
   83060:	e0fffa17 	ldw	r3,-24(fp)
   83064:	00c7c83a 	sub	r3,zero,r3
   83068:	10c00015 	stw	r3,0(r2)
      return -1;
   8306c:	00bfffc4 	movi	r2,-1
   83070:	e0bffd15 	stw	r2,-12(fp)
   83074:	00000806 	br	83098 <close+0xe8>
    }
    return 0;
   83078:	e03ffd15 	stw	zero,-12(fp)
   8307c:	00000606 	br	83098 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   83080:	00830b00 	call	830b0 <alt_get_errno>
   83084:	1007883a 	mov	r3,r2
   83088:	00801444 	movi	r2,81
   8308c:	18800015 	stw	r2,0(r3)
    return -1;
   83090:	00bfffc4 	movi	r2,-1
   83094:	e0bffd15 	stw	r2,-12(fp)
   83098:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8309c:	e037883a 	mov	sp,fp
   830a0:	dfc00117 	ldw	ra,4(sp)
   830a4:	df000017 	ldw	fp,0(sp)
   830a8:	dec00204 	addi	sp,sp,8
   830ac:	f800283a 	ret

000830b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   830b0:	defffd04 	addi	sp,sp,-12
   830b4:	dfc00215 	stw	ra,8(sp)
   830b8:	df000115 	stw	fp,4(sp)
   830bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   830c0:	00800234 	movhi	r2,8
   830c4:	109d4704 	addi	r2,r2,29980
   830c8:	10800017 	ldw	r2,0(r2)
   830cc:	1005003a 	cmpeq	r2,r2,zero
   830d0:	1000061e 	bne	r2,zero,830ec <alt_get_errno+0x3c>
   830d4:	00800234 	movhi	r2,8
   830d8:	109d4704 	addi	r2,r2,29980
   830dc:	10800017 	ldw	r2,0(r2)
   830e0:	103ee83a 	callr	r2
   830e4:	e0bfff15 	stw	r2,-4(fp)
   830e8:	00000306 	br	830f8 <alt_get_errno+0x48>
   830ec:	00800274 	movhi	r2,9
   830f0:	10a3e204 	addi	r2,r2,-28792
   830f4:	e0bfff15 	stw	r2,-4(fp)
   830f8:	e0bfff17 	ldw	r2,-4(fp)
}
   830fc:	e037883a 	mov	sp,fp
   83100:	dfc00117 	ldw	ra,4(sp)
   83104:	df000017 	ldw	fp,0(sp)
   83108:	dec00204 	addi	sp,sp,8
   8310c:	f800283a 	ret

00083110 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   83110:	defffc04 	addi	sp,sp,-16
   83114:	df000315 	stw	fp,12(sp)
   83118:	df000304 	addi	fp,sp,12
   8311c:	e13ffd15 	stw	r4,-12(fp)
   83120:	e17ffe15 	stw	r5,-8(fp)
   83124:	e1bfff15 	stw	r6,-4(fp)
  return len;
   83128:	e0bfff17 	ldw	r2,-4(fp)
}
   8312c:	e037883a 	mov	sp,fp
   83130:	df000017 	ldw	fp,0(sp)
   83134:	dec00104 	addi	sp,sp,4
   83138:	f800283a 	ret

0008313c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8313c:	defff904 	addi	sp,sp,-28
   83140:	dfc00615 	stw	ra,24(sp)
   83144:	df000515 	stw	fp,20(sp)
   83148:	df000504 	addi	fp,sp,20
   8314c:	e13ffc15 	stw	r4,-16(fp)
   83150:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83154:	e0bffc17 	ldw	r2,-16(fp)
   83158:	1004803a 	cmplt	r2,r2,zero
   8315c:	1000091e 	bne	r2,zero,83184 <fstat+0x48>
   83160:	e13ffc17 	ldw	r4,-16(fp)
   83164:	01400304 	movi	r5,12
   83168:	0082f780 	call	82f78 <__mulsi3>
   8316c:	1007883a 	mov	r3,r2
   83170:	00800234 	movhi	r2,8
   83174:	1098c504 	addi	r2,r2,25364
   83178:	1887883a 	add	r3,r3,r2
   8317c:	e0ffff15 	stw	r3,-4(fp)
   83180:	00000106 	br	83188 <fstat+0x4c>
   83184:	e03fff15 	stw	zero,-4(fp)
   83188:	e0bfff17 	ldw	r2,-4(fp)
   8318c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   83190:	e0bffb17 	ldw	r2,-20(fp)
   83194:	1005003a 	cmpeq	r2,r2,zero
   83198:	1000121e 	bne	r2,zero,831e4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8319c:	e0bffb17 	ldw	r2,-20(fp)
   831a0:	10800017 	ldw	r2,0(r2)
   831a4:	10800817 	ldw	r2,32(r2)
   831a8:	1005003a 	cmpeq	r2,r2,zero
   831ac:	1000081e 	bne	r2,zero,831d0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   831b0:	e0bffb17 	ldw	r2,-20(fp)
   831b4:	10800017 	ldw	r2,0(r2)
   831b8:	10800817 	ldw	r2,32(r2)
   831bc:	e13ffb17 	ldw	r4,-20(fp)
   831c0:	e17ffd17 	ldw	r5,-12(fp)
   831c4:	103ee83a 	callr	r2
   831c8:	e0bffe15 	stw	r2,-8(fp)
   831cc:	00000b06 	br	831fc <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   831d0:	e0fffd17 	ldw	r3,-12(fp)
   831d4:	00880004 	movi	r2,8192
   831d8:	18800115 	stw	r2,4(r3)
      return 0;
   831dc:	e03ffe15 	stw	zero,-8(fp)
   831e0:	00000606 	br	831fc <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   831e4:	00832140 	call	83214 <alt_get_errno>
   831e8:	1007883a 	mov	r3,r2
   831ec:	00801444 	movi	r2,81
   831f0:	18800015 	stw	r2,0(r3)
    return -1;
   831f4:	00bfffc4 	movi	r2,-1
   831f8:	e0bffe15 	stw	r2,-8(fp)
   831fc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   83200:	e037883a 	mov	sp,fp
   83204:	dfc00117 	ldw	ra,4(sp)
   83208:	df000017 	ldw	fp,0(sp)
   8320c:	dec00204 	addi	sp,sp,8
   83210:	f800283a 	ret

00083214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83214:	defffd04 	addi	sp,sp,-12
   83218:	dfc00215 	stw	ra,8(sp)
   8321c:	df000115 	stw	fp,4(sp)
   83220:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83224:	00800234 	movhi	r2,8
   83228:	109d4704 	addi	r2,r2,29980
   8322c:	10800017 	ldw	r2,0(r2)
   83230:	1005003a 	cmpeq	r2,r2,zero
   83234:	1000061e 	bne	r2,zero,83250 <alt_get_errno+0x3c>
   83238:	00800234 	movhi	r2,8
   8323c:	109d4704 	addi	r2,r2,29980
   83240:	10800017 	ldw	r2,0(r2)
   83244:	103ee83a 	callr	r2
   83248:	e0bfff15 	stw	r2,-4(fp)
   8324c:	00000306 	br	8325c <alt_get_errno+0x48>
   83250:	00800274 	movhi	r2,9
   83254:	10a3e204 	addi	r2,r2,-28792
   83258:	e0bfff15 	stw	r2,-4(fp)
   8325c:	e0bfff17 	ldw	r2,-4(fp)
}
   83260:	e037883a 	mov	sp,fp
   83264:	dfc00117 	ldw	ra,4(sp)
   83268:	df000017 	ldw	fp,0(sp)
   8326c:	dec00204 	addi	sp,sp,8
   83270:	f800283a 	ret

00083274 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   83274:	deffef04 	addi	sp,sp,-68
   83278:	df001015 	stw	fp,64(sp)
   8327c:	df001004 	addi	fp,sp,64
   83280:	e13ffc15 	stw	r4,-16(fp)
   83284:	e17ffd15 	stw	r5,-12(fp)
   83288:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   8328c:	00bffa84 	movi	r2,-22
   83290:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   83294:	e0bffc17 	ldw	r2,-16(fp)
   83298:	10800828 	cmpgeui	r2,r2,32
   8329c:	1000601e 	bne	r2,zero,83420 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   832a0:	0005303a 	rdctl	r2,status
   832a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   832a8:	e0fff917 	ldw	r3,-28(fp)
   832ac:	00bfff84 	movi	r2,-2
   832b0:	1884703a 	and	r2,r3,r2
   832b4:	1001703a 	wrctl	status,r2
  
  return context;
   832b8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   832bc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   832c0:	e0bffc17 	ldw	r2,-16(fp)
   832c4:	00c00274 	movhi	r3,9
   832c8:	18e3f304 	addi	r3,r3,-28724
   832cc:	100490fa 	slli	r2,r2,3
   832d0:	10c7883a 	add	r3,r2,r3
   832d4:	e0bffe17 	ldw	r2,-8(fp)
   832d8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   832dc:	e0bffc17 	ldw	r2,-16(fp)
   832e0:	00c00274 	movhi	r3,9
   832e4:	18e3f304 	addi	r3,r3,-28724
   832e8:	100490fa 	slli	r2,r2,3
   832ec:	10c5883a 	add	r2,r2,r3
   832f0:	10c00104 	addi	r3,r2,4
   832f4:	e0bffd17 	ldw	r2,-12(fp)
   832f8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   832fc:	e0bffe17 	ldw	r2,-8(fp)
   83300:	1005003a 	cmpeq	r2,r2,zero
   83304:	1000201e 	bne	r2,zero,83388 <alt_irq_register+0x114>
   83308:	e0bffc17 	ldw	r2,-16(fp)
   8330c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83310:	0005303a 	rdctl	r2,status
   83314:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83318:	e0fff617 	ldw	r3,-40(fp)
   8331c:	00bfff84 	movi	r2,-2
   83320:	1884703a 	and	r2,r3,r2
   83324:	1001703a 	wrctl	status,r2
  
  return context;
   83328:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8332c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   83330:	e0fff717 	ldw	r3,-36(fp)
   83334:	00800044 	movi	r2,1
   83338:	10c4983a 	sll	r2,r2,r3
   8333c:	1007883a 	mov	r3,r2
   83340:	00800274 	movhi	r2,9
   83344:	10a3e304 	addi	r2,r2,-28788
   83348:	10800017 	ldw	r2,0(r2)
   8334c:	1886b03a 	or	r3,r3,r2
   83350:	00800274 	movhi	r2,9
   83354:	10a3e304 	addi	r2,r2,-28788
   83358:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8335c:	00800274 	movhi	r2,9
   83360:	10a3e304 	addi	r2,r2,-28788
   83364:	10800017 	ldw	r2,0(r2)
   83368:	100170fa 	wrctl	ienable,r2
   8336c:	e0bff817 	ldw	r2,-32(fp)
   83370:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83374:	e0bff517 	ldw	r2,-44(fp)
   83378:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8337c:	0005883a 	mov	r2,zero
   83380:	e0bfff15 	stw	r2,-4(fp)
   83384:	00002006 	br	83408 <alt_irq_register+0x194>
   83388:	e0bffc17 	ldw	r2,-16(fp)
   8338c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83390:	0005303a 	rdctl	r2,status
   83394:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83398:	e0fff217 	ldw	r3,-56(fp)
   8339c:	00bfff84 	movi	r2,-2
   833a0:	1884703a 	and	r2,r3,r2
   833a4:	1001703a 	wrctl	status,r2
  
  return context;
   833a8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   833ac:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   833b0:	e0fff317 	ldw	r3,-52(fp)
   833b4:	00800044 	movi	r2,1
   833b8:	10c4983a 	sll	r2,r2,r3
   833bc:	0084303a 	nor	r2,zero,r2
   833c0:	1007883a 	mov	r3,r2
   833c4:	00800274 	movhi	r2,9
   833c8:	10a3e304 	addi	r2,r2,-28788
   833cc:	10800017 	ldw	r2,0(r2)
   833d0:	1886703a 	and	r3,r3,r2
   833d4:	00800274 	movhi	r2,9
   833d8:	10a3e304 	addi	r2,r2,-28788
   833dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   833e0:	00800274 	movhi	r2,9
   833e4:	10a3e304 	addi	r2,r2,-28788
   833e8:	10800017 	ldw	r2,0(r2)
   833ec:	100170fa 	wrctl	ienable,r2
   833f0:	e0bff417 	ldw	r2,-48(fp)
   833f4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   833f8:	e0bff117 	ldw	r2,-60(fp)
   833fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   83400:	0005883a 	mov	r2,zero
   83404:	e0bfff15 	stw	r2,-4(fp)
   83408:	e0bfff17 	ldw	r2,-4(fp)
   8340c:	e0bffb15 	stw	r2,-20(fp)
   83410:	e0bffa17 	ldw	r2,-24(fp)
   83414:	e0bff015 	stw	r2,-64(fp)
   83418:	e0bff017 	ldw	r2,-64(fp)
   8341c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   83420:	e0bffb17 	ldw	r2,-20(fp)
}
   83424:	e037883a 	mov	sp,fp
   83428:	df000017 	ldw	fp,0(sp)
   8342c:	dec00104 	addi	sp,sp,4
   83430:	f800283a 	ret

00083434 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   83434:	deffeb04 	addi	sp,sp,-84
   83438:	dfc01415 	stw	ra,80(sp)
   8343c:	df001315 	stw	fp,76(sp)
   83440:	df001304 	addi	fp,sp,76
   83444:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83448:	e0bffd17 	ldw	r2,-12(fp)
   8344c:	1004803a 	cmplt	r2,r2,zero
   83450:	1000091e 	bne	r2,zero,83478 <isatty+0x44>
   83454:	e13ffd17 	ldw	r4,-12(fp)
   83458:	01400304 	movi	r5,12
   8345c:	0082f780 	call	82f78 <__mulsi3>
   83460:	1007883a 	mov	r3,r2
   83464:	00800234 	movhi	r2,8
   83468:	1098c504 	addi	r2,r2,25364
   8346c:	1887883a 	add	r3,r3,r2
   83470:	e0ffff15 	stw	r3,-4(fp)
   83474:	00000106 	br	8347c <isatty+0x48>
   83478:	e03fff15 	stw	zero,-4(fp)
   8347c:	e0bfff17 	ldw	r2,-4(fp)
   83480:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   83484:	e0bfed17 	ldw	r2,-76(fp)
   83488:	1005003a 	cmpeq	r2,r2,zero
   8348c:	10000f1e 	bne	r2,zero,834cc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   83490:	e0bfed17 	ldw	r2,-76(fp)
   83494:	10800017 	ldw	r2,0(r2)
   83498:	10800817 	ldw	r2,32(r2)
   8349c:	1004c03a 	cmpne	r2,r2,zero
   834a0:	1000031e 	bne	r2,zero,834b0 <isatty+0x7c>
    {
      return 1;
   834a4:	00800044 	movi	r2,1
   834a8:	e0bffe15 	stw	r2,-8(fp)
   834ac:	00000c06 	br	834e0 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   834b0:	e17fee04 	addi	r5,fp,-72
   834b4:	e13ffd17 	ldw	r4,-12(fp)
   834b8:	008313c0 	call	8313c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   834bc:	e0bfef17 	ldw	r2,-68(fp)
   834c0:	10880020 	cmpeqi	r2,r2,8192
   834c4:	e0bffe15 	stw	r2,-8(fp)
   834c8:	00000506 	br	834e0 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   834cc:	00834f80 	call	834f8 <alt_get_errno>
   834d0:	1007883a 	mov	r3,r2
   834d4:	00801444 	movi	r2,81
   834d8:	18800015 	stw	r2,0(r3)
    return 0;
   834dc:	e03ffe15 	stw	zero,-8(fp)
   834e0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   834e4:	e037883a 	mov	sp,fp
   834e8:	dfc00117 	ldw	ra,4(sp)
   834ec:	df000017 	ldw	fp,0(sp)
   834f0:	dec00204 	addi	sp,sp,8
   834f4:	f800283a 	ret

000834f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   834f8:	defffd04 	addi	sp,sp,-12
   834fc:	dfc00215 	stw	ra,8(sp)
   83500:	df000115 	stw	fp,4(sp)
   83504:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83508:	00800234 	movhi	r2,8
   8350c:	109d4704 	addi	r2,r2,29980
   83510:	10800017 	ldw	r2,0(r2)
   83514:	1005003a 	cmpeq	r2,r2,zero
   83518:	1000061e 	bne	r2,zero,83534 <alt_get_errno+0x3c>
   8351c:	00800234 	movhi	r2,8
   83520:	109d4704 	addi	r2,r2,29980
   83524:	10800017 	ldw	r2,0(r2)
   83528:	103ee83a 	callr	r2
   8352c:	e0bfff15 	stw	r2,-4(fp)
   83530:	00000306 	br	83540 <alt_get_errno+0x48>
   83534:	00800274 	movhi	r2,9
   83538:	10a3e204 	addi	r2,r2,-28792
   8353c:	e0bfff15 	stw	r2,-4(fp)
   83540:	e0bfff17 	ldw	r2,-4(fp)
}
   83544:	e037883a 	mov	sp,fp
   83548:	dfc00117 	ldw	ra,4(sp)
   8354c:	df000017 	ldw	fp,0(sp)
   83550:	dec00204 	addi	sp,sp,8
   83554:	f800283a 	ret

00083558 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   83558:	defffe04 	addi	sp,sp,-8
   8355c:	dfc00115 	stw	ra,4(sp)
   83560:	df000015 	stw	fp,0(sp)
   83564:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   83568:	01000234 	movhi	r4,8
   8356c:	211d4c04 	addi	r4,r4,30000
   83570:	01400234 	movhi	r5,8
   83574:	2956b904 	addi	r5,r5,23268
   83578:	01800234 	movhi	r6,8
   8357c:	319d4c04 	addi	r6,r6,30000
   83580:	00835d80 	call	835d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   83584:	01000234 	movhi	r4,8
   83588:	21000804 	addi	r4,r4,32
   8358c:	01400234 	movhi	r5,8
   83590:	29400804 	addi	r5,r5,32
   83594:	01800234 	movhi	r6,8
   83598:	31806d04 	addi	r6,r6,436
   8359c:	00835d80 	call	835d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   835a0:	01000234 	movhi	r4,8
   835a4:	2116a604 	addi	r4,r4,23192
   835a8:	01400234 	movhi	r5,8
   835ac:	2956a604 	addi	r5,r5,23192
   835b0:	01800234 	movhi	r6,8
   835b4:	3196b904 	addi	r6,r6,23268
   835b8:	00835d80 	call	835d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   835bc:	00849300 	call	84930 <alt_dcache_flush_all>
  alt_icache_flush_all();
   835c0:	0084b280 	call	84b28 <alt_icache_flush_all>
}
   835c4:	e037883a 	mov	sp,fp
   835c8:	dfc00117 	ldw	ra,4(sp)
   835cc:	df000017 	ldw	fp,0(sp)
   835d0:	dec00204 	addi	sp,sp,8
   835d4:	f800283a 	ret

000835d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   835d8:	defffc04 	addi	sp,sp,-16
   835dc:	df000315 	stw	fp,12(sp)
   835e0:	df000304 	addi	fp,sp,12
   835e4:	e13ffd15 	stw	r4,-12(fp)
   835e8:	e17ffe15 	stw	r5,-8(fp)
   835ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   835f0:	e0fffe17 	ldw	r3,-8(fp)
   835f4:	e0bffd17 	ldw	r2,-12(fp)
   835f8:	18800e26 	beq	r3,r2,83634 <alt_load_section+0x5c>
  {
    while( to != end )
   835fc:	00000a06 	br	83628 <alt_load_section+0x50>
    {
      *to++ = *from++;
   83600:	e0bffd17 	ldw	r2,-12(fp)
   83604:	10c00017 	ldw	r3,0(r2)
   83608:	e0bffe17 	ldw	r2,-8(fp)
   8360c:	10c00015 	stw	r3,0(r2)
   83610:	e0bffe17 	ldw	r2,-8(fp)
   83614:	10800104 	addi	r2,r2,4
   83618:	e0bffe15 	stw	r2,-8(fp)
   8361c:	e0bffd17 	ldw	r2,-12(fp)
   83620:	10800104 	addi	r2,r2,4
   83624:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   83628:	e0fffe17 	ldw	r3,-8(fp)
   8362c:	e0bfff17 	ldw	r2,-4(fp)
   83630:	18bff31e 	bne	r3,r2,83600 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   83634:	e037883a 	mov	sp,fp
   83638:	df000017 	ldw	fp,0(sp)
   8363c:	dec00104 	addi	sp,sp,4
   83640:	f800283a 	ret

00083644 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   83644:	defff804 	addi	sp,sp,-32
   83648:	dfc00715 	stw	ra,28(sp)
   8364c:	df000615 	stw	fp,24(sp)
   83650:	df000604 	addi	fp,sp,24
   83654:	e13ffc15 	stw	r4,-16(fp)
   83658:	e17ffd15 	stw	r5,-12(fp)
   8365c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   83660:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83664:	e0bffc17 	ldw	r2,-16(fp)
   83668:	1004803a 	cmplt	r2,r2,zero
   8366c:	1000091e 	bne	r2,zero,83694 <lseek+0x50>
   83670:	e13ffc17 	ldw	r4,-16(fp)
   83674:	01400304 	movi	r5,12
   83678:	0082f780 	call	82f78 <__mulsi3>
   8367c:	1007883a 	mov	r3,r2
   83680:	00800234 	movhi	r2,8
   83684:	1098c504 	addi	r2,r2,25364
   83688:	1887883a 	add	r3,r3,r2
   8368c:	e0ffff15 	stw	r3,-4(fp)
   83690:	00000106 	br	83698 <lseek+0x54>
   83694:	e03fff15 	stw	zero,-4(fp)
   83698:	e0bfff17 	ldw	r2,-4(fp)
   8369c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   836a0:	e0bffb17 	ldw	r2,-20(fp)
   836a4:	1005003a 	cmpeq	r2,r2,zero
   836a8:	1000111e 	bne	r2,zero,836f0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   836ac:	e0bffb17 	ldw	r2,-20(fp)
   836b0:	10800017 	ldw	r2,0(r2)
   836b4:	10800717 	ldw	r2,28(r2)
   836b8:	1005003a 	cmpeq	r2,r2,zero
   836bc:	1000091e 	bne	r2,zero,836e4 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   836c0:	e0bffb17 	ldw	r2,-20(fp)
   836c4:	10800017 	ldw	r2,0(r2)
   836c8:	10800717 	ldw	r2,28(r2)
   836cc:	e13ffb17 	ldw	r4,-20(fp)
   836d0:	e17ffd17 	ldw	r5,-12(fp)
   836d4:	e1bffe17 	ldw	r6,-8(fp)
   836d8:	103ee83a 	callr	r2
   836dc:	e0bffa15 	stw	r2,-24(fp)
   836e0:	00000506 	br	836f8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   836e4:	00bfde84 	movi	r2,-134
   836e8:	e0bffa15 	stw	r2,-24(fp)
   836ec:	00000206 	br	836f8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   836f0:	00bfebc4 	movi	r2,-81
   836f4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   836f8:	e0bffa17 	ldw	r2,-24(fp)
   836fc:	1004403a 	cmpge	r2,r2,zero
   83700:	1000071e 	bne	r2,zero,83720 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   83704:	00837380 	call	83738 <alt_get_errno>
   83708:	1007883a 	mov	r3,r2
   8370c:	e0bffa17 	ldw	r2,-24(fp)
   83710:	0085c83a 	sub	r2,zero,r2
   83714:	18800015 	stw	r2,0(r3)
    rc = -1;
   83718:	00bfffc4 	movi	r2,-1
   8371c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   83720:	e0bffa17 	ldw	r2,-24(fp)
}
   83724:	e037883a 	mov	sp,fp
   83728:	dfc00117 	ldw	ra,4(sp)
   8372c:	df000017 	ldw	fp,0(sp)
   83730:	dec00204 	addi	sp,sp,8
   83734:	f800283a 	ret

00083738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83738:	defffd04 	addi	sp,sp,-12
   8373c:	dfc00215 	stw	ra,8(sp)
   83740:	df000115 	stw	fp,4(sp)
   83744:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83748:	00800234 	movhi	r2,8
   8374c:	109d4704 	addi	r2,r2,29980
   83750:	10800017 	ldw	r2,0(r2)
   83754:	1005003a 	cmpeq	r2,r2,zero
   83758:	1000061e 	bne	r2,zero,83774 <alt_get_errno+0x3c>
   8375c:	00800234 	movhi	r2,8
   83760:	109d4704 	addi	r2,r2,29980
   83764:	10800017 	ldw	r2,0(r2)
   83768:	103ee83a 	callr	r2
   8376c:	e0bfff15 	stw	r2,-4(fp)
   83770:	00000306 	br	83780 <alt_get_errno+0x48>
   83774:	00800274 	movhi	r2,9
   83778:	10a3e204 	addi	r2,r2,-28792
   8377c:	e0bfff15 	stw	r2,-4(fp)
   83780:	e0bfff17 	ldw	r2,-4(fp)
}
   83784:	e037883a 	mov	sp,fp
   83788:	dfc00117 	ldw	ra,4(sp)
   8378c:	df000017 	ldw	fp,0(sp)
   83790:	dec00204 	addi	sp,sp,8
   83794:	f800283a 	ret

00083798 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   83798:	defffd04 	addi	sp,sp,-12
   8379c:	dfc00215 	stw	ra,8(sp)
   837a0:	df000115 	stw	fp,4(sp)
   837a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   837a8:	0009883a 	mov	r4,zero
   837ac:	0083c800 	call	83c80 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   837b0:	0083cb40 	call	83cb4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   837b4:	01000234 	movhi	r4,8
   837b8:	2116af04 	addi	r4,r4,23228
   837bc:	01400234 	movhi	r5,8
   837c0:	2956af04 	addi	r5,r5,23228
   837c4:	01800234 	movhi	r6,8
   837c8:	3196af04 	addi	r6,r6,23228
   837cc:	0084ee80 	call	84ee8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   837d0:	0084a600 	call	84a60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   837d4:	01000234 	movhi	r4,8
   837d8:	2112b104 	addi	r4,r4,19140
   837dc:	008568c0 	call	8568c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   837e0:	d126a717 	ldw	r4,-25956(gp)
   837e4:	d166a817 	ldw	r5,-25952(gp)
   837e8:	d1a6a917 	ldw	r6,-25948(gp)
   837ec:	00805f00 	call	805f0 <main>
   837f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   837f4:	01000044 	movi	r4,1
   837f8:	0082fb00 	call	82fb0 <close>
  exit (result);
   837fc:	e13fff17 	ldw	r4,-4(fp)
   83800:	00856a00 	call	856a0 <exit>

00083804 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   83804:	defffe04 	addi	sp,sp,-8
   83808:	df000115 	stw	fp,4(sp)
   8380c:	df000104 	addi	fp,sp,4
   83810:	e13fff15 	stw	r4,-4(fp)
}
   83814:	e037883a 	mov	sp,fp
   83818:	df000017 	ldw	fp,0(sp)
   8381c:	dec00104 	addi	sp,sp,4
   83820:	f800283a 	ret

00083824 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   83824:	defffe04 	addi	sp,sp,-8
   83828:	df000115 	stw	fp,4(sp)
   8382c:	df000104 	addi	fp,sp,4
   83830:	e13fff15 	stw	r4,-4(fp)
}
   83834:	e037883a 	mov	sp,fp
   83838:	df000017 	ldw	fp,0(sp)
   8383c:	dec00104 	addi	sp,sp,4
   83840:	f800283a 	ret

00083844 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   83844:	defff704 	addi	sp,sp,-36
   83848:	dfc00815 	stw	ra,32(sp)
   8384c:	df000715 	stw	fp,28(sp)
   83850:	df000704 	addi	fp,sp,28
   83854:	e13ffb15 	stw	r4,-20(fp)
   83858:	e17ffc15 	stw	r5,-16(fp)
   8385c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83860:	e0bffb17 	ldw	r2,-20(fp)
   83864:	1004803a 	cmplt	r2,r2,zero
   83868:	1000091e 	bne	r2,zero,83890 <read+0x4c>
   8386c:	e13ffb17 	ldw	r4,-20(fp)
   83870:	01400304 	movi	r5,12
   83874:	0082f780 	call	82f78 <__mulsi3>
   83878:	1007883a 	mov	r3,r2
   8387c:	00800234 	movhi	r2,8
   83880:	1098c504 	addi	r2,r2,25364
   83884:	1887883a 	add	r3,r3,r2
   83888:	e0ffff15 	stw	r3,-4(fp)
   8388c:	00000106 	br	83894 <read+0x50>
   83890:	e03fff15 	stw	zero,-4(fp)
   83894:	e0bfff17 	ldw	r2,-4(fp)
   83898:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8389c:	e0bffa17 	ldw	r2,-24(fp)
   838a0:	1005003a 	cmpeq	r2,r2,zero
   838a4:	1000241e 	bne	r2,zero,83938 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   838a8:	e0bffa17 	ldw	r2,-24(fp)
   838ac:	10800217 	ldw	r2,8(r2)
   838b0:	108000cc 	andi	r2,r2,3
   838b4:	10800060 	cmpeqi	r2,r2,1
   838b8:	10001a1e 	bne	r2,zero,83924 <read+0xe0>
   838bc:	e0bffa17 	ldw	r2,-24(fp)
   838c0:	10800017 	ldw	r2,0(r2)
   838c4:	10800517 	ldw	r2,20(r2)
   838c8:	1005003a 	cmpeq	r2,r2,zero
   838cc:	1000151e 	bne	r2,zero,83924 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   838d0:	e0bffa17 	ldw	r2,-24(fp)
   838d4:	10800017 	ldw	r2,0(r2)
   838d8:	10800517 	ldw	r2,20(r2)
   838dc:	e17ffc17 	ldw	r5,-16(fp)
   838e0:	e1bffd17 	ldw	r6,-12(fp)
   838e4:	e13ffa17 	ldw	r4,-24(fp)
   838e8:	103ee83a 	callr	r2
   838ec:	e0bff915 	stw	r2,-28(fp)
   838f0:	e0bff917 	ldw	r2,-28(fp)
   838f4:	1004403a 	cmpge	r2,r2,zero
   838f8:	1000071e 	bne	r2,zero,83918 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   838fc:	00839680 	call	83968 <alt_get_errno>
   83900:	e0fff917 	ldw	r3,-28(fp)
   83904:	00c7c83a 	sub	r3,zero,r3
   83908:	10c00015 	stw	r3,0(r2)
          return -1;
   8390c:	00bfffc4 	movi	r2,-1
   83910:	e0bffe15 	stw	r2,-8(fp)
   83914:	00000e06 	br	83950 <read+0x10c>
        }
        return rval;
   83918:	e0bff917 	ldw	r2,-28(fp)
   8391c:	e0bffe15 	stw	r2,-8(fp)
   83920:	00000b06 	br	83950 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   83924:	00839680 	call	83968 <alt_get_errno>
   83928:	1007883a 	mov	r3,r2
   8392c:	00800344 	movi	r2,13
   83930:	18800015 	stw	r2,0(r3)
   83934:	00000406 	br	83948 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   83938:	00839680 	call	83968 <alt_get_errno>
   8393c:	1007883a 	mov	r3,r2
   83940:	00801444 	movi	r2,81
   83944:	18800015 	stw	r2,0(r3)
  }
  return -1;
   83948:	00bfffc4 	movi	r2,-1
   8394c:	e0bffe15 	stw	r2,-8(fp)
   83950:	e0bffe17 	ldw	r2,-8(fp)
}
   83954:	e037883a 	mov	sp,fp
   83958:	dfc00117 	ldw	ra,4(sp)
   8395c:	df000017 	ldw	fp,0(sp)
   83960:	dec00204 	addi	sp,sp,8
   83964:	f800283a 	ret

00083968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83968:	defffd04 	addi	sp,sp,-12
   8396c:	dfc00215 	stw	ra,8(sp)
   83970:	df000115 	stw	fp,4(sp)
   83974:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83978:	00800234 	movhi	r2,8
   8397c:	109d4704 	addi	r2,r2,29980
   83980:	10800017 	ldw	r2,0(r2)
   83984:	1005003a 	cmpeq	r2,r2,zero
   83988:	1000061e 	bne	r2,zero,839a4 <alt_get_errno+0x3c>
   8398c:	00800234 	movhi	r2,8
   83990:	109d4704 	addi	r2,r2,29980
   83994:	10800017 	ldw	r2,0(r2)
   83998:	103ee83a 	callr	r2
   8399c:	e0bfff15 	stw	r2,-4(fp)
   839a0:	00000306 	br	839b0 <alt_get_errno+0x48>
   839a4:	00800274 	movhi	r2,9
   839a8:	10a3e204 	addi	r2,r2,-28792
   839ac:	e0bfff15 	stw	r2,-4(fp)
   839b0:	e0bfff17 	ldw	r2,-4(fp)
}
   839b4:	e037883a 	mov	sp,fp
   839b8:	dfc00117 	ldw	ra,4(sp)
   839bc:	df000017 	ldw	fp,0(sp)
   839c0:	dec00204 	addi	sp,sp,8
   839c4:	f800283a 	ret

000839c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   839c8:	defffc04 	addi	sp,sp,-16
   839cc:	dfc00315 	stw	ra,12(sp)
   839d0:	df000215 	stw	fp,8(sp)
   839d4:	dc000115 	stw	r16,4(sp)
   839d8:	df000104 	addi	fp,sp,4
   839dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   839e0:	e0bfff17 	ldw	r2,-4(fp)
   839e4:	108000d0 	cmplti	r2,r2,3
   839e8:	10000f1e 	bne	r2,zero,83a28 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   839ec:	e13fff17 	ldw	r4,-4(fp)
   839f0:	04000234 	movhi	r16,8
   839f4:	8418c504 	addi	r16,r16,25364
   839f8:	01400304 	movi	r5,12
   839fc:	0082f780 	call	82f78 <__mulsi3>
   83a00:	1405883a 	add	r2,r2,r16
   83a04:	10800204 	addi	r2,r2,8
   83a08:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   83a0c:	e13fff17 	ldw	r4,-4(fp)
   83a10:	04000234 	movhi	r16,8
   83a14:	8418c504 	addi	r16,r16,25364
   83a18:	01400304 	movi	r5,12
   83a1c:	0082f780 	call	82f78 <__mulsi3>
   83a20:	1405883a 	add	r2,r2,r16
   83a24:	10000015 	stw	zero,0(r2)
  }
}
   83a28:	e037883a 	mov	sp,fp
   83a2c:	dfc00217 	ldw	ra,8(sp)
   83a30:	df000117 	ldw	fp,4(sp)
   83a34:	dc000017 	ldw	r16,0(sp)
   83a38:	dec00304 	addi	sp,sp,12
   83a3c:	f800283a 	ret

00083a40 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   83a40:	defff804 	addi	sp,sp,-32
   83a44:	df000715 	stw	fp,28(sp)
   83a48:	df000704 	addi	fp,sp,28
   83a4c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83a50:	0005303a 	rdctl	r2,status
   83a54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83a58:	e0fffb17 	ldw	r3,-20(fp)
   83a5c:	00bfff84 	movi	r2,-2
   83a60:	1884703a 	and	r2,r3,r2
   83a64:	1001703a 	wrctl	status,r2
  
  return context;
   83a68:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   83a6c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   83a70:	d0a00c17 	ldw	r2,-32720(gp)
   83a74:	10c000c4 	addi	r3,r2,3
   83a78:	00bfff04 	movi	r2,-4
   83a7c:	1884703a 	and	r2,r3,r2
   83a80:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   83a84:	d0e00c17 	ldw	r3,-32720(gp)
   83a88:	e0bffe17 	ldw	r2,-8(fp)
   83a8c:	1887883a 	add	r3,r3,r2
   83a90:	00800434 	movhi	r2,16
   83a94:	10800004 	addi	r2,r2,0
   83a98:	10c0072e 	bgeu	r2,r3,83ab8 <sbrk+0x78>
   83a9c:	e0bffd17 	ldw	r2,-12(fp)
   83aa0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83aa4:	e0bffa17 	ldw	r2,-24(fp)
   83aa8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   83aac:	00bfffc4 	movi	r2,-1
   83ab0:	e0bfff15 	stw	r2,-4(fp)
   83ab4:	00000c06 	br	83ae8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   83ab8:	d0a00c17 	ldw	r2,-32720(gp)
   83abc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   83ac0:	d0e00c17 	ldw	r3,-32720(gp)
   83ac4:	e0bffe17 	ldw	r2,-8(fp)
   83ac8:	1885883a 	add	r2,r3,r2
   83acc:	d0a00c15 	stw	r2,-32720(gp)
   83ad0:	e0bffd17 	ldw	r2,-12(fp)
   83ad4:	e0bff915 	stw	r2,-28(fp)
   83ad8:	e0bff917 	ldw	r2,-28(fp)
   83adc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   83ae0:	e0bffc17 	ldw	r2,-16(fp)
   83ae4:	e0bfff15 	stw	r2,-4(fp)
   83ae8:	e0bfff17 	ldw	r2,-4(fp)
} 
   83aec:	e037883a 	mov	sp,fp
   83af0:	df000017 	ldw	fp,0(sp)
   83af4:	dec00104 	addi	sp,sp,4
   83af8:	f800283a 	ret

00083afc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   83afc:	defff704 	addi	sp,sp,-36
   83b00:	dfc00815 	stw	ra,32(sp)
   83b04:	df000715 	stw	fp,28(sp)
   83b08:	df000704 	addi	fp,sp,28
   83b0c:	e13ffb15 	stw	r4,-20(fp)
   83b10:	e17ffc15 	stw	r5,-16(fp)
   83b14:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83b18:	e0bffb17 	ldw	r2,-20(fp)
   83b1c:	1004803a 	cmplt	r2,r2,zero
   83b20:	1000091e 	bne	r2,zero,83b48 <write+0x4c>
   83b24:	e13ffb17 	ldw	r4,-20(fp)
   83b28:	01400304 	movi	r5,12
   83b2c:	0082f780 	call	82f78 <__mulsi3>
   83b30:	1007883a 	mov	r3,r2
   83b34:	00800234 	movhi	r2,8
   83b38:	1098c504 	addi	r2,r2,25364
   83b3c:	1887883a 	add	r3,r3,r2
   83b40:	e0ffff15 	stw	r3,-4(fp)
   83b44:	00000106 	br	83b4c <write+0x50>
   83b48:	e03fff15 	stw	zero,-4(fp)
   83b4c:	e0bfff17 	ldw	r2,-4(fp)
   83b50:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   83b54:	e0bffa17 	ldw	r2,-24(fp)
   83b58:	1005003a 	cmpeq	r2,r2,zero
   83b5c:	1000241e 	bne	r2,zero,83bf0 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   83b60:	e0bffa17 	ldw	r2,-24(fp)
   83b64:	10800217 	ldw	r2,8(r2)
   83b68:	108000cc 	andi	r2,r2,3
   83b6c:	1005003a 	cmpeq	r2,r2,zero
   83b70:	10001a1e 	bne	r2,zero,83bdc <write+0xe0>
   83b74:	e0bffa17 	ldw	r2,-24(fp)
   83b78:	10800017 	ldw	r2,0(r2)
   83b7c:	10800617 	ldw	r2,24(r2)
   83b80:	1005003a 	cmpeq	r2,r2,zero
   83b84:	1000151e 	bne	r2,zero,83bdc <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   83b88:	e0bffa17 	ldw	r2,-24(fp)
   83b8c:	10800017 	ldw	r2,0(r2)
   83b90:	10800617 	ldw	r2,24(r2)
   83b94:	e17ffc17 	ldw	r5,-16(fp)
   83b98:	e1bffd17 	ldw	r6,-12(fp)
   83b9c:	e13ffa17 	ldw	r4,-24(fp)
   83ba0:	103ee83a 	callr	r2
   83ba4:	e0bff915 	stw	r2,-28(fp)
   83ba8:	e0bff917 	ldw	r2,-28(fp)
   83bac:	1004403a 	cmpge	r2,r2,zero
   83bb0:	1000071e 	bne	r2,zero,83bd0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   83bb4:	0083c200 	call	83c20 <alt_get_errno>
   83bb8:	e0fff917 	ldw	r3,-28(fp)
   83bbc:	00c7c83a 	sub	r3,zero,r3
   83bc0:	10c00015 	stw	r3,0(r2)
        return -1;
   83bc4:	00bfffc4 	movi	r2,-1
   83bc8:	e0bffe15 	stw	r2,-8(fp)
   83bcc:	00000e06 	br	83c08 <write+0x10c>
      }
      return rval;
   83bd0:	e0bff917 	ldw	r2,-28(fp)
   83bd4:	e0bffe15 	stw	r2,-8(fp)
   83bd8:	00000b06 	br	83c08 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   83bdc:	0083c200 	call	83c20 <alt_get_errno>
   83be0:	1007883a 	mov	r3,r2
   83be4:	00800344 	movi	r2,13
   83be8:	18800015 	stw	r2,0(r3)
   83bec:	00000406 	br	83c00 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   83bf0:	0083c200 	call	83c20 <alt_get_errno>
   83bf4:	1007883a 	mov	r3,r2
   83bf8:	00801444 	movi	r2,81
   83bfc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   83c00:	00bfffc4 	movi	r2,-1
   83c04:	e0bffe15 	stw	r2,-8(fp)
   83c08:	e0bffe17 	ldw	r2,-8(fp)
}
   83c0c:	e037883a 	mov	sp,fp
   83c10:	dfc00117 	ldw	ra,4(sp)
   83c14:	df000017 	ldw	fp,0(sp)
   83c18:	dec00204 	addi	sp,sp,8
   83c1c:	f800283a 	ret

00083c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83c20:	defffd04 	addi	sp,sp,-12
   83c24:	dfc00215 	stw	ra,8(sp)
   83c28:	df000115 	stw	fp,4(sp)
   83c2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83c30:	00800234 	movhi	r2,8
   83c34:	109d4704 	addi	r2,r2,29980
   83c38:	10800017 	ldw	r2,0(r2)
   83c3c:	1005003a 	cmpeq	r2,r2,zero
   83c40:	1000061e 	bne	r2,zero,83c5c <alt_get_errno+0x3c>
   83c44:	00800234 	movhi	r2,8
   83c48:	109d4704 	addi	r2,r2,29980
   83c4c:	10800017 	ldw	r2,0(r2)
   83c50:	103ee83a 	callr	r2
   83c54:	e0bfff15 	stw	r2,-4(fp)
   83c58:	00000306 	br	83c68 <alt_get_errno+0x48>
   83c5c:	00800274 	movhi	r2,9
   83c60:	10a3e204 	addi	r2,r2,-28792
   83c64:	e0bfff15 	stw	r2,-4(fp)
   83c68:	e0bfff17 	ldw	r2,-4(fp)
}
   83c6c:	e037883a 	mov	sp,fp
   83c70:	dfc00117 	ldw	ra,4(sp)
   83c74:	df000017 	ldw	fp,0(sp)
   83c78:	dec00204 	addi	sp,sp,8
   83c7c:	f800283a 	ret

00083c80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   83c80:	defffd04 	addi	sp,sp,-12
   83c84:	dfc00215 	stw	ra,8(sp)
   83c88:	df000115 	stw	fp,4(sp)
   83c8c:	df000104 	addi	fp,sp,4
   83c90:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   83c94:	00853e80 	call	853e8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   83c98:	00800044 	movi	r2,1
   83c9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   83ca0:	e037883a 	mov	sp,fp
   83ca4:	dfc00117 	ldw	ra,4(sp)
   83ca8:	df000017 	ldw	fp,0(sp)
   83cac:	dec00204 	addi	sp,sp,8
   83cb0:	f800283a 	ret

00083cb4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   83cb4:	defffe04 	addi	sp,sp,-8
   83cb8:	dfc00115 	stw	ra,4(sp)
   83cbc:	df000015 	stw	fp,0(sp)
   83cc0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   83cc4:	01000234 	movhi	r4,8
   83cc8:	21192f04 	addi	r4,r4,25788
   83ccc:	000b883a 	mov	r5,zero
   83cd0:	000d883a 	mov	r6,zero
   83cd4:	0083e780 	call	83e78 <altera_avalon_jtag_uart_init>
   83cd8:	01000234 	movhi	r4,8
   83cdc:	21192504 	addi	r4,r4,25748
   83ce0:	0083cf80 	call	83cf8 <alt_dev_reg>
}
   83ce4:	e037883a 	mov	sp,fp
   83ce8:	dfc00117 	ldw	ra,4(sp)
   83cec:	df000017 	ldw	fp,0(sp)
   83cf0:	dec00204 	addi	sp,sp,8
   83cf4:	f800283a 	ret

00083cf8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   83cf8:	defffd04 	addi	sp,sp,-12
   83cfc:	dfc00215 	stw	ra,8(sp)
   83d00:	df000115 	stw	fp,4(sp)
   83d04:	df000104 	addi	fp,sp,4
   83d08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   83d0c:	e13fff17 	ldw	r4,-4(fp)
   83d10:	01400234 	movhi	r5,8
   83d14:	295d4404 	addi	r5,r5,29968
   83d18:	008494c0 	call	8494c <alt_dev_llist_insert>
}
   83d1c:	e037883a 	mov	sp,fp
   83d20:	dfc00117 	ldw	ra,4(sp)
   83d24:	df000017 	ldw	fp,0(sp)
   83d28:	dec00204 	addi	sp,sp,8
   83d2c:	f800283a 	ret

00083d30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   83d30:	defffa04 	addi	sp,sp,-24
   83d34:	dfc00515 	stw	ra,20(sp)
   83d38:	df000415 	stw	fp,16(sp)
   83d3c:	df000404 	addi	fp,sp,16
   83d40:	e13ffd15 	stw	r4,-12(fp)
   83d44:	e17ffe15 	stw	r5,-8(fp)
   83d48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83d4c:	e0bffd17 	ldw	r2,-12(fp)
   83d50:	10800017 	ldw	r2,0(r2)
   83d54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83d58:	e0bffc17 	ldw	r2,-16(fp)
   83d5c:	11000a04 	addi	r4,r2,40
   83d60:	e0bffd17 	ldw	r2,-12(fp)
   83d64:	11c00217 	ldw	r7,8(r2)
   83d68:	e17ffe17 	ldw	r5,-8(fp)
   83d6c:	e1bfff17 	ldw	r6,-4(fp)
   83d70:	00843780 	call	84378 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   83d74:	e037883a 	mov	sp,fp
   83d78:	dfc00117 	ldw	ra,4(sp)
   83d7c:	df000017 	ldw	fp,0(sp)
   83d80:	dec00204 	addi	sp,sp,8
   83d84:	f800283a 	ret

00083d88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   83d88:	defffa04 	addi	sp,sp,-24
   83d8c:	dfc00515 	stw	ra,20(sp)
   83d90:	df000415 	stw	fp,16(sp)
   83d94:	df000404 	addi	fp,sp,16
   83d98:	e13ffd15 	stw	r4,-12(fp)
   83d9c:	e17ffe15 	stw	r5,-8(fp)
   83da0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83da4:	e0bffd17 	ldw	r2,-12(fp)
   83da8:	10800017 	ldw	r2,0(r2)
   83dac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83db0:	e0bffc17 	ldw	r2,-16(fp)
   83db4:	11000a04 	addi	r4,r2,40
   83db8:	e0bffd17 	ldw	r2,-12(fp)
   83dbc:	11c00217 	ldw	r7,8(r2)
   83dc0:	e17ffe17 	ldw	r5,-8(fp)
   83dc4:	e1bfff17 	ldw	r6,-4(fp)
   83dc8:	008459c0 	call	8459c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   83dcc:	e037883a 	mov	sp,fp
   83dd0:	dfc00117 	ldw	ra,4(sp)
   83dd4:	df000017 	ldw	fp,0(sp)
   83dd8:	dec00204 	addi	sp,sp,8
   83ddc:	f800283a 	ret

00083de0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   83de0:	defffc04 	addi	sp,sp,-16
   83de4:	dfc00315 	stw	ra,12(sp)
   83de8:	df000215 	stw	fp,8(sp)
   83dec:	df000204 	addi	fp,sp,8
   83df0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83df4:	e0bfff17 	ldw	r2,-4(fp)
   83df8:	10800017 	ldw	r2,0(r2)
   83dfc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   83e00:	e0bffe17 	ldw	r2,-8(fp)
   83e04:	11000a04 	addi	r4,r2,40
   83e08:	e0bfff17 	ldw	r2,-4(fp)
   83e0c:	11400217 	ldw	r5,8(r2)
   83e10:	00842100 	call	84210 <altera_avalon_jtag_uart_close>
}
   83e14:	e037883a 	mov	sp,fp
   83e18:	dfc00117 	ldw	ra,4(sp)
   83e1c:	df000017 	ldw	fp,0(sp)
   83e20:	dec00204 	addi	sp,sp,8
   83e24:	f800283a 	ret

00083e28 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   83e28:	defffa04 	addi	sp,sp,-24
   83e2c:	dfc00515 	stw	ra,20(sp)
   83e30:	df000415 	stw	fp,16(sp)
   83e34:	df000404 	addi	fp,sp,16
   83e38:	e13ffd15 	stw	r4,-12(fp)
   83e3c:	e17ffe15 	stw	r5,-8(fp)
   83e40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   83e44:	e0bffd17 	ldw	r2,-12(fp)
   83e48:	10800017 	ldw	r2,0(r2)
   83e4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   83e50:	e0bffc17 	ldw	r2,-16(fp)
   83e54:	11000a04 	addi	r4,r2,40
   83e58:	e17ffe17 	ldw	r5,-8(fp)
   83e5c:	e1bfff17 	ldw	r6,-4(fp)
   83e60:	00842840 	call	84284 <altera_avalon_jtag_uart_ioctl>
}
   83e64:	e037883a 	mov	sp,fp
   83e68:	dfc00117 	ldw	ra,4(sp)
   83e6c:	df000017 	ldw	fp,0(sp)
   83e70:	dec00204 	addi	sp,sp,8
   83e74:	f800283a 	ret

00083e78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   83e78:	defffa04 	addi	sp,sp,-24
   83e7c:	dfc00515 	stw	ra,20(sp)
   83e80:	df000415 	stw	fp,16(sp)
   83e84:	df000404 	addi	fp,sp,16
   83e88:	e13ffd15 	stw	r4,-12(fp)
   83e8c:	e17ffe15 	stw	r5,-8(fp)
   83e90:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83e94:	e0fffd17 	ldw	r3,-12(fp)
   83e98:	00800044 	movi	r2,1
   83e9c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   83ea0:	e0bffd17 	ldw	r2,-12(fp)
   83ea4:	10800017 	ldw	r2,0(r2)
   83ea8:	11000104 	addi	r4,r2,4
   83eac:	e0bffd17 	ldw	r2,-12(fp)
   83eb0:	10800817 	ldw	r2,32(r2)
   83eb4:	1007883a 	mov	r3,r2
   83eb8:	2005883a 	mov	r2,r4
   83ebc:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   83ec0:	e13ffe17 	ldw	r4,-8(fp)
   83ec4:	e17fff17 	ldw	r5,-4(fp)
   83ec8:	d8000015 	stw	zero,0(sp)
   83ecc:	01800234 	movhi	r6,8
   83ed0:	318fce04 	addi	r6,r6,16184
   83ed4:	e1fffd17 	ldw	r7,-12(fp)
   83ed8:	0084b440 	call	84b44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   83edc:	e0bffd17 	ldw	r2,-12(fp)
   83ee0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   83ee4:	e0bffd17 	ldw	r2,-12(fp)
   83ee8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   83eec:	00800274 	movhi	r2,9
   83ef0:	10a3e704 	addi	r2,r2,-28772
   83ef4:	10800017 	ldw	r2,0(r2)
   83ef8:	100b883a 	mov	r5,r2
   83efc:	01800234 	movhi	r6,8
   83f00:	31905804 	addi	r6,r6,16736
   83f04:	e1fffd17 	ldw	r7,-12(fp)
   83f08:	00847dc0 	call	847dc <alt_alarm_start>
   83f0c:	1004403a 	cmpge	r2,r2,zero
   83f10:	1000041e 	bne	r2,zero,83f24 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   83f14:	e0fffd17 	ldw	r3,-12(fp)
   83f18:	00a00034 	movhi	r2,32768
   83f1c:	10bfffc4 	addi	r2,r2,-1
   83f20:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   83f24:	e037883a 	mov	sp,fp
   83f28:	dfc00117 	ldw	ra,4(sp)
   83f2c:	df000017 	ldw	fp,0(sp)
   83f30:	dec00204 	addi	sp,sp,8
   83f34:	f800283a 	ret

00083f38 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   83f38:	defff804 	addi	sp,sp,-32
   83f3c:	df000715 	stw	fp,28(sp)
   83f40:	df000704 	addi	fp,sp,28
   83f44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   83f48:	e0bfff17 	ldw	r2,-4(fp)
   83f4c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   83f50:	e0bffe17 	ldw	r2,-8(fp)
   83f54:	10800017 	ldw	r2,0(r2)
   83f58:	e0bffd15 	stw	r2,-12(fp)
   83f5c:	00000006 	br	83f60 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83f60:	e0bffd17 	ldw	r2,-12(fp)
   83f64:	10800104 	addi	r2,r2,4
   83f68:	10800037 	ldwio	r2,0(r2)
   83f6c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   83f70:	e0bffc17 	ldw	r2,-16(fp)
   83f74:	1080c00c 	andi	r2,r2,768
   83f78:	1005003a 	cmpeq	r2,r2,zero
   83f7c:	1000741e 	bne	r2,zero,84150 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   83f80:	e0bffc17 	ldw	r2,-16(fp)
   83f84:	1080400c 	andi	r2,r2,256
   83f88:	1005003a 	cmpeq	r2,r2,zero
   83f8c:	1000351e 	bne	r2,zero,84064 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   83f90:	00800074 	movhi	r2,1
   83f94:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83f98:	e0bffe17 	ldw	r2,-8(fp)
   83f9c:	10800a17 	ldw	r2,40(r2)
   83fa0:	10800044 	addi	r2,r2,1
   83fa4:	1081ffcc 	andi	r2,r2,2047
   83fa8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   83fac:	e0bffe17 	ldw	r2,-8(fp)
   83fb0:	10c00b17 	ldw	r3,44(r2)
   83fb4:	e0bffa17 	ldw	r2,-24(fp)
   83fb8:	18801626 	beq	r3,r2,84014 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   83fbc:	e0bffd17 	ldw	r2,-12(fp)
   83fc0:	10800037 	ldwio	r2,0(r2)
   83fc4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   83fc8:	e0bffb17 	ldw	r2,-20(fp)
   83fcc:	10a0000c 	andi	r2,r2,32768
   83fd0:	1005003a 	cmpeq	r2,r2,zero
   83fd4:	10000f1e 	bne	r2,zero,84014 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   83fd8:	e0bffe17 	ldw	r2,-8(fp)
   83fdc:	10c00a17 	ldw	r3,40(r2)
   83fe0:	e0bffb17 	ldw	r2,-20(fp)
   83fe4:	1009883a 	mov	r4,r2
   83fe8:	e0bffe17 	ldw	r2,-8(fp)
   83fec:	1885883a 	add	r2,r3,r2
   83ff0:	10800e04 	addi	r2,r2,56
   83ff4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83ff8:	e0bffe17 	ldw	r2,-8(fp)
   83ffc:	10800a17 	ldw	r2,40(r2)
   84000:	10800044 	addi	r2,r2,1
   84004:	10c1ffcc 	andi	r3,r2,2047
   84008:	e0bffe17 	ldw	r2,-8(fp)
   8400c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   84010:	003fe106 	br	83f98 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   84014:	e0bffb17 	ldw	r2,-20(fp)
   84018:	10bfffec 	andhi	r2,r2,65535
   8401c:	1005003a 	cmpeq	r2,r2,zero
   84020:	1000101e 	bne	r2,zero,84064 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   84024:	e0bffe17 	ldw	r2,-8(fp)
   84028:	10c00817 	ldw	r3,32(r2)
   8402c:	00bfff84 	movi	r2,-2
   84030:	1886703a 	and	r3,r3,r2
   84034:	e0bffe17 	ldw	r2,-8(fp)
   84038:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8403c:	e0bffd17 	ldw	r2,-12(fp)
   84040:	11000104 	addi	r4,r2,4
   84044:	e0bffe17 	ldw	r2,-8(fp)
   84048:	10800817 	ldw	r2,32(r2)
   8404c:	1007883a 	mov	r3,r2
   84050:	2005883a 	mov	r2,r4
   84054:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   84058:	e0bffd17 	ldw	r2,-12(fp)
   8405c:	10800104 	addi	r2,r2,4
   84060:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   84064:	e0bffc17 	ldw	r2,-16(fp)
   84068:	1080800c 	andi	r2,r2,512
   8406c:	1005003a 	cmpeq	r2,r2,zero
   84070:	103fbb1e 	bne	r2,zero,83f60 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   84074:	e0bffc17 	ldw	r2,-16(fp)
   84078:	10bfffec 	andhi	r2,r2,65535
   8407c:	1004d43a 	srli	r2,r2,16
   84080:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   84084:	00001506 	br	840dc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   84088:	e13ffd17 	ldw	r4,-12(fp)
   8408c:	e0bffe17 	ldw	r2,-8(fp)
   84090:	10c00d17 	ldw	r3,52(r2)
   84094:	e0bffe17 	ldw	r2,-8(fp)
   84098:	1885883a 	add	r2,r3,r2
   8409c:	10820e04 	addi	r2,r2,2104
   840a0:	10800003 	ldbu	r2,0(r2)
   840a4:	10c03fcc 	andi	r3,r2,255
   840a8:	18c0201c 	xori	r3,r3,128
   840ac:	18ffe004 	addi	r3,r3,-128
   840b0:	2005883a 	mov	r2,r4
   840b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   840b8:	e0bffe17 	ldw	r2,-8(fp)
   840bc:	10800d17 	ldw	r2,52(r2)
   840c0:	10800044 	addi	r2,r2,1
   840c4:	10c1ffcc 	andi	r3,r2,2047
   840c8:	e0bffe17 	ldw	r2,-8(fp)
   840cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   840d0:	e0bff917 	ldw	r2,-28(fp)
   840d4:	10bfffc4 	addi	r2,r2,-1
   840d8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   840dc:	e0bff917 	ldw	r2,-28(fp)
   840e0:	1005003a 	cmpeq	r2,r2,zero
   840e4:	1000051e 	bne	r2,zero,840fc <altera_avalon_jtag_uart_irq+0x1c4>
   840e8:	e0bffe17 	ldw	r2,-8(fp)
   840ec:	10c00d17 	ldw	r3,52(r2)
   840f0:	e0bffe17 	ldw	r2,-8(fp)
   840f4:	10800c17 	ldw	r2,48(r2)
   840f8:	18bfe31e 	bne	r3,r2,84088 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   840fc:	e0bff917 	ldw	r2,-28(fp)
   84100:	1005003a 	cmpeq	r2,r2,zero
   84104:	103f961e 	bne	r2,zero,83f60 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   84108:	e0bffe17 	ldw	r2,-8(fp)
   8410c:	10c00817 	ldw	r3,32(r2)
   84110:	00bfff44 	movi	r2,-3
   84114:	1886703a 	and	r3,r3,r2
   84118:	e0bffe17 	ldw	r2,-8(fp)
   8411c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   84120:	e0bffe17 	ldw	r2,-8(fp)
   84124:	10800017 	ldw	r2,0(r2)
   84128:	11000104 	addi	r4,r2,4
   8412c:	e0bffe17 	ldw	r2,-8(fp)
   84130:	10800817 	ldw	r2,32(r2)
   84134:	1007883a 	mov	r3,r2
   84138:	2005883a 	mov	r2,r4
   8413c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   84140:	e0bffd17 	ldw	r2,-12(fp)
   84144:	10800104 	addi	r2,r2,4
   84148:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8414c:	003f8406 	br	83f60 <altera_avalon_jtag_uart_irq+0x28>
}
   84150:	e037883a 	mov	sp,fp
   84154:	df000017 	ldw	fp,0(sp)
   84158:	dec00104 	addi	sp,sp,4
   8415c:	f800283a 	ret

00084160 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   84160:	defffc04 	addi	sp,sp,-16
   84164:	df000315 	stw	fp,12(sp)
   84168:	df000304 	addi	fp,sp,12
   8416c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   84170:	e0bfff17 	ldw	r2,-4(fp)
   84174:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   84178:	e0bffe17 	ldw	r2,-8(fp)
   8417c:	10800017 	ldw	r2,0(r2)
   84180:	10800104 	addi	r2,r2,4
   84184:	10800037 	ldwio	r2,0(r2)
   84188:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8418c:	e0bffd17 	ldw	r2,-12(fp)
   84190:	1081000c 	andi	r2,r2,1024
   84194:	1005003a 	cmpeq	r2,r2,zero
   84198:	10000c1e 	bne	r2,zero,841cc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8419c:	e0bffe17 	ldw	r2,-8(fp)
   841a0:	10800017 	ldw	r2,0(r2)
   841a4:	11000104 	addi	r4,r2,4
   841a8:	e0bffe17 	ldw	r2,-8(fp)
   841ac:	10800817 	ldw	r2,32(r2)
   841b0:	10810014 	ori	r2,r2,1024
   841b4:	1007883a 	mov	r3,r2
   841b8:	2005883a 	mov	r2,r4
   841bc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   841c0:	e0bffe17 	ldw	r2,-8(fp)
   841c4:	10000915 	stw	zero,36(r2)
   841c8:	00000a06 	br	841f4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   841cc:	e0bffe17 	ldw	r2,-8(fp)
   841d0:	10c00917 	ldw	r3,36(r2)
   841d4:	00a00034 	movhi	r2,32768
   841d8:	10bfff04 	addi	r2,r2,-4
   841dc:	10c00536 	bltu	r2,r3,841f4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   841e0:	e0bffe17 	ldw	r2,-8(fp)
   841e4:	10800917 	ldw	r2,36(r2)
   841e8:	10c00044 	addi	r3,r2,1
   841ec:	e0bffe17 	ldw	r2,-8(fp)
   841f0:	10c00915 	stw	r3,36(r2)
   841f4:	00800274 	movhi	r2,9
   841f8:	10a3e704 	addi	r2,r2,-28772
   841fc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   84200:	e037883a 	mov	sp,fp
   84204:	df000017 	ldw	fp,0(sp)
   84208:	dec00104 	addi	sp,sp,4
   8420c:	f800283a 	ret

00084210 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   84210:	defffc04 	addi	sp,sp,-16
   84214:	df000315 	stw	fp,12(sp)
   84218:	df000304 	addi	fp,sp,12
   8421c:	e13ffd15 	stw	r4,-12(fp)
   84220:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   84224:	00000706 	br	84244 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   84228:	e0bffe17 	ldw	r2,-8(fp)
   8422c:	1090000c 	andi	r2,r2,16384
   84230:	1005003a 	cmpeq	r2,r2,zero
   84234:	1000031e 	bne	r2,zero,84244 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   84238:	00bffd44 	movi	r2,-11
   8423c:	e0bfff15 	stw	r2,-4(fp)
   84240:	00000b06 	br	84270 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   84244:	e0bffd17 	ldw	r2,-12(fp)
   84248:	10c00d17 	ldw	r3,52(r2)
   8424c:	e0bffd17 	ldw	r2,-12(fp)
   84250:	10800c17 	ldw	r2,48(r2)
   84254:	18800526 	beq	r3,r2,8426c <altera_avalon_jtag_uart_close+0x5c>
   84258:	e0bffd17 	ldw	r2,-12(fp)
   8425c:	10c00917 	ldw	r3,36(r2)
   84260:	e0bffd17 	ldw	r2,-12(fp)
   84264:	10800117 	ldw	r2,4(r2)
   84268:	18bfef36 	bltu	r3,r2,84228 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8426c:	e03fff15 	stw	zero,-4(fp)
   84270:	e0bfff17 	ldw	r2,-4(fp)
}
   84274:	e037883a 	mov	sp,fp
   84278:	df000017 	ldw	fp,0(sp)
   8427c:	dec00104 	addi	sp,sp,4
   84280:	f800283a 	ret

00084284 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   84284:	defff804 	addi	sp,sp,-32
   84288:	df000715 	stw	fp,28(sp)
   8428c:	df000704 	addi	fp,sp,28
   84290:	e13ffb15 	stw	r4,-20(fp)
   84294:	e17ffc15 	stw	r5,-16(fp)
   84298:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8429c:	00bff9c4 	movi	r2,-25
   842a0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   842a4:	e0bffc17 	ldw	r2,-16(fp)
   842a8:	e0bfff15 	stw	r2,-4(fp)
   842ac:	e0ffff17 	ldw	r3,-4(fp)
   842b0:	189a8060 	cmpeqi	r2,r3,27137
   842b4:	1000041e 	bne	r2,zero,842c8 <altera_avalon_jtag_uart_ioctl+0x44>
   842b8:	e0ffff17 	ldw	r3,-4(fp)
   842bc:	189a80a0 	cmpeqi	r2,r3,27138
   842c0:	10001b1e 	bne	r2,zero,84330 <altera_avalon_jtag_uart_ioctl+0xac>
   842c4:	00002706 	br	84364 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   842c8:	e0bffb17 	ldw	r2,-20(fp)
   842cc:	10c00117 	ldw	r3,4(r2)
   842d0:	00a00034 	movhi	r2,32768
   842d4:	10bfffc4 	addi	r2,r2,-1
   842d8:	18802226 	beq	r3,r2,84364 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   842dc:	e0bffd17 	ldw	r2,-12(fp)
   842e0:	10800017 	ldw	r2,0(r2)
   842e4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   842e8:	e0bff917 	ldw	r2,-28(fp)
   842ec:	10800090 	cmplti	r2,r2,2
   842f0:	1000071e 	bne	r2,zero,84310 <altera_avalon_jtag_uart_ioctl+0x8c>
   842f4:	e0fff917 	ldw	r3,-28(fp)
   842f8:	00a00034 	movhi	r2,32768
   842fc:	10bfffc4 	addi	r2,r2,-1
   84300:	18800326 	beq	r3,r2,84310 <altera_avalon_jtag_uart_ioctl+0x8c>
   84304:	e0bff917 	ldw	r2,-28(fp)
   84308:	e0bffe15 	stw	r2,-8(fp)
   8430c:	00000306 	br	8431c <altera_avalon_jtag_uart_ioctl+0x98>
   84310:	00e00034 	movhi	r3,32768
   84314:	18ffff84 	addi	r3,r3,-2
   84318:	e0fffe15 	stw	r3,-8(fp)
   8431c:	e0bffb17 	ldw	r2,-20(fp)
   84320:	e0fffe17 	ldw	r3,-8(fp)
   84324:	10c00115 	stw	r3,4(r2)
      rc = 0;
   84328:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8432c:	00000d06 	br	84364 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   84330:	e0bffb17 	ldw	r2,-20(fp)
   84334:	10c00117 	ldw	r3,4(r2)
   84338:	00a00034 	movhi	r2,32768
   8433c:	10bfffc4 	addi	r2,r2,-1
   84340:	18800826 	beq	r3,r2,84364 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   84344:	e13ffd17 	ldw	r4,-12(fp)
   84348:	e0bffb17 	ldw	r2,-20(fp)
   8434c:	10c00917 	ldw	r3,36(r2)
   84350:	e0bffb17 	ldw	r2,-20(fp)
   84354:	10800117 	ldw	r2,4(r2)
   84358:	1885803a 	cmpltu	r2,r3,r2
   8435c:	20800015 	stw	r2,0(r4)
      rc = 0;
   84360:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   84364:	e0bffa17 	ldw	r2,-24(fp)
}
   84368:	e037883a 	mov	sp,fp
   8436c:	df000017 	ldw	fp,0(sp)
   84370:	dec00104 	addi	sp,sp,4
   84374:	f800283a 	ret

00084378 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   84378:	defff204 	addi	sp,sp,-56
   8437c:	dfc00d15 	stw	ra,52(sp)
   84380:	df000c15 	stw	fp,48(sp)
   84384:	df000c04 	addi	fp,sp,48
   84388:	e13ffb15 	stw	r4,-20(fp)
   8438c:	e17ffc15 	stw	r5,-16(fp)
   84390:	e1bffd15 	stw	r6,-12(fp)
   84394:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   84398:	e0bffc17 	ldw	r2,-16(fp)
   8439c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   843a0:	00004806 	br	844c4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   843a4:	e0bffb17 	ldw	r2,-20(fp)
   843a8:	10800a17 	ldw	r2,40(r2)
   843ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   843b0:	e0bffb17 	ldw	r2,-20(fp)
   843b4:	10800b17 	ldw	r2,44(r2)
   843b8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   843bc:	e0fff717 	ldw	r3,-36(fp)
   843c0:	e0bff617 	ldw	r2,-40(fp)
   843c4:	18800536 	bltu	r3,r2,843dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   843c8:	e0bff717 	ldw	r2,-36(fp)
   843cc:	e0fff617 	ldw	r3,-40(fp)
   843d0:	10c5c83a 	sub	r2,r2,r3
   843d4:	e0bff815 	stw	r2,-32(fp)
   843d8:	00000406 	br	843ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   843dc:	00820004 	movi	r2,2048
   843e0:	e0fff617 	ldw	r3,-40(fp)
   843e4:	10c5c83a 	sub	r2,r2,r3
   843e8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   843ec:	e0bff817 	ldw	r2,-32(fp)
   843f0:	1005003a 	cmpeq	r2,r2,zero
   843f4:	10001f1e 	bne	r2,zero,84474 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   843f8:	e0fffd17 	ldw	r3,-12(fp)
   843fc:	e0bff817 	ldw	r2,-32(fp)
   84400:	1880022e 	bgeu	r3,r2,8440c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   84404:	e0bffd17 	ldw	r2,-12(fp)
   84408:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8440c:	e0bffb17 	ldw	r2,-20(fp)
   84410:	10c00e04 	addi	r3,r2,56
   84414:	e0bff617 	ldw	r2,-40(fp)
   84418:	1887883a 	add	r3,r3,r2
   8441c:	e0bffa17 	ldw	r2,-24(fp)
   84420:	1009883a 	mov	r4,r2
   84424:	180b883a 	mov	r5,r3
   84428:	e1bff817 	ldw	r6,-32(fp)
   8442c:	008141c0 	call	8141c <memcpy>
      ptr   += n;
   84430:	e0fff817 	ldw	r3,-32(fp)
   84434:	e0bffa17 	ldw	r2,-24(fp)
   84438:	10c5883a 	add	r2,r2,r3
   8443c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   84440:	e0fffd17 	ldw	r3,-12(fp)
   84444:	e0bff817 	ldw	r2,-32(fp)
   84448:	1885c83a 	sub	r2,r3,r2
   8444c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84450:	e0fff617 	ldw	r3,-40(fp)
   84454:	e0bff817 	ldw	r2,-32(fp)
   84458:	1885883a 	add	r2,r3,r2
   8445c:	10c1ffcc 	andi	r3,r2,2047
   84460:	e0bffb17 	ldw	r2,-20(fp)
   84464:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   84468:	e0bffd17 	ldw	r2,-12(fp)
   8446c:	10800048 	cmpgei	r2,r2,1
   84470:	103fcc1e 	bne	r2,zero,843a4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   84474:	e0fffa17 	ldw	r3,-24(fp)
   84478:	e0bffc17 	ldw	r2,-16(fp)
   8447c:	1880141e 	bne	r3,r2,844d0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   84480:	e0bffe17 	ldw	r2,-8(fp)
   84484:	1090000c 	andi	r2,r2,16384
   84488:	1004c03a 	cmpne	r2,r2,zero
   8448c:	1000101e 	bne	r2,zero,844d0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   84490:	e0bffb17 	ldw	r2,-20(fp)
   84494:	10c00a17 	ldw	r3,40(r2)
   84498:	e0bff717 	ldw	r2,-36(fp)
   8449c:	1880051e 	bne	r3,r2,844b4 <altera_avalon_jtag_uart_read+0x13c>
   844a0:	e0bffb17 	ldw	r2,-20(fp)
   844a4:	10c00917 	ldw	r3,36(r2)
   844a8:	e0bffb17 	ldw	r2,-20(fp)
   844ac:	10800117 	ldw	r2,4(r2)
   844b0:	18bff736 	bltu	r3,r2,84490 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   844b4:	e0bffb17 	ldw	r2,-20(fp)
   844b8:	10c00a17 	ldw	r3,40(r2)
   844bc:	e0bff717 	ldw	r2,-36(fp)
   844c0:	18800326 	beq	r3,r2,844d0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   844c4:	e0bffd17 	ldw	r2,-12(fp)
   844c8:	10800048 	cmpgei	r2,r2,1
   844cc:	103fb51e 	bne	r2,zero,843a4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   844d0:	e0fffa17 	ldw	r3,-24(fp)
   844d4:	e0bffc17 	ldw	r2,-16(fp)
   844d8:	18801926 	beq	r3,r2,84540 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   844dc:	0005303a 	rdctl	r2,status
   844e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   844e4:	e0fff517 	ldw	r3,-44(fp)
   844e8:	00bfff84 	movi	r2,-2
   844ec:	1884703a 	and	r2,r3,r2
   844f0:	1001703a 	wrctl	status,r2
  
  return context;
   844f4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   844f8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   844fc:	e0bffb17 	ldw	r2,-20(fp)
   84500:	10800817 	ldw	r2,32(r2)
   84504:	10c00054 	ori	r3,r2,1
   84508:	e0bffb17 	ldw	r2,-20(fp)
   8450c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   84510:	e0bffb17 	ldw	r2,-20(fp)
   84514:	10800017 	ldw	r2,0(r2)
   84518:	11000104 	addi	r4,r2,4
   8451c:	e0bffb17 	ldw	r2,-20(fp)
   84520:	10800817 	ldw	r2,32(r2)
   84524:	1007883a 	mov	r3,r2
   84528:	2005883a 	mov	r2,r4
   8452c:	10c00035 	stwio	r3,0(r2)
   84530:	e0bff917 	ldw	r2,-28(fp)
   84534:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84538:	e0bff417 	ldw	r2,-48(fp)
   8453c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   84540:	e0fffa17 	ldw	r3,-24(fp)
   84544:	e0bffc17 	ldw	r2,-16(fp)
   84548:	18800526 	beq	r3,r2,84560 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8454c:	e0fffa17 	ldw	r3,-24(fp)
   84550:	e0bffc17 	ldw	r2,-16(fp)
   84554:	1887c83a 	sub	r3,r3,r2
   84558:	e0ffff15 	stw	r3,-4(fp)
   8455c:	00000906 	br	84584 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   84560:	e0bffe17 	ldw	r2,-8(fp)
   84564:	1090000c 	andi	r2,r2,16384
   84568:	1005003a 	cmpeq	r2,r2,zero
   8456c:	1000031e 	bne	r2,zero,8457c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   84570:	00bffd44 	movi	r2,-11
   84574:	e0bfff15 	stw	r2,-4(fp)
   84578:	00000206 	br	84584 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8457c:	00bffec4 	movi	r2,-5
   84580:	e0bfff15 	stw	r2,-4(fp)
   84584:	e0bfff17 	ldw	r2,-4(fp)
}
   84588:	e037883a 	mov	sp,fp
   8458c:	dfc00117 	ldw	ra,4(sp)
   84590:	df000017 	ldw	fp,0(sp)
   84594:	dec00204 	addi	sp,sp,8
   84598:	f800283a 	ret

0008459c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8459c:	defff204 	addi	sp,sp,-56
   845a0:	dfc00d15 	stw	ra,52(sp)
   845a4:	df000c15 	stw	fp,48(sp)
   845a8:	df000c04 	addi	fp,sp,48
   845ac:	e13ffb15 	stw	r4,-20(fp)
   845b0:	e17ffc15 	stw	r5,-16(fp)
   845b4:	e1bffd15 	stw	r6,-12(fp)
   845b8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   845bc:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   845c0:	e0bffc17 	ldw	r2,-16(fp)
   845c4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   845c8:	00003a06 	br	846b4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   845cc:	e0bffb17 	ldw	r2,-20(fp)
   845d0:	10800c17 	ldw	r2,48(r2)
   845d4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   845d8:	e0bffb17 	ldw	r2,-20(fp)
   845dc:	10800d17 	ldw	r2,52(r2)
   845e0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   845e4:	e0fffa17 	ldw	r3,-24(fp)
   845e8:	e0bff917 	ldw	r2,-28(fp)
   845ec:	1880062e 	bgeu	r3,r2,84608 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   845f0:	e0fff917 	ldw	r3,-28(fp)
   845f4:	e0bffa17 	ldw	r2,-24(fp)
   845f8:	1885c83a 	sub	r2,r3,r2
   845fc:	10bfffc4 	addi	r2,r2,-1
   84600:	e0bff815 	stw	r2,-32(fp)
   84604:	00000c06 	br	84638 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   84608:	e0bff917 	ldw	r2,-28(fp)
   8460c:	1005003a 	cmpeq	r2,r2,zero
   84610:	1000051e 	bne	r2,zero,84628 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   84614:	00820004 	movi	r2,2048
   84618:	e0fffa17 	ldw	r3,-24(fp)
   8461c:	10c5c83a 	sub	r2,r2,r3
   84620:	e0bff815 	stw	r2,-32(fp)
   84624:	00000406 	br	84638 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   84628:	0081ffc4 	movi	r2,2047
   8462c:	e0fffa17 	ldw	r3,-24(fp)
   84630:	10c5c83a 	sub	r2,r2,r3
   84634:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   84638:	e0bff817 	ldw	r2,-32(fp)
   8463c:	1005003a 	cmpeq	r2,r2,zero
   84640:	10001f1e 	bne	r2,zero,846c0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   84644:	e0fffd17 	ldw	r3,-12(fp)
   84648:	e0bff817 	ldw	r2,-32(fp)
   8464c:	1880022e 	bgeu	r3,r2,84658 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   84650:	e0bffd17 	ldw	r2,-12(fp)
   84654:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   84658:	e0bffb17 	ldw	r2,-20(fp)
   8465c:	10c20e04 	addi	r3,r2,2104
   84660:	e0bffa17 	ldw	r2,-24(fp)
   84664:	1885883a 	add	r2,r3,r2
   84668:	e0fffc17 	ldw	r3,-16(fp)
   8466c:	1009883a 	mov	r4,r2
   84670:	180b883a 	mov	r5,r3
   84674:	e1bff817 	ldw	r6,-32(fp)
   84678:	008141c0 	call	8141c <memcpy>
      ptr   += n;
   8467c:	e0fff817 	ldw	r3,-32(fp)
   84680:	e0bffc17 	ldw	r2,-16(fp)
   84684:	10c5883a 	add	r2,r2,r3
   84688:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8468c:	e0fffd17 	ldw	r3,-12(fp)
   84690:	e0bff817 	ldw	r2,-32(fp)
   84694:	1885c83a 	sub	r2,r3,r2
   84698:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8469c:	e0fffa17 	ldw	r3,-24(fp)
   846a0:	e0bff817 	ldw	r2,-32(fp)
   846a4:	1885883a 	add	r2,r3,r2
   846a8:	10c1ffcc 	andi	r3,r2,2047
   846ac:	e0bffb17 	ldw	r2,-20(fp)
   846b0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   846b4:	e0bffd17 	ldw	r2,-12(fp)
   846b8:	10800048 	cmpgei	r2,r2,1
   846bc:	103fc31e 	bne	r2,zero,845cc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   846c0:	0005303a 	rdctl	r2,status
   846c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   846c8:	e0fff517 	ldw	r3,-44(fp)
   846cc:	00bfff84 	movi	r2,-2
   846d0:	1884703a 	and	r2,r3,r2
   846d4:	1001703a 	wrctl	status,r2
  
  return context;
   846d8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   846dc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   846e0:	e0bffb17 	ldw	r2,-20(fp)
   846e4:	10800817 	ldw	r2,32(r2)
   846e8:	10c00094 	ori	r3,r2,2
   846ec:	e0bffb17 	ldw	r2,-20(fp)
   846f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   846f4:	e0bffb17 	ldw	r2,-20(fp)
   846f8:	10800017 	ldw	r2,0(r2)
   846fc:	11000104 	addi	r4,r2,4
   84700:	e0bffb17 	ldw	r2,-20(fp)
   84704:	10800817 	ldw	r2,32(r2)
   84708:	1007883a 	mov	r3,r2
   8470c:	2005883a 	mov	r2,r4
   84710:	10c00035 	stwio	r3,0(r2)
   84714:	e0bff717 	ldw	r2,-36(fp)
   84718:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8471c:	e0bff417 	ldw	r2,-48(fp)
   84720:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   84724:	e0bffd17 	ldw	r2,-12(fp)
   84728:	10800050 	cmplti	r2,r2,1
   8472c:	1000111e 	bne	r2,zero,84774 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   84730:	e0bffe17 	ldw	r2,-8(fp)
   84734:	1090000c 	andi	r2,r2,16384
   84738:	1004c03a 	cmpne	r2,r2,zero
   8473c:	1000101e 	bne	r2,zero,84780 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   84740:	e0bffb17 	ldw	r2,-20(fp)
   84744:	10c00d17 	ldw	r3,52(r2)
   84748:	e0bff917 	ldw	r2,-28(fp)
   8474c:	1880051e 	bne	r3,r2,84764 <altera_avalon_jtag_uart_write+0x1c8>
   84750:	e0bffb17 	ldw	r2,-20(fp)
   84754:	10c00917 	ldw	r3,36(r2)
   84758:	e0bffb17 	ldw	r2,-20(fp)
   8475c:	10800117 	ldw	r2,4(r2)
   84760:	18bff736 	bltu	r3,r2,84740 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   84764:	e0bffb17 	ldw	r2,-20(fp)
   84768:	10c00d17 	ldw	r3,52(r2)
   8476c:	e0bff917 	ldw	r2,-28(fp)
   84770:	18800326 	beq	r3,r2,84780 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   84774:	e0bffd17 	ldw	r2,-12(fp)
   84778:	10800048 	cmpgei	r2,r2,1
   8477c:	103fcd1e 	bne	r2,zero,846b4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   84780:	e0fffc17 	ldw	r3,-16(fp)
   84784:	e0bff617 	ldw	r2,-40(fp)
   84788:	18800526 	beq	r3,r2,847a0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8478c:	e0fffc17 	ldw	r3,-16(fp)
   84790:	e0bff617 	ldw	r2,-40(fp)
   84794:	1887c83a 	sub	r3,r3,r2
   84798:	e0ffff15 	stw	r3,-4(fp)
   8479c:	00000906 	br	847c4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   847a0:	e0bffe17 	ldw	r2,-8(fp)
   847a4:	1090000c 	andi	r2,r2,16384
   847a8:	1005003a 	cmpeq	r2,r2,zero
   847ac:	1000031e 	bne	r2,zero,847bc <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   847b0:	00bffd44 	movi	r2,-11
   847b4:	e0bfff15 	stw	r2,-4(fp)
   847b8:	00000206 	br	847c4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   847bc:	00bffec4 	movi	r2,-5
   847c0:	e0bfff15 	stw	r2,-4(fp)
   847c4:	e0bfff17 	ldw	r2,-4(fp)
}
   847c8:	e037883a 	mov	sp,fp
   847cc:	dfc00117 	ldw	ra,4(sp)
   847d0:	df000017 	ldw	fp,0(sp)
   847d4:	dec00204 	addi	sp,sp,8
   847d8:	f800283a 	ret

000847dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   847dc:	defff404 	addi	sp,sp,-48
   847e0:	df000b15 	stw	fp,44(sp)
   847e4:	df000b04 	addi	fp,sp,44
   847e8:	e13ffb15 	stw	r4,-20(fp)
   847ec:	e17ffc15 	stw	r5,-16(fp)
   847f0:	e1bffd15 	stw	r6,-12(fp)
   847f4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   847f8:	e03ff915 	stw	zero,-28(fp)
   847fc:	00800274 	movhi	r2,9
   84800:	10a3e704 	addi	r2,r2,-28772
   84804:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   84808:	1005003a 	cmpeq	r2,r2,zero
   8480c:	1000411e 	bne	r2,zero,84914 <alt_alarm_start+0x138>
  {
    if (alarm)
   84810:	e0bffb17 	ldw	r2,-20(fp)
   84814:	1005003a 	cmpeq	r2,r2,zero
   84818:	10003b1e 	bne	r2,zero,84908 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8481c:	e0fffb17 	ldw	r3,-20(fp)
   84820:	e0bffd17 	ldw	r2,-12(fp)
   84824:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   84828:	e0fffb17 	ldw	r3,-20(fp)
   8482c:	e0bffe17 	ldw	r2,-8(fp)
   84830:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84834:	0005303a 	rdctl	r2,status
   84838:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8483c:	e0fff817 	ldw	r3,-32(fp)
   84840:	00bfff84 	movi	r2,-2
   84844:	1884703a 	and	r2,r3,r2
   84848:	1001703a 	wrctl	status,r2
  
  return context;
   8484c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   84850:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   84854:	00800274 	movhi	r2,9
   84858:	10a3e804 	addi	r2,r2,-28768
   8485c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   84860:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   84864:	e0fffc17 	ldw	r3,-16(fp)
   84868:	e0bff917 	ldw	r2,-28(fp)
   8486c:	1885883a 	add	r2,r3,r2
   84870:	10c00044 	addi	r3,r2,1
   84874:	e0bffb17 	ldw	r2,-20(fp)
   84878:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8487c:	e0bffb17 	ldw	r2,-20(fp)
   84880:	10c00217 	ldw	r3,8(r2)
   84884:	e0bff917 	ldw	r2,-28(fp)
   84888:	1880042e 	bgeu	r3,r2,8489c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8488c:	e0fffb17 	ldw	r3,-20(fp)
   84890:	00800044 	movi	r2,1
   84894:	18800405 	stb	r2,16(r3)
   84898:	00000206 	br	848a4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8489c:	e0bffb17 	ldw	r2,-20(fp)
   848a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   848a4:	e0fffb17 	ldw	r3,-20(fp)
   848a8:	00800234 	movhi	r2,8
   848ac:	109d4a04 	addi	r2,r2,29992
   848b0:	e0bff615 	stw	r2,-40(fp)
   848b4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   848b8:	e0fff717 	ldw	r3,-36(fp)
   848bc:	e0bff617 	ldw	r2,-40(fp)
   848c0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   848c4:	e0bff617 	ldw	r2,-40(fp)
   848c8:	10c00017 	ldw	r3,0(r2)
   848cc:	e0bff717 	ldw	r2,-36(fp)
   848d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   848d4:	e0bff617 	ldw	r2,-40(fp)
   848d8:	10c00017 	ldw	r3,0(r2)
   848dc:	e0bff717 	ldw	r2,-36(fp)
   848e0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   848e4:	e0fff617 	ldw	r3,-40(fp)
   848e8:	e0bff717 	ldw	r2,-36(fp)
   848ec:	18800015 	stw	r2,0(r3)
   848f0:	e0bffa17 	ldw	r2,-24(fp)
   848f4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   848f8:	e0bff517 	ldw	r2,-44(fp)
   848fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   84900:	e03fff15 	stw	zero,-4(fp)
   84904:	00000506 	br	8491c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   84908:	00bffa84 	movi	r2,-22
   8490c:	e0bfff15 	stw	r2,-4(fp)
   84910:	00000206 	br	8491c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   84914:	00bfde84 	movi	r2,-134
   84918:	e0bfff15 	stw	r2,-4(fp)
   8491c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   84920:	e037883a 	mov	sp,fp
   84924:	df000017 	ldw	fp,0(sp)
   84928:	dec00104 	addi	sp,sp,4
   8492c:	f800283a 	ret

00084930 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   84930:	deffff04 	addi	sp,sp,-4
   84934:	df000015 	stw	fp,0(sp)
   84938:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8493c:	e037883a 	mov	sp,fp
   84940:	df000017 	ldw	fp,0(sp)
   84944:	dec00104 	addi	sp,sp,4
   84948:	f800283a 	ret

0008494c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8494c:	defff904 	addi	sp,sp,-28
   84950:	dfc00615 	stw	ra,24(sp)
   84954:	df000515 	stw	fp,20(sp)
   84958:	df000504 	addi	fp,sp,20
   8495c:	e13ffd15 	stw	r4,-12(fp)
   84960:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   84964:	e0bffd17 	ldw	r2,-12(fp)
   84968:	1005003a 	cmpeq	r2,r2,zero
   8496c:	1000041e 	bne	r2,zero,84980 <alt_dev_llist_insert+0x34>
   84970:	e0bffd17 	ldw	r2,-12(fp)
   84974:	10800217 	ldw	r2,8(r2)
   84978:	1004c03a 	cmpne	r2,r2,zero
   8497c:	1000071e 	bne	r2,zero,8499c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   84980:	0084a000 	call	84a00 <alt_get_errno>
   84984:	1007883a 	mov	r3,r2
   84988:	00800584 	movi	r2,22
   8498c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   84990:	00bffa84 	movi	r2,-22
   84994:	e0bfff15 	stw	r2,-4(fp)
   84998:	00001306 	br	849e8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8499c:	e0fffd17 	ldw	r3,-12(fp)
   849a0:	e0bffe17 	ldw	r2,-8(fp)
   849a4:	e0bffb15 	stw	r2,-20(fp)
   849a8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   849ac:	e0fffc17 	ldw	r3,-16(fp)
   849b0:	e0bffb17 	ldw	r2,-20(fp)
   849b4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   849b8:	e0bffb17 	ldw	r2,-20(fp)
   849bc:	10c00017 	ldw	r3,0(r2)
   849c0:	e0bffc17 	ldw	r2,-16(fp)
   849c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   849c8:	e0bffb17 	ldw	r2,-20(fp)
   849cc:	10c00017 	ldw	r3,0(r2)
   849d0:	e0bffc17 	ldw	r2,-16(fp)
   849d4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   849d8:	e0fffb17 	ldw	r3,-20(fp)
   849dc:	e0bffc17 	ldw	r2,-16(fp)
   849e0:	18800015 	stw	r2,0(r3)

  return 0;  
   849e4:	e03fff15 	stw	zero,-4(fp)
   849e8:	e0bfff17 	ldw	r2,-4(fp)
}
   849ec:	e037883a 	mov	sp,fp
   849f0:	dfc00117 	ldw	ra,4(sp)
   849f4:	df000017 	ldw	fp,0(sp)
   849f8:	dec00204 	addi	sp,sp,8
   849fc:	f800283a 	ret

00084a00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84a00:	defffd04 	addi	sp,sp,-12
   84a04:	dfc00215 	stw	ra,8(sp)
   84a08:	df000115 	stw	fp,4(sp)
   84a0c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   84a10:	00800234 	movhi	r2,8
   84a14:	109d4704 	addi	r2,r2,29980
   84a18:	10800017 	ldw	r2,0(r2)
   84a1c:	1005003a 	cmpeq	r2,r2,zero
   84a20:	1000061e 	bne	r2,zero,84a3c <alt_get_errno+0x3c>
   84a24:	00800234 	movhi	r2,8
   84a28:	109d4704 	addi	r2,r2,29980
   84a2c:	10800017 	ldw	r2,0(r2)
   84a30:	103ee83a 	callr	r2
   84a34:	e0bfff15 	stw	r2,-4(fp)
   84a38:	00000306 	br	84a48 <alt_get_errno+0x48>
   84a3c:	00800274 	movhi	r2,9
   84a40:	10a3e204 	addi	r2,r2,-28792
   84a44:	e0bfff15 	stw	r2,-4(fp)
   84a48:	e0bfff17 	ldw	r2,-4(fp)
}
   84a4c:	e037883a 	mov	sp,fp
   84a50:	dfc00117 	ldw	ra,4(sp)
   84a54:	df000017 	ldw	fp,0(sp)
   84a58:	dec00204 	addi	sp,sp,8
   84a5c:	f800283a 	ret

00084a60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   84a60:	defffd04 	addi	sp,sp,-12
   84a64:	dfc00215 	stw	ra,8(sp)
   84a68:	df000115 	stw	fp,4(sp)
   84a6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84a70:	00bfff04 	movi	r2,-4
   84a74:	00c00234 	movhi	r3,8
   84a78:	18d6a604 	addi	r3,r3,23192
   84a7c:	1885883a 	add	r2,r3,r2
   84a80:	e0bfff15 	stw	r2,-4(fp)
   84a84:	00000606 	br	84aa0 <_do_ctors+0x40>
        (*ctor) (); 
   84a88:	e0bfff17 	ldw	r2,-4(fp)
   84a8c:	10800017 	ldw	r2,0(r2)
   84a90:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84a94:	e0bfff17 	ldw	r2,-4(fp)
   84a98:	10bfff04 	addi	r2,r2,-4
   84a9c:	e0bfff15 	stw	r2,-4(fp)
   84aa0:	e0ffff17 	ldw	r3,-4(fp)
   84aa4:	00800234 	movhi	r2,8
   84aa8:	1096a504 	addi	r2,r2,23188
   84aac:	18bff62e 	bgeu	r3,r2,84a88 <_do_ctors+0x28>
        (*ctor) (); 
}
   84ab0:	e037883a 	mov	sp,fp
   84ab4:	dfc00117 	ldw	ra,4(sp)
   84ab8:	df000017 	ldw	fp,0(sp)
   84abc:	dec00204 	addi	sp,sp,8
   84ac0:	f800283a 	ret

00084ac4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   84ac4:	defffd04 	addi	sp,sp,-12
   84ac8:	dfc00215 	stw	ra,8(sp)
   84acc:	df000115 	stw	fp,4(sp)
   84ad0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   84ad4:	00bfff04 	movi	r2,-4
   84ad8:	00c00234 	movhi	r3,8
   84adc:	18d6a604 	addi	r3,r3,23192
   84ae0:	1885883a 	add	r2,r3,r2
   84ae4:	e0bfff15 	stw	r2,-4(fp)
   84ae8:	00000606 	br	84b04 <_do_dtors+0x40>
        (*dtor) (); 
   84aec:	e0bfff17 	ldw	r2,-4(fp)
   84af0:	10800017 	ldw	r2,0(r2)
   84af4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   84af8:	e0bfff17 	ldw	r2,-4(fp)
   84afc:	10bfff04 	addi	r2,r2,-4
   84b00:	e0bfff15 	stw	r2,-4(fp)
   84b04:	e0ffff17 	ldw	r3,-4(fp)
   84b08:	00800234 	movhi	r2,8
   84b0c:	1096a604 	addi	r2,r2,23192
   84b10:	18bff62e 	bgeu	r3,r2,84aec <_do_dtors+0x28>
        (*dtor) (); 
}
   84b14:	e037883a 	mov	sp,fp
   84b18:	dfc00117 	ldw	ra,4(sp)
   84b1c:	df000017 	ldw	fp,0(sp)
   84b20:	dec00204 	addi	sp,sp,8
   84b24:	f800283a 	ret

00084b28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   84b28:	deffff04 	addi	sp,sp,-4
   84b2c:	df000015 	stw	fp,0(sp)
   84b30:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   84b34:	e037883a 	mov	sp,fp
   84b38:	df000017 	ldw	fp,0(sp)
   84b3c:	dec00104 	addi	sp,sp,4
   84b40:	f800283a 	ret

00084b44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84b44:	defff904 	addi	sp,sp,-28
   84b48:	dfc00615 	stw	ra,24(sp)
   84b4c:	df000515 	stw	fp,20(sp)
   84b50:	df000504 	addi	fp,sp,20
   84b54:	e13ffc15 	stw	r4,-16(fp)
   84b58:	e17ffd15 	stw	r5,-12(fp)
   84b5c:	e1bffe15 	stw	r6,-8(fp)
   84b60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   84b64:	e0800217 	ldw	r2,8(fp)
   84b68:	d8800015 	stw	r2,0(sp)
   84b6c:	e13ffc17 	ldw	r4,-16(fp)
   84b70:	e17ffd17 	ldw	r5,-12(fp)
   84b74:	e1bffe17 	ldw	r6,-8(fp)
   84b78:	e1ffff17 	ldw	r7,-4(fp)
   84b7c:	0084d180 	call	84d18 <alt_iic_isr_register>
}  
   84b80:	e037883a 	mov	sp,fp
   84b84:	dfc00117 	ldw	ra,4(sp)
   84b88:	df000017 	ldw	fp,0(sp)
   84b8c:	dec00204 	addi	sp,sp,8
   84b90:	f800283a 	ret

00084b94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   84b94:	defff904 	addi	sp,sp,-28
   84b98:	df000615 	stw	fp,24(sp)
   84b9c:	df000604 	addi	fp,sp,24
   84ba0:	e13ffe15 	stw	r4,-8(fp)
   84ba4:	e17fff15 	stw	r5,-4(fp)
   84ba8:	e0bfff17 	ldw	r2,-4(fp)
   84bac:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84bb0:	0005303a 	rdctl	r2,status
   84bb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84bb8:	e0fffb17 	ldw	r3,-20(fp)
   84bbc:	00bfff84 	movi	r2,-2
   84bc0:	1884703a 	and	r2,r3,r2
   84bc4:	1001703a 	wrctl	status,r2
  
  return context;
   84bc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84bcc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   84bd0:	e0fffc17 	ldw	r3,-16(fp)
   84bd4:	00800044 	movi	r2,1
   84bd8:	10c4983a 	sll	r2,r2,r3
   84bdc:	1007883a 	mov	r3,r2
   84be0:	00800274 	movhi	r2,9
   84be4:	10a3e304 	addi	r2,r2,-28788
   84be8:	10800017 	ldw	r2,0(r2)
   84bec:	1886b03a 	or	r3,r3,r2
   84bf0:	00800274 	movhi	r2,9
   84bf4:	10a3e304 	addi	r2,r2,-28788
   84bf8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84bfc:	00800274 	movhi	r2,9
   84c00:	10a3e304 	addi	r2,r2,-28788
   84c04:	10800017 	ldw	r2,0(r2)
   84c08:	100170fa 	wrctl	ienable,r2
   84c0c:	e0bffd17 	ldw	r2,-12(fp)
   84c10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84c14:	e0bffa17 	ldw	r2,-24(fp)
   84c18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84c1c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   84c20:	e037883a 	mov	sp,fp
   84c24:	df000017 	ldw	fp,0(sp)
   84c28:	dec00104 	addi	sp,sp,4
   84c2c:	f800283a 	ret

00084c30 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   84c30:	defff904 	addi	sp,sp,-28
   84c34:	df000615 	stw	fp,24(sp)
   84c38:	df000604 	addi	fp,sp,24
   84c3c:	e13ffe15 	stw	r4,-8(fp)
   84c40:	e17fff15 	stw	r5,-4(fp)
   84c44:	e0bfff17 	ldw	r2,-4(fp)
   84c48:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84c4c:	0005303a 	rdctl	r2,status
   84c50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84c54:	e0fffb17 	ldw	r3,-20(fp)
   84c58:	00bfff84 	movi	r2,-2
   84c5c:	1884703a 	and	r2,r3,r2
   84c60:	1001703a 	wrctl	status,r2
  
  return context;
   84c64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84c68:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   84c6c:	e0fffc17 	ldw	r3,-16(fp)
   84c70:	00800044 	movi	r2,1
   84c74:	10c4983a 	sll	r2,r2,r3
   84c78:	0084303a 	nor	r2,zero,r2
   84c7c:	1007883a 	mov	r3,r2
   84c80:	00800274 	movhi	r2,9
   84c84:	10a3e304 	addi	r2,r2,-28788
   84c88:	10800017 	ldw	r2,0(r2)
   84c8c:	1886703a 	and	r3,r3,r2
   84c90:	00800274 	movhi	r2,9
   84c94:	10a3e304 	addi	r2,r2,-28788
   84c98:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84c9c:	00800274 	movhi	r2,9
   84ca0:	10a3e304 	addi	r2,r2,-28788
   84ca4:	10800017 	ldw	r2,0(r2)
   84ca8:	100170fa 	wrctl	ienable,r2
   84cac:	e0bffd17 	ldw	r2,-12(fp)
   84cb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84cb4:	e0bffa17 	ldw	r2,-24(fp)
   84cb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84cbc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   84cc0:	e037883a 	mov	sp,fp
   84cc4:	df000017 	ldw	fp,0(sp)
   84cc8:	dec00104 	addi	sp,sp,4
   84ccc:	f800283a 	ret

00084cd0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   84cd0:	defffc04 	addi	sp,sp,-16
   84cd4:	df000315 	stw	fp,12(sp)
   84cd8:	df000304 	addi	fp,sp,12
   84cdc:	e13ffe15 	stw	r4,-8(fp)
   84ce0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   84ce4:	000530fa 	rdctl	r2,ienable
   84ce8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   84cec:	e0ffff17 	ldw	r3,-4(fp)
   84cf0:	00800044 	movi	r2,1
   84cf4:	10c4983a 	sll	r2,r2,r3
   84cf8:	1007883a 	mov	r3,r2
   84cfc:	e0bffd17 	ldw	r2,-12(fp)
   84d00:	1884703a 	and	r2,r3,r2
   84d04:	1004c03a 	cmpne	r2,r2,zero
}
   84d08:	e037883a 	mov	sp,fp
   84d0c:	df000017 	ldw	fp,0(sp)
   84d10:	dec00104 	addi	sp,sp,4
   84d14:	f800283a 	ret

00084d18 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84d18:	defff404 	addi	sp,sp,-48
   84d1c:	dfc00b15 	stw	ra,44(sp)
   84d20:	df000a15 	stw	fp,40(sp)
   84d24:	df000a04 	addi	fp,sp,40
   84d28:	e13ffb15 	stw	r4,-20(fp)
   84d2c:	e17ffc15 	stw	r5,-16(fp)
   84d30:	e1bffd15 	stw	r6,-12(fp)
   84d34:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   84d38:	00bffa84 	movi	r2,-22
   84d3c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   84d40:	e0bffc17 	ldw	r2,-16(fp)
   84d44:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   84d48:	e0bff917 	ldw	r2,-28(fp)
   84d4c:	10800808 	cmpgei	r2,r2,32
   84d50:	1000291e 	bne	r2,zero,84df8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84d54:	0005303a 	rdctl	r2,status
   84d58:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84d5c:	e0fff717 	ldw	r3,-36(fp)
   84d60:	00bfff84 	movi	r2,-2
   84d64:	1884703a 	and	r2,r3,r2
   84d68:	1001703a 	wrctl	status,r2
  
  return context;
   84d6c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   84d70:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   84d74:	e0bff917 	ldw	r2,-28(fp)
   84d78:	00c00274 	movhi	r3,9
   84d7c:	18e3f304 	addi	r3,r3,-28724
   84d80:	100490fa 	slli	r2,r2,3
   84d84:	10c7883a 	add	r3,r2,r3
   84d88:	e0bffd17 	ldw	r2,-12(fp)
   84d8c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   84d90:	e0bff917 	ldw	r2,-28(fp)
   84d94:	00c00274 	movhi	r3,9
   84d98:	18e3f304 	addi	r3,r3,-28724
   84d9c:	100490fa 	slli	r2,r2,3
   84da0:	10c5883a 	add	r2,r2,r3
   84da4:	10c00104 	addi	r3,r2,4
   84da8:	e0bffe17 	ldw	r2,-8(fp)
   84dac:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   84db0:	e0bffd17 	ldw	r2,-12(fp)
   84db4:	1005003a 	cmpeq	r2,r2,zero
   84db8:	1000051e 	bne	r2,zero,84dd0 <alt_iic_isr_register+0xb8>
   84dbc:	e17ff917 	ldw	r5,-28(fp)
   84dc0:	e13ffb17 	ldw	r4,-20(fp)
   84dc4:	0084b940 	call	84b94 <alt_ic_irq_enable>
   84dc8:	e0bfff15 	stw	r2,-4(fp)
   84dcc:	00000406 	br	84de0 <alt_iic_isr_register+0xc8>
   84dd0:	e17ff917 	ldw	r5,-28(fp)
   84dd4:	e13ffb17 	ldw	r4,-20(fp)
   84dd8:	0084c300 	call	84c30 <alt_ic_irq_disable>
   84ddc:	e0bfff15 	stw	r2,-4(fp)
   84de0:	e0bfff17 	ldw	r2,-4(fp)
   84de4:	e0bffa15 	stw	r2,-24(fp)
   84de8:	e0bff817 	ldw	r2,-32(fp)
   84dec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84df0:	e0bff617 	ldw	r2,-40(fp)
   84df4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   84df8:	e0bffa17 	ldw	r2,-24(fp)
}
   84dfc:	e037883a 	mov	sp,fp
   84e00:	dfc00117 	ldw	ra,4(sp)
   84e04:	df000017 	ldw	fp,0(sp)
   84e08:	dec00204 	addi	sp,sp,8
   84e0c:	f800283a 	ret

00084e10 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   84e10:	defff804 	addi	sp,sp,-32
   84e14:	dfc00715 	stw	ra,28(sp)
   84e18:	df000615 	stw	fp,24(sp)
   84e1c:	dc000515 	stw	r16,20(sp)
   84e20:	df000504 	addi	fp,sp,20
   84e24:	e13ffc15 	stw	r4,-16(fp)
   84e28:	e17ffd15 	stw	r5,-12(fp)
   84e2c:	e1bffe15 	stw	r6,-8(fp)
   84e30:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   84e34:	e13ffd17 	ldw	r4,-12(fp)
   84e38:	e17ffe17 	ldw	r5,-8(fp)
   84e3c:	e1bfff17 	ldw	r6,-4(fp)
   84e40:	00850580 	call	85058 <open>
   84e44:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   84e48:	e0bffb17 	ldw	r2,-20(fp)
   84e4c:	1004803a 	cmplt	r2,r2,zero
   84e50:	10001f1e 	bne	r2,zero,84ed0 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   84e54:	e13ffb17 	ldw	r4,-20(fp)
   84e58:	04000234 	movhi	r16,8
   84e5c:	8418c504 	addi	r16,r16,25364
   84e60:	01400304 	movi	r5,12
   84e64:	0082f780 	call	82f78 <__mulsi3>
   84e68:	1405883a 	add	r2,r2,r16
   84e6c:	10c00017 	ldw	r3,0(r2)
   84e70:	e0bffc17 	ldw	r2,-16(fp)
   84e74:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   84e78:	e13ffb17 	ldw	r4,-20(fp)
   84e7c:	04000234 	movhi	r16,8
   84e80:	8418c504 	addi	r16,r16,25364
   84e84:	01400304 	movi	r5,12
   84e88:	0082f780 	call	82f78 <__mulsi3>
   84e8c:	1405883a 	add	r2,r2,r16
   84e90:	10800104 	addi	r2,r2,4
   84e94:	10c00017 	ldw	r3,0(r2)
   84e98:	e0bffc17 	ldw	r2,-16(fp)
   84e9c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   84ea0:	e13ffb17 	ldw	r4,-20(fp)
   84ea4:	04000234 	movhi	r16,8
   84ea8:	8418c504 	addi	r16,r16,25364
   84eac:	01400304 	movi	r5,12
   84eb0:	0082f780 	call	82f78 <__mulsi3>
   84eb4:	1405883a 	add	r2,r2,r16
   84eb8:	10800204 	addi	r2,r2,8
   84ebc:	10c00017 	ldw	r3,0(r2)
   84ec0:	e0bffc17 	ldw	r2,-16(fp)
   84ec4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   84ec8:	e13ffb17 	ldw	r4,-20(fp)
   84ecc:	00839c80 	call	839c8 <alt_release_fd>
  }
} 
   84ed0:	e037883a 	mov	sp,fp
   84ed4:	dfc00217 	ldw	ra,8(sp)
   84ed8:	df000117 	ldw	fp,4(sp)
   84edc:	dc000017 	ldw	r16,0(sp)
   84ee0:	dec00304 	addi	sp,sp,12
   84ee4:	f800283a 	ret

00084ee8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   84ee8:	defffb04 	addi	sp,sp,-20
   84eec:	dfc00415 	stw	ra,16(sp)
   84ef0:	df000315 	stw	fp,12(sp)
   84ef4:	df000304 	addi	fp,sp,12
   84ef8:	e13ffd15 	stw	r4,-12(fp)
   84efc:	e17ffe15 	stw	r5,-8(fp)
   84f00:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   84f04:	01000234 	movhi	r4,8
   84f08:	2118c804 	addi	r4,r4,25376
   84f0c:	e17ffd17 	ldw	r5,-12(fp)
   84f10:	01800044 	movi	r6,1
   84f14:	01c07fc4 	movi	r7,511
   84f18:	0084e100 	call	84e10 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   84f1c:	01000234 	movhi	r4,8
   84f20:	2118c504 	addi	r4,r4,25364
   84f24:	e17ffe17 	ldw	r5,-8(fp)
   84f28:	000d883a 	mov	r6,zero
   84f2c:	01c07fc4 	movi	r7,511
   84f30:	0084e100 	call	84e10 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   84f34:	01000234 	movhi	r4,8
   84f38:	2118cb04 	addi	r4,r4,25388
   84f3c:	e17fff17 	ldw	r5,-4(fp)
   84f40:	01800044 	movi	r6,1
   84f44:	01c07fc4 	movi	r7,511
   84f48:	0084e100 	call	84e10 <alt_open_fd>
}  
   84f4c:	e037883a 	mov	sp,fp
   84f50:	dfc00117 	ldw	ra,4(sp)
   84f54:	df000017 	ldw	fp,0(sp)
   84f58:	dec00204 	addi	sp,sp,8
   84f5c:	f800283a 	ret

00084f60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   84f60:	defffa04 	addi	sp,sp,-24
   84f64:	dfc00515 	stw	ra,20(sp)
   84f68:	df000415 	stw	fp,16(sp)
   84f6c:	dc000315 	stw	r16,12(sp)
   84f70:	df000304 	addi	fp,sp,12
   84f74:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   84f78:	e0bffe17 	ldw	r2,-8(fp)
   84f7c:	10800217 	ldw	r2,8(r2)
   84f80:	10d00034 	orhi	r3,r2,16384
   84f84:	e0bffe17 	ldw	r2,-8(fp)
   84f88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84f8c:	e03ffd15 	stw	zero,-12(fp)
   84f90:	00002306 	br	85020 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   84f94:	e13ffd17 	ldw	r4,-12(fp)
   84f98:	04000234 	movhi	r16,8
   84f9c:	8418c504 	addi	r16,r16,25364
   84fa0:	01400304 	movi	r5,12
   84fa4:	0082f780 	call	82f78 <__mulsi3>
   84fa8:	1405883a 	add	r2,r2,r16
   84fac:	10c00017 	ldw	r3,0(r2)
   84fb0:	e0bffe17 	ldw	r2,-8(fp)
   84fb4:	10800017 	ldw	r2,0(r2)
   84fb8:	1880161e 	bne	r3,r2,85014 <alt_file_locked+0xb4>
   84fbc:	e13ffd17 	ldw	r4,-12(fp)
   84fc0:	04000234 	movhi	r16,8
   84fc4:	8418c504 	addi	r16,r16,25364
   84fc8:	01400304 	movi	r5,12
   84fcc:	0082f780 	call	82f78 <__mulsi3>
   84fd0:	1405883a 	add	r2,r2,r16
   84fd4:	10800204 	addi	r2,r2,8
   84fd8:	10800017 	ldw	r2,0(r2)
   84fdc:	1004403a 	cmpge	r2,r2,zero
   84fe0:	10000c1e 	bne	r2,zero,85014 <alt_file_locked+0xb4>
   84fe4:	e13ffd17 	ldw	r4,-12(fp)
   84fe8:	01400304 	movi	r5,12
   84fec:	0082f780 	call	82f78 <__mulsi3>
   84ff0:	1007883a 	mov	r3,r2
   84ff4:	00800234 	movhi	r2,8
   84ff8:	1098c504 	addi	r2,r2,25364
   84ffc:	1887883a 	add	r3,r3,r2
   85000:	e0bffe17 	ldw	r2,-8(fp)
   85004:	18800326 	beq	r3,r2,85014 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   85008:	00bffcc4 	movi	r2,-13
   8500c:	e0bfff15 	stw	r2,-4(fp)
   85010:	00000a06 	br	8503c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   85014:	e0bffd17 	ldw	r2,-12(fp)
   85018:	10800044 	addi	r2,r2,1
   8501c:	e0bffd15 	stw	r2,-12(fp)
   85020:	00800234 	movhi	r2,8
   85024:	109d4604 	addi	r2,r2,29976
   85028:	10800017 	ldw	r2,0(r2)
   8502c:	1007883a 	mov	r3,r2
   85030:	e0bffd17 	ldw	r2,-12(fp)
   85034:	18bfd72e 	bgeu	r3,r2,84f94 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   85038:	e03fff15 	stw	zero,-4(fp)
   8503c:	e0bfff17 	ldw	r2,-4(fp)
}
   85040:	e037883a 	mov	sp,fp
   85044:	dfc00217 	ldw	ra,8(sp)
   85048:	df000117 	ldw	fp,4(sp)
   8504c:	dc000017 	ldw	r16,0(sp)
   85050:	dec00304 	addi	sp,sp,12
   85054:	f800283a 	ret

00085058 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   85058:	defff404 	addi	sp,sp,-48
   8505c:	dfc00b15 	stw	ra,44(sp)
   85060:	df000a15 	stw	fp,40(sp)
   85064:	df000a04 	addi	fp,sp,40
   85068:	e13ffb15 	stw	r4,-20(fp)
   8506c:	e17ffc15 	stw	r5,-16(fp)
   85070:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   85074:	00bfffc4 	movi	r2,-1
   85078:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8507c:	00bffb44 	movi	r2,-19
   85080:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   85084:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   85088:	e13ffb17 	ldw	r4,-20(fp)
   8508c:	01400234 	movhi	r5,8
   85090:	295d4404 	addi	r5,r5,29968
   85094:	00854080 	call	85408 <alt_find_dev>
   85098:	e0bffa15 	stw	r2,-24(fp)
   8509c:	e0bffa17 	ldw	r2,-24(fp)
   850a0:	1004c03a 	cmpne	r2,r2,zero
   850a4:	1000051e 	bne	r2,zero,850bc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   850a8:	e13ffb17 	ldw	r4,-20(fp)
   850ac:	008549c0 	call	8549c <alt_find_file>
   850b0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   850b4:	00800044 	movi	r2,1
   850b8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   850bc:	e0bffa17 	ldw	r2,-24(fp)
   850c0:	1005003a 	cmpeq	r2,r2,zero
   850c4:	1000311e 	bne	r2,zero,8518c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   850c8:	e13ffa17 	ldw	r4,-24(fp)
   850cc:	00855bc0 	call	855bc <alt_get_fd>
   850d0:	e0bff815 	stw	r2,-32(fp)
   850d4:	e0bff817 	ldw	r2,-32(fp)
   850d8:	1004403a 	cmpge	r2,r2,zero
   850dc:	1000031e 	bne	r2,zero,850ec <open+0x94>
    {
      status = index;
   850e0:	e0bff817 	ldw	r2,-32(fp)
   850e4:	e0bff715 	stw	r2,-36(fp)
   850e8:	00002a06 	br	85194 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   850ec:	e13ff817 	ldw	r4,-32(fp)
   850f0:	01400304 	movi	r5,12
   850f4:	0082f780 	call	82f78 <__mulsi3>
   850f8:	1007883a 	mov	r3,r2
   850fc:	00800234 	movhi	r2,8
   85100:	1098c504 	addi	r2,r2,25364
   85104:	1885883a 	add	r2,r3,r2
   85108:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8510c:	e0fffc17 	ldw	r3,-16(fp)
   85110:	00900034 	movhi	r2,16384
   85114:	10bfffc4 	addi	r2,r2,-1
   85118:	1886703a 	and	r3,r3,r2
   8511c:	e0bff917 	ldw	r2,-28(fp)
   85120:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   85124:	e0bff617 	ldw	r2,-40(fp)
   85128:	1004c03a 	cmpne	r2,r2,zero
   8512c:	1000061e 	bne	r2,zero,85148 <open+0xf0>
   85130:	e13ff917 	ldw	r4,-28(fp)
   85134:	0084f600 	call	84f60 <alt_file_locked>
   85138:	e0bff715 	stw	r2,-36(fp)
   8513c:	e0bff717 	ldw	r2,-36(fp)
   85140:	1004803a 	cmplt	r2,r2,zero
   85144:	1000131e 	bne	r2,zero,85194 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   85148:	e0bffa17 	ldw	r2,-24(fp)
   8514c:	10800317 	ldw	r2,12(r2)
   85150:	1005003a 	cmpeq	r2,r2,zero
   85154:	1000091e 	bne	r2,zero,8517c <open+0x124>
   85158:	e0bffa17 	ldw	r2,-24(fp)
   8515c:	10800317 	ldw	r2,12(r2)
   85160:	e13ff917 	ldw	r4,-28(fp)
   85164:	e17ffb17 	ldw	r5,-20(fp)
   85168:	e1bffc17 	ldw	r6,-16(fp)
   8516c:	e1fffd17 	ldw	r7,-12(fp)
   85170:	103ee83a 	callr	r2
   85174:	e0bfff15 	stw	r2,-4(fp)
   85178:	00000106 	br	85180 <open+0x128>
   8517c:	e03fff15 	stw	zero,-4(fp)
   85180:	e0bfff17 	ldw	r2,-4(fp)
   85184:	e0bff715 	stw	r2,-36(fp)
   85188:	00000206 	br	85194 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8518c:	00bffb44 	movi	r2,-19
   85190:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   85194:	e0bff717 	ldw	r2,-36(fp)
   85198:	1004403a 	cmpge	r2,r2,zero
   8519c:	1000091e 	bne	r2,zero,851c4 <open+0x16c>
  {
    alt_release_fd (index);  
   851a0:	e13ff817 	ldw	r4,-32(fp)
   851a4:	00839c80 	call	839c8 <alt_release_fd>
    ALT_ERRNO = -status;
   851a8:	00851e40 	call	851e4 <alt_get_errno>
   851ac:	e0fff717 	ldw	r3,-36(fp)
   851b0:	00c7c83a 	sub	r3,zero,r3
   851b4:	10c00015 	stw	r3,0(r2)
    return -1;
   851b8:	00bfffc4 	movi	r2,-1
   851bc:	e0bffe15 	stw	r2,-8(fp)
   851c0:	00000206 	br	851cc <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   851c4:	e0bff817 	ldw	r2,-32(fp)
   851c8:	e0bffe15 	stw	r2,-8(fp)
   851cc:	e0bffe17 	ldw	r2,-8(fp)
}
   851d0:	e037883a 	mov	sp,fp
   851d4:	dfc00117 	ldw	ra,4(sp)
   851d8:	df000017 	ldw	fp,0(sp)
   851dc:	dec00204 	addi	sp,sp,8
   851e0:	f800283a 	ret

000851e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   851e4:	defffd04 	addi	sp,sp,-12
   851e8:	dfc00215 	stw	ra,8(sp)
   851ec:	df000115 	stw	fp,4(sp)
   851f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   851f4:	00800234 	movhi	r2,8
   851f8:	109d4704 	addi	r2,r2,29980
   851fc:	10800017 	ldw	r2,0(r2)
   85200:	1005003a 	cmpeq	r2,r2,zero
   85204:	1000061e 	bne	r2,zero,85220 <alt_get_errno+0x3c>
   85208:	00800234 	movhi	r2,8
   8520c:	109d4704 	addi	r2,r2,29980
   85210:	10800017 	ldw	r2,0(r2)
   85214:	103ee83a 	callr	r2
   85218:	e0bfff15 	stw	r2,-4(fp)
   8521c:	00000306 	br	8522c <alt_get_errno+0x48>
   85220:	00800274 	movhi	r2,9
   85224:	10a3e204 	addi	r2,r2,-28792
   85228:	e0bfff15 	stw	r2,-4(fp)
   8522c:	e0bfff17 	ldw	r2,-4(fp)
}
   85230:	e037883a 	mov	sp,fp
   85234:	dfc00117 	ldw	ra,4(sp)
   85238:	df000017 	ldw	fp,0(sp)
   8523c:	dec00204 	addi	sp,sp,8
   85240:	f800283a 	ret

00085244 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   85244:	defffa04 	addi	sp,sp,-24
   85248:	df000515 	stw	fp,20(sp)
   8524c:	df000504 	addi	fp,sp,20
   85250:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85254:	0005303a 	rdctl	r2,status
   85258:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8525c:	e0fffd17 	ldw	r3,-12(fp)
   85260:	00bfff84 	movi	r2,-2
   85264:	1884703a 	and	r2,r3,r2
   85268:	1001703a 	wrctl	status,r2
  
  return context;
   8526c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   85270:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   85274:	e0bfff17 	ldw	r2,-4(fp)
   85278:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8527c:	e0bffc17 	ldw	r2,-16(fp)
   85280:	10c00017 	ldw	r3,0(r2)
   85284:	e0bffc17 	ldw	r2,-16(fp)
   85288:	10800117 	ldw	r2,4(r2)
   8528c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   85290:	e0bffc17 	ldw	r2,-16(fp)
   85294:	10c00117 	ldw	r3,4(r2)
   85298:	e0bffc17 	ldw	r2,-16(fp)
   8529c:	10800017 	ldw	r2,0(r2)
   852a0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   852a4:	e0fffc17 	ldw	r3,-16(fp)
   852a8:	e0bffc17 	ldw	r2,-16(fp)
   852ac:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   852b0:	e0fffc17 	ldw	r3,-16(fp)
   852b4:	e0bffc17 	ldw	r2,-16(fp)
   852b8:	18800015 	stw	r2,0(r3)
   852bc:	e0bffe17 	ldw	r2,-8(fp)
   852c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   852c4:	e0bffb17 	ldw	r2,-20(fp)
   852c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   852cc:	e037883a 	mov	sp,fp
   852d0:	df000017 	ldw	fp,0(sp)
   852d4:	dec00104 	addi	sp,sp,4
   852d8:	f800283a 	ret

000852dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   852dc:	defffb04 	addi	sp,sp,-20
   852e0:	dfc00415 	stw	ra,16(sp)
   852e4:	df000315 	stw	fp,12(sp)
   852e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   852ec:	d0a00d17 	ldw	r2,-32716(gp)
   852f0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   852f4:	d0a6ab17 	ldw	r2,-25940(gp)
   852f8:	10800044 	addi	r2,r2,1
   852fc:	d0a6ab15 	stw	r2,-25940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   85300:	00003106 	br	853c8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   85304:	e0bffe17 	ldw	r2,-8(fp)
   85308:	10800017 	ldw	r2,0(r2)
   8530c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   85310:	e0bffe17 	ldw	r2,-8(fp)
   85314:	10800403 	ldbu	r2,16(r2)
   85318:	10803fcc 	andi	r2,r2,255
   8531c:	1005003a 	cmpeq	r2,r2,zero
   85320:	1000051e 	bne	r2,zero,85338 <alt_tick+0x5c>
   85324:	d0a6ab17 	ldw	r2,-25940(gp)
   85328:	1004c03a 	cmpne	r2,r2,zero
   8532c:	1000021e 	bne	r2,zero,85338 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   85330:	e0bffe17 	ldw	r2,-8(fp)
   85334:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   85338:	e0bffe17 	ldw	r2,-8(fp)
   8533c:	10c00217 	ldw	r3,8(r2)
   85340:	d0a6ab17 	ldw	r2,-25940(gp)
   85344:	10c01e36 	bltu	r2,r3,853c0 <alt_tick+0xe4>
   85348:	e0bffe17 	ldw	r2,-8(fp)
   8534c:	10800403 	ldbu	r2,16(r2)
   85350:	10803fcc 	andi	r2,r2,255
   85354:	1004c03a 	cmpne	r2,r2,zero
   85358:	1000191e 	bne	r2,zero,853c0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8535c:	e0bffe17 	ldw	r2,-8(fp)
   85360:	10c00317 	ldw	r3,12(r2)
   85364:	e0bffe17 	ldw	r2,-8(fp)
   85368:	11000517 	ldw	r4,20(r2)
   8536c:	183ee83a 	callr	r3
   85370:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   85374:	e0bffd17 	ldw	r2,-12(fp)
   85378:	1004c03a 	cmpne	r2,r2,zero
   8537c:	1000031e 	bne	r2,zero,8538c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   85380:	e13ffe17 	ldw	r4,-8(fp)
   85384:	00852440 	call	85244 <alt_alarm_stop>
   85388:	00000d06 	br	853c0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8538c:	e0bffe17 	ldw	r2,-8(fp)
   85390:	10c00217 	ldw	r3,8(r2)
   85394:	e0bffd17 	ldw	r2,-12(fp)
   85398:	1887883a 	add	r3,r3,r2
   8539c:	e0bffe17 	ldw	r2,-8(fp)
   853a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   853a4:	e0bffe17 	ldw	r2,-8(fp)
   853a8:	10c00217 	ldw	r3,8(r2)
   853ac:	d0a6ab17 	ldw	r2,-25940(gp)
   853b0:	1880032e 	bgeu	r3,r2,853c0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   853b4:	e0fffe17 	ldw	r3,-8(fp)
   853b8:	00800044 	movi	r2,1
   853bc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   853c0:	e0bfff17 	ldw	r2,-4(fp)
   853c4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   853c8:	d0e00d04 	addi	r3,gp,-32716
   853cc:	e0bffe17 	ldw	r2,-8(fp)
   853d0:	10ffcc1e 	bne	r2,r3,85304 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   853d4:	e037883a 	mov	sp,fp
   853d8:	dfc00117 	ldw	ra,4(sp)
   853dc:	df000017 	ldw	fp,0(sp)
   853e0:	dec00204 	addi	sp,sp,8
   853e4:	f800283a 	ret

000853e8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   853e8:	deffff04 	addi	sp,sp,-4
   853ec:	df000015 	stw	fp,0(sp)
   853f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   853f4:	000170fa 	wrctl	ienable,zero
}
   853f8:	e037883a 	mov	sp,fp
   853fc:	df000017 	ldw	fp,0(sp)
   85400:	dec00104 	addi	sp,sp,4
   85404:	f800283a 	ret

00085408 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   85408:	defff904 	addi	sp,sp,-28
   8540c:	dfc00615 	stw	ra,24(sp)
   85410:	df000515 	stw	fp,20(sp)
   85414:	df000504 	addi	fp,sp,20
   85418:	e13ffd15 	stw	r4,-12(fp)
   8541c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   85420:	e0bffe17 	ldw	r2,-8(fp)
   85424:	10800017 	ldw	r2,0(r2)
   85428:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8542c:	e13ffd17 	ldw	r4,-12(fp)
   85430:	00806e80 	call	806e8 <strlen>
   85434:	10800044 	addi	r2,r2,1
   85438:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8543c:	00000d06 	br	85474 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   85440:	e0bffc17 	ldw	r2,-16(fp)
   85444:	11000217 	ldw	r4,8(r2)
   85448:	e1bffb17 	ldw	r6,-20(fp)
   8544c:	e17ffd17 	ldw	r5,-12(fp)
   85450:	00856d80 	call	856d8 <memcmp>
   85454:	1004c03a 	cmpne	r2,r2,zero
   85458:	1000031e 	bne	r2,zero,85468 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8545c:	e0bffc17 	ldw	r2,-16(fp)
   85460:	e0bfff15 	stw	r2,-4(fp)
   85464:	00000706 	br	85484 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   85468:	e0bffc17 	ldw	r2,-16(fp)
   8546c:	10800017 	ldw	r2,0(r2)
   85470:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   85474:	e0fffe17 	ldw	r3,-8(fp)
   85478:	e0bffc17 	ldw	r2,-16(fp)
   8547c:	10fff01e 	bne	r2,r3,85440 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   85480:	e03fff15 	stw	zero,-4(fp)
   85484:	e0bfff17 	ldw	r2,-4(fp)
}
   85488:	e037883a 	mov	sp,fp
   8548c:	dfc00117 	ldw	ra,4(sp)
   85490:	df000017 	ldw	fp,0(sp)
   85494:	dec00204 	addi	sp,sp,8
   85498:	f800283a 	ret

0008549c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8549c:	defffa04 	addi	sp,sp,-24
   854a0:	dfc00515 	stw	ra,20(sp)
   854a4:	df000415 	stw	fp,16(sp)
   854a8:	df000404 	addi	fp,sp,16
   854ac:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   854b0:	00800234 	movhi	r2,8
   854b4:	109d4204 	addi	r2,r2,29960
   854b8:	10800017 	ldw	r2,0(r2)
   854bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   854c0:	00003306 	br	85590 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   854c4:	e0bffd17 	ldw	r2,-12(fp)
   854c8:	11000217 	ldw	r4,8(r2)
   854cc:	00806e80 	call	806e8 <strlen>
   854d0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   854d4:	e0bffd17 	ldw	r2,-12(fp)
   854d8:	10c00217 	ldw	r3,8(r2)
   854dc:	e0bffc17 	ldw	r2,-16(fp)
   854e0:	1885883a 	add	r2,r3,r2
   854e4:	10bfffc4 	addi	r2,r2,-1
   854e8:	10800003 	ldbu	r2,0(r2)
   854ec:	10803fcc 	andi	r2,r2,255
   854f0:	1080201c 	xori	r2,r2,128
   854f4:	10bfe004 	addi	r2,r2,-128
   854f8:	10800bd8 	cmpnei	r2,r2,47
   854fc:	1000031e 	bne	r2,zero,8550c <alt_find_file+0x70>
    {
      len -= 1;
   85500:	e0bffc17 	ldw	r2,-16(fp)
   85504:	10bfffc4 	addi	r2,r2,-1
   85508:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8550c:	e0bffc17 	ldw	r2,-16(fp)
   85510:	1007883a 	mov	r3,r2
   85514:	e0bffe17 	ldw	r2,-8(fp)
   85518:	1885883a 	add	r2,r3,r2
   8551c:	10800003 	ldbu	r2,0(r2)
   85520:	10803fcc 	andi	r2,r2,255
   85524:	1080201c 	xori	r2,r2,128
   85528:	10bfe004 	addi	r2,r2,-128
   8552c:	10800be0 	cmpeqi	r2,r2,47
   85530:	10000a1e 	bne	r2,zero,8555c <alt_find_file+0xc0>
   85534:	e0bffc17 	ldw	r2,-16(fp)
   85538:	1007883a 	mov	r3,r2
   8553c:	e0bffe17 	ldw	r2,-8(fp)
   85540:	1885883a 	add	r2,r3,r2
   85544:	10800003 	ldbu	r2,0(r2)
   85548:	10803fcc 	andi	r2,r2,255
   8554c:	1080201c 	xori	r2,r2,128
   85550:	10bfe004 	addi	r2,r2,-128
   85554:	1004c03a 	cmpne	r2,r2,zero
   85558:	10000a1e 	bne	r2,zero,85584 <alt_find_file+0xe8>
   8555c:	e0bffd17 	ldw	r2,-12(fp)
   85560:	11000217 	ldw	r4,8(r2)
   85564:	e1bffc17 	ldw	r6,-16(fp)
   85568:	e17ffe17 	ldw	r5,-8(fp)
   8556c:	00856d80 	call	856d8 <memcmp>
   85570:	1004c03a 	cmpne	r2,r2,zero
   85574:	1000031e 	bne	r2,zero,85584 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   85578:	e0bffd17 	ldw	r2,-12(fp)
   8557c:	e0bfff15 	stw	r2,-4(fp)
   85580:	00000806 	br	855a4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   85584:	e0bffd17 	ldw	r2,-12(fp)
   85588:	10800017 	ldw	r2,0(r2)
   8558c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   85590:	00c00234 	movhi	r3,8
   85594:	18dd4204 	addi	r3,r3,29960
   85598:	e0bffd17 	ldw	r2,-12(fp)
   8559c:	10ffc91e 	bne	r2,r3,854c4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   855a0:	e03fff15 	stw	zero,-4(fp)
   855a4:	e0bfff17 	ldw	r2,-4(fp)
}
   855a8:	e037883a 	mov	sp,fp
   855ac:	dfc00117 	ldw	ra,4(sp)
   855b0:	df000017 	ldw	fp,0(sp)
   855b4:	dec00204 	addi	sp,sp,8
   855b8:	f800283a 	ret

000855bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   855bc:	defffa04 	addi	sp,sp,-24
   855c0:	dfc00515 	stw	ra,20(sp)
   855c4:	df000415 	stw	fp,16(sp)
   855c8:	dc000315 	stw	r16,12(sp)
   855cc:	df000304 	addi	fp,sp,12
   855d0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   855d4:	00bffa04 	movi	r2,-24
   855d8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   855dc:	e03ffe15 	stw	zero,-8(fp)
   855e0:	00002006 	br	85664 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   855e4:	e13ffe17 	ldw	r4,-8(fp)
   855e8:	04000234 	movhi	r16,8
   855ec:	8418c504 	addi	r16,r16,25364
   855f0:	01400304 	movi	r5,12
   855f4:	0082f780 	call	82f78 <__mulsi3>
   855f8:	1405883a 	add	r2,r2,r16
   855fc:	10800017 	ldw	r2,0(r2)
   85600:	1004c03a 	cmpne	r2,r2,zero
   85604:	1000141e 	bne	r2,zero,85658 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   85608:	e13ffe17 	ldw	r4,-8(fp)
   8560c:	04000234 	movhi	r16,8
   85610:	8418c504 	addi	r16,r16,25364
   85614:	01400304 	movi	r5,12
   85618:	0082f780 	call	82f78 <__mulsi3>
   8561c:	1407883a 	add	r3,r2,r16
   85620:	e0bfff17 	ldw	r2,-4(fp)
   85624:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   85628:	00800234 	movhi	r2,8
   8562c:	109d4604 	addi	r2,r2,29976
   85630:	10c00017 	ldw	r3,0(r2)
   85634:	e0bffe17 	ldw	r2,-8(fp)
   85638:	1880040e 	bge	r3,r2,8564c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   8563c:	00c00234 	movhi	r3,8
   85640:	18dd4604 	addi	r3,r3,29976
   85644:	e0bffe17 	ldw	r2,-8(fp)
   85648:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8564c:	e0bffe17 	ldw	r2,-8(fp)
   85650:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   85654:	00000606 	br	85670 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   85658:	e0bffe17 	ldw	r2,-8(fp)
   8565c:	10800044 	addi	r2,r2,1
   85660:	e0bffe15 	stw	r2,-8(fp)
   85664:	e0bffe17 	ldw	r2,-8(fp)
   85668:	10800810 	cmplti	r2,r2,32
   8566c:	103fdd1e 	bne	r2,zero,855e4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   85670:	e0bffd17 	ldw	r2,-12(fp)
}
   85674:	e037883a 	mov	sp,fp
   85678:	dfc00217 	ldw	ra,8(sp)
   8567c:	df000117 	ldw	fp,4(sp)
   85680:	dc000017 	ldw	r16,0(sp)
   85684:	dec00304 	addi	sp,sp,12
   85688:	f800283a 	ret

0008568c <atexit>:
   8568c:	200b883a 	mov	r5,r4
   85690:	000d883a 	mov	r6,zero
   85694:	0009883a 	mov	r4,zero
   85698:	000f883a 	mov	r7,zero
   8569c:	008574c1 	jmpi	8574c <__register_exitproc>

000856a0 <exit>:
   856a0:	defffe04 	addi	sp,sp,-8
   856a4:	000b883a 	mov	r5,zero
   856a8:	dc000015 	stw	r16,0(sp)
   856ac:	dfc00115 	stw	ra,4(sp)
   856b0:	2021883a 	mov	r16,r4
   856b4:	00858840 	call	85884 <__call_exitprocs>
   856b8:	00800234 	movhi	r2,8
   856bc:	109d3f04 	addi	r2,r2,29948
   856c0:	11000017 	ldw	r4,0(r2)
   856c4:	20800f17 	ldw	r2,60(r4)
   856c8:	10000126 	beq	r2,zero,856d0 <exit+0x30>
   856cc:	103ee83a 	callr	r2
   856d0:	8009883a 	mov	r4,r16
   856d4:	0085a740 	call	85a74 <_exit>

000856d8 <memcmp>:
   856d8:	00c000c4 	movi	r3,3
   856dc:	1980032e 	bgeu	r3,r6,856ec <memcmp+0x14>
   856e0:	2144b03a 	or	r2,r4,r5
   856e4:	10c4703a 	and	r2,r2,r3
   856e8:	10000f26 	beq	r2,zero,85728 <memcmp+0x50>
   856ec:	31ffffc4 	addi	r7,r6,-1
   856f0:	3000061e 	bne	r6,zero,8570c <memcmp+0x34>
   856f4:	00000a06 	br	85720 <memcmp+0x48>
   856f8:	39ffffc4 	addi	r7,r7,-1
   856fc:	00bfffc4 	movi	r2,-1
   85700:	21000044 	addi	r4,r4,1
   85704:	29400044 	addi	r5,r5,1
   85708:	38800526 	beq	r7,r2,85720 <memcmp+0x48>
   8570c:	20c00003 	ldbu	r3,0(r4)
   85710:	28800003 	ldbu	r2,0(r5)
   85714:	18bff826 	beq	r3,r2,856f8 <memcmp+0x20>
   85718:	1885c83a 	sub	r2,r3,r2
   8571c:	f800283a 	ret
   85720:	0005883a 	mov	r2,zero
   85724:	f800283a 	ret
   85728:	180f883a 	mov	r7,r3
   8572c:	20c00017 	ldw	r3,0(r4)
   85730:	28800017 	ldw	r2,0(r5)
   85734:	18bfed1e 	bne	r3,r2,856ec <memcmp+0x14>
   85738:	31bfff04 	addi	r6,r6,-4
   8573c:	21000104 	addi	r4,r4,4
   85740:	29400104 	addi	r5,r5,4
   85744:	39bff936 	bltu	r7,r6,8572c <memcmp+0x54>
   85748:	003fe806 	br	856ec <memcmp+0x14>

0008574c <__register_exitproc>:
   8574c:	defffa04 	addi	sp,sp,-24
   85750:	00800234 	movhi	r2,8
   85754:	109d3f04 	addi	r2,r2,29948
   85758:	dc000015 	stw	r16,0(sp)
   8575c:	14000017 	ldw	r16,0(r2)
   85760:	dd000415 	stw	r20,16(sp)
   85764:	2829883a 	mov	r20,r5
   85768:	81405217 	ldw	r5,328(r16)
   8576c:	dcc00315 	stw	r19,12(sp)
   85770:	dc800215 	stw	r18,8(sp)
   85774:	dc400115 	stw	r17,4(sp)
   85778:	dfc00515 	stw	ra,20(sp)
   8577c:	2023883a 	mov	r17,r4
   85780:	3027883a 	mov	r19,r6
   85784:	3825883a 	mov	r18,r7
   85788:	28002526 	beq	r5,zero,85820 <__register_exitproc+0xd4>
   8578c:	29000117 	ldw	r4,4(r5)
   85790:	008007c4 	movi	r2,31
   85794:	11002716 	blt	r2,r4,85834 <__register_exitproc+0xe8>
   85798:	8800101e 	bne	r17,zero,857dc <__register_exitproc+0x90>
   8579c:	2105883a 	add	r2,r4,r4
   857a0:	1085883a 	add	r2,r2,r2
   857a4:	20c00044 	addi	r3,r4,1
   857a8:	1145883a 	add	r2,r2,r5
   857ac:	0009883a 	mov	r4,zero
   857b0:	15000215 	stw	r20,8(r2)
   857b4:	28c00115 	stw	r3,4(r5)
   857b8:	2005883a 	mov	r2,r4
   857bc:	dfc00517 	ldw	ra,20(sp)
   857c0:	dd000417 	ldw	r20,16(sp)
   857c4:	dcc00317 	ldw	r19,12(sp)
   857c8:	dc800217 	ldw	r18,8(sp)
   857cc:	dc400117 	ldw	r17,4(sp)
   857d0:	dc000017 	ldw	r16,0(sp)
   857d4:	dec00604 	addi	sp,sp,24
   857d8:	f800283a 	ret
   857dc:	29802204 	addi	r6,r5,136
   857e0:	00800044 	movi	r2,1
   857e4:	110e983a 	sll	r7,r2,r4
   857e8:	30c04017 	ldw	r3,256(r6)
   857ec:	2105883a 	add	r2,r4,r4
   857f0:	1085883a 	add	r2,r2,r2
   857f4:	1185883a 	add	r2,r2,r6
   857f8:	19c6b03a 	or	r3,r3,r7
   857fc:	14802015 	stw	r18,128(r2)
   85800:	14c00015 	stw	r19,0(r2)
   85804:	00800084 	movi	r2,2
   85808:	30c04015 	stw	r3,256(r6)
   8580c:	88bfe31e 	bne	r17,r2,8579c <__register_exitproc+0x50>
   85810:	30804117 	ldw	r2,260(r6)
   85814:	11c4b03a 	or	r2,r2,r7
   85818:	30804115 	stw	r2,260(r6)
   8581c:	003fdf06 	br	8579c <__register_exitproc+0x50>
   85820:	00800274 	movhi	r2,9
   85824:	10a43304 	addi	r2,r2,-28468
   85828:	100b883a 	mov	r5,r2
   8582c:	80805215 	stw	r2,328(r16)
   85830:	003fd606 	br	8578c <__register_exitproc+0x40>
   85834:	00800034 	movhi	r2,0
   85838:	10800004 	addi	r2,r2,0
   8583c:	1000021e 	bne	r2,zero,85848 <__register_exitproc+0xfc>
   85840:	013fffc4 	movi	r4,-1
   85844:	003fdc06 	br	857b8 <__register_exitproc+0x6c>
   85848:	01006404 	movi	r4,400
   8584c:	103ee83a 	callr	r2
   85850:	1007883a 	mov	r3,r2
   85854:	103ffa26 	beq	r2,zero,85840 <__register_exitproc+0xf4>
   85858:	80805217 	ldw	r2,328(r16)
   8585c:	180b883a 	mov	r5,r3
   85860:	18000115 	stw	zero,4(r3)
   85864:	18800015 	stw	r2,0(r3)
   85868:	80c05215 	stw	r3,328(r16)
   8586c:	18006215 	stw	zero,392(r3)
   85870:	18006315 	stw	zero,396(r3)
   85874:	0009883a 	mov	r4,zero
   85878:	883fc826 	beq	r17,zero,8579c <__register_exitproc+0x50>
   8587c:	003fd706 	br	857dc <__register_exitproc+0x90>

00085880 <register_fini>:
   85880:	f800283a 	ret

00085884 <__call_exitprocs>:
   85884:	00800234 	movhi	r2,8
   85888:	109d3f04 	addi	r2,r2,29948
   8588c:	10800017 	ldw	r2,0(r2)
   85890:	defff304 	addi	sp,sp,-52
   85894:	df000b15 	stw	fp,44(sp)
   85898:	d8800115 	stw	r2,4(sp)
   8589c:	00800034 	movhi	r2,0
   858a0:	10800004 	addi	r2,r2,0
   858a4:	1005003a 	cmpeq	r2,r2,zero
   858a8:	d8800215 	stw	r2,8(sp)
   858ac:	d8800117 	ldw	r2,4(sp)
   858b0:	dd400815 	stw	r21,32(sp)
   858b4:	dd000715 	stw	r20,28(sp)
   858b8:	10805204 	addi	r2,r2,328
   858bc:	dfc00c15 	stw	ra,48(sp)
   858c0:	ddc00a15 	stw	r23,40(sp)
   858c4:	dd800915 	stw	r22,36(sp)
   858c8:	dcc00615 	stw	r19,24(sp)
   858cc:	dc800515 	stw	r18,20(sp)
   858d0:	dc400415 	stw	r17,16(sp)
   858d4:	dc000315 	stw	r16,12(sp)
   858d8:	282b883a 	mov	r21,r5
   858dc:	2039883a 	mov	fp,r4
   858e0:	d8800015 	stw	r2,0(sp)
   858e4:	2829003a 	cmpeq	r20,r5,zero
   858e8:	d8800117 	ldw	r2,4(sp)
   858ec:	14405217 	ldw	r17,328(r2)
   858f0:	88001026 	beq	r17,zero,85934 <__call_exitprocs+0xb0>
   858f4:	ddc00017 	ldw	r23,0(sp)
   858f8:	88800117 	ldw	r2,4(r17)
   858fc:	8c802204 	addi	r18,r17,136
   85900:	143fffc4 	addi	r16,r2,-1
   85904:	80000916 	blt	r16,zero,8592c <__call_exitprocs+0xa8>
   85908:	05bfffc4 	movi	r22,-1
   8590c:	a000151e 	bne	r20,zero,85964 <__call_exitprocs+0xe0>
   85910:	8409883a 	add	r4,r16,r16
   85914:	2105883a 	add	r2,r4,r4
   85918:	1485883a 	add	r2,r2,r18
   8591c:	10c02017 	ldw	r3,128(r2)
   85920:	a8c01126 	beq	r21,r3,85968 <__call_exitprocs+0xe4>
   85924:	843fffc4 	addi	r16,r16,-1
   85928:	85bff81e 	bne	r16,r22,8590c <__call_exitprocs+0x88>
   8592c:	d8800217 	ldw	r2,8(sp)
   85930:	10003126 	beq	r2,zero,859f8 <__call_exitprocs+0x174>
   85934:	dfc00c17 	ldw	ra,48(sp)
   85938:	df000b17 	ldw	fp,44(sp)
   8593c:	ddc00a17 	ldw	r23,40(sp)
   85940:	dd800917 	ldw	r22,36(sp)
   85944:	dd400817 	ldw	r21,32(sp)
   85948:	dd000717 	ldw	r20,28(sp)
   8594c:	dcc00617 	ldw	r19,24(sp)
   85950:	dc800517 	ldw	r18,20(sp)
   85954:	dc400417 	ldw	r17,16(sp)
   85958:	dc000317 	ldw	r16,12(sp)
   8595c:	dec00d04 	addi	sp,sp,52
   85960:	f800283a 	ret
   85964:	8409883a 	add	r4,r16,r16
   85968:	88c00117 	ldw	r3,4(r17)
   8596c:	2105883a 	add	r2,r4,r4
   85970:	1445883a 	add	r2,r2,r17
   85974:	18ffffc4 	addi	r3,r3,-1
   85978:	11800217 	ldw	r6,8(r2)
   8597c:	1c001526 	beq	r3,r16,859d4 <__call_exitprocs+0x150>
   85980:	10000215 	stw	zero,8(r2)
   85984:	303fe726 	beq	r6,zero,85924 <__call_exitprocs+0xa0>
   85988:	00c00044 	movi	r3,1
   8598c:	1c06983a 	sll	r3,r3,r16
   85990:	90804017 	ldw	r2,256(r18)
   85994:	8cc00117 	ldw	r19,4(r17)
   85998:	1884703a 	and	r2,r3,r2
   8599c:	10001426 	beq	r2,zero,859f0 <__call_exitprocs+0x16c>
   859a0:	90804117 	ldw	r2,260(r18)
   859a4:	1884703a 	and	r2,r3,r2
   859a8:	10000c1e 	bne	r2,zero,859dc <__call_exitprocs+0x158>
   859ac:	2105883a 	add	r2,r4,r4
   859b0:	1485883a 	add	r2,r2,r18
   859b4:	11400017 	ldw	r5,0(r2)
   859b8:	e009883a 	mov	r4,fp
   859bc:	303ee83a 	callr	r6
   859c0:	88800117 	ldw	r2,4(r17)
   859c4:	98bfc81e 	bne	r19,r2,858e8 <__call_exitprocs+0x64>
   859c8:	b8800017 	ldw	r2,0(r23)
   859cc:	147fd526 	beq	r2,r17,85924 <__call_exitprocs+0xa0>
   859d0:	003fc506 	br	858e8 <__call_exitprocs+0x64>
   859d4:	8c000115 	stw	r16,4(r17)
   859d8:	003fea06 	br	85984 <__call_exitprocs+0x100>
   859dc:	2105883a 	add	r2,r4,r4
   859e0:	1485883a 	add	r2,r2,r18
   859e4:	11000017 	ldw	r4,0(r2)
   859e8:	303ee83a 	callr	r6
   859ec:	003ff406 	br	859c0 <__call_exitprocs+0x13c>
   859f0:	303ee83a 	callr	r6
   859f4:	003ff206 	br	859c0 <__call_exitprocs+0x13c>
   859f8:	88800117 	ldw	r2,4(r17)
   859fc:	1000081e 	bne	r2,zero,85a20 <__call_exitprocs+0x19c>
   85a00:	89000017 	ldw	r4,0(r17)
   85a04:	20000726 	beq	r4,zero,85a24 <__call_exitprocs+0x1a0>
   85a08:	b9000015 	stw	r4,0(r23)
   85a0c:	8809883a 	mov	r4,r17
   85a10:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   85a14:	bc400017 	ldw	r17,0(r23)
   85a18:	883fb71e 	bne	r17,zero,858f8 <__call_exitprocs+0x74>
   85a1c:	003fc506 	br	85934 <__call_exitprocs+0xb0>
   85a20:	89000017 	ldw	r4,0(r17)
   85a24:	882f883a 	mov	r23,r17
   85a28:	2023883a 	mov	r17,r4
   85a2c:	883fb21e 	bne	r17,zero,858f8 <__call_exitprocs+0x74>
   85a30:	003fc006 	br	85934 <__call_exitprocs+0xb0>

00085a34 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   85a34:	defffd04 	addi	sp,sp,-12
   85a38:	df000215 	stw	fp,8(sp)
   85a3c:	df000204 	addi	fp,sp,8
   85a40:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   85a44:	e0bfff17 	ldw	r2,-4(fp)
   85a48:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   85a4c:	e0bffe17 	ldw	r2,-8(fp)
   85a50:	1005003a 	cmpeq	r2,r2,zero
   85a54:	1000021e 	bne	r2,zero,85a60 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   85a58:	002af070 	cmpltui	zero,zero,43969
   85a5c:	00000106 	br	85a64 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   85a60:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   85a64:	e037883a 	mov	sp,fp
   85a68:	df000017 	ldw	fp,0(sp)
   85a6c:	dec00104 	addi	sp,sp,4
   85a70:	f800283a 	ret

00085a74 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   85a74:	defffd04 	addi	sp,sp,-12
   85a78:	dfc00215 	stw	ra,8(sp)
   85a7c:	df000115 	stw	fp,4(sp)
   85a80:	df000104 	addi	fp,sp,4
   85a84:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   85a88:	e13fff17 	ldw	r4,-4(fp)
   85a8c:	0085a340 	call	85a34 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   85a90:	003fff06 	br	85a90 <_exit+0x1c>
   85a94:	00085880 	call	8588 <__alt_mem_sram_0-0x77a78>
