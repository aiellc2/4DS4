
experiment3.elf:     file format elf32-littlenios2
experiment3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00005a94 memsz 0x00005a94 flags r-x
    LOAD off    0x00006ab4 vaddr 0x00085ab4 paddr 0x00087508 align 2**12
         filesz 0x00001a54 memsz 0x00001a54 flags rw-
    LOAD off    0x00008f5c vaddr 0x00088f5c paddr 0x00088f5c align 2**12
         filesz 0x00000000 memsz 0x00000330 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000058b4  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00085a68  00085a68  00006a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a54  00085ab4  00087508  00006ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000330  00088f5c  00088f5c  00008f5c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00008508  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  00008530  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d61  00000000  00000000  00008e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019cdd  00000000  00000000  00009b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004fa2  00000000  00000000  00023866  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cb0e  00000000  00000000  00028808  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001014  00000000  00000000  00035318  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000173d  00000000  00000000  0003632c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e6f  00000000  00000000  00037a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003b8d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003e267  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003e26a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003e26f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003e270  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003e271  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003e27c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003e287  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0003e292  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000040  00000000  00000000  0003e29d  2**0
                  CONTENTS, READONLY
 26 .jdi          00004821  00000000  00000000  0003e2dd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0002f9d1  00000000  00000000  00042afe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
00085a68 l    d  .rodata	00000000 .rodata
00085ab4 l    d  .rwdata	00000000 .rwdata
00088f5c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 experiment3.c
00088f60 l     O .bss	00000007 scale.2254
00088f67 l     O .bss	00000007 C_p1_p1.2253
00088f6e l     O .bss	00000007 C_p1_0.2252
00088f75 l     O .bss	00000007 C_p1_m1.2251
00088f7c l     O .bss	00000007 C_0_p1.2250
00088f83 l     O .bss	00000007 C_0_0.2249
00088f8a l     O .bss	00000007 C_0_m1.2248
00088f91 l     O .bss	00000007 C_m1_p1.2247
00088f98 l     O .bss	00000007 C_m1_0.2246
00088f9f l     O .bss	00000007 C_m1_m1.2245
000874c4 l     O .rwdata	00000004 new_config.2240
00088fa8 l     O .bss	00000004 config.2239
000874c8 l     O .rwdata	00000004 run.2238
000874cc l     O .rwdata	00000004 exposure.2237
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00085ab4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00081f3c l     F .text	00000058 std
00082048 l     F .text	00000008 __fp_lock
00082050 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00083080 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000830e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000831e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000834c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000835a8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00083708 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00083938 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000874fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00083bf0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00086464 l     O .rwdata	00001060 jtag_uart_0
00083cc8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00083f08 l     F .text	00000228 altera_avalon_jtag_uart_irq
00084130 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000849d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00084de0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00084f30 l     F .text	000000f8 alt_file_locked
000851b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00085850 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00085a04 l     F .text	00000040 alt_sim_halt
00082de8 g     F .text	00000070 _isatty_r
00083768 g     F .text	0000006c alt_main
00080604 g     F .text	000000a0 _puts_r
00088ffc g     O .bss	00000100 alt_irq
00082e58 g     F .text	00000078 _lseek_r
00087508 g       *ABS*	00000000 __flash_rwdata_start
0008928c g       *ABS*	00000000 __alt_heap_start
00082a24 g     F .text	00000068 __sseek
00081fa4 g     F .text	000000a4 __sinit
000820a4 g     F .text	0000009c __sfmoreglue
000837f4 g     F .text	00000020 __malloc_unlock
00105040 g       *ABS*	00000000 __alt_mem_Nios_LCD_Camera_Component_0_Camera
0008148c g     F .text	000000e0 memmove
00082094 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00082d74 g     F .text	00000074 _fstat_r
00088fb8 g     O .bss	00000004 errno
00088fc4 g     O .bss	00000004 alt_argv
0008f4c4 g       *ABS*	00000000 _gp
000862e4 g     O .rwdata	00000180 alt_fd_list
000853d8 g     F .text	00000094 alt_find_dev
000813ec g     F .text	000000a0 memcpy
00082088 g     F .text	0000000c _cleanup_r
00084eb8 g     F .text	00000078 alt_io_redirect
00088f5c g     O .bss	00000004 coeff_id
00085a68 g       *ABS*	00000000 __DTOR_END__
000806a4 g     F .text	00000014 puts
00084348 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00083404 g     F .text	000000c4 isatty
00088fac g     O .bss	00000004 __malloc_top_pad
0008072c g     F .text	0000049c __sfvwrite_r
00081b60 g     F .text	00000070 _sbrk_r
00082ed0 g     F .text	00000078 _read_r
000874f0 g     O .rwdata	00000004 alt_max_fd
00082c50 g     F .text	00000110 _fclose_r
00081f08 g     F .text	00000034 fflush
00088fb0 g     O .bss	00000004 __malloc_max_sbrked_mem
00083244 g     F .text	000001c0 alt_irq_register
00100000 g       *ABS*	00000000 __alt_mem_Nios_LCD_Camera_Component_0_Console
00083614 g     F .text	000000f4 lseek
000874d4 g     O .rwdata	00000004 _global_impure_ptr
0008156c g     F .text	000005f4 _realloc_r
0008928c g       *ABS*	00000000 __bss_end
00084ce8 g     F .text	000000f8 alt_iic_isr_register
000852ac g     F .text	0000010c alt_tick
00082070 g     F .text	00000018 __fp_lock_all
00084ca0 g     F .text	00000048 alt_ic_irq_enabled
00085214 g     F .text	00000098 alt_alarm_stop
00088fbc g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
000862bc g     O .rwdata	00000028 alt_dev_null
00084900 g     F .text	0000001c alt_dcache_flush_all
00087508 g       *ABS*	00000000 __ram_rwdata_end
000874e8 g     O .rwdata	00000008 alt_dev_list
00083acc g     F .text	00000124 write
00085ab4 g       *ABS*	00000000 __ram_rodata_end
0008310c g     F .text	000000d8 fstat
0008928c g       *ABS*	00000000 end
00083e48 g     F .text	000000c0 altera_avalon_jtag_uart_init
00085a64 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0008456c g     F .text	00000240 altera_avalon_jtag_uart_write
00081f94 g     F .text	00000004 __sfp_lock_acquire
00081308 g     F .text	000000e4 memchr
000801f0 g     F .text	00000364 TouchPanel_int
0008235c g     F .text	00000314 _free_r
00085854 g     F .text	000001b0 __call_exitprocs
000874dc g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
00088fcc g     O .bss	00000004 _alt_tick_rate
00088fd0 g     O .bss	00000004 _alt_nticks
00083814 g     F .text	00000124 read
00083c84 g     F .text	00000044 alt_sys_init
0008571c g     F .text	00000134 __register_exitproc
000841e0 g     F .text	00000074 altera_avalon_jtag_uart_close
00082f48 g     F .text	00000038 __mulsi3
00085ab4 g       *ABS*	00000000 __ram_rwdata_start
00085a68 g       *ABS*	00000000 __ram_rodata_start
00088fd4 g     O .bss	00000028 __malloc_current_mallinfo
00083d00 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008558c g     F .text	000000d0 alt_get_fd
00082be0 g     F .text	00000070 _close_r
000856a8 g     F .text	00000074 memcmp
00083db0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0008928c g       *ABS*	00000000 __alt_stack_base
00083df8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00081bd0 g     F .text	0000013c __swsetup_r
00082140 g     F .text	000000f0 __sfp
00085eb4 g     O .rwdata	00000408 __malloc_av_
00081fa0 g     F .text	00000004 __sinit_lock_release
00082b08 g     F .text	00000060 __sread
0008546c g     F .text	00000120 alt_find_file
0008491c g     F .text	000000b4 alt_dev_llist_insert
000837d4 g     F .text	00000020 __malloc_lock
00083a10 g     F .text	000000bc sbrk
00081d0c g     F .text	000001fc _fflush_r
00088f5c g       *ABS*	00000000 __bss_start
00082984 g     F .text	00000098 memset
00080554 g     F .text	000000b0 main
00088fc8 g     O .bss	00000004 alt_envp
00088fb4 g     O .bss	00000004 __malloc_max_total_mem
00083d58 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00082a1c g     F .text	00000008 __sclose
00102000 g       *ABS*	00000000 __alt_mem_Nios_LCD_Camera_Component_0_Imageline
00100000 g       *ABS*	00000000 __alt_heap_limit
00082d60 g     F .text	00000014 fclose
000890fc g     O .bss	00000190 _atexit0
00080bc8 g     F .text	00000740 _malloc_r
000874f4 g     O .rwdata	00000004 alt_errno
00082738 g     F .text	000000b8 _fwalk
00082230 g     F .text	0000012c _malloc_trim_r
00085a68 g       *ABS*	00000000 __CTOR_END__
00085a68 g       *ABS*	00000000 __flash_rodata_start
00085a68 g       *ABS*	00000000 __DTOR_LIST__
00080000 g       *ABS*	00000000 __alt_mem_sram_0
00083c50 g     F .text	00000034 alt_irq_init
00083998 g     F .text	00000078 alt_release_fd
0008565c g     F .text	00000014 atexit
00082b68 g     F .text	00000078 _write_r
000874d0 g     O .rwdata	00000004 _impure_ptr
00088fc0 g     O .bss	00000004 alt_argc
00084a94 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00082058 g     F .text	00000018 __fp_unlock_all
000874e0 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00084b14 g     F .text	00000050 alt_ic_isr_register
00087508 g       *ABS*	00000000 _edata
0008928c g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
00084254 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00084c00 g     F .text	000000a0 alt_ic_irq_disable
00082a8c g     F .text	0000007c __swrite
000874d8 g     O .rwdata	00000004 __malloc_trim_threshold
000853b8 g     F .text	00000020 altera_nios2_qsys_irq_init
00085670 g     F .text	00000038 exit
00082670 g     F .text	000000c8 _fwalk_reent
00105000 g       *ABS*	00000000 __alt_mem_Nios_LCD_Camera_Component_0_Touchpanel
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00081f98 g     F .text	00000004 __sfp_lock_release
00085a44 g     F .text	00000020 _exit
000847ac g     F .text	00000154 alt_alarm_start
000827f0 g     F .text	00000194 __smakebuf_r
000806b8 g     F .text	00000074 strlen
00085028 g     F .text	0000018c open
00084af8 g     F .text	0000001c alt_icache_flush_all
000874f8 g     O .rwdata	00000004 alt_priority_mask
00084b64 g     F .text	0000009c alt_ic_irq_enable
00087500 g     O .rwdata	00000008 alt_alarm_list
00084a30 g     F .text	00000064 _do_ctors
00082f80 g     F .text	00000100 close
00083528 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00081f9c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18e3ff04 	addi	r3,r3,-28676
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18e3ff04 	addi	r3,r3,-28676
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   801c0:	d6bd3114 	ori	gp,gp,62660
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801c8:	10a3d714 	ori	r2,r2,36700

    movhi r3, %hi(__bss_end)
   801cc:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801d0:	18e4a314 	ori	r3,r3,37516

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	00835280 	call	83528 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	00837680 	call	83768 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <TouchPanel_int>:
#include "sys/alt_stdio.h"
#include "priv/alt_busy_sleep.h"
#include "alt_types.h"

int coeff_id=0;
void TouchPanel_int(void) {
   801f0:	defffb04 	addi	sp,sp,-20
   801f4:	df000415 	stw	fp,16(sp)
   801f8:	df000404 	addi	fp,sp,16
    static int exposure = 0x0400, run = 1;
    static int config = 0;
	static int new_config = 4;
    int TP_val, x_val, y_val, key = 6;
   801fc:	00800184 	movi	r2,6
   80200:	e0bffc15 	stw	r2,-16(fp)

    static alt_8 C_m1_m1[7], C_m1_0[7], C_m1_p1[7], C_0_m1[7], C_0_0[7], C_0_p1[7], C_p1_m1[7], C_p1_0[7], C_p1_p1[7], scale[7];

    scale[0]=2;
   80204:	00800084 	movi	r2,2
   80208:	d0a6a705 	stb	r2,-25956(gp)


    TP_val = IORD(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 0);
   8020c:	00800434 	movhi	r2,16
   80210:	10940004 	addi	r2,r2,20480
   80214:	10800037 	ldwio	r2,0(r2)
   80218:	e0bfff15 	stw	r2,-4(fp)
    x_val = (TP_val >> 20) & 0xFF; y_val = (TP_val >> 4) & 0xFF;
   8021c:	e0bfff17 	ldw	r2,-4(fp)
   80220:	1005d53a 	srai	r2,r2,20
   80224:	10803fcc 	andi	r2,r2,255
   80228:	e0bffe15 	stw	r2,-8(fp)
   8022c:	e0bfff17 	ldw	r2,-4(fp)
   80230:	1005d13a 	srai	r2,r2,4
   80234:	10803fcc 	andi	r2,r2,255
   80238:	e0bffd15 	stw	r2,-12(fp)

    if (((TP_val >> 31) & 0x1) && (x_val >= 0xC9) && (x_val <= 0xF1)) {
   8023c:	e0bfff17 	ldw	r2,-4(fp)
   80240:	1005d7fa 	srai	r2,r2,31
   80244:	1080004c 	andi	r2,r2,1
   80248:	1080005c 	xori	r2,r2,1
   8024c:	10803fcc 	andi	r2,r2,255
   80250:	1004c03a 	cmpne	r2,r2,zero
   80254:	1000481e 	bne	r2,zero,80378 <TouchPanel_int+0x188>
   80258:	e0bffe17 	ldw	r2,-8(fp)
   8025c:	10803250 	cmplti	r2,r2,201
   80260:	1000451e 	bne	r2,zero,80378 <TouchPanel_int+0x188>
   80264:	e0bffe17 	ldw	r2,-8(fp)
   80268:	10803c88 	cmpgei	r2,r2,242
   8026c:	1000421e 	bne	r2,zero,80378 <TouchPanel_int+0x188>
        if ((y_val >= 0x17) && (y_val <= 0x33)) { // Key 0
   80270:	e0bffd17 	ldw	r2,-12(fp)
   80274:	108005d0 	cmplti	r2,r2,23
   80278:	1000071e 	bne	r2,zero,80298 <TouchPanel_int+0xa8>
   8027c:	e0bffd17 	ldw	r2,-12(fp)
   80280:	10800d08 	cmpgei	r2,r2,52
   80284:	1000041e 	bne	r2,zero,80298 <TouchPanel_int+0xa8>
            key = 0;
   80288:	e03ffc15 	stw	zero,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x1);
   8028c:	00c00434 	movhi	r3,16
   80290:	00800044 	movi	r2,1
   80294:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0x3D) && (y_val <= 0x58)) { // Key 1
   80298:	e0bffd17 	ldw	r2,-12(fp)
   8029c:	10800f50 	cmplti	r2,r2,61
   802a0:	1000081e 	bne	r2,zero,802c4 <TouchPanel_int+0xd4>
   802a4:	e0bffd17 	ldw	r2,-12(fp)
   802a8:	10801648 	cmpgei	r2,r2,89
   802ac:	1000051e 	bne	r2,zero,802c4 <TouchPanel_int+0xd4>
            key = 1;
   802b0:	00800044 	movi	r2,1
   802b4:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x2);
   802b8:	00c00434 	movhi	r3,16
   802bc:	00800084 	movi	r2,2
   802c0:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0x62) && (y_val <= 0x7E)) { // Key 2
   802c4:	e0bffd17 	ldw	r2,-12(fp)
   802c8:	10801890 	cmplti	r2,r2,98
   802cc:	1000081e 	bne	r2,zero,802f0 <TouchPanel_int+0x100>
   802d0:	e0bffd17 	ldw	r2,-12(fp)
   802d4:	10801fc8 	cmpgei	r2,r2,127
   802d8:	1000051e 	bne	r2,zero,802f0 <TouchPanel_int+0x100>
            key = 2;
   802dc:	00800084 	movi	r2,2
   802e0:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x4);
   802e4:	00c00434 	movhi	r3,16
   802e8:	00800104 	movi	r2,4
   802ec:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0x88) && (y_val <= 0xA4)) { // Key 3
   802f0:	e0bffd17 	ldw	r2,-12(fp)
   802f4:	10802210 	cmplti	r2,r2,136
   802f8:	1000081e 	bne	r2,zero,8031c <TouchPanel_int+0x12c>
   802fc:	e0bffd17 	ldw	r2,-12(fp)
   80300:	10802948 	cmpgei	r2,r2,165
   80304:	1000051e 	bne	r2,zero,8031c <TouchPanel_int+0x12c>
            key = 3;
   80308:	008000c4 	movi	r2,3
   8030c:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x8);
   80310:	00c00434 	movhi	r3,16
   80314:	00800204 	movi	r2,8
   80318:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0xAE) && (y_val <= 0xC9)) { // Key 4
   8031c:	e0bffd17 	ldw	r2,-12(fp)
   80320:	10802b90 	cmplti	r2,r2,174
   80324:	1000081e 	bne	r2,zero,80348 <TouchPanel_int+0x158>
   80328:	e0bffd17 	ldw	r2,-12(fp)
   8032c:	10803288 	cmpgei	r2,r2,202
   80330:	1000051e 	bne	r2,zero,80348 <TouchPanel_int+0x158>
            key = 4;
   80334:	00800104 	movi	r2,4
   80338:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x10);
   8033c:	00c00434 	movhi	r3,16
   80340:	00800404 	movi	r2,16
   80344:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0xD3) && (y_val <= 0xEF)) { // Key 5
   80348:	e0bffd17 	ldw	r2,-12(fp)
   8034c:	108034d0 	cmplti	r2,r2,211
   80350:	10000b1e 	bne	r2,zero,80380 <TouchPanel_int+0x190>
   80354:	e0bffd17 	ldw	r2,-12(fp)
   80358:	10803c08 	cmpgei	r2,r2,240
   8035c:	1000081e 	bne	r2,zero,80380 <TouchPanel_int+0x190>
            key = 5;
   80360:	00800144 	movi	r2,5
   80364:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x20);
   80368:	00c00434 	movhi	r3,16
   8036c:	00800804 	movi	r2,32
   80370:	18800035 	stwio	r2,0(r3)


    TP_val = IORD(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 0);
    x_val = (TP_val >> 20) & 0xFF; y_val = (TP_val >> 4) & 0xFF;

    if (((TP_val >> 31) & 0x1) && (x_val >= 0xC9) && (x_val <= 0xF1)) {
   80374:	00000206 	br	80380 <TouchPanel_int+0x190>
        }
        if ((y_val >= 0xD3) && (y_val <= 0xEF)) { // Key 5
            key = 5;
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x20);
        }
    } else IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x0);
   80378:	00800434 	movhi	r2,16
   8037c:	10000035 	stwio	zero,0(r2)
    
    if (IORD(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 2) & 0x2) { // posedge
   80380:	00800434 	movhi	r2,16
   80384:	10940204 	addi	r2,r2,20488
   80388:	10800037 	ldwio	r2,0(r2)
   8038c:	1080008c 	andi	r2,r2,2
   80390:	1005003a 	cmpeq	r2,r2,zero
   80394:	1000621e 	bne	r2,zero,80520 <TouchPanel_int+0x330>
        switch (key) {
   80398:	e0bffc17 	ldw	r2,-16(fp)
   8039c:	108001a8 	cmpgeui	r2,r2,6
   803a0:	10005f1e 	bne	r2,zero,80520 <TouchPanel_int+0x330>
   803a4:	e0bffc17 	ldw	r2,-16(fp)
   803a8:	1085883a 	add	r2,r2,r2
   803ac:	1087883a 	add	r3,r2,r2
   803b0:	00800234 	movhi	r2,8
   803b4:	1080f104 	addi	r2,r2,964
   803b8:	1885883a 	add	r2,r3,r2
   803bc:	10800017 	ldw	r2,0(r2)
   803c0:	1000683a 	jmp	r2
   803c4:	000803dc 	xori	zero,zero,8207
   803c8:	0008041c 	xori	zero,zero,8208
   803cc:	0008044c 	andi	zero,zero,8209
   803d0:	00080460 	cmpeqi	zero,zero,8209
   803d4:	000804ac 	andhi	zero,zero,8210
   803d8:	000804e8 	cmpgeui	zero,zero,8211
            case 0 : 
                if (run == 1) {
   803dc:	d0a00117 	ldw	r2,-32764(gp)
   803e0:	10800058 	cmpnei	r2,r2,1
   803e4:	1000061e 	bne	r2,zero,80400 <TouchPanel_int+0x210>
                    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x8);
   803e8:	00c00434 	movhi	r3,16
   803ec:	18d41104 	addi	r3,r3,20548
   803f0:	00800204 	movi	r2,8
   803f4:	18800035 	stwio	r2,0(r3)
                    run = 0;
   803f8:	d0200115 	stw	zero,-32764(gp)
   803fc:	00004806 	br	80520 <TouchPanel_int+0x330>
                } else {
                    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x4);
   80400:	00800434 	movhi	r2,16
   80404:	10941104 	addi	r2,r2,20548
   80408:	00c00104 	movi	r3,4
   8040c:	10c00035 	stwio	r3,0(r2)
                    run = 1;
   80410:	00800044 	movi	r2,1
   80414:	d0a00115 	stw	r2,-32764(gp)
                }
                break;
   80418:	00004106 	br	80520 <TouchPanel_int+0x330>
            case 1 : 
                config++; if (config == 4) config = 0;
   8041c:	d0a6b917 	ldw	r2,-25884(gp)
   80420:	10800044 	addi	r2,r2,1
   80424:	d0a6b915 	stw	r2,-25884(gp)
   80428:	d0a6b917 	ldw	r2,-25884(gp)
   8042c:	10800118 	cmpnei	r2,r2,4
   80430:	1000011e 	bne	r2,zero,80438 <TouchPanel_int+0x248>
   80434:	d026b915 	stw	zero,-25884(gp)
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 4, config);
   80438:	d0e6b917 	ldw	r3,-25884(gp)
   8043c:	00800434 	movhi	r2,16
   80440:	10880404 	addi	r2,r2,8208
   80444:	10c00035 	stwio	r3,0(r2)
                break;
   80448:	00003506 	br	80520 <TouchPanel_int+0x330>
            case 2 : 
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 4, 4);
   8044c:	00c00434 	movhi	r3,16
   80450:	18c80404 	addi	r3,r3,8208
   80454:	00800104 	movi	r2,4
   80458:	18800035 	stwio	r2,0(r3)
                break;
   8045c:	00003006 	br	80520 <TouchPanel_int+0x330>
            case 3 :
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 4, 5);
   80460:	00c00434 	movhi	r3,16
   80464:	18c80404 	addi	r3,r3,8208
   80468:	00800144 	movi	r2,5
   8046c:	18800035 	stwio	r2,0(r3)
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 5, scale[0]);
   80470:	d0a6a703 	ldbu	r2,-25956(gp)
   80474:	10c03fcc 	andi	r3,r2,255
   80478:	18c0201c 	xori	r3,r3,128
   8047c:	18ffe004 	addi	r3,r3,-128
   80480:	00800434 	movhi	r2,16
   80484:	10880504 	addi	r2,r2,8212
   80488:	10c00035 	stwio	r3,0(r2)
                coeff_id ++;
   8048c:	d0a6a617 	ldw	r2,-25960(gp)
   80490:	10800044 	addi	r2,r2,1
   80494:	d0a6a615 	stw	r2,-25960(gp)
                if(coeff_id==7)coeff_id=0;
   80498:	d0a6a617 	ldw	r2,-25960(gp)
   8049c:	108001d8 	cmpnei	r2,r2,7
   804a0:	10001f1e 	bne	r2,zero,80520 <TouchPanel_int+0x330>
   804a4:	d026a615 	stw	zero,-25960(gp)
                break;
   804a8:	00001d06 	br	80520 <TouchPanel_int+0x330>
            case 4 : 
                if (exposure <= 0xFEFF) exposure += 0x0100;
   804ac:	d0e00217 	ldw	r3,-32760(gp)
   804b0:	00bfbfd4 	movui	r2,65279
   804b4:	10c00316 	blt	r2,r3,804c4 <TouchPanel_int+0x2d4>
   804b8:	d0a00217 	ldw	r2,-32760(gp)
   804bc:	10804004 	addi	r2,r2,256
   804c0:	d0a00215 	stw	r2,-32760(gp)
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 0, exposure);
   804c4:	d0e00217 	ldw	r3,-32760(gp)
   804c8:	00800434 	movhi	r2,16
   804cc:	10941004 	addi	r2,r2,20544
   804d0:	10c00035 	stwio	r3,0(r2)
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x2);
   804d4:	00c00434 	movhi	r3,16
   804d8:	18d41104 	addi	r3,r3,20548
   804dc:	00800084 	movi	r2,2
   804e0:	18800035 	stwio	r2,0(r3)
                break;                              
   804e4:	00000e06 	br	80520 <TouchPanel_int+0x330>
            case 5 : 
                if (exposure >= 0x0100) exposure -= 0x0100;
   804e8:	d0a00217 	ldw	r2,-32760(gp)
   804ec:	10804010 	cmplti	r2,r2,256
   804f0:	1000031e 	bne	r2,zero,80500 <TouchPanel_int+0x310>
   804f4:	d0a00217 	ldw	r2,-32760(gp)
   804f8:	10bfc004 	addi	r2,r2,-256
   804fc:	d0a00215 	stw	r2,-32760(gp)
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 0, exposure);
   80500:	d0e00217 	ldw	r3,-32760(gp)
   80504:	00800434 	movhi	r2,16
   80508:	10941004 	addi	r2,r2,20544
   8050c:	10c00035 	stwio	r3,0(r2)
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x2);
   80510:	00c00434 	movhi	r3,16
   80514:	18d41104 	addi	r3,r3,20548
   80518:	00800084 	movi	r2,2
   8051c:	18800035 	stwio	r2,0(r3)
                break;
        }
    }
    
    TP_val = IORD(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 2);
   80520:	00800434 	movhi	r2,16
   80524:	10940204 	addi	r2,r2,20488
   80528:	10800037 	ldwio	r2,0(r2)
   8052c:	e0bfff15 	stw	r2,-4(fp)
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 2, TP_val & 0x30);
   80530:	e0bfff17 	ldw	r2,-4(fp)
   80534:	10c00c0c 	andi	r3,r2,48
   80538:	00800434 	movhi	r2,16
   8053c:	10940204 	addi	r2,r2,20488
   80540:	10c00035 	stwio	r3,0(r2)
}
   80544:	e037883a 	mov	sp,fp
   80548:	df000017 	ldw	fp,0(sp)
   8054c:	dec00104 	addi	sp,sp,4
   80550:	f800283a 	ret

00080554 <main>:

int main() 
{
   80554:	defffe04 	addi	sp,sp,-8
   80558:	dfc00115 	stw	ra,4(sp)
   8055c:	df000015 	stw	fp,0(sp)
   80560:	d839883a 	mov	fp,sp
    alt_irq_register(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_IRQ, NULL, (void *)TouchPanel_int);
   80564:	01000044 	movi	r4,1
   80568:	000b883a 	mov	r5,zero
   8056c:	01800234 	movhi	r6,8
   80570:	31807c04 	addi	r6,r6,496
   80574:	00832440 	call	83244 <alt_irq_register>

    printf("Experiment 3!\n");
   80578:	01000234 	movhi	r4,8
   8057c:	21169a04 	addi	r4,r4,23144
   80580:	00806a40 	call	806a4 <puts>

    // initialize the touch panel
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 2, 0x0);
   80584:	00800434 	movhi	r2,16
   80588:	10940204 	addi	r2,r2,20488
   8058c:	10000035 	stwio	zero,0(r2)
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 1, 0x400000);
   80590:	00c00434 	movhi	r3,16
   80594:	18d40104 	addi	r3,r3,20484
   80598:	00801034 	movhi	r2,64
   8059c:	18800035 	stwio	r2,0(r3)

    // initialize the camera
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 0, 0x0400);
   805a0:	00c00434 	movhi	r3,16
   805a4:	18d41004 	addi	r3,r3,20544
   805a8:	00810004 	movi	r2,1024
   805ac:	18800035 	stwio	r2,0(r3)
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x2);
   805b0:	00c00434 	movhi	r3,16
   805b4:	18d41104 	addi	r3,r3,20548
   805b8:	00800084 	movi	r2,2
   805bc:	18800035 	stwio	r2,0(r3)
    while ((IORD(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1) & 0x1) == 0);
   805c0:	00800434 	movhi	r2,16
   805c4:	10941104 	addi	r2,r2,20548
   805c8:	10800037 	ldwio	r2,0(r2)
   805cc:	1080004c 	andi	r2,r2,1
   805d0:	1005003a 	cmpeq	r2,r2,zero
   805d4:	103ffa1e 	bne	r2,zero,805c0 <main+0x6c>
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x4);
   805d8:	00c00434 	movhi	r3,16
   805dc:	18d41104 	addi	r3,r3,20548
   805e0:	00800104 	movi	r2,4
   805e4:	18800035 	stwio	r2,0(r3)

    // initialize the buttons
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 1, 0x0);
   805e8:	00800434 	movhi	r2,16
   805ec:	10800104 	addi	r2,r2,4
   805f0:	10000035 	stwio	zero,0(r2)
    
    // initialize the filter pipe
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 4, 0);
   805f4:	00800434 	movhi	r2,16
   805f8:	10880404 	addi	r2,r2,8208
   805fc:	10000035 	stwio	zero,0(r2)

    while (1);
   80600:	003fff06 	br	80600 <main+0xac>

00080604 <_puts_r>:
   80604:	defff604 	addi	sp,sp,-40
   80608:	dc400715 	stw	r17,28(sp)
   8060c:	2023883a 	mov	r17,r4
   80610:	2809883a 	mov	r4,r5
   80614:	dfc00915 	stw	ra,36(sp)
   80618:	dcc00815 	stw	r19,32(sp)
   8061c:	2827883a 	mov	r19,r5
   80620:	00806b80 	call	806b8 <strlen>
   80624:	89400217 	ldw	r5,8(r17)
   80628:	00c00234 	movhi	r3,8
   8062c:	18d69e04 	addi	r3,r3,23160
   80630:	01c00044 	movi	r7,1
   80634:	12000044 	addi	r8,r2,1
   80638:	d8c00515 	stw	r3,20(sp)
   8063c:	d9c00615 	stw	r7,24(sp)
   80640:	d8c00304 	addi	r3,sp,12
   80644:	01c00084 	movi	r7,2
   80648:	8809883a 	mov	r4,r17
   8064c:	d80d883a 	mov	r6,sp
   80650:	d8c00015 	stw	r3,0(sp)
   80654:	dcc00315 	stw	r19,12(sp)
   80658:	da000215 	stw	r8,8(sp)
   8065c:	d9c00115 	stw	r7,4(sp)
   80660:	d8800415 	stw	r2,16(sp)
   80664:	008072c0 	call	8072c <__sfvwrite_r>
   80668:	00ffffc4 	movi	r3,-1
   8066c:	10000626 	beq	r2,zero,80688 <_puts_r+0x84>
   80670:	1805883a 	mov	r2,r3
   80674:	dfc00917 	ldw	ra,36(sp)
   80678:	dcc00817 	ldw	r19,32(sp)
   8067c:	dc400717 	ldw	r17,28(sp)
   80680:	dec00a04 	addi	sp,sp,40
   80684:	f800283a 	ret
   80688:	00c00284 	movi	r3,10
   8068c:	1805883a 	mov	r2,r3
   80690:	dfc00917 	ldw	ra,36(sp)
   80694:	dcc00817 	ldw	r19,32(sp)
   80698:	dc400717 	ldw	r17,28(sp)
   8069c:	dec00a04 	addi	sp,sp,40
   806a0:	f800283a 	ret

000806a4 <puts>:
   806a4:	00800234 	movhi	r2,8
   806a8:	109d3404 	addi	r2,r2,29904
   806ac:	200b883a 	mov	r5,r4
   806b0:	11000017 	ldw	r4,0(r2)
   806b4:	00806041 	jmpi	80604 <_puts_r>

000806b8 <strlen>:
   806b8:	208000cc 	andi	r2,r4,3
   806bc:	2011883a 	mov	r8,r4
   806c0:	1000161e 	bne	r2,zero,8071c <strlen+0x64>
   806c4:	20c00017 	ldw	r3,0(r4)
   806c8:	017fbff4 	movhi	r5,65279
   806cc:	297fbfc4 	addi	r5,r5,-257
   806d0:	01e02074 	movhi	r7,32897
   806d4:	39e02004 	addi	r7,r7,-32640
   806d8:	1945883a 	add	r2,r3,r5
   806dc:	11c4703a 	and	r2,r2,r7
   806e0:	00c6303a 	nor	r3,zero,r3
   806e4:	1886703a 	and	r3,r3,r2
   806e8:	18000c1e 	bne	r3,zero,8071c <strlen+0x64>
   806ec:	280d883a 	mov	r6,r5
   806f0:	380b883a 	mov	r5,r7
   806f4:	21000104 	addi	r4,r4,4
   806f8:	20800017 	ldw	r2,0(r4)
   806fc:	1187883a 	add	r3,r2,r6
   80700:	1946703a 	and	r3,r3,r5
   80704:	0084303a 	nor	r2,zero,r2
   80708:	10c4703a 	and	r2,r2,r3
   8070c:	103ff926 	beq	r2,zero,806f4 <strlen+0x3c>
   80710:	20800007 	ldb	r2,0(r4)
   80714:	10000326 	beq	r2,zero,80724 <strlen+0x6c>
   80718:	21000044 	addi	r4,r4,1
   8071c:	20800007 	ldb	r2,0(r4)
   80720:	103ffd1e 	bne	r2,zero,80718 <strlen+0x60>
   80724:	2205c83a 	sub	r2,r4,r8
   80728:	f800283a 	ret

0008072c <__sfvwrite_r>:
   8072c:	30800217 	ldw	r2,8(r6)
   80730:	defff504 	addi	sp,sp,-44
   80734:	df000915 	stw	fp,36(sp)
   80738:	dd800715 	stw	r22,28(sp)
   8073c:	dc800315 	stw	r18,12(sp)
   80740:	dfc00a15 	stw	ra,40(sp)
   80744:	ddc00815 	stw	r23,32(sp)
   80748:	dd400615 	stw	r21,24(sp)
   8074c:	dd000515 	stw	r20,20(sp)
   80750:	dcc00415 	stw	r19,16(sp)
   80754:	dc400215 	stw	r17,8(sp)
   80758:	dc000115 	stw	r16,4(sp)
   8075c:	302d883a 	mov	r22,r6
   80760:	2039883a 	mov	fp,r4
   80764:	2825883a 	mov	r18,r5
   80768:	10001c26 	beq	r2,zero,807dc <__sfvwrite_r+0xb0>
   8076c:	29c0030b 	ldhu	r7,12(r5)
   80770:	3880020c 	andi	r2,r7,8
   80774:	10002726 	beq	r2,zero,80814 <__sfvwrite_r+0xe8>
   80778:	28800417 	ldw	r2,16(r5)
   8077c:	10002526 	beq	r2,zero,80814 <__sfvwrite_r+0xe8>
   80780:	3880008c 	andi	r2,r7,2
   80784:	b5400017 	ldw	r21,0(r22)
   80788:	10002826 	beq	r2,zero,8082c <__sfvwrite_r+0x100>
   8078c:	0021883a 	mov	r16,zero
   80790:	0023883a 	mov	r17,zero
   80794:	880d883a 	mov	r6,r17
   80798:	e009883a 	mov	r4,fp
   8079c:	00810004 	movi	r2,1024
   807a0:	80006e26 	beq	r16,zero,8095c <__sfvwrite_r+0x230>
   807a4:	800f883a 	mov	r7,r16
   807a8:	91400717 	ldw	r5,28(r18)
   807ac:	1400012e 	bgeu	r2,r16,807b4 <__sfvwrite_r+0x88>
   807b0:	100f883a 	mov	r7,r2
   807b4:	90c00917 	ldw	r3,36(r18)
   807b8:	183ee83a 	callr	r3
   807bc:	1007883a 	mov	r3,r2
   807c0:	80a1c83a 	sub	r16,r16,r2
   807c4:	88a3883a 	add	r17,r17,r2
   807c8:	00806d0e 	bge	zero,r2,80980 <__sfvwrite_r+0x254>
   807cc:	b0800217 	ldw	r2,8(r22)
   807d0:	10c5c83a 	sub	r2,r2,r3
   807d4:	b0800215 	stw	r2,8(r22)
   807d8:	103fee1e 	bne	r2,zero,80794 <__sfvwrite_r+0x68>
   807dc:	0009883a 	mov	r4,zero
   807e0:	2005883a 	mov	r2,r4
   807e4:	dfc00a17 	ldw	ra,40(sp)
   807e8:	df000917 	ldw	fp,36(sp)
   807ec:	ddc00817 	ldw	r23,32(sp)
   807f0:	dd800717 	ldw	r22,28(sp)
   807f4:	dd400617 	ldw	r21,24(sp)
   807f8:	dd000517 	ldw	r20,20(sp)
   807fc:	dcc00417 	ldw	r19,16(sp)
   80800:	dc800317 	ldw	r18,12(sp)
   80804:	dc400217 	ldw	r17,8(sp)
   80808:	dc000117 	ldw	r16,4(sp)
   8080c:	dec00b04 	addi	sp,sp,44
   80810:	f800283a 	ret
   80814:	0081bd00 	call	81bd0 <__swsetup_r>
   80818:	1000e41e 	bne	r2,zero,80bac <__sfvwrite_r+0x480>
   8081c:	91c0030b 	ldhu	r7,12(r18)
   80820:	b5400017 	ldw	r21,0(r22)
   80824:	3880008c 	andi	r2,r7,2
   80828:	103fd81e 	bne	r2,zero,8078c <__sfvwrite_r+0x60>
   8082c:	3880004c 	andi	r2,r7,1
   80830:	1005003a 	cmpeq	r2,r2,zero
   80834:	10005726 	beq	r2,zero,80994 <__sfvwrite_r+0x268>
   80838:	0029883a 	mov	r20,zero
   8083c:	002f883a 	mov	r23,zero
   80840:	a0004226 	beq	r20,zero,8094c <__sfvwrite_r+0x220>
   80844:	3880800c 	andi	r2,r7,512
   80848:	94000217 	ldw	r16,8(r18)
   8084c:	10008b26 	beq	r2,zero,80a7c <__sfvwrite_r+0x350>
   80850:	800d883a 	mov	r6,r16
   80854:	a400a536 	bltu	r20,r16,80aec <__sfvwrite_r+0x3c0>
   80858:	3881200c 	andi	r2,r7,1152
   8085c:	10002726 	beq	r2,zero,808fc <__sfvwrite_r+0x1d0>
   80860:	90800517 	ldw	r2,20(r18)
   80864:	92000417 	ldw	r8,16(r18)
   80868:	91400017 	ldw	r5,0(r18)
   8086c:	1087883a 	add	r3,r2,r2
   80870:	1887883a 	add	r3,r3,r2
   80874:	1808d7fa 	srli	r4,r3,31
   80878:	2a21c83a 	sub	r16,r5,r8
   8087c:	80800044 	addi	r2,r16,1
   80880:	20c9883a 	add	r4,r4,r3
   80884:	2027d07a 	srai	r19,r4,1
   80888:	a085883a 	add	r2,r20,r2
   8088c:	980d883a 	mov	r6,r19
   80890:	9880022e 	bgeu	r19,r2,8089c <__sfvwrite_r+0x170>
   80894:	1027883a 	mov	r19,r2
   80898:	100d883a 	mov	r6,r2
   8089c:	3881000c 	andi	r2,r7,1024
   808a0:	1000b826 	beq	r2,zero,80b84 <__sfvwrite_r+0x458>
   808a4:	300b883a 	mov	r5,r6
   808a8:	e009883a 	mov	r4,fp
   808ac:	0080bc80 	call	80bc8 <_malloc_r>
   808b0:	10003126 	beq	r2,zero,80978 <__sfvwrite_r+0x24c>
   808b4:	91400417 	ldw	r5,16(r18)
   808b8:	1009883a 	mov	r4,r2
   808bc:	800d883a 	mov	r6,r16
   808c0:	1023883a 	mov	r17,r2
   808c4:	00813ec0 	call	813ec <memcpy>
   808c8:	90c0030b 	ldhu	r3,12(r18)
   808cc:	00beffc4 	movi	r2,-1025
   808d0:	1886703a 	and	r3,r3,r2
   808d4:	18c02014 	ori	r3,r3,128
   808d8:	90c0030d 	sth	r3,12(r18)
   808dc:	9c07c83a 	sub	r3,r19,r16
   808e0:	8c05883a 	add	r2,r17,r16
   808e4:	a00d883a 	mov	r6,r20
   808e8:	a021883a 	mov	r16,r20
   808ec:	90800015 	stw	r2,0(r18)
   808f0:	90c00215 	stw	r3,8(r18)
   808f4:	94400415 	stw	r17,16(r18)
   808f8:	94c00515 	stw	r19,20(r18)
   808fc:	91000017 	ldw	r4,0(r18)
   80900:	b80b883a 	mov	r5,r23
   80904:	a023883a 	mov	r17,r20
   80908:	008148c0 	call	8148c <memmove>
   8090c:	90c00217 	ldw	r3,8(r18)
   80910:	90800017 	ldw	r2,0(r18)
   80914:	a027883a 	mov	r19,r20
   80918:	1c07c83a 	sub	r3,r3,r16
   8091c:	1405883a 	add	r2,r2,r16
   80920:	90c00215 	stw	r3,8(r18)
   80924:	a021883a 	mov	r16,r20
   80928:	90800015 	stw	r2,0(r18)
   8092c:	b0800217 	ldw	r2,8(r22)
   80930:	1405c83a 	sub	r2,r2,r16
   80934:	b0800215 	stw	r2,8(r22)
   80938:	103fa826 	beq	r2,zero,807dc <__sfvwrite_r+0xb0>
   8093c:	a469c83a 	sub	r20,r20,r17
   80940:	91c0030b 	ldhu	r7,12(r18)
   80944:	bcef883a 	add	r23,r23,r19
   80948:	a03fbe1e 	bne	r20,zero,80844 <__sfvwrite_r+0x118>
   8094c:	adc00017 	ldw	r23,0(r21)
   80950:	ad000117 	ldw	r20,4(r21)
   80954:	ad400204 	addi	r21,r21,8
   80958:	003fb906 	br	80840 <__sfvwrite_r+0x114>
   8095c:	ac400017 	ldw	r17,0(r21)
   80960:	ac000117 	ldw	r16,4(r21)
   80964:	ad400204 	addi	r21,r21,8
   80968:	003f8a06 	br	80794 <__sfvwrite_r+0x68>
   8096c:	91400417 	ldw	r5,16(r18)
   80970:	e009883a 	mov	r4,fp
   80974:	008235c0 	call	8235c <_free_r>
   80978:	00800304 	movi	r2,12
   8097c:	e0800015 	stw	r2,0(fp)
   80980:	9080030b 	ldhu	r2,12(r18)
   80984:	013fffc4 	movi	r4,-1
   80988:	10801014 	ori	r2,r2,64
   8098c:	9080030d 	sth	r2,12(r18)
   80990:	003f9306 	br	807e0 <__sfvwrite_r+0xb4>
   80994:	0027883a 	mov	r19,zero
   80998:	002f883a 	mov	r23,zero
   8099c:	d8000015 	stw	zero,0(sp)
   809a0:	0029883a 	mov	r20,zero
   809a4:	98001e26 	beq	r19,zero,80a20 <__sfvwrite_r+0x2f4>
   809a8:	d8c00017 	ldw	r3,0(sp)
   809ac:	1804c03a 	cmpne	r2,r3,zero
   809b0:	10005e26 	beq	r2,zero,80b2c <__sfvwrite_r+0x400>
   809b4:	9821883a 	mov	r16,r19
   809b8:	a4c0012e 	bgeu	r20,r19,809c0 <__sfvwrite_r+0x294>
   809bc:	a021883a 	mov	r16,r20
   809c0:	91000017 	ldw	r4,0(r18)
   809c4:	90800417 	ldw	r2,16(r18)
   809c8:	91800217 	ldw	r6,8(r18)
   809cc:	91c00517 	ldw	r7,20(r18)
   809d0:	1100022e 	bgeu	r2,r4,809dc <__sfvwrite_r+0x2b0>
   809d4:	31e3883a 	add	r17,r6,r7
   809d8:	8c001616 	blt	r17,r16,80a34 <__sfvwrite_r+0x308>
   809dc:	81c03816 	blt	r16,r7,80ac0 <__sfvwrite_r+0x394>
   809e0:	90c00917 	ldw	r3,36(r18)
   809e4:	91400717 	ldw	r5,28(r18)
   809e8:	e009883a 	mov	r4,fp
   809ec:	b80d883a 	mov	r6,r23
   809f0:	183ee83a 	callr	r3
   809f4:	1023883a 	mov	r17,r2
   809f8:	00bfe10e 	bge	zero,r2,80980 <__sfvwrite_r+0x254>
   809fc:	a469c83a 	sub	r20,r20,r17
   80a00:	a0001826 	beq	r20,zero,80a64 <__sfvwrite_r+0x338>
   80a04:	b0800217 	ldw	r2,8(r22)
   80a08:	1445c83a 	sub	r2,r2,r17
   80a0c:	b0800215 	stw	r2,8(r22)
   80a10:	103f7226 	beq	r2,zero,807dc <__sfvwrite_r+0xb0>
   80a14:	9c67c83a 	sub	r19,r19,r17
   80a18:	bc6f883a 	add	r23,r23,r17
   80a1c:	983fe21e 	bne	r19,zero,809a8 <__sfvwrite_r+0x27c>
   80a20:	adc00017 	ldw	r23,0(r21)
   80a24:	acc00117 	ldw	r19,4(r21)
   80a28:	ad400204 	addi	r21,r21,8
   80a2c:	d8000015 	stw	zero,0(sp)
   80a30:	003fdc06 	br	809a4 <__sfvwrite_r+0x278>
   80a34:	b80b883a 	mov	r5,r23
   80a38:	880d883a 	mov	r6,r17
   80a3c:	008148c0 	call	8148c <memmove>
   80a40:	90c00017 	ldw	r3,0(r18)
   80a44:	e009883a 	mov	r4,fp
   80a48:	900b883a 	mov	r5,r18
   80a4c:	1c47883a 	add	r3,r3,r17
   80a50:	90c00015 	stw	r3,0(r18)
   80a54:	0081d0c0 	call	81d0c <_fflush_r>
   80a58:	103fc91e 	bne	r2,zero,80980 <__sfvwrite_r+0x254>
   80a5c:	a469c83a 	sub	r20,r20,r17
   80a60:	a03fe81e 	bne	r20,zero,80a04 <__sfvwrite_r+0x2d8>
   80a64:	e009883a 	mov	r4,fp
   80a68:	900b883a 	mov	r5,r18
   80a6c:	0081d0c0 	call	81d0c <_fflush_r>
   80a70:	103fc31e 	bne	r2,zero,80980 <__sfvwrite_r+0x254>
   80a74:	d8000015 	stw	zero,0(sp)
   80a78:	003fe206 	br	80a04 <__sfvwrite_r+0x2d8>
   80a7c:	91000017 	ldw	r4,0(r18)
   80a80:	90800417 	ldw	r2,16(r18)
   80a84:	1100022e 	bgeu	r2,r4,80a90 <__sfvwrite_r+0x364>
   80a88:	8023883a 	mov	r17,r16
   80a8c:	85003136 	bltu	r16,r20,80b54 <__sfvwrite_r+0x428>
   80a90:	91c00517 	ldw	r7,20(r18)
   80a94:	a1c01836 	bltu	r20,r7,80af8 <__sfvwrite_r+0x3cc>
   80a98:	90c00917 	ldw	r3,36(r18)
   80a9c:	91400717 	ldw	r5,28(r18)
   80aa0:	e009883a 	mov	r4,fp
   80aa4:	b80d883a 	mov	r6,r23
   80aa8:	183ee83a 	callr	r3
   80aac:	1021883a 	mov	r16,r2
   80ab0:	00bfb30e 	bge	zero,r2,80980 <__sfvwrite_r+0x254>
   80ab4:	1023883a 	mov	r17,r2
   80ab8:	1027883a 	mov	r19,r2
   80abc:	003f9b06 	br	8092c <__sfvwrite_r+0x200>
   80ac0:	b80b883a 	mov	r5,r23
   80ac4:	800d883a 	mov	r6,r16
   80ac8:	008148c0 	call	8148c <memmove>
   80acc:	90c00217 	ldw	r3,8(r18)
   80ad0:	90800017 	ldw	r2,0(r18)
   80ad4:	8023883a 	mov	r17,r16
   80ad8:	1c07c83a 	sub	r3,r3,r16
   80adc:	1405883a 	add	r2,r2,r16
   80ae0:	90c00215 	stw	r3,8(r18)
   80ae4:	90800015 	stw	r2,0(r18)
   80ae8:	003fc406 	br	809fc <__sfvwrite_r+0x2d0>
   80aec:	a00d883a 	mov	r6,r20
   80af0:	a021883a 	mov	r16,r20
   80af4:	003f8106 	br	808fc <__sfvwrite_r+0x1d0>
   80af8:	b80b883a 	mov	r5,r23
   80afc:	a00d883a 	mov	r6,r20
   80b00:	008148c0 	call	8148c <memmove>
   80b04:	90c00217 	ldw	r3,8(r18)
   80b08:	90800017 	ldw	r2,0(r18)
   80b0c:	a021883a 	mov	r16,r20
   80b10:	1d07c83a 	sub	r3,r3,r20
   80b14:	1505883a 	add	r2,r2,r20
   80b18:	a023883a 	mov	r17,r20
   80b1c:	a027883a 	mov	r19,r20
   80b20:	90c00215 	stw	r3,8(r18)
   80b24:	90800015 	stw	r2,0(r18)
   80b28:	003f8006 	br	8092c <__sfvwrite_r+0x200>
   80b2c:	b809883a 	mov	r4,r23
   80b30:	01400284 	movi	r5,10
   80b34:	980d883a 	mov	r6,r19
   80b38:	00813080 	call	81308 <memchr>
   80b3c:	10001726 	beq	r2,zero,80b9c <__sfvwrite_r+0x470>
   80b40:	15c5c83a 	sub	r2,r2,r23
   80b44:	15000044 	addi	r20,r2,1
   80b48:	00800044 	movi	r2,1
   80b4c:	d8800015 	stw	r2,0(sp)
   80b50:	003f9806 	br	809b4 <__sfvwrite_r+0x288>
   80b54:	b80b883a 	mov	r5,r23
   80b58:	800d883a 	mov	r6,r16
   80b5c:	008148c0 	call	8148c <memmove>
   80b60:	90c00017 	ldw	r3,0(r18)
   80b64:	e009883a 	mov	r4,fp
   80b68:	900b883a 	mov	r5,r18
   80b6c:	1c07883a 	add	r3,r3,r16
   80b70:	90c00015 	stw	r3,0(r18)
   80b74:	8027883a 	mov	r19,r16
   80b78:	0081d0c0 	call	81d0c <_fflush_r>
   80b7c:	103f6b26 	beq	r2,zero,8092c <__sfvwrite_r+0x200>
   80b80:	003f7f06 	br	80980 <__sfvwrite_r+0x254>
   80b84:	400b883a 	mov	r5,r8
   80b88:	e009883a 	mov	r4,fp
   80b8c:	008156c0 	call	8156c <_realloc_r>
   80b90:	103f7626 	beq	r2,zero,8096c <__sfvwrite_r+0x240>
   80b94:	1023883a 	mov	r17,r2
   80b98:	003f5006 	br	808dc <__sfvwrite_r+0x1b0>
   80b9c:	00c00044 	movi	r3,1
   80ba0:	9d000044 	addi	r20,r19,1
   80ba4:	d8c00015 	stw	r3,0(sp)
   80ba8:	003f8206 	br	809b4 <__sfvwrite_r+0x288>
   80bac:	9080030b 	ldhu	r2,12(r18)
   80bb0:	00c00244 	movi	r3,9
   80bb4:	013fffc4 	movi	r4,-1
   80bb8:	10801014 	ori	r2,r2,64
   80bbc:	9080030d 	sth	r2,12(r18)
   80bc0:	e0c00015 	stw	r3,0(fp)
   80bc4:	003f0606 	br	807e0 <__sfvwrite_r+0xb4>

00080bc8 <_malloc_r>:
   80bc8:	defff604 	addi	sp,sp,-40
   80bcc:	28c002c4 	addi	r3,r5,11
   80bd0:	00800584 	movi	r2,22
   80bd4:	dc800215 	stw	r18,8(sp)
   80bd8:	dfc00915 	stw	ra,36(sp)
   80bdc:	df000815 	stw	fp,32(sp)
   80be0:	ddc00715 	stw	r23,28(sp)
   80be4:	dd800615 	stw	r22,24(sp)
   80be8:	dd400515 	stw	r21,20(sp)
   80bec:	dd000415 	stw	r20,16(sp)
   80bf0:	dcc00315 	stw	r19,12(sp)
   80bf4:	dc400115 	stw	r17,4(sp)
   80bf8:	dc000015 	stw	r16,0(sp)
   80bfc:	2025883a 	mov	r18,r4
   80c00:	10c01236 	bltu	r2,r3,80c4c <_malloc_r+0x84>
   80c04:	04400404 	movi	r17,16
   80c08:	8940142e 	bgeu	r17,r5,80c5c <_malloc_r+0x94>
   80c0c:	00800304 	movi	r2,12
   80c10:	0007883a 	mov	r3,zero
   80c14:	90800015 	stw	r2,0(r18)
   80c18:	1805883a 	mov	r2,r3
   80c1c:	dfc00917 	ldw	ra,36(sp)
   80c20:	df000817 	ldw	fp,32(sp)
   80c24:	ddc00717 	ldw	r23,28(sp)
   80c28:	dd800617 	ldw	r22,24(sp)
   80c2c:	dd400517 	ldw	r21,20(sp)
   80c30:	dd000417 	ldw	r20,16(sp)
   80c34:	dcc00317 	ldw	r19,12(sp)
   80c38:	dc800217 	ldw	r18,8(sp)
   80c3c:	dc400117 	ldw	r17,4(sp)
   80c40:	dc000017 	ldw	r16,0(sp)
   80c44:	dec00a04 	addi	sp,sp,40
   80c48:	f800283a 	ret
   80c4c:	00bffe04 	movi	r2,-8
   80c50:	18a2703a 	and	r17,r3,r2
   80c54:	883fed16 	blt	r17,zero,80c0c <_malloc_r+0x44>
   80c58:	897fec36 	bltu	r17,r5,80c0c <_malloc_r+0x44>
   80c5c:	9009883a 	mov	r4,r18
   80c60:	00837d40 	call	837d4 <__malloc_lock>
   80c64:	00807dc4 	movi	r2,503
   80c68:	14402b2e 	bgeu	r2,r17,80d18 <_malloc_r+0x150>
   80c6c:	8806d27a 	srli	r3,r17,9
   80c70:	18003f1e 	bne	r3,zero,80d70 <_malloc_r+0x1a8>
   80c74:	880cd0fa 	srli	r6,r17,3
   80c78:	300490fa 	slli	r2,r6,3
   80c7c:	02c00234 	movhi	r11,8
   80c80:	5ad7ad04 	addi	r11,r11,24244
   80c84:	12cb883a 	add	r5,r2,r11
   80c88:	2c000317 	ldw	r16,12(r5)
   80c8c:	580f883a 	mov	r7,r11
   80c90:	2c00041e 	bne	r5,r16,80ca4 <_malloc_r+0xdc>
   80c94:	00000a06 	br	80cc0 <_malloc_r+0xf8>
   80c98:	1800860e 	bge	r3,zero,80eb4 <_malloc_r+0x2ec>
   80c9c:	84000317 	ldw	r16,12(r16)
   80ca0:	2c000726 	beq	r5,r16,80cc0 <_malloc_r+0xf8>
   80ca4:	80800117 	ldw	r2,4(r16)
   80ca8:	00ffff04 	movi	r3,-4
   80cac:	10c8703a 	and	r4,r2,r3
   80cb0:	2447c83a 	sub	r3,r4,r17
   80cb4:	008003c4 	movi	r2,15
   80cb8:	10fff70e 	bge	r2,r3,80c98 <_malloc_r+0xd0>
   80cbc:	31bfffc4 	addi	r6,r6,-1
   80cc0:	32400044 	addi	r9,r6,1
   80cc4:	02800234 	movhi	r10,8
   80cc8:	5297af04 	addi	r10,r10,24252
   80ccc:	54000217 	ldw	r16,8(r10)
   80cd0:	8280a026 	beq	r16,r10,80f54 <_malloc_r+0x38c>
   80cd4:	80800117 	ldw	r2,4(r16)
   80cd8:	00ffff04 	movi	r3,-4
   80cdc:	10ca703a 	and	r5,r2,r3
   80ce0:	2c4dc83a 	sub	r6,r5,r17
   80ce4:	008003c4 	movi	r2,15
   80ce8:	11808316 	blt	r2,r6,80ef8 <_malloc_r+0x330>
   80cec:	52800315 	stw	r10,12(r10)
   80cf0:	52800215 	stw	r10,8(r10)
   80cf4:	30002916 	blt	r6,zero,80d9c <_malloc_r+0x1d4>
   80cf8:	8147883a 	add	r3,r16,r5
   80cfc:	18800117 	ldw	r2,4(r3)
   80d00:	9009883a 	mov	r4,r18
   80d04:	10800054 	ori	r2,r2,1
   80d08:	18800115 	stw	r2,4(r3)
   80d0c:	00837f40 	call	837f4 <__malloc_unlock>
   80d10:	80c00204 	addi	r3,r16,8
   80d14:	003fc006 	br	80c18 <_malloc_r+0x50>
   80d18:	02c00234 	movhi	r11,8
   80d1c:	5ad7ad04 	addi	r11,r11,24244
   80d20:	8ac5883a 	add	r2,r17,r11
   80d24:	14000317 	ldw	r16,12(r2)
   80d28:	580f883a 	mov	r7,r11
   80d2c:	8806d0fa 	srli	r3,r17,3
   80d30:	14006c26 	beq	r2,r16,80ee4 <_malloc_r+0x31c>
   80d34:	80c00117 	ldw	r3,4(r16)
   80d38:	00bfff04 	movi	r2,-4
   80d3c:	81800317 	ldw	r6,12(r16)
   80d40:	1886703a 	and	r3,r3,r2
   80d44:	80c7883a 	add	r3,r16,r3
   80d48:	18800117 	ldw	r2,4(r3)
   80d4c:	81400217 	ldw	r5,8(r16)
   80d50:	9009883a 	mov	r4,r18
   80d54:	10800054 	ori	r2,r2,1
   80d58:	18800115 	stw	r2,4(r3)
   80d5c:	31400215 	stw	r5,8(r6)
   80d60:	29800315 	stw	r6,12(r5)
   80d64:	00837f40 	call	837f4 <__malloc_unlock>
   80d68:	80c00204 	addi	r3,r16,8
   80d6c:	003faa06 	br	80c18 <_malloc_r+0x50>
   80d70:	00800104 	movi	r2,4
   80d74:	10c0052e 	bgeu	r2,r3,80d8c <_malloc_r+0x1c4>
   80d78:	00800504 	movi	r2,20
   80d7c:	10c07836 	bltu	r2,r3,80f60 <_malloc_r+0x398>
   80d80:	198016c4 	addi	r6,r3,91
   80d84:	300490fa 	slli	r2,r6,3
   80d88:	003fbc06 	br	80c7c <_malloc_r+0xb4>
   80d8c:	8804d1ba 	srli	r2,r17,6
   80d90:	11800e04 	addi	r6,r2,56
   80d94:	300490fa 	slli	r2,r6,3
   80d98:	003fb806 	br	80c7c <_malloc_r+0xb4>
   80d9c:	00807fc4 	movi	r2,511
   80da0:	1140bb36 	bltu	r2,r5,81090 <_malloc_r+0x4c8>
   80da4:	2806d0fa 	srli	r3,r5,3
   80da8:	573ffe04 	addi	fp,r10,-8
   80dac:	00800044 	movi	r2,1
   80db0:	180890fa 	slli	r4,r3,3
   80db4:	1807d0ba 	srai	r3,r3,2
   80db8:	e1c00117 	ldw	r7,4(fp)
   80dbc:	5909883a 	add	r4,r11,r4
   80dc0:	21400217 	ldw	r5,8(r4)
   80dc4:	10c4983a 	sll	r2,r2,r3
   80dc8:	81000315 	stw	r4,12(r16)
   80dcc:	81400215 	stw	r5,8(r16)
   80dd0:	388eb03a 	or	r7,r7,r2
   80dd4:	2c000315 	stw	r16,12(r5)
   80dd8:	24000215 	stw	r16,8(r4)
   80ddc:	e1c00115 	stw	r7,4(fp)
   80de0:	4807883a 	mov	r3,r9
   80de4:	4800cd16 	blt	r9,zero,8111c <_malloc_r+0x554>
   80de8:	1807d0ba 	srai	r3,r3,2
   80dec:	00800044 	movi	r2,1
   80df0:	10c8983a 	sll	r4,r2,r3
   80df4:	39004436 	bltu	r7,r4,80f08 <_malloc_r+0x340>
   80df8:	21c4703a 	and	r2,r4,r7
   80dfc:	10000a1e 	bne	r2,zero,80e28 <_malloc_r+0x260>
   80e00:	2109883a 	add	r4,r4,r4
   80e04:	00bfff04 	movi	r2,-4
   80e08:	4884703a 	and	r2,r9,r2
   80e0c:	3906703a 	and	r3,r7,r4
   80e10:	12400104 	addi	r9,r2,4
   80e14:	1800041e 	bne	r3,zero,80e28 <_malloc_r+0x260>
   80e18:	2109883a 	add	r4,r4,r4
   80e1c:	3904703a 	and	r2,r7,r4
   80e20:	4a400104 	addi	r9,r9,4
   80e24:	103ffc26 	beq	r2,zero,80e18 <_malloc_r+0x250>
   80e28:	480490fa 	slli	r2,r9,3
   80e2c:	4819883a 	mov	r12,r9
   80e30:	023fff04 	movi	r8,-4
   80e34:	589b883a 	add	r13,r11,r2
   80e38:	6807883a 	mov	r3,r13
   80e3c:	014003c4 	movi	r5,15
   80e40:	1c000317 	ldw	r16,12(r3)
   80e44:	1c00041e 	bne	r3,r16,80e58 <_malloc_r+0x290>
   80e48:	0000a706 	br	810e8 <_malloc_r+0x520>
   80e4c:	3000ab0e 	bge	r6,zero,810fc <_malloc_r+0x534>
   80e50:	84000317 	ldw	r16,12(r16)
   80e54:	1c00a426 	beq	r3,r16,810e8 <_malloc_r+0x520>
   80e58:	80800117 	ldw	r2,4(r16)
   80e5c:	1204703a 	and	r2,r2,r8
   80e60:	144dc83a 	sub	r6,r2,r17
   80e64:	29bff90e 	bge	r5,r6,80e4c <_malloc_r+0x284>
   80e68:	81000317 	ldw	r4,12(r16)
   80e6c:	80c00217 	ldw	r3,8(r16)
   80e70:	89400054 	ori	r5,r17,1
   80e74:	8445883a 	add	r2,r16,r17
   80e78:	20c00215 	stw	r3,8(r4)
   80e7c:	19000315 	stw	r4,12(r3)
   80e80:	81400115 	stw	r5,4(r16)
   80e84:	1187883a 	add	r3,r2,r6
   80e88:	31000054 	ori	r4,r6,1
   80e8c:	50800315 	stw	r2,12(r10)
   80e90:	50800215 	stw	r2,8(r10)
   80e94:	19800015 	stw	r6,0(r3)
   80e98:	11000115 	stw	r4,4(r2)
   80e9c:	12800215 	stw	r10,8(r2)
   80ea0:	12800315 	stw	r10,12(r2)
   80ea4:	9009883a 	mov	r4,r18
   80ea8:	00837f40 	call	837f4 <__malloc_unlock>
   80eac:	80c00204 	addi	r3,r16,8
   80eb0:	003f5906 	br	80c18 <_malloc_r+0x50>
   80eb4:	8109883a 	add	r4,r16,r4
   80eb8:	20800117 	ldw	r2,4(r4)
   80ebc:	80c00217 	ldw	r3,8(r16)
   80ec0:	81400317 	ldw	r5,12(r16)
   80ec4:	10800054 	ori	r2,r2,1
   80ec8:	20800115 	stw	r2,4(r4)
   80ecc:	28c00215 	stw	r3,8(r5)
   80ed0:	19400315 	stw	r5,12(r3)
   80ed4:	9009883a 	mov	r4,r18
   80ed8:	00837f40 	call	837f4 <__malloc_unlock>
   80edc:	80c00204 	addi	r3,r16,8
   80ee0:	003f4d06 	br	80c18 <_malloc_r+0x50>
   80ee4:	80800204 	addi	r2,r16,8
   80ee8:	14000317 	ldw	r16,12(r2)
   80eec:	143f911e 	bne	r2,r16,80d34 <_malloc_r+0x16c>
   80ef0:	1a400084 	addi	r9,r3,2
   80ef4:	003f7306 	br	80cc4 <_malloc_r+0xfc>
   80ef8:	88c00054 	ori	r3,r17,1
   80efc:	8445883a 	add	r2,r16,r17
   80f00:	80c00115 	stw	r3,4(r16)
   80f04:	003fdf06 	br	80e84 <_malloc_r+0x2bc>
   80f08:	e4000217 	ldw	r16,8(fp)
   80f0c:	00bfff04 	movi	r2,-4
   80f10:	80c00117 	ldw	r3,4(r16)
   80f14:	802d883a 	mov	r22,r16
   80f18:	18aa703a 	and	r21,r3,r2
   80f1c:	ac401636 	bltu	r21,r17,80f78 <_malloc_r+0x3b0>
   80f20:	ac49c83a 	sub	r4,r21,r17
   80f24:	008003c4 	movi	r2,15
   80f28:	1100130e 	bge	r2,r4,80f78 <_malloc_r+0x3b0>
   80f2c:	88800054 	ori	r2,r17,1
   80f30:	8447883a 	add	r3,r16,r17
   80f34:	80800115 	stw	r2,4(r16)
   80f38:	20800054 	ori	r2,r4,1
   80f3c:	18800115 	stw	r2,4(r3)
   80f40:	e0c00215 	stw	r3,8(fp)
   80f44:	9009883a 	mov	r4,r18
   80f48:	00837f40 	call	837f4 <__malloc_unlock>
   80f4c:	80c00204 	addi	r3,r16,8
   80f50:	003f3106 	br	80c18 <_malloc_r+0x50>
   80f54:	39c00117 	ldw	r7,4(r7)
   80f58:	573ffe04 	addi	fp,r10,-8
   80f5c:	003fa006 	br	80de0 <_malloc_r+0x218>
   80f60:	00801504 	movi	r2,84
   80f64:	10c06736 	bltu	r2,r3,81104 <_malloc_r+0x53c>
   80f68:	8804d33a 	srli	r2,r17,12
   80f6c:	11801b84 	addi	r6,r2,110
   80f70:	300490fa 	slli	r2,r6,3
   80f74:	003f4106 	br	80c7c <_malloc_r+0xb4>
   80f78:	d0a6ba17 	ldw	r2,-25880(gp)
   80f7c:	d0e00617 	ldw	r3,-32744(gp)
   80f80:	053fffc4 	movi	r20,-1
   80f84:	10800404 	addi	r2,r2,16
   80f88:	88a7883a 	add	r19,r17,r2
   80f8c:	1d000326 	beq	r3,r20,80f9c <_malloc_r+0x3d4>
   80f90:	98c3ffc4 	addi	r3,r19,4095
   80f94:	00bc0004 	movi	r2,-4096
   80f98:	18a6703a 	and	r19,r3,r2
   80f9c:	9009883a 	mov	r4,r18
   80fa0:	980b883a 	mov	r5,r19
   80fa4:	0081b600 	call	81b60 <_sbrk_r>
   80fa8:	1009883a 	mov	r4,r2
   80fac:	15000426 	beq	r2,r20,80fc0 <_malloc_r+0x3f8>
   80fb0:	854b883a 	add	r5,r16,r21
   80fb4:	1029883a 	mov	r20,r2
   80fb8:	11405a2e 	bgeu	r2,r5,81124 <_malloc_r+0x55c>
   80fbc:	87000c26 	beq	r16,fp,80ff0 <_malloc_r+0x428>
   80fc0:	e4000217 	ldw	r16,8(fp)
   80fc4:	80c00117 	ldw	r3,4(r16)
   80fc8:	00bfff04 	movi	r2,-4
   80fcc:	1884703a 	and	r2,r3,r2
   80fd0:	14400336 	bltu	r2,r17,80fe0 <_malloc_r+0x418>
   80fd4:	1449c83a 	sub	r4,r2,r17
   80fd8:	008003c4 	movi	r2,15
   80fdc:	113fd316 	blt	r2,r4,80f2c <_malloc_r+0x364>
   80fe0:	9009883a 	mov	r4,r18
   80fe4:	00837f40 	call	837f4 <__malloc_unlock>
   80fe8:	0007883a 	mov	r3,zero
   80fec:	003f0a06 	br	80c18 <_malloc_r+0x50>
   80ff0:	05c00274 	movhi	r23,9
   80ff4:	bde3f504 	addi	r23,r23,-28716
   80ff8:	b8800017 	ldw	r2,0(r23)
   80ffc:	988d883a 	add	r6,r19,r2
   81000:	b9800015 	stw	r6,0(r23)
   81004:	d0e00617 	ldw	r3,-32744(gp)
   81008:	00bfffc4 	movi	r2,-1
   8100c:	18808e26 	beq	r3,r2,81248 <_malloc_r+0x680>
   81010:	2145c83a 	sub	r2,r4,r5
   81014:	3085883a 	add	r2,r6,r2
   81018:	b8800015 	stw	r2,0(r23)
   8101c:	20c001cc 	andi	r3,r4,7
   81020:	18005f1e 	bne	r3,zero,811a0 <_malloc_r+0x5d8>
   81024:	000b883a 	mov	r5,zero
   81028:	a4c5883a 	add	r2,r20,r19
   8102c:	1083ffcc 	andi	r2,r2,4095
   81030:	00c40004 	movi	r3,4096
   81034:	1887c83a 	sub	r3,r3,r2
   81038:	28e7883a 	add	r19,r5,r3
   8103c:	9009883a 	mov	r4,r18
   81040:	980b883a 	mov	r5,r19
   81044:	0081b600 	call	81b60 <_sbrk_r>
   81048:	1007883a 	mov	r3,r2
   8104c:	00bfffc4 	movi	r2,-1
   81050:	18807a26 	beq	r3,r2,8123c <_malloc_r+0x674>
   81054:	1d05c83a 	sub	r2,r3,r20
   81058:	9885883a 	add	r2,r19,r2
   8105c:	10c00054 	ori	r3,r2,1
   81060:	b8800017 	ldw	r2,0(r23)
   81064:	a021883a 	mov	r16,r20
   81068:	a0c00115 	stw	r3,4(r20)
   8106c:	9885883a 	add	r2,r19,r2
   81070:	b8800015 	stw	r2,0(r23)
   81074:	e5000215 	stw	r20,8(fp)
   81078:	b7003626 	beq	r22,fp,81154 <_malloc_r+0x58c>
   8107c:	018003c4 	movi	r6,15
   81080:	35404b36 	bltu	r6,r21,811b0 <_malloc_r+0x5e8>
   81084:	00800044 	movi	r2,1
   81088:	a0800115 	stw	r2,4(r20)
   8108c:	003fcd06 	br	80fc4 <_malloc_r+0x3fc>
   81090:	2808d27a 	srli	r4,r5,9
   81094:	2000371e 	bne	r4,zero,81174 <_malloc_r+0x5ac>
   81098:	2808d0fa 	srli	r4,r5,3
   8109c:	200690fa 	slli	r3,r4,3
   810a0:	1ad1883a 	add	r8,r3,r11
   810a4:	41800217 	ldw	r6,8(r8)
   810a8:	41805b26 	beq	r8,r6,81218 <_malloc_r+0x650>
   810ac:	30800117 	ldw	r2,4(r6)
   810b0:	00ffff04 	movi	r3,-4
   810b4:	10c4703a 	and	r2,r2,r3
   810b8:	2880022e 	bgeu	r5,r2,810c4 <_malloc_r+0x4fc>
   810bc:	31800217 	ldw	r6,8(r6)
   810c0:	41bffa1e 	bne	r8,r6,810ac <_malloc_r+0x4e4>
   810c4:	32000317 	ldw	r8,12(r6)
   810c8:	39c00117 	ldw	r7,4(r7)
   810cc:	82000315 	stw	r8,12(r16)
   810d0:	81800215 	stw	r6,8(r16)
   810d4:	07000234 	movhi	fp,8
   810d8:	e717ad04 	addi	fp,fp,24244
   810dc:	34000315 	stw	r16,12(r6)
   810e0:	44000215 	stw	r16,8(r8)
   810e4:	003f3e06 	br	80de0 <_malloc_r+0x218>
   810e8:	63000044 	addi	r12,r12,1
   810ec:	608000cc 	andi	r2,r12,3
   810f0:	10005d26 	beq	r2,zero,81268 <_malloc_r+0x6a0>
   810f4:	18c00204 	addi	r3,r3,8
   810f8:	003f5106 	br	80e40 <_malloc_r+0x278>
   810fc:	8089883a 	add	r4,r16,r2
   81100:	003f6d06 	br	80eb8 <_malloc_r+0x2f0>
   81104:	00805504 	movi	r2,340
   81108:	10c02036 	bltu	r2,r3,8118c <_malloc_r+0x5c4>
   8110c:	8804d3fa 	srli	r2,r17,15
   81110:	11801dc4 	addi	r6,r2,119
   81114:	300490fa 	slli	r2,r6,3
   81118:	003ed806 	br	80c7c <_malloc_r+0xb4>
   8111c:	48c000c4 	addi	r3,r9,3
   81120:	003f3106 	br	80de8 <_malloc_r+0x220>
   81124:	05c00274 	movhi	r23,9
   81128:	bde3f504 	addi	r23,r23,-28716
   8112c:	b8800017 	ldw	r2,0(r23)
   81130:	988d883a 	add	r6,r19,r2
   81134:	b9800015 	stw	r6,0(r23)
   81138:	293fb21e 	bne	r5,r4,81004 <_malloc_r+0x43c>
   8113c:	2083ffcc 	andi	r2,r4,4095
   81140:	103fb01e 	bne	r2,zero,81004 <_malloc_r+0x43c>
   81144:	e4000217 	ldw	r16,8(fp)
   81148:	9d45883a 	add	r2,r19,r21
   8114c:	10800054 	ori	r2,r2,1
   81150:	80800115 	stw	r2,4(r16)
   81154:	b8c00017 	ldw	r3,0(r23)
   81158:	d0a6bb17 	ldw	r2,-25876(gp)
   8115c:	10c0012e 	bgeu	r2,r3,81164 <_malloc_r+0x59c>
   81160:	d0e6bb15 	stw	r3,-25876(gp)
   81164:	d0a6bc17 	ldw	r2,-25872(gp)
   81168:	10ff962e 	bgeu	r2,r3,80fc4 <_malloc_r+0x3fc>
   8116c:	d0e6bc15 	stw	r3,-25872(gp)
   81170:	003f9406 	br	80fc4 <_malloc_r+0x3fc>
   81174:	00800104 	movi	r2,4
   81178:	11001e36 	bltu	r2,r4,811f4 <_malloc_r+0x62c>
   8117c:	2804d1ba 	srli	r2,r5,6
   81180:	11000e04 	addi	r4,r2,56
   81184:	200690fa 	slli	r3,r4,3
   81188:	003fc506 	br	810a0 <_malloc_r+0x4d8>
   8118c:	00815504 	movi	r2,1364
   81190:	10c01d2e 	bgeu	r2,r3,81208 <_malloc_r+0x640>
   81194:	01801f84 	movi	r6,126
   81198:	0080fc04 	movi	r2,1008
   8119c:	003eb706 	br	80c7c <_malloc_r+0xb4>
   811a0:	00800204 	movi	r2,8
   811a4:	10cbc83a 	sub	r5,r2,r3
   811a8:	2169883a 	add	r20,r4,r5
   811ac:	003f9e06 	br	81028 <_malloc_r+0x460>
   811b0:	00bffe04 	movi	r2,-8
   811b4:	a93ffd04 	addi	r4,r21,-12
   811b8:	2088703a 	and	r4,r4,r2
   811bc:	b10b883a 	add	r5,r22,r4
   811c0:	00c00144 	movi	r3,5
   811c4:	28c00215 	stw	r3,8(r5)
   811c8:	28c00115 	stw	r3,4(r5)
   811cc:	b0800117 	ldw	r2,4(r22)
   811d0:	1080004c 	andi	r2,r2,1
   811d4:	2084b03a 	or	r2,r4,r2
   811d8:	b0800115 	stw	r2,4(r22)
   811dc:	313fdd2e 	bgeu	r6,r4,81154 <_malloc_r+0x58c>
   811e0:	b1400204 	addi	r5,r22,8
   811e4:	9009883a 	mov	r4,r18
   811e8:	008235c0 	call	8235c <_free_r>
   811ec:	e4000217 	ldw	r16,8(fp)
   811f0:	003fd806 	br	81154 <_malloc_r+0x58c>
   811f4:	00800504 	movi	r2,20
   811f8:	11001536 	bltu	r2,r4,81250 <_malloc_r+0x688>
   811fc:	210016c4 	addi	r4,r4,91
   81200:	200690fa 	slli	r3,r4,3
   81204:	003fa606 	br	810a0 <_malloc_r+0x4d8>
   81208:	8804d4ba 	srli	r2,r17,18
   8120c:	11801f04 	addi	r6,r2,124
   81210:	300490fa 	slli	r2,r6,3
   81214:	003e9906 	br	80c7c <_malloc_r+0xb4>
   81218:	2009d0ba 	srai	r4,r4,2
   8121c:	01400234 	movhi	r5,8
   81220:	2957ad04 	addi	r5,r5,24244
   81224:	00c00044 	movi	r3,1
   81228:	28800117 	ldw	r2,4(r5)
   8122c:	1906983a 	sll	r3,r3,r4
   81230:	10c4b03a 	or	r2,r2,r3
   81234:	28800115 	stw	r2,4(r5)
   81238:	003fa306 	br	810c8 <_malloc_r+0x500>
   8123c:	0027883a 	mov	r19,zero
   81240:	00c00044 	movi	r3,1
   81244:	003f8606 	br	81060 <_malloc_r+0x498>
   81248:	d1200615 	stw	r4,-32744(gp)
   8124c:	003f7306 	br	8101c <_malloc_r+0x454>
   81250:	00801504 	movi	r2,84
   81254:	11001936 	bltu	r2,r4,812bc <_malloc_r+0x6f4>
   81258:	2804d33a 	srli	r2,r5,12
   8125c:	11001b84 	addi	r4,r2,110
   81260:	200690fa 	slli	r3,r4,3
   81264:	003f8e06 	br	810a0 <_malloc_r+0x4d8>
   81268:	480b883a 	mov	r5,r9
   8126c:	6807883a 	mov	r3,r13
   81270:	288000cc 	andi	r2,r5,3
   81274:	18fffe04 	addi	r3,r3,-8
   81278:	297fffc4 	addi	r5,r5,-1
   8127c:	10001526 	beq	r2,zero,812d4 <_malloc_r+0x70c>
   81280:	18800217 	ldw	r2,8(r3)
   81284:	10fffa26 	beq	r2,r3,81270 <_malloc_r+0x6a8>
   81288:	2109883a 	add	r4,r4,r4
   8128c:	393f1e36 	bltu	r7,r4,80f08 <_malloc_r+0x340>
   81290:	203f1d26 	beq	r4,zero,80f08 <_malloc_r+0x340>
   81294:	21c4703a 	and	r2,r4,r7
   81298:	10000226 	beq	r2,zero,812a4 <_malloc_r+0x6dc>
   8129c:	6013883a 	mov	r9,r12
   812a0:	003ee106 	br	80e28 <_malloc_r+0x260>
   812a4:	2109883a 	add	r4,r4,r4
   812a8:	3904703a 	and	r2,r7,r4
   812ac:	63000104 	addi	r12,r12,4
   812b0:	103ffc26 	beq	r2,zero,812a4 <_malloc_r+0x6dc>
   812b4:	6013883a 	mov	r9,r12
   812b8:	003edb06 	br	80e28 <_malloc_r+0x260>
   812bc:	00805504 	movi	r2,340
   812c0:	11000836 	bltu	r2,r4,812e4 <_malloc_r+0x71c>
   812c4:	2804d3fa 	srli	r2,r5,15
   812c8:	11001dc4 	addi	r4,r2,119
   812cc:	200690fa 	slli	r3,r4,3
   812d0:	003f7306 	br	810a0 <_malloc_r+0x4d8>
   812d4:	0104303a 	nor	r2,zero,r4
   812d8:	388e703a 	and	r7,r7,r2
   812dc:	e1c00115 	stw	r7,4(fp)
   812e0:	003fe906 	br	81288 <_malloc_r+0x6c0>
   812e4:	00815504 	movi	r2,1364
   812e8:	1100032e 	bgeu	r2,r4,812f8 <_malloc_r+0x730>
   812ec:	01001f84 	movi	r4,126
   812f0:	00c0fc04 	movi	r3,1008
   812f4:	003f6a06 	br	810a0 <_malloc_r+0x4d8>
   812f8:	2804d4ba 	srli	r2,r5,18
   812fc:	11001f04 	addi	r4,r2,124
   81300:	200690fa 	slli	r3,r4,3
   81304:	003f6606 	br	810a0 <_malloc_r+0x4d8>

00081308 <memchr>:
   81308:	008000c4 	movi	r2,3
   8130c:	29403fcc 	andi	r5,r5,255
   81310:	2007883a 	mov	r3,r4
   81314:	1180022e 	bgeu	r2,r6,81320 <memchr+0x18>
   81318:	2084703a 	and	r2,r4,r2
   8131c:	10000b26 	beq	r2,zero,8134c <memchr+0x44>
   81320:	313fffc4 	addi	r4,r6,-1
   81324:	3000051e 	bne	r6,zero,8133c <memchr+0x34>
   81328:	00002c06 	br	813dc <memchr+0xd4>
   8132c:	213fffc4 	addi	r4,r4,-1
   81330:	00bfffc4 	movi	r2,-1
   81334:	18c00044 	addi	r3,r3,1
   81338:	20802826 	beq	r4,r2,813dc <memchr+0xd4>
   8133c:	18800003 	ldbu	r2,0(r3)
   81340:	28bffa1e 	bne	r5,r2,8132c <memchr+0x24>
   81344:	1805883a 	mov	r2,r3
   81348:	f800283a 	ret
   8134c:	0011883a 	mov	r8,zero
   81350:	0007883a 	mov	r3,zero
   81354:	01c00104 	movi	r7,4
   81358:	4004923a 	slli	r2,r8,8
   8135c:	18c00044 	addi	r3,r3,1
   81360:	1151883a 	add	r8,r2,r5
   81364:	19fffc1e 	bne	r3,r7,81358 <memchr+0x50>
   81368:	02bfbff4 	movhi	r10,65279
   8136c:	52bfbfc4 	addi	r10,r10,-257
   81370:	02602074 	movhi	r9,32897
   81374:	4a602004 	addi	r9,r9,-32640
   81378:	02c000c4 	movi	r11,3
   8137c:	20800017 	ldw	r2,0(r4)
   81380:	31bfff04 	addi	r6,r6,-4
   81384:	200f883a 	mov	r7,r4
   81388:	1204f03a 	xor	r2,r2,r8
   8138c:	1287883a 	add	r3,r2,r10
   81390:	1a46703a 	and	r3,r3,r9
   81394:	0084303a 	nor	r2,zero,r2
   81398:	10c4703a 	and	r2,r2,r3
   8139c:	10000b26 	beq	r2,zero,813cc <memchr+0xc4>
   813a0:	20800003 	ldbu	r2,0(r4)
   813a4:	28800f26 	beq	r5,r2,813e4 <memchr+0xdc>
   813a8:	20800043 	ldbu	r2,1(r4)
   813ac:	21c00044 	addi	r7,r4,1
   813b0:	28800c26 	beq	r5,r2,813e4 <memchr+0xdc>
   813b4:	20800083 	ldbu	r2,2(r4)
   813b8:	21c00084 	addi	r7,r4,2
   813bc:	28800926 	beq	r5,r2,813e4 <memchr+0xdc>
   813c0:	208000c3 	ldbu	r2,3(r4)
   813c4:	21c000c4 	addi	r7,r4,3
   813c8:	28800626 	beq	r5,r2,813e4 <memchr+0xdc>
   813cc:	21000104 	addi	r4,r4,4
   813d0:	59bfea36 	bltu	r11,r6,8137c <memchr+0x74>
   813d4:	2007883a 	mov	r3,r4
   813d8:	003fd106 	br	81320 <memchr+0x18>
   813dc:	0005883a 	mov	r2,zero
   813e0:	f800283a 	ret
   813e4:	3805883a 	mov	r2,r7
   813e8:	f800283a 	ret

000813ec <memcpy>:
   813ec:	01c003c4 	movi	r7,15
   813f0:	2007883a 	mov	r3,r4
   813f4:	3980032e 	bgeu	r7,r6,81404 <memcpy+0x18>
   813f8:	2904b03a 	or	r2,r5,r4
   813fc:	108000cc 	andi	r2,r2,3
   81400:	10000926 	beq	r2,zero,81428 <memcpy+0x3c>
   81404:	30000626 	beq	r6,zero,81420 <memcpy+0x34>
   81408:	30cd883a 	add	r6,r6,r3
   8140c:	28800003 	ldbu	r2,0(r5)
   81410:	29400044 	addi	r5,r5,1
   81414:	18800005 	stb	r2,0(r3)
   81418:	18c00044 	addi	r3,r3,1
   8141c:	30fffb1e 	bne	r6,r3,8140c <memcpy+0x20>
   81420:	2005883a 	mov	r2,r4
   81424:	f800283a 	ret
   81428:	3811883a 	mov	r8,r7
   8142c:	200f883a 	mov	r7,r4
   81430:	28c00017 	ldw	r3,0(r5)
   81434:	31bffc04 	addi	r6,r6,-16
   81438:	38c00015 	stw	r3,0(r7)
   8143c:	28800117 	ldw	r2,4(r5)
   81440:	38800115 	stw	r2,4(r7)
   81444:	28c00217 	ldw	r3,8(r5)
   81448:	38c00215 	stw	r3,8(r7)
   8144c:	28800317 	ldw	r2,12(r5)
   81450:	29400404 	addi	r5,r5,16
   81454:	38800315 	stw	r2,12(r7)
   81458:	39c00404 	addi	r7,r7,16
   8145c:	41bff436 	bltu	r8,r6,81430 <memcpy+0x44>
   81460:	008000c4 	movi	r2,3
   81464:	1180072e 	bgeu	r2,r6,81484 <memcpy+0x98>
   81468:	1007883a 	mov	r3,r2
   8146c:	28800017 	ldw	r2,0(r5)
   81470:	31bfff04 	addi	r6,r6,-4
   81474:	29400104 	addi	r5,r5,4
   81478:	38800015 	stw	r2,0(r7)
   8147c:	39c00104 	addi	r7,r7,4
   81480:	19bffa36 	bltu	r3,r6,8146c <memcpy+0x80>
   81484:	3807883a 	mov	r3,r7
   81488:	003fde06 	br	81404 <memcpy+0x18>

0008148c <memmove>:
   8148c:	2807883a 	mov	r3,r5
   81490:	2011883a 	mov	r8,r4
   81494:	29000c2e 	bgeu	r5,r4,814c8 <memmove+0x3c>
   81498:	298f883a 	add	r7,r5,r6
   8149c:	21c00a2e 	bgeu	r4,r7,814c8 <memmove+0x3c>
   814a0:	30000726 	beq	r6,zero,814c0 <memmove+0x34>
   814a4:	2187883a 	add	r3,r4,r6
   814a8:	198dc83a 	sub	r6,r3,r6
   814ac:	39ffffc4 	addi	r7,r7,-1
   814b0:	38800003 	ldbu	r2,0(r7)
   814b4:	18ffffc4 	addi	r3,r3,-1
   814b8:	18800005 	stb	r2,0(r3)
   814bc:	19bffb1e 	bne	r3,r6,814ac <memmove+0x20>
   814c0:	2005883a 	mov	r2,r4
   814c4:	f800283a 	ret
   814c8:	01c003c4 	movi	r7,15
   814cc:	39800a36 	bltu	r7,r6,814f8 <memmove+0x6c>
   814d0:	303ffb26 	beq	r6,zero,814c0 <memmove+0x34>
   814d4:	400f883a 	mov	r7,r8
   814d8:	320d883a 	add	r6,r6,r8
   814dc:	28800003 	ldbu	r2,0(r5)
   814e0:	29400044 	addi	r5,r5,1
   814e4:	38800005 	stb	r2,0(r7)
   814e8:	39c00044 	addi	r7,r7,1
   814ec:	39bffb1e 	bne	r7,r6,814dc <memmove+0x50>
   814f0:	2005883a 	mov	r2,r4
   814f4:	f800283a 	ret
   814f8:	1904b03a 	or	r2,r3,r4
   814fc:	108000cc 	andi	r2,r2,3
   81500:	103ff31e 	bne	r2,zero,814d0 <memmove+0x44>
   81504:	3811883a 	mov	r8,r7
   81508:	180b883a 	mov	r5,r3
   8150c:	200f883a 	mov	r7,r4
   81510:	28c00017 	ldw	r3,0(r5)
   81514:	31bffc04 	addi	r6,r6,-16
   81518:	38c00015 	stw	r3,0(r7)
   8151c:	28800117 	ldw	r2,4(r5)
   81520:	38800115 	stw	r2,4(r7)
   81524:	28c00217 	ldw	r3,8(r5)
   81528:	38c00215 	stw	r3,8(r7)
   8152c:	28800317 	ldw	r2,12(r5)
   81530:	29400404 	addi	r5,r5,16
   81534:	38800315 	stw	r2,12(r7)
   81538:	39c00404 	addi	r7,r7,16
   8153c:	41bff436 	bltu	r8,r6,81510 <memmove+0x84>
   81540:	008000c4 	movi	r2,3
   81544:	1180072e 	bgeu	r2,r6,81564 <memmove+0xd8>
   81548:	1007883a 	mov	r3,r2
   8154c:	28800017 	ldw	r2,0(r5)
   81550:	31bfff04 	addi	r6,r6,-4
   81554:	29400104 	addi	r5,r5,4
   81558:	38800015 	stw	r2,0(r7)
   8155c:	39c00104 	addi	r7,r7,4
   81560:	19bffa36 	bltu	r3,r6,8154c <memmove+0xc0>
   81564:	3811883a 	mov	r8,r7
   81568:	003fd906 	br	814d0 <memmove+0x44>

0008156c <_realloc_r>:
   8156c:	defff404 	addi	sp,sp,-48
   81570:	dd800815 	stw	r22,32(sp)
   81574:	dc800415 	stw	r18,16(sp)
   81578:	dc400315 	stw	r17,12(sp)
   8157c:	dfc00b15 	stw	ra,44(sp)
   81580:	df000a15 	stw	fp,40(sp)
   81584:	ddc00915 	stw	r23,36(sp)
   81588:	dd400715 	stw	r21,28(sp)
   8158c:	dd000615 	stw	r20,24(sp)
   81590:	dcc00515 	stw	r19,20(sp)
   81594:	dc000215 	stw	r16,8(sp)
   81598:	2825883a 	mov	r18,r5
   8159c:	3023883a 	mov	r17,r6
   815a0:	202d883a 	mov	r22,r4
   815a4:	2800c926 	beq	r5,zero,818cc <_realloc_r+0x360>
   815a8:	00837d40 	call	837d4 <__malloc_lock>
   815ac:	943ffe04 	addi	r16,r18,-8
   815b0:	88c002c4 	addi	r3,r17,11
   815b4:	00800584 	movi	r2,22
   815b8:	82000117 	ldw	r8,4(r16)
   815bc:	10c01b2e 	bgeu	r2,r3,8162c <_realloc_r+0xc0>
   815c0:	00bffe04 	movi	r2,-8
   815c4:	188e703a 	and	r7,r3,r2
   815c8:	3839883a 	mov	fp,r7
   815cc:	38001a16 	blt	r7,zero,81638 <_realloc_r+0xcc>
   815d0:	e4401936 	bltu	fp,r17,81638 <_realloc_r+0xcc>
   815d4:	013fff04 	movi	r4,-4
   815d8:	4126703a 	and	r19,r8,r4
   815dc:	99c02616 	blt	r19,r7,81678 <_realloc_r+0x10c>
   815e0:	802b883a 	mov	r21,r16
   815e4:	9829883a 	mov	r20,r19
   815e8:	84000204 	addi	r16,r16,8
   815ec:	a80f883a 	mov	r7,r21
   815f0:	a70dc83a 	sub	r6,r20,fp
   815f4:	008003c4 	movi	r2,15
   815f8:	1180c136 	bltu	r2,r6,81900 <_realloc_r+0x394>
   815fc:	38800117 	ldw	r2,4(r7)
   81600:	a549883a 	add	r4,r20,r21
   81604:	1080004c 	andi	r2,r2,1
   81608:	a084b03a 	or	r2,r20,r2
   8160c:	38800115 	stw	r2,4(r7)
   81610:	20c00117 	ldw	r3,4(r4)
   81614:	18c00054 	ori	r3,r3,1
   81618:	20c00115 	stw	r3,4(r4)
   8161c:	b009883a 	mov	r4,r22
   81620:	00837f40 	call	837f4 <__malloc_unlock>
   81624:	8023883a 	mov	r17,r16
   81628:	00000606 	br	81644 <_realloc_r+0xd8>
   8162c:	01c00404 	movi	r7,16
   81630:	3839883a 	mov	fp,r7
   81634:	e47fe72e 	bgeu	fp,r17,815d4 <_realloc_r+0x68>
   81638:	00800304 	movi	r2,12
   8163c:	0023883a 	mov	r17,zero
   81640:	b0800015 	stw	r2,0(r22)
   81644:	8805883a 	mov	r2,r17
   81648:	dfc00b17 	ldw	ra,44(sp)
   8164c:	df000a17 	ldw	fp,40(sp)
   81650:	ddc00917 	ldw	r23,36(sp)
   81654:	dd800817 	ldw	r22,32(sp)
   81658:	dd400717 	ldw	r21,28(sp)
   8165c:	dd000617 	ldw	r20,24(sp)
   81660:	dcc00517 	ldw	r19,20(sp)
   81664:	dc800417 	ldw	r18,16(sp)
   81668:	dc400317 	ldw	r17,12(sp)
   8166c:	dc000217 	ldw	r16,8(sp)
   81670:	dec00c04 	addi	sp,sp,48
   81674:	f800283a 	ret
   81678:	00800234 	movhi	r2,8
   8167c:	1097ad04 	addi	r2,r2,24244
   81680:	12400217 	ldw	r9,8(r2)
   81684:	84cd883a 	add	r6,r16,r19
   81688:	802b883a 	mov	r21,r16
   8168c:	3240b926 	beq	r6,r9,81974 <_realloc_r+0x408>
   81690:	31400117 	ldw	r5,4(r6)
   81694:	00bfff84 	movi	r2,-2
   81698:	2884703a 	and	r2,r5,r2
   8169c:	1185883a 	add	r2,r2,r6
   816a0:	10c00117 	ldw	r3,4(r2)
   816a4:	18c0004c 	andi	r3,r3,1
   816a8:	1807003a 	cmpeq	r3,r3,zero
   816ac:	1800a326 	beq	r3,zero,8193c <_realloc_r+0x3d0>
   816b0:	2908703a 	and	r4,r5,r4
   816b4:	9929883a 	add	r20,r19,r4
   816b8:	a1c0a30e 	bge	r20,r7,81948 <_realloc_r+0x3dc>
   816bc:	4080004c 	andi	r2,r8,1
   816c0:	1000551e 	bne	r2,zero,81818 <_realloc_r+0x2ac>
   816c4:	80800017 	ldw	r2,0(r16)
   816c8:	80afc83a 	sub	r23,r16,r2
   816cc:	b8c00117 	ldw	r3,4(r23)
   816d0:	00bfff04 	movi	r2,-4
   816d4:	1884703a 	and	r2,r3,r2
   816d8:	30002e26 	beq	r6,zero,81794 <_realloc_r+0x228>
   816dc:	3240b926 	beq	r6,r9,819c4 <_realloc_r+0x458>
   816e0:	98a9883a 	add	r20,r19,r2
   816e4:	2509883a 	add	r4,r4,r20
   816e8:	d9000015 	stw	r4,0(sp)
   816ec:	21c02a16 	blt	r4,r7,81798 <_realloc_r+0x22c>
   816f0:	30800317 	ldw	r2,12(r6)
   816f4:	30c00217 	ldw	r3,8(r6)
   816f8:	01400904 	movi	r5,36
   816fc:	99bfff04 	addi	r6,r19,-4
   81700:	18800315 	stw	r2,12(r3)
   81704:	10c00215 	stw	r3,8(r2)
   81708:	b9000317 	ldw	r4,12(r23)
   8170c:	b8800217 	ldw	r2,8(r23)
   81710:	b82b883a 	mov	r21,r23
   81714:	bc000204 	addi	r16,r23,8
   81718:	20800215 	stw	r2,8(r4)
   8171c:	11000315 	stw	r4,12(r2)
   81720:	2980e436 	bltu	r5,r6,81ab4 <_realloc_r+0x548>
   81724:	008004c4 	movi	r2,19
   81728:	9009883a 	mov	r4,r18
   8172c:	8011883a 	mov	r8,r16
   81730:	11800f2e 	bgeu	r2,r6,81770 <_realloc_r+0x204>
   81734:	90800017 	ldw	r2,0(r18)
   81738:	ba000404 	addi	r8,r23,16
   8173c:	91000204 	addi	r4,r18,8
   81740:	b8800215 	stw	r2,8(r23)
   81744:	90c00117 	ldw	r3,4(r18)
   81748:	008006c4 	movi	r2,27
   8174c:	b8c00315 	stw	r3,12(r23)
   81750:	1180072e 	bgeu	r2,r6,81770 <_realloc_r+0x204>
   81754:	90c00217 	ldw	r3,8(r18)
   81758:	ba000604 	addi	r8,r23,24
   8175c:	91000404 	addi	r4,r18,16
   81760:	b8c00415 	stw	r3,16(r23)
   81764:	90800317 	ldw	r2,12(r18)
   81768:	b8800515 	stw	r2,20(r23)
   8176c:	3140e726 	beq	r6,r5,81b0c <_realloc_r+0x5a0>
   81770:	20800017 	ldw	r2,0(r4)
   81774:	dd000017 	ldw	r20,0(sp)
   81778:	b80f883a 	mov	r7,r23
   8177c:	40800015 	stw	r2,0(r8)
   81780:	20c00117 	ldw	r3,4(r4)
   81784:	40c00115 	stw	r3,4(r8)
   81788:	20800217 	ldw	r2,8(r4)
   8178c:	40800215 	stw	r2,8(r8)
   81790:	003f9706 	br	815f0 <_realloc_r+0x84>
   81794:	98a9883a 	add	r20,r19,r2
   81798:	a1c01f16 	blt	r20,r7,81818 <_realloc_r+0x2ac>
   8179c:	b8c00317 	ldw	r3,12(r23)
   817a0:	b8800217 	ldw	r2,8(r23)
   817a4:	99bfff04 	addi	r6,r19,-4
   817a8:	01400904 	movi	r5,36
   817ac:	b82b883a 	mov	r21,r23
   817b0:	18800215 	stw	r2,8(r3)
   817b4:	10c00315 	stw	r3,12(r2)
   817b8:	bc000204 	addi	r16,r23,8
   817bc:	2980c336 	bltu	r5,r6,81acc <_realloc_r+0x560>
   817c0:	008004c4 	movi	r2,19
   817c4:	9009883a 	mov	r4,r18
   817c8:	8011883a 	mov	r8,r16
   817cc:	11800f2e 	bgeu	r2,r6,8180c <_realloc_r+0x2a0>
   817d0:	90800017 	ldw	r2,0(r18)
   817d4:	ba000404 	addi	r8,r23,16
   817d8:	91000204 	addi	r4,r18,8
   817dc:	b8800215 	stw	r2,8(r23)
   817e0:	90c00117 	ldw	r3,4(r18)
   817e4:	008006c4 	movi	r2,27
   817e8:	b8c00315 	stw	r3,12(r23)
   817ec:	1180072e 	bgeu	r2,r6,8180c <_realloc_r+0x2a0>
   817f0:	90c00217 	ldw	r3,8(r18)
   817f4:	ba000604 	addi	r8,r23,24
   817f8:	91000404 	addi	r4,r18,16
   817fc:	b8c00415 	stw	r3,16(r23)
   81800:	90800317 	ldw	r2,12(r18)
   81804:	b8800515 	stw	r2,20(r23)
   81808:	3140c726 	beq	r6,r5,81b28 <_realloc_r+0x5bc>
   8180c:	20800017 	ldw	r2,0(r4)
   81810:	b80f883a 	mov	r7,r23
   81814:	003fd906 	br	8177c <_realloc_r+0x210>
   81818:	880b883a 	mov	r5,r17
   8181c:	b009883a 	mov	r4,r22
   81820:	0080bc80 	call	80bc8 <_malloc_r>
   81824:	1023883a 	mov	r17,r2
   81828:	10002526 	beq	r2,zero,818c0 <_realloc_r+0x354>
   8182c:	80800117 	ldw	r2,4(r16)
   81830:	00ffff84 	movi	r3,-2
   81834:	893ffe04 	addi	r4,r17,-8
   81838:	10c4703a 	and	r2,r2,r3
   8183c:	8085883a 	add	r2,r16,r2
   81840:	20809526 	beq	r4,r2,81a98 <_realloc_r+0x52c>
   81844:	99bfff04 	addi	r6,r19,-4
   81848:	01c00904 	movi	r7,36
   8184c:	39804536 	bltu	r7,r6,81964 <_realloc_r+0x3f8>
   81850:	008004c4 	movi	r2,19
   81854:	9009883a 	mov	r4,r18
   81858:	880b883a 	mov	r5,r17
   8185c:	11800f2e 	bgeu	r2,r6,8189c <_realloc_r+0x330>
   81860:	90800017 	ldw	r2,0(r18)
   81864:	89400204 	addi	r5,r17,8
   81868:	91000204 	addi	r4,r18,8
   8186c:	88800015 	stw	r2,0(r17)
   81870:	90c00117 	ldw	r3,4(r18)
   81874:	008006c4 	movi	r2,27
   81878:	88c00115 	stw	r3,4(r17)
   8187c:	1180072e 	bgeu	r2,r6,8189c <_realloc_r+0x330>
   81880:	90c00217 	ldw	r3,8(r18)
   81884:	89400404 	addi	r5,r17,16
   81888:	91000404 	addi	r4,r18,16
   8188c:	88c00215 	stw	r3,8(r17)
   81890:	90800317 	ldw	r2,12(r18)
   81894:	88800315 	stw	r2,12(r17)
   81898:	31c09126 	beq	r6,r7,81ae0 <_realloc_r+0x574>
   8189c:	20800017 	ldw	r2,0(r4)
   818a0:	28800015 	stw	r2,0(r5)
   818a4:	20c00117 	ldw	r3,4(r4)
   818a8:	28c00115 	stw	r3,4(r5)
   818ac:	20800217 	ldw	r2,8(r4)
   818b0:	28800215 	stw	r2,8(r5)
   818b4:	900b883a 	mov	r5,r18
   818b8:	b009883a 	mov	r4,r22
   818bc:	008235c0 	call	8235c <_free_r>
   818c0:	b009883a 	mov	r4,r22
   818c4:	00837f40 	call	837f4 <__malloc_unlock>
   818c8:	003f5e06 	br	81644 <_realloc_r+0xd8>
   818cc:	300b883a 	mov	r5,r6
   818d0:	dfc00b17 	ldw	ra,44(sp)
   818d4:	df000a17 	ldw	fp,40(sp)
   818d8:	ddc00917 	ldw	r23,36(sp)
   818dc:	dd800817 	ldw	r22,32(sp)
   818e0:	dd400717 	ldw	r21,28(sp)
   818e4:	dd000617 	ldw	r20,24(sp)
   818e8:	dcc00517 	ldw	r19,20(sp)
   818ec:	dc800417 	ldw	r18,16(sp)
   818f0:	dc400317 	ldw	r17,12(sp)
   818f4:	dc000217 	ldw	r16,8(sp)
   818f8:	dec00c04 	addi	sp,sp,48
   818fc:	0080bc81 	jmpi	80bc8 <_malloc_r>
   81900:	38800117 	ldw	r2,4(r7)
   81904:	e54b883a 	add	r5,fp,r21
   81908:	31000054 	ori	r4,r6,1
   8190c:	1080004c 	andi	r2,r2,1
   81910:	1704b03a 	or	r2,r2,fp
   81914:	38800115 	stw	r2,4(r7)
   81918:	29000115 	stw	r4,4(r5)
   8191c:	2987883a 	add	r3,r5,r6
   81920:	18800117 	ldw	r2,4(r3)
   81924:	29400204 	addi	r5,r5,8
   81928:	b009883a 	mov	r4,r22
   8192c:	10800054 	ori	r2,r2,1
   81930:	18800115 	stw	r2,4(r3)
   81934:	008235c0 	call	8235c <_free_r>
   81938:	003f3806 	br	8161c <_realloc_r+0xb0>
   8193c:	000d883a 	mov	r6,zero
   81940:	0009883a 	mov	r4,zero
   81944:	003f5d06 	br	816bc <_realloc_r+0x150>
   81948:	30c00217 	ldw	r3,8(r6)
   8194c:	30800317 	ldw	r2,12(r6)
   81950:	800f883a 	mov	r7,r16
   81954:	84000204 	addi	r16,r16,8
   81958:	10c00215 	stw	r3,8(r2)
   8195c:	18800315 	stw	r2,12(r3)
   81960:	003f2306 	br	815f0 <_realloc_r+0x84>
   81964:	8809883a 	mov	r4,r17
   81968:	900b883a 	mov	r5,r18
   8196c:	008148c0 	call	8148c <memmove>
   81970:	003fd006 	br	818b4 <_realloc_r+0x348>
   81974:	30800117 	ldw	r2,4(r6)
   81978:	e0c00404 	addi	r3,fp,16
   8197c:	1108703a 	and	r4,r2,r4
   81980:	9905883a 	add	r2,r19,r4
   81984:	10ff4d16 	blt	r2,r3,816bc <_realloc_r+0x150>
   81988:	1705c83a 	sub	r2,r2,fp
   8198c:	870b883a 	add	r5,r16,fp
   81990:	10800054 	ori	r2,r2,1
   81994:	28800115 	stw	r2,4(r5)
   81998:	80c00117 	ldw	r3,4(r16)
   8199c:	00800234 	movhi	r2,8
   819a0:	1097ad04 	addi	r2,r2,24244
   819a4:	b009883a 	mov	r4,r22
   819a8:	18c0004c 	andi	r3,r3,1
   819ac:	e0c6b03a 	or	r3,fp,r3
   819b0:	11400215 	stw	r5,8(r2)
   819b4:	80c00115 	stw	r3,4(r16)
   819b8:	00837f40 	call	837f4 <__malloc_unlock>
   819bc:	84400204 	addi	r17,r16,8
   819c0:	003f2006 	br	81644 <_realloc_r+0xd8>
   819c4:	98a9883a 	add	r20,r19,r2
   819c8:	2509883a 	add	r4,r4,r20
   819cc:	e0800404 	addi	r2,fp,16
   819d0:	d9000115 	stw	r4,4(sp)
   819d4:	20bf7016 	blt	r4,r2,81798 <_realloc_r+0x22c>
   819d8:	b8c00317 	ldw	r3,12(r23)
   819dc:	b8800217 	ldw	r2,8(r23)
   819e0:	99bfff04 	addi	r6,r19,-4
   819e4:	01400904 	movi	r5,36
   819e8:	18800215 	stw	r2,8(r3)
   819ec:	10c00315 	stw	r3,12(r2)
   819f0:	bc400204 	addi	r17,r23,8
   819f4:	29804136 	bltu	r5,r6,81afc <_realloc_r+0x590>
   819f8:	008004c4 	movi	r2,19
   819fc:	9009883a 	mov	r4,r18
   81a00:	880f883a 	mov	r7,r17
   81a04:	11800f2e 	bgeu	r2,r6,81a44 <_realloc_r+0x4d8>
   81a08:	90800017 	ldw	r2,0(r18)
   81a0c:	b9c00404 	addi	r7,r23,16
   81a10:	91000204 	addi	r4,r18,8
   81a14:	b8800215 	stw	r2,8(r23)
   81a18:	90c00117 	ldw	r3,4(r18)
   81a1c:	008006c4 	movi	r2,27
   81a20:	b8c00315 	stw	r3,12(r23)
   81a24:	1180072e 	bgeu	r2,r6,81a44 <_realloc_r+0x4d8>
   81a28:	90c00217 	ldw	r3,8(r18)
   81a2c:	b9c00604 	addi	r7,r23,24
   81a30:	91000404 	addi	r4,r18,16
   81a34:	b8c00415 	stw	r3,16(r23)
   81a38:	90800317 	ldw	r2,12(r18)
   81a3c:	b8800515 	stw	r2,20(r23)
   81a40:	31404026 	beq	r6,r5,81b44 <_realloc_r+0x5d8>
   81a44:	20800017 	ldw	r2,0(r4)
   81a48:	38800015 	stw	r2,0(r7)
   81a4c:	20c00117 	ldw	r3,4(r4)
   81a50:	38c00115 	stw	r3,4(r7)
   81a54:	20800217 	ldw	r2,8(r4)
   81a58:	38800215 	stw	r2,8(r7)
   81a5c:	d8c00117 	ldw	r3,4(sp)
   81a60:	bf0b883a 	add	r5,r23,fp
   81a64:	b009883a 	mov	r4,r22
   81a68:	1f05c83a 	sub	r2,r3,fp
   81a6c:	10800054 	ori	r2,r2,1
   81a70:	28800115 	stw	r2,4(r5)
   81a74:	b8c00117 	ldw	r3,4(r23)
   81a78:	00800234 	movhi	r2,8
   81a7c:	1097ad04 	addi	r2,r2,24244
   81a80:	11400215 	stw	r5,8(r2)
   81a84:	18c0004c 	andi	r3,r3,1
   81a88:	e0c6b03a 	or	r3,fp,r3
   81a8c:	b8c00115 	stw	r3,4(r23)
   81a90:	00837f40 	call	837f4 <__malloc_unlock>
   81a94:	003eeb06 	br	81644 <_realloc_r+0xd8>
   81a98:	20800117 	ldw	r2,4(r4)
   81a9c:	00ffff04 	movi	r3,-4
   81aa0:	800f883a 	mov	r7,r16
   81aa4:	10c4703a 	and	r2,r2,r3
   81aa8:	98a9883a 	add	r20,r19,r2
   81aac:	84000204 	addi	r16,r16,8
   81ab0:	003ecf06 	br	815f0 <_realloc_r+0x84>
   81ab4:	900b883a 	mov	r5,r18
   81ab8:	8009883a 	mov	r4,r16
   81abc:	008148c0 	call	8148c <memmove>
   81ac0:	dd000017 	ldw	r20,0(sp)
   81ac4:	b80f883a 	mov	r7,r23
   81ac8:	003ec906 	br	815f0 <_realloc_r+0x84>
   81acc:	900b883a 	mov	r5,r18
   81ad0:	8009883a 	mov	r4,r16
   81ad4:	008148c0 	call	8148c <memmove>
   81ad8:	b80f883a 	mov	r7,r23
   81adc:	003ec406 	br	815f0 <_realloc_r+0x84>
   81ae0:	90c00417 	ldw	r3,16(r18)
   81ae4:	89400604 	addi	r5,r17,24
   81ae8:	91000604 	addi	r4,r18,24
   81aec:	88c00415 	stw	r3,16(r17)
   81af0:	90800517 	ldw	r2,20(r18)
   81af4:	88800515 	stw	r2,20(r17)
   81af8:	003f6806 	br	8189c <_realloc_r+0x330>
   81afc:	900b883a 	mov	r5,r18
   81b00:	8809883a 	mov	r4,r17
   81b04:	008148c0 	call	8148c <memmove>
   81b08:	003fd406 	br	81a5c <_realloc_r+0x4f0>
   81b0c:	90c00417 	ldw	r3,16(r18)
   81b10:	91000604 	addi	r4,r18,24
   81b14:	ba000804 	addi	r8,r23,32
   81b18:	b8c00615 	stw	r3,24(r23)
   81b1c:	90800517 	ldw	r2,20(r18)
   81b20:	b8800715 	stw	r2,28(r23)
   81b24:	003f1206 	br	81770 <_realloc_r+0x204>
   81b28:	90c00417 	ldw	r3,16(r18)
   81b2c:	91000604 	addi	r4,r18,24
   81b30:	ba000804 	addi	r8,r23,32
   81b34:	b8c00615 	stw	r3,24(r23)
   81b38:	90800517 	ldw	r2,20(r18)
   81b3c:	b8800715 	stw	r2,28(r23)
   81b40:	003f3206 	br	8180c <_realloc_r+0x2a0>
   81b44:	90c00417 	ldw	r3,16(r18)
   81b48:	91000604 	addi	r4,r18,24
   81b4c:	b9c00804 	addi	r7,r23,32
   81b50:	b8c00615 	stw	r3,24(r23)
   81b54:	90800517 	ldw	r2,20(r18)
   81b58:	b8800715 	stw	r2,28(r23)
   81b5c:	003fb906 	br	81a44 <_realloc_r+0x4d8>

00081b60 <_sbrk_r>:
   81b60:	defffd04 	addi	sp,sp,-12
   81b64:	dc000015 	stw	r16,0(sp)
   81b68:	04000274 	movhi	r16,9
   81b6c:	8423ee04 	addi	r16,r16,-28744
   81b70:	dc400115 	stw	r17,4(sp)
   81b74:	80000015 	stw	zero,0(r16)
   81b78:	2023883a 	mov	r17,r4
   81b7c:	2809883a 	mov	r4,r5
   81b80:	dfc00215 	stw	ra,8(sp)
   81b84:	0083a100 	call	83a10 <sbrk>
   81b88:	1007883a 	mov	r3,r2
   81b8c:	00bfffc4 	movi	r2,-1
   81b90:	18800626 	beq	r3,r2,81bac <_sbrk_r+0x4c>
   81b94:	1805883a 	mov	r2,r3
   81b98:	dfc00217 	ldw	ra,8(sp)
   81b9c:	dc400117 	ldw	r17,4(sp)
   81ba0:	dc000017 	ldw	r16,0(sp)
   81ba4:	dec00304 	addi	sp,sp,12
   81ba8:	f800283a 	ret
   81bac:	80800017 	ldw	r2,0(r16)
   81bb0:	103ff826 	beq	r2,zero,81b94 <_sbrk_r+0x34>
   81bb4:	88800015 	stw	r2,0(r17)
   81bb8:	1805883a 	mov	r2,r3
   81bbc:	dfc00217 	ldw	ra,8(sp)
   81bc0:	dc400117 	ldw	r17,4(sp)
   81bc4:	dc000017 	ldw	r16,0(sp)
   81bc8:	dec00304 	addi	sp,sp,12
   81bcc:	f800283a 	ret

00081bd0 <__swsetup_r>:
   81bd0:	00800234 	movhi	r2,8
   81bd4:	109d3404 	addi	r2,r2,29904
   81bd8:	10c00017 	ldw	r3,0(r2)
   81bdc:	defffd04 	addi	sp,sp,-12
   81be0:	dc400115 	stw	r17,4(sp)
   81be4:	dc000015 	stw	r16,0(sp)
   81be8:	dfc00215 	stw	ra,8(sp)
   81bec:	2023883a 	mov	r17,r4
   81bf0:	2821883a 	mov	r16,r5
   81bf4:	18000226 	beq	r3,zero,81c00 <__swsetup_r+0x30>
   81bf8:	18800e17 	ldw	r2,56(r3)
   81bfc:	10001f26 	beq	r2,zero,81c7c <__swsetup_r+0xac>
   81c00:	8100030b 	ldhu	r4,12(r16)
   81c04:	2080020c 	andi	r2,r4,8
   81c08:	10002826 	beq	r2,zero,81cac <__swsetup_r+0xdc>
   81c0c:	81400417 	ldw	r5,16(r16)
   81c10:	28001d26 	beq	r5,zero,81c88 <__swsetup_r+0xb8>
   81c14:	2080004c 	andi	r2,r4,1
   81c18:	1005003a 	cmpeq	r2,r2,zero
   81c1c:	10000b26 	beq	r2,zero,81c4c <__swsetup_r+0x7c>
   81c20:	2080008c 	andi	r2,r4,2
   81c24:	10001226 	beq	r2,zero,81c70 <__swsetup_r+0xa0>
   81c28:	0005883a 	mov	r2,zero
   81c2c:	80800215 	stw	r2,8(r16)
   81c30:	28000b26 	beq	r5,zero,81c60 <__swsetup_r+0x90>
   81c34:	0005883a 	mov	r2,zero
   81c38:	dfc00217 	ldw	ra,8(sp)
   81c3c:	dc400117 	ldw	r17,4(sp)
   81c40:	dc000017 	ldw	r16,0(sp)
   81c44:	dec00304 	addi	sp,sp,12
   81c48:	f800283a 	ret
   81c4c:	80800517 	ldw	r2,20(r16)
   81c50:	80000215 	stw	zero,8(r16)
   81c54:	0085c83a 	sub	r2,zero,r2
   81c58:	80800615 	stw	r2,24(r16)
   81c5c:	283ff51e 	bne	r5,zero,81c34 <__swsetup_r+0x64>
   81c60:	2080200c 	andi	r2,r4,128
   81c64:	103ff326 	beq	r2,zero,81c34 <__swsetup_r+0x64>
   81c68:	00bfffc4 	movi	r2,-1
   81c6c:	003ff206 	br	81c38 <__swsetup_r+0x68>
   81c70:	80800517 	ldw	r2,20(r16)
   81c74:	80800215 	stw	r2,8(r16)
   81c78:	003fed06 	br	81c30 <__swsetup_r+0x60>
   81c7c:	1809883a 	mov	r4,r3
   81c80:	0081fa40 	call	81fa4 <__sinit>
   81c84:	003fde06 	br	81c00 <__swsetup_r+0x30>
   81c88:	20c0a00c 	andi	r3,r4,640
   81c8c:	00808004 	movi	r2,512
   81c90:	18bfe026 	beq	r3,r2,81c14 <__swsetup_r+0x44>
   81c94:	8809883a 	mov	r4,r17
   81c98:	800b883a 	mov	r5,r16
   81c9c:	00827f00 	call	827f0 <__smakebuf_r>
   81ca0:	8100030b 	ldhu	r4,12(r16)
   81ca4:	81400417 	ldw	r5,16(r16)
   81ca8:	003fda06 	br	81c14 <__swsetup_r+0x44>
   81cac:	2080040c 	andi	r2,r4,16
   81cb0:	103fed26 	beq	r2,zero,81c68 <__swsetup_r+0x98>
   81cb4:	2080010c 	andi	r2,r4,4
   81cb8:	10001226 	beq	r2,zero,81d04 <__swsetup_r+0x134>
   81cbc:	81400c17 	ldw	r5,48(r16)
   81cc0:	28000526 	beq	r5,zero,81cd8 <__swsetup_r+0x108>
   81cc4:	80801004 	addi	r2,r16,64
   81cc8:	28800226 	beq	r5,r2,81cd4 <__swsetup_r+0x104>
   81ccc:	8809883a 	mov	r4,r17
   81cd0:	008235c0 	call	8235c <_free_r>
   81cd4:	80000c15 	stw	zero,48(r16)
   81cd8:	8080030b 	ldhu	r2,12(r16)
   81cdc:	81400417 	ldw	r5,16(r16)
   81ce0:	80000115 	stw	zero,4(r16)
   81ce4:	10bff6cc 	andi	r2,r2,65499
   81ce8:	8080030d 	sth	r2,12(r16)
   81cec:	81400015 	stw	r5,0(r16)
   81cf0:	8080030b 	ldhu	r2,12(r16)
   81cf4:	10800214 	ori	r2,r2,8
   81cf8:	113fffcc 	andi	r4,r2,65535
   81cfc:	8080030d 	sth	r2,12(r16)
   81d00:	003fc306 	br	81c10 <__swsetup_r+0x40>
   81d04:	81400417 	ldw	r5,16(r16)
   81d08:	003ff906 	br	81cf0 <__swsetup_r+0x120>

00081d0c <_fflush_r>:
   81d0c:	defffb04 	addi	sp,sp,-20
   81d10:	dcc00315 	stw	r19,12(sp)
   81d14:	dc800215 	stw	r18,8(sp)
   81d18:	dfc00415 	stw	ra,16(sp)
   81d1c:	dc400115 	stw	r17,4(sp)
   81d20:	dc000015 	stw	r16,0(sp)
   81d24:	2027883a 	mov	r19,r4
   81d28:	2825883a 	mov	r18,r5
   81d2c:	20000226 	beq	r4,zero,81d38 <_fflush_r+0x2c>
   81d30:	20800e17 	ldw	r2,56(r4)
   81d34:	10005626 	beq	r2,zero,81e90 <_fflush_r+0x184>
   81d38:	9100030b 	ldhu	r4,12(r18)
   81d3c:	20ffffcc 	andi	r3,r4,65535
   81d40:	18e0001c 	xori	r3,r3,32768
   81d44:	18e00004 	addi	r3,r3,-32768
   81d48:	1880020c 	andi	r2,r3,8
   81d4c:	1000261e 	bne	r2,zero,81de8 <_fflush_r+0xdc>
   81d50:	90c00117 	ldw	r3,4(r18)
   81d54:	20820014 	ori	r2,r4,2048
   81d58:	9080030d 	sth	r2,12(r18)
   81d5c:	1009883a 	mov	r4,r2
   81d60:	00c0400e 	bge	zero,r3,81e64 <_fflush_r+0x158>
   81d64:	92000a17 	ldw	r8,40(r18)
   81d68:	40004026 	beq	r8,zero,81e6c <_fflush_r+0x160>
   81d6c:	2084000c 	andi	r2,r4,4096
   81d70:	10005326 	beq	r2,zero,81ec0 <_fflush_r+0x1b4>
   81d74:	94001417 	ldw	r16,80(r18)
   81d78:	9080030b 	ldhu	r2,12(r18)
   81d7c:	1080010c 	andi	r2,r2,4
   81d80:	1000481e 	bne	r2,zero,81ea4 <_fflush_r+0x198>
   81d84:	91400717 	ldw	r5,28(r18)
   81d88:	9809883a 	mov	r4,r19
   81d8c:	800d883a 	mov	r6,r16
   81d90:	000f883a 	mov	r7,zero
   81d94:	403ee83a 	callr	r8
   81d98:	8080261e 	bne	r16,r2,81e34 <_fflush_r+0x128>
   81d9c:	9080030b 	ldhu	r2,12(r18)
   81da0:	91000417 	ldw	r4,16(r18)
   81da4:	90000115 	stw	zero,4(r18)
   81da8:	10bdffcc 	andi	r2,r2,63487
   81dac:	10ffffcc 	andi	r3,r2,65535
   81db0:	18c4000c 	andi	r3,r3,4096
   81db4:	9080030d 	sth	r2,12(r18)
   81db8:	91000015 	stw	r4,0(r18)
   81dbc:	18002b26 	beq	r3,zero,81e6c <_fflush_r+0x160>
   81dc0:	0007883a 	mov	r3,zero
   81dc4:	1805883a 	mov	r2,r3
   81dc8:	94001415 	stw	r16,80(r18)
   81dcc:	dfc00417 	ldw	ra,16(sp)
   81dd0:	dcc00317 	ldw	r19,12(sp)
   81dd4:	dc800217 	ldw	r18,8(sp)
   81dd8:	dc400117 	ldw	r17,4(sp)
   81ddc:	dc000017 	ldw	r16,0(sp)
   81de0:	dec00504 	addi	sp,sp,20
   81de4:	f800283a 	ret
   81de8:	94400417 	ldw	r17,16(r18)
   81dec:	88001f26 	beq	r17,zero,81e6c <_fflush_r+0x160>
   81df0:	90800017 	ldw	r2,0(r18)
   81df4:	18c000cc 	andi	r3,r3,3
   81df8:	94400015 	stw	r17,0(r18)
   81dfc:	1461c83a 	sub	r16,r2,r17
   81e00:	18002526 	beq	r3,zero,81e98 <_fflush_r+0x18c>
   81e04:	0005883a 	mov	r2,zero
   81e08:	90800215 	stw	r2,8(r18)
   81e0c:	0400170e 	bge	zero,r16,81e6c <_fflush_r+0x160>
   81e10:	90c00917 	ldw	r3,36(r18)
   81e14:	91400717 	ldw	r5,28(r18)
   81e18:	880d883a 	mov	r6,r17
   81e1c:	800f883a 	mov	r7,r16
   81e20:	9809883a 	mov	r4,r19
   81e24:	183ee83a 	callr	r3
   81e28:	88a3883a 	add	r17,r17,r2
   81e2c:	80a1c83a 	sub	r16,r16,r2
   81e30:	00bff616 	blt	zero,r2,81e0c <_fflush_r+0x100>
   81e34:	9080030b 	ldhu	r2,12(r18)
   81e38:	00ffffc4 	movi	r3,-1
   81e3c:	10801014 	ori	r2,r2,64
   81e40:	9080030d 	sth	r2,12(r18)
   81e44:	1805883a 	mov	r2,r3
   81e48:	dfc00417 	ldw	ra,16(sp)
   81e4c:	dcc00317 	ldw	r19,12(sp)
   81e50:	dc800217 	ldw	r18,8(sp)
   81e54:	dc400117 	ldw	r17,4(sp)
   81e58:	dc000017 	ldw	r16,0(sp)
   81e5c:	dec00504 	addi	sp,sp,20
   81e60:	f800283a 	ret
   81e64:	90800f17 	ldw	r2,60(r18)
   81e68:	00bfbe16 	blt	zero,r2,81d64 <_fflush_r+0x58>
   81e6c:	0007883a 	mov	r3,zero
   81e70:	1805883a 	mov	r2,r3
   81e74:	dfc00417 	ldw	ra,16(sp)
   81e78:	dcc00317 	ldw	r19,12(sp)
   81e7c:	dc800217 	ldw	r18,8(sp)
   81e80:	dc400117 	ldw	r17,4(sp)
   81e84:	dc000017 	ldw	r16,0(sp)
   81e88:	dec00504 	addi	sp,sp,20
   81e8c:	f800283a 	ret
   81e90:	0081fa40 	call	81fa4 <__sinit>
   81e94:	003fa806 	br	81d38 <_fflush_r+0x2c>
   81e98:	90800517 	ldw	r2,20(r18)
   81e9c:	90800215 	stw	r2,8(r18)
   81ea0:	003fda06 	br	81e0c <_fflush_r+0x100>
   81ea4:	90800117 	ldw	r2,4(r18)
   81ea8:	90c00c17 	ldw	r3,48(r18)
   81eac:	80a1c83a 	sub	r16,r16,r2
   81eb0:	183fb426 	beq	r3,zero,81d84 <_fflush_r+0x78>
   81eb4:	90800f17 	ldw	r2,60(r18)
   81eb8:	80a1c83a 	sub	r16,r16,r2
   81ebc:	003fb106 	br	81d84 <_fflush_r+0x78>
   81ec0:	91400717 	ldw	r5,28(r18)
   81ec4:	9809883a 	mov	r4,r19
   81ec8:	000d883a 	mov	r6,zero
   81ecc:	01c00044 	movi	r7,1
   81ed0:	403ee83a 	callr	r8
   81ed4:	1021883a 	mov	r16,r2
   81ed8:	00bfffc4 	movi	r2,-1
   81edc:	80800226 	beq	r16,r2,81ee8 <_fflush_r+0x1dc>
   81ee0:	92000a17 	ldw	r8,40(r18)
   81ee4:	003fa406 	br	81d78 <_fflush_r+0x6c>
   81ee8:	98c00017 	ldw	r3,0(r19)
   81eec:	00800744 	movi	r2,29
   81ef0:	18bfde26 	beq	r3,r2,81e6c <_fflush_r+0x160>
   81ef4:	9080030b 	ldhu	r2,12(r18)
   81ef8:	8007883a 	mov	r3,r16
   81efc:	10801014 	ori	r2,r2,64
   81f00:	9080030d 	sth	r2,12(r18)
   81f04:	003fcf06 	br	81e44 <_fflush_r+0x138>

00081f08 <fflush>:
   81f08:	01400234 	movhi	r5,8
   81f0c:	29474304 	addi	r5,r5,7436
   81f10:	2007883a 	mov	r3,r4
   81f14:	20000526 	beq	r4,zero,81f2c <fflush+0x24>
   81f18:	00800234 	movhi	r2,8
   81f1c:	109d3404 	addi	r2,r2,29904
   81f20:	11000017 	ldw	r4,0(r2)
   81f24:	180b883a 	mov	r5,r3
   81f28:	0081d0c1 	jmpi	81d0c <_fflush_r>
   81f2c:	00800234 	movhi	r2,8
   81f30:	109d3504 	addi	r2,r2,29908
   81f34:	11000017 	ldw	r4,0(r2)
   81f38:	00826701 	jmpi	82670 <_fwalk_reent>

00081f3c <std>:
   81f3c:	00800234 	movhi	r2,8
   81f40:	108a8704 	addi	r2,r2,10780
   81f44:	20800b15 	stw	r2,44(r4)
   81f48:	00800234 	movhi	r2,8
   81f4c:	108ac204 	addi	r2,r2,11016
   81f50:	20800815 	stw	r2,32(r4)
   81f54:	00c00234 	movhi	r3,8
   81f58:	18caa304 	addi	r3,r3,10892
   81f5c:	00800234 	movhi	r2,8
   81f60:	108a8904 	addi	r2,r2,10788
   81f64:	2140030d 	sth	r5,12(r4)
   81f68:	2180038d 	sth	r6,14(r4)
   81f6c:	20c00915 	stw	r3,36(r4)
   81f70:	20800a15 	stw	r2,40(r4)
   81f74:	20000015 	stw	zero,0(r4)
   81f78:	20000115 	stw	zero,4(r4)
   81f7c:	20000215 	stw	zero,8(r4)
   81f80:	20000415 	stw	zero,16(r4)
   81f84:	20000515 	stw	zero,20(r4)
   81f88:	20000615 	stw	zero,24(r4)
   81f8c:	21000715 	stw	r4,28(r4)
   81f90:	f800283a 	ret

00081f94 <__sfp_lock_acquire>:
   81f94:	f800283a 	ret

00081f98 <__sfp_lock_release>:
   81f98:	f800283a 	ret

00081f9c <__sinit_lock_acquire>:
   81f9c:	f800283a 	ret

00081fa0 <__sinit_lock_release>:
   81fa0:	f800283a 	ret

00081fa4 <__sinit>:
   81fa4:	20800e17 	ldw	r2,56(r4)
   81fa8:	defffd04 	addi	sp,sp,-12
   81fac:	dc400115 	stw	r17,4(sp)
   81fb0:	dc000015 	stw	r16,0(sp)
   81fb4:	dfc00215 	stw	ra,8(sp)
   81fb8:	04400044 	movi	r17,1
   81fbc:	01400104 	movi	r5,4
   81fc0:	000d883a 	mov	r6,zero
   81fc4:	2021883a 	mov	r16,r4
   81fc8:	2200bb04 	addi	r8,r4,748
   81fcc:	200f883a 	mov	r7,r4
   81fd0:	10000526 	beq	r2,zero,81fe8 <__sinit+0x44>
   81fd4:	dfc00217 	ldw	ra,8(sp)
   81fd8:	dc400117 	ldw	r17,4(sp)
   81fdc:	dc000017 	ldw	r16,0(sp)
   81fe0:	dec00304 	addi	sp,sp,12
   81fe4:	f800283a 	ret
   81fe8:	21000117 	ldw	r4,4(r4)
   81fec:	00800234 	movhi	r2,8
   81ff0:	10882204 	addi	r2,r2,8328
   81ff4:	00c000c4 	movi	r3,3
   81ff8:	80800f15 	stw	r2,60(r16)
   81ffc:	80c0b915 	stw	r3,740(r16)
   82000:	8200ba15 	stw	r8,744(r16)
   82004:	84400e15 	stw	r17,56(r16)
   82008:	8000b815 	stw	zero,736(r16)
   8200c:	0081f3c0 	call	81f3c <std>
   82010:	81000217 	ldw	r4,8(r16)
   82014:	880d883a 	mov	r6,r17
   82018:	800f883a 	mov	r7,r16
   8201c:	01400284 	movi	r5,10
   82020:	0081f3c0 	call	81f3c <std>
   82024:	81000317 	ldw	r4,12(r16)
   82028:	800f883a 	mov	r7,r16
   8202c:	01400484 	movi	r5,18
   82030:	01800084 	movi	r6,2
   82034:	dfc00217 	ldw	ra,8(sp)
   82038:	dc400117 	ldw	r17,4(sp)
   8203c:	dc000017 	ldw	r16,0(sp)
   82040:	dec00304 	addi	sp,sp,12
   82044:	0081f3c1 	jmpi	81f3c <std>

00082048 <__fp_lock>:
   82048:	0005883a 	mov	r2,zero
   8204c:	f800283a 	ret

00082050 <__fp_unlock>:
   82050:	0005883a 	mov	r2,zero
   82054:	f800283a 	ret

00082058 <__fp_unlock_all>:
   82058:	00800234 	movhi	r2,8
   8205c:	109d3404 	addi	r2,r2,29904
   82060:	11000017 	ldw	r4,0(r2)
   82064:	01400234 	movhi	r5,8
   82068:	29481404 	addi	r5,r5,8272
   8206c:	00827381 	jmpi	82738 <_fwalk>

00082070 <__fp_lock_all>:
   82070:	00800234 	movhi	r2,8
   82074:	109d3404 	addi	r2,r2,29904
   82078:	11000017 	ldw	r4,0(r2)
   8207c:	01400234 	movhi	r5,8
   82080:	29481204 	addi	r5,r5,8264
   82084:	00827381 	jmpi	82738 <_fwalk>

00082088 <_cleanup_r>:
   82088:	01400234 	movhi	r5,8
   8208c:	294b5804 	addi	r5,r5,11616
   82090:	00827381 	jmpi	82738 <_fwalk>

00082094 <_cleanup>:
   82094:	00800234 	movhi	r2,8
   82098:	109d3504 	addi	r2,r2,29908
   8209c:	11000017 	ldw	r4,0(r2)
   820a0:	00820881 	jmpi	82088 <_cleanup_r>

000820a4 <__sfmoreglue>:
   820a4:	defffc04 	addi	sp,sp,-16
   820a8:	dc000015 	stw	r16,0(sp)
   820ac:	2821883a 	mov	r16,r5
   820b0:	dc400115 	stw	r17,4(sp)
   820b4:	01401704 	movi	r5,92
   820b8:	2023883a 	mov	r17,r4
   820bc:	8009883a 	mov	r4,r16
   820c0:	dfc00315 	stw	ra,12(sp)
   820c4:	dcc00215 	stw	r19,8(sp)
   820c8:	0082f480 	call	82f48 <__mulsi3>
   820cc:	11400304 	addi	r5,r2,12
   820d0:	8809883a 	mov	r4,r17
   820d4:	1027883a 	mov	r19,r2
   820d8:	0080bc80 	call	80bc8 <_malloc_r>
   820dc:	10c00304 	addi	r3,r2,12
   820e0:	1023883a 	mov	r17,r2
   820e4:	1809883a 	mov	r4,r3
   820e8:	980d883a 	mov	r6,r19
   820ec:	000b883a 	mov	r5,zero
   820f0:	10000b26 	beq	r2,zero,82120 <__sfmoreglue+0x7c>
   820f4:	14000115 	stw	r16,4(r2)
   820f8:	10c00215 	stw	r3,8(r2)
   820fc:	10000015 	stw	zero,0(r2)
   82100:	00829840 	call	82984 <memset>
   82104:	8805883a 	mov	r2,r17
   82108:	dfc00317 	ldw	ra,12(sp)
   8210c:	dcc00217 	ldw	r19,8(sp)
   82110:	dc400117 	ldw	r17,4(sp)
   82114:	dc000017 	ldw	r16,0(sp)
   82118:	dec00404 	addi	sp,sp,16
   8211c:	f800283a 	ret
   82120:	0023883a 	mov	r17,zero
   82124:	8805883a 	mov	r2,r17
   82128:	dfc00317 	ldw	ra,12(sp)
   8212c:	dcc00217 	ldw	r19,8(sp)
   82130:	dc400117 	ldw	r17,4(sp)
   82134:	dc000017 	ldw	r16,0(sp)
   82138:	dec00404 	addi	sp,sp,16
   8213c:	f800283a 	ret

00082140 <__sfp>:
   82140:	defffd04 	addi	sp,sp,-12
   82144:	00800234 	movhi	r2,8
   82148:	109d3504 	addi	r2,r2,29908
   8214c:	dc000015 	stw	r16,0(sp)
   82150:	14000017 	ldw	r16,0(r2)
   82154:	dc400115 	stw	r17,4(sp)
   82158:	dfc00215 	stw	ra,8(sp)
   8215c:	80800e17 	ldw	r2,56(r16)
   82160:	2023883a 	mov	r17,r4
   82164:	10002626 	beq	r2,zero,82200 <__sfp+0xc0>
   82168:	8400b804 	addi	r16,r16,736
   8216c:	80800117 	ldw	r2,4(r16)
   82170:	81000217 	ldw	r4,8(r16)
   82174:	10ffffc4 	addi	r3,r2,-1
   82178:	18000916 	blt	r3,zero,821a0 <__sfp+0x60>
   8217c:	2080030f 	ldh	r2,12(r4)
   82180:	10000b26 	beq	r2,zero,821b0 <__sfp+0x70>
   82184:	017fffc4 	movi	r5,-1
   82188:	00000206 	br	82194 <__sfp+0x54>
   8218c:	2080030f 	ldh	r2,12(r4)
   82190:	10000726 	beq	r2,zero,821b0 <__sfp+0x70>
   82194:	18ffffc4 	addi	r3,r3,-1
   82198:	21001704 	addi	r4,r4,92
   8219c:	197ffb1e 	bne	r3,r5,8218c <__sfp+0x4c>
   821a0:	80800017 	ldw	r2,0(r16)
   821a4:	10001926 	beq	r2,zero,8220c <__sfp+0xcc>
   821a8:	1021883a 	mov	r16,r2
   821ac:	003fef06 	br	8216c <__sfp+0x2c>
   821b0:	00bfffc4 	movi	r2,-1
   821b4:	00c00044 	movi	r3,1
   821b8:	2080038d 	sth	r2,14(r4)
   821bc:	20c0030d 	sth	r3,12(r4)
   821c0:	20000015 	stw	zero,0(r4)
   821c4:	20000215 	stw	zero,8(r4)
   821c8:	20000115 	stw	zero,4(r4)
   821cc:	20000415 	stw	zero,16(r4)
   821d0:	20000515 	stw	zero,20(r4)
   821d4:	20000615 	stw	zero,24(r4)
   821d8:	20000c15 	stw	zero,48(r4)
   821dc:	20000d15 	stw	zero,52(r4)
   821e0:	20001115 	stw	zero,68(r4)
   821e4:	20001215 	stw	zero,72(r4)
   821e8:	2005883a 	mov	r2,r4
   821ec:	dfc00217 	ldw	ra,8(sp)
   821f0:	dc400117 	ldw	r17,4(sp)
   821f4:	dc000017 	ldw	r16,0(sp)
   821f8:	dec00304 	addi	sp,sp,12
   821fc:	f800283a 	ret
   82200:	8009883a 	mov	r4,r16
   82204:	0081fa40 	call	81fa4 <__sinit>
   82208:	003fd706 	br	82168 <__sfp+0x28>
   8220c:	8809883a 	mov	r4,r17
   82210:	01400104 	movi	r5,4
   82214:	00820a40 	call	820a4 <__sfmoreglue>
   82218:	80800015 	stw	r2,0(r16)
   8221c:	103fe21e 	bne	r2,zero,821a8 <__sfp+0x68>
   82220:	00800304 	movi	r2,12
   82224:	0009883a 	mov	r4,zero
   82228:	88800015 	stw	r2,0(r17)
   8222c:	003fee06 	br	821e8 <__sfp+0xa8>

00082230 <_malloc_trim_r>:
   82230:	defffb04 	addi	sp,sp,-20
   82234:	dcc00315 	stw	r19,12(sp)
   82238:	04c00234 	movhi	r19,8
   8223c:	9cd7ad04 	addi	r19,r19,24244
   82240:	dc800215 	stw	r18,8(sp)
   82244:	dc400115 	stw	r17,4(sp)
   82248:	dc000015 	stw	r16,0(sp)
   8224c:	2823883a 	mov	r17,r5
   82250:	2025883a 	mov	r18,r4
   82254:	dfc00415 	stw	ra,16(sp)
   82258:	00837d40 	call	837d4 <__malloc_lock>
   8225c:	98800217 	ldw	r2,8(r19)
   82260:	9009883a 	mov	r4,r18
   82264:	000b883a 	mov	r5,zero
   82268:	10c00117 	ldw	r3,4(r2)
   8226c:	00bfff04 	movi	r2,-4
   82270:	18a0703a 	and	r16,r3,r2
   82274:	8463c83a 	sub	r17,r16,r17
   82278:	8c43fbc4 	addi	r17,r17,4079
   8227c:	8822d33a 	srli	r17,r17,12
   82280:	0083ffc4 	movi	r2,4095
   82284:	8c7fffc4 	addi	r17,r17,-1
   82288:	8822933a 	slli	r17,r17,12
   8228c:	1440060e 	bge	r2,r17,822a8 <_malloc_trim_r+0x78>
   82290:	0081b600 	call	81b60 <_sbrk_r>
   82294:	98c00217 	ldw	r3,8(r19)
   82298:	9009883a 	mov	r4,r18
   8229c:	044bc83a 	sub	r5,zero,r17
   822a0:	80c7883a 	add	r3,r16,r3
   822a4:	10c00926 	beq	r2,r3,822cc <_malloc_trim_r+0x9c>
   822a8:	00837f40 	call	837f4 <__malloc_unlock>
   822ac:	0005883a 	mov	r2,zero
   822b0:	dfc00417 	ldw	ra,16(sp)
   822b4:	dcc00317 	ldw	r19,12(sp)
   822b8:	dc800217 	ldw	r18,8(sp)
   822bc:	dc400117 	ldw	r17,4(sp)
   822c0:	dc000017 	ldw	r16,0(sp)
   822c4:	dec00504 	addi	sp,sp,20
   822c8:	f800283a 	ret
   822cc:	9009883a 	mov	r4,r18
   822d0:	0081b600 	call	81b60 <_sbrk_r>
   822d4:	844dc83a 	sub	r6,r16,r17
   822d8:	00ffffc4 	movi	r3,-1
   822dc:	9009883a 	mov	r4,r18
   822e0:	000b883a 	mov	r5,zero
   822e4:	01c00274 	movhi	r7,9
   822e8:	39e3f504 	addi	r7,r7,-28716
   822ec:	31800054 	ori	r6,r6,1
   822f0:	10c00926 	beq	r2,r3,82318 <_malloc_trim_r+0xe8>
   822f4:	38800017 	ldw	r2,0(r7)
   822f8:	98c00217 	ldw	r3,8(r19)
   822fc:	9009883a 	mov	r4,r18
   82300:	1445c83a 	sub	r2,r2,r17
   82304:	38800015 	stw	r2,0(r7)
   82308:	19800115 	stw	r6,4(r3)
   8230c:	00837f40 	call	837f4 <__malloc_unlock>
   82310:	00800044 	movi	r2,1
   82314:	003fe606 	br	822b0 <_malloc_trim_r+0x80>
   82318:	0081b600 	call	81b60 <_sbrk_r>
   8231c:	99800217 	ldw	r6,8(r19)
   82320:	100f883a 	mov	r7,r2
   82324:	9009883a 	mov	r4,r18
   82328:	1187c83a 	sub	r3,r2,r6
   8232c:	008003c4 	movi	r2,15
   82330:	19400054 	ori	r5,r3,1
   82334:	10ffdc0e 	bge	r2,r3,822a8 <_malloc_trim_r+0x78>
   82338:	00800234 	movhi	r2,8
   8233c:	109d3704 	addi	r2,r2,29916
   82340:	10c00017 	ldw	r3,0(r2)
   82344:	00800274 	movhi	r2,9
   82348:	10a3f504 	addi	r2,r2,-28716
   8234c:	31400115 	stw	r5,4(r6)
   82350:	38c7c83a 	sub	r3,r7,r3
   82354:	10c00015 	stw	r3,0(r2)
   82358:	003fd306 	br	822a8 <_malloc_trim_r+0x78>

0008235c <_free_r>:
   8235c:	defffd04 	addi	sp,sp,-12
   82360:	dc400115 	stw	r17,4(sp)
   82364:	dc000015 	stw	r16,0(sp)
   82368:	dfc00215 	stw	ra,8(sp)
   8236c:	2821883a 	mov	r16,r5
   82370:	2023883a 	mov	r17,r4
   82374:	28005a26 	beq	r5,zero,824e0 <_free_r+0x184>
   82378:	00837d40 	call	837d4 <__malloc_lock>
   8237c:	823ffe04 	addi	r8,r16,-8
   82380:	41400117 	ldw	r5,4(r8)
   82384:	00bfff84 	movi	r2,-2
   82388:	02800234 	movhi	r10,8
   8238c:	5297ad04 	addi	r10,r10,24244
   82390:	288e703a 	and	r7,r5,r2
   82394:	41cd883a 	add	r6,r8,r7
   82398:	30c00117 	ldw	r3,4(r6)
   8239c:	51000217 	ldw	r4,8(r10)
   823a0:	00bfff04 	movi	r2,-4
   823a4:	1892703a 	and	r9,r3,r2
   823a8:	5017883a 	mov	r11,r10
   823ac:	31006726 	beq	r6,r4,8254c <_free_r+0x1f0>
   823b0:	2880004c 	andi	r2,r5,1
   823b4:	1005003a 	cmpeq	r2,r2,zero
   823b8:	32400115 	stw	r9,4(r6)
   823bc:	10001a1e 	bne	r2,zero,82428 <_free_r+0xcc>
   823c0:	000b883a 	mov	r5,zero
   823c4:	3247883a 	add	r3,r6,r9
   823c8:	18800117 	ldw	r2,4(r3)
   823cc:	1080004c 	andi	r2,r2,1
   823d0:	1000231e 	bne	r2,zero,82460 <_free_r+0x104>
   823d4:	280ac03a 	cmpne	r5,r5,zero
   823d8:	3a4f883a 	add	r7,r7,r9
   823dc:	2800451e 	bne	r5,zero,824f4 <_free_r+0x198>
   823e0:	31000217 	ldw	r4,8(r6)
   823e4:	00800234 	movhi	r2,8
   823e8:	1097af04 	addi	r2,r2,24252
   823ec:	20807b26 	beq	r4,r2,825dc <_free_r+0x280>
   823f0:	30800317 	ldw	r2,12(r6)
   823f4:	3a07883a 	add	r3,r7,r8
   823f8:	19c00015 	stw	r7,0(r3)
   823fc:	11000215 	stw	r4,8(r2)
   82400:	20800315 	stw	r2,12(r4)
   82404:	38800054 	ori	r2,r7,1
   82408:	40800115 	stw	r2,4(r8)
   8240c:	28001a26 	beq	r5,zero,82478 <_free_r+0x11c>
   82410:	8809883a 	mov	r4,r17
   82414:	dfc00217 	ldw	ra,8(sp)
   82418:	dc400117 	ldw	r17,4(sp)
   8241c:	dc000017 	ldw	r16,0(sp)
   82420:	dec00304 	addi	sp,sp,12
   82424:	00837f41 	jmpi	837f4 <__malloc_unlock>
   82428:	80bffe17 	ldw	r2,-8(r16)
   8242c:	50c00204 	addi	r3,r10,8
   82430:	4091c83a 	sub	r8,r8,r2
   82434:	41000217 	ldw	r4,8(r8)
   82438:	388f883a 	add	r7,r7,r2
   8243c:	20c06126 	beq	r4,r3,825c4 <_free_r+0x268>
   82440:	40800317 	ldw	r2,12(r8)
   82444:	3247883a 	add	r3,r6,r9
   82448:	000b883a 	mov	r5,zero
   8244c:	11000215 	stw	r4,8(r2)
   82450:	20800315 	stw	r2,12(r4)
   82454:	18800117 	ldw	r2,4(r3)
   82458:	1080004c 	andi	r2,r2,1
   8245c:	103fdd26 	beq	r2,zero,823d4 <_free_r+0x78>
   82460:	38800054 	ori	r2,r7,1
   82464:	3a07883a 	add	r3,r7,r8
   82468:	280ac03a 	cmpne	r5,r5,zero
   8246c:	40800115 	stw	r2,4(r8)
   82470:	19c00015 	stw	r7,0(r3)
   82474:	283fe61e 	bne	r5,zero,82410 <_free_r+0xb4>
   82478:	00807fc4 	movi	r2,511
   8247c:	11c01f2e 	bgeu	r2,r7,824fc <_free_r+0x1a0>
   82480:	3806d27a 	srli	r3,r7,9
   82484:	1800481e 	bne	r3,zero,825a8 <_free_r+0x24c>
   82488:	3804d0fa 	srli	r2,r7,3
   8248c:	100690fa 	slli	r3,r2,3
   82490:	1acd883a 	add	r6,r3,r11
   82494:	31400217 	ldw	r5,8(r6)
   82498:	31405926 	beq	r6,r5,82600 <_free_r+0x2a4>
   8249c:	28800117 	ldw	r2,4(r5)
   824a0:	00ffff04 	movi	r3,-4
   824a4:	10c4703a 	and	r2,r2,r3
   824a8:	3880022e 	bgeu	r7,r2,824b4 <_free_r+0x158>
   824ac:	29400217 	ldw	r5,8(r5)
   824b0:	317ffa1e 	bne	r6,r5,8249c <_free_r+0x140>
   824b4:	29800317 	ldw	r6,12(r5)
   824b8:	41800315 	stw	r6,12(r8)
   824bc:	41400215 	stw	r5,8(r8)
   824c0:	8809883a 	mov	r4,r17
   824c4:	2a000315 	stw	r8,12(r5)
   824c8:	32000215 	stw	r8,8(r6)
   824cc:	dfc00217 	ldw	ra,8(sp)
   824d0:	dc400117 	ldw	r17,4(sp)
   824d4:	dc000017 	ldw	r16,0(sp)
   824d8:	dec00304 	addi	sp,sp,12
   824dc:	00837f41 	jmpi	837f4 <__malloc_unlock>
   824e0:	dfc00217 	ldw	ra,8(sp)
   824e4:	dc400117 	ldw	r17,4(sp)
   824e8:	dc000017 	ldw	r16,0(sp)
   824ec:	dec00304 	addi	sp,sp,12
   824f0:	f800283a 	ret
   824f4:	31000217 	ldw	r4,8(r6)
   824f8:	003fbd06 	br	823f0 <_free_r+0x94>
   824fc:	3806d0fa 	srli	r3,r7,3
   82500:	00800044 	movi	r2,1
   82504:	51400117 	ldw	r5,4(r10)
   82508:	180890fa 	slli	r4,r3,3
   8250c:	1807d0ba 	srai	r3,r3,2
   82510:	22c9883a 	add	r4,r4,r11
   82514:	21800217 	ldw	r6,8(r4)
   82518:	10c4983a 	sll	r2,r2,r3
   8251c:	41000315 	stw	r4,12(r8)
   82520:	41800215 	stw	r6,8(r8)
   82524:	288ab03a 	or	r5,r5,r2
   82528:	22000215 	stw	r8,8(r4)
   8252c:	8809883a 	mov	r4,r17
   82530:	51400115 	stw	r5,4(r10)
   82534:	32000315 	stw	r8,12(r6)
   82538:	dfc00217 	ldw	ra,8(sp)
   8253c:	dc400117 	ldw	r17,4(sp)
   82540:	dc000017 	ldw	r16,0(sp)
   82544:	dec00304 	addi	sp,sp,12
   82548:	00837f41 	jmpi	837f4 <__malloc_unlock>
   8254c:	2880004c 	andi	r2,r5,1
   82550:	3a4d883a 	add	r6,r7,r9
   82554:	1000071e 	bne	r2,zero,82574 <_free_r+0x218>
   82558:	80bffe17 	ldw	r2,-8(r16)
   8255c:	4091c83a 	sub	r8,r8,r2
   82560:	41000317 	ldw	r4,12(r8)
   82564:	40c00217 	ldw	r3,8(r8)
   82568:	308d883a 	add	r6,r6,r2
   8256c:	20c00215 	stw	r3,8(r4)
   82570:	19000315 	stw	r4,12(r3)
   82574:	00800234 	movhi	r2,8
   82578:	109d3604 	addi	r2,r2,29912
   8257c:	11000017 	ldw	r4,0(r2)
   82580:	30c00054 	ori	r3,r6,1
   82584:	52000215 	stw	r8,8(r10)
   82588:	40c00115 	stw	r3,4(r8)
   8258c:	313fa036 	bltu	r6,r4,82410 <_free_r+0xb4>
   82590:	00800274 	movhi	r2,9
   82594:	10a3eb04 	addi	r2,r2,-28756
   82598:	11400017 	ldw	r5,0(r2)
   8259c:	8809883a 	mov	r4,r17
   825a0:	00822300 	call	82230 <_malloc_trim_r>
   825a4:	003f9a06 	br	82410 <_free_r+0xb4>
   825a8:	00800104 	movi	r2,4
   825ac:	10c0072e 	bgeu	r2,r3,825cc <_free_r+0x270>
   825b0:	00800504 	movi	r2,20
   825b4:	10c01936 	bltu	r2,r3,8261c <_free_r+0x2c0>
   825b8:	188016c4 	addi	r2,r3,91
   825bc:	100690fa 	slli	r3,r2,3
   825c0:	003fb306 	br	82490 <_free_r+0x134>
   825c4:	01400044 	movi	r5,1
   825c8:	003f7e06 	br	823c4 <_free_r+0x68>
   825cc:	3804d1ba 	srli	r2,r7,6
   825d0:	10800e04 	addi	r2,r2,56
   825d4:	100690fa 	slli	r3,r2,3
   825d8:	003fad06 	br	82490 <_free_r+0x134>
   825dc:	22000315 	stw	r8,12(r4)
   825e0:	22000215 	stw	r8,8(r4)
   825e4:	3a05883a 	add	r2,r7,r8
   825e8:	38c00054 	ori	r3,r7,1
   825ec:	11c00015 	stw	r7,0(r2)
   825f0:	41000215 	stw	r4,8(r8)
   825f4:	40c00115 	stw	r3,4(r8)
   825f8:	41000315 	stw	r4,12(r8)
   825fc:	003f8406 	br	82410 <_free_r+0xb4>
   82600:	1005d0ba 	srai	r2,r2,2
   82604:	00c00044 	movi	r3,1
   82608:	51000117 	ldw	r4,4(r10)
   8260c:	1886983a 	sll	r3,r3,r2
   82610:	20c8b03a 	or	r4,r4,r3
   82614:	51000115 	stw	r4,4(r10)
   82618:	003fa706 	br	824b8 <_free_r+0x15c>
   8261c:	00801504 	movi	r2,84
   82620:	10c00436 	bltu	r2,r3,82634 <_free_r+0x2d8>
   82624:	3804d33a 	srli	r2,r7,12
   82628:	10801b84 	addi	r2,r2,110
   8262c:	100690fa 	slli	r3,r2,3
   82630:	003f9706 	br	82490 <_free_r+0x134>
   82634:	00805504 	movi	r2,340
   82638:	10c00436 	bltu	r2,r3,8264c <_free_r+0x2f0>
   8263c:	3804d3fa 	srli	r2,r7,15
   82640:	10801dc4 	addi	r2,r2,119
   82644:	100690fa 	slli	r3,r2,3
   82648:	003f9106 	br	82490 <_free_r+0x134>
   8264c:	00815504 	movi	r2,1364
   82650:	10c0032e 	bgeu	r2,r3,82660 <_free_r+0x304>
   82654:	00801f84 	movi	r2,126
   82658:	00c0fc04 	movi	r3,1008
   8265c:	003f8c06 	br	82490 <_free_r+0x134>
   82660:	3804d4ba 	srli	r2,r7,18
   82664:	10801f04 	addi	r2,r2,124
   82668:	100690fa 	slli	r3,r2,3
   8266c:	003f8806 	br	82490 <_free_r+0x134>

00082670 <_fwalk_reent>:
   82670:	defff704 	addi	sp,sp,-36
   82674:	dcc00315 	stw	r19,12(sp)
   82678:	24c0b804 	addi	r19,r4,736
   8267c:	dd800615 	stw	r22,24(sp)
   82680:	dd400515 	stw	r21,20(sp)
   82684:	dfc00815 	stw	ra,32(sp)
   82688:	ddc00715 	stw	r23,28(sp)
   8268c:	dd000415 	stw	r20,16(sp)
   82690:	dc800215 	stw	r18,8(sp)
   82694:	dc400115 	stw	r17,4(sp)
   82698:	dc000015 	stw	r16,0(sp)
   8269c:	202b883a 	mov	r21,r4
   826a0:	282d883a 	mov	r22,r5
   826a4:	0081f940 	call	81f94 <__sfp_lock_acquire>
   826a8:	98002126 	beq	r19,zero,82730 <_fwalk_reent+0xc0>
   826ac:	002f883a 	mov	r23,zero
   826b0:	9c800117 	ldw	r18,4(r19)
   826b4:	9c000217 	ldw	r16,8(r19)
   826b8:	90bfffc4 	addi	r2,r18,-1
   826bc:	10000d16 	blt	r2,zero,826f4 <_fwalk_reent+0x84>
   826c0:	0023883a 	mov	r17,zero
   826c4:	053fffc4 	movi	r20,-1
   826c8:	8080030f 	ldh	r2,12(r16)
   826cc:	8c400044 	addi	r17,r17,1
   826d0:	10000626 	beq	r2,zero,826ec <_fwalk_reent+0x7c>
   826d4:	8080038f 	ldh	r2,14(r16)
   826d8:	800b883a 	mov	r5,r16
   826dc:	a809883a 	mov	r4,r21
   826e0:	15000226 	beq	r2,r20,826ec <_fwalk_reent+0x7c>
   826e4:	b03ee83a 	callr	r22
   826e8:	b8aeb03a 	or	r23,r23,r2
   826ec:	84001704 	addi	r16,r16,92
   826f0:	947ff51e 	bne	r18,r17,826c8 <_fwalk_reent+0x58>
   826f4:	9cc00017 	ldw	r19,0(r19)
   826f8:	983fed1e 	bne	r19,zero,826b0 <_fwalk_reent+0x40>
   826fc:	0081f980 	call	81f98 <__sfp_lock_release>
   82700:	b805883a 	mov	r2,r23
   82704:	dfc00817 	ldw	ra,32(sp)
   82708:	ddc00717 	ldw	r23,28(sp)
   8270c:	dd800617 	ldw	r22,24(sp)
   82710:	dd400517 	ldw	r21,20(sp)
   82714:	dd000417 	ldw	r20,16(sp)
   82718:	dcc00317 	ldw	r19,12(sp)
   8271c:	dc800217 	ldw	r18,8(sp)
   82720:	dc400117 	ldw	r17,4(sp)
   82724:	dc000017 	ldw	r16,0(sp)
   82728:	dec00904 	addi	sp,sp,36
   8272c:	f800283a 	ret
   82730:	002f883a 	mov	r23,zero
   82734:	003ff106 	br	826fc <_fwalk_reent+0x8c>

00082738 <_fwalk>:
   82738:	defff804 	addi	sp,sp,-32
   8273c:	dcc00315 	stw	r19,12(sp)
   82740:	24c0b804 	addi	r19,r4,736
   82744:	dd400515 	stw	r21,20(sp)
   82748:	dfc00715 	stw	ra,28(sp)
   8274c:	dd800615 	stw	r22,24(sp)
   82750:	dd000415 	stw	r20,16(sp)
   82754:	dc800215 	stw	r18,8(sp)
   82758:	dc400115 	stw	r17,4(sp)
   8275c:	dc000015 	stw	r16,0(sp)
   82760:	282b883a 	mov	r21,r5
   82764:	0081f940 	call	81f94 <__sfp_lock_acquire>
   82768:	98001f26 	beq	r19,zero,827e8 <_fwalk+0xb0>
   8276c:	002d883a 	mov	r22,zero
   82770:	9c800117 	ldw	r18,4(r19)
   82774:	9c000217 	ldw	r16,8(r19)
   82778:	90bfffc4 	addi	r2,r18,-1
   8277c:	10000c16 	blt	r2,zero,827b0 <_fwalk+0x78>
   82780:	0023883a 	mov	r17,zero
   82784:	053fffc4 	movi	r20,-1
   82788:	8080030f 	ldh	r2,12(r16)
   8278c:	8c400044 	addi	r17,r17,1
   82790:	10000526 	beq	r2,zero,827a8 <_fwalk+0x70>
   82794:	8080038f 	ldh	r2,14(r16)
   82798:	8009883a 	mov	r4,r16
   8279c:	15000226 	beq	r2,r20,827a8 <_fwalk+0x70>
   827a0:	a83ee83a 	callr	r21
   827a4:	b0acb03a 	or	r22,r22,r2
   827a8:	84001704 	addi	r16,r16,92
   827ac:	947ff61e 	bne	r18,r17,82788 <_fwalk+0x50>
   827b0:	9cc00017 	ldw	r19,0(r19)
   827b4:	983fee1e 	bne	r19,zero,82770 <_fwalk+0x38>
   827b8:	0081f980 	call	81f98 <__sfp_lock_release>
   827bc:	b005883a 	mov	r2,r22
   827c0:	dfc00717 	ldw	ra,28(sp)
   827c4:	dd800617 	ldw	r22,24(sp)
   827c8:	dd400517 	ldw	r21,20(sp)
   827cc:	dd000417 	ldw	r20,16(sp)
   827d0:	dcc00317 	ldw	r19,12(sp)
   827d4:	dc800217 	ldw	r18,8(sp)
   827d8:	dc400117 	ldw	r17,4(sp)
   827dc:	dc000017 	ldw	r16,0(sp)
   827e0:	dec00804 	addi	sp,sp,32
   827e4:	f800283a 	ret
   827e8:	002d883a 	mov	r22,zero
   827ec:	003ff206 	br	827b8 <_fwalk+0x80>

000827f0 <__smakebuf_r>:
   827f0:	2880030b 	ldhu	r2,12(r5)
   827f4:	deffed04 	addi	sp,sp,-76
   827f8:	dc401015 	stw	r17,64(sp)
   827fc:	1080008c 	andi	r2,r2,2
   82800:	dc000f15 	stw	r16,60(sp)
   82804:	dfc01215 	stw	ra,72(sp)
   82808:	dc801115 	stw	r18,68(sp)
   8280c:	2821883a 	mov	r16,r5
   82810:	2023883a 	mov	r17,r4
   82814:	10000b26 	beq	r2,zero,82844 <__smakebuf_r+0x54>
   82818:	28c010c4 	addi	r3,r5,67
   8281c:	00800044 	movi	r2,1
   82820:	28800515 	stw	r2,20(r5)
   82824:	28c00415 	stw	r3,16(r5)
   82828:	28c00015 	stw	r3,0(r5)
   8282c:	dfc01217 	ldw	ra,72(sp)
   82830:	dc801117 	ldw	r18,68(sp)
   82834:	dc401017 	ldw	r17,64(sp)
   82838:	dc000f17 	ldw	r16,60(sp)
   8283c:	dec01304 	addi	sp,sp,76
   82840:	f800283a 	ret
   82844:	2940038f 	ldh	r5,14(r5)
   82848:	28002116 	blt	r5,zero,828d0 <__smakebuf_r+0xe0>
   8284c:	d80d883a 	mov	r6,sp
   82850:	0082d740 	call	82d74 <_fstat_r>
   82854:	10001e16 	blt	r2,zero,828d0 <__smakebuf_r+0xe0>
   82858:	d8800117 	ldw	r2,4(sp)
   8285c:	00e00014 	movui	r3,32768
   82860:	113c000c 	andi	r4,r2,61440
   82864:	20c03126 	beq	r4,r3,8292c <__smakebuf_r+0x13c>
   82868:	8080030b 	ldhu	r2,12(r16)
   8286c:	00c80004 	movi	r3,8192
   82870:	10820014 	ori	r2,r2,2048
   82874:	8080030d 	sth	r2,12(r16)
   82878:	20c01e26 	beq	r4,r3,828f4 <__smakebuf_r+0x104>
   8287c:	04810004 	movi	r18,1024
   82880:	8809883a 	mov	r4,r17
   82884:	900b883a 	mov	r5,r18
   82888:	0080bc80 	call	80bc8 <_malloc_r>
   8288c:	1009883a 	mov	r4,r2
   82890:	10003126 	beq	r2,zero,82958 <__smakebuf_r+0x168>
   82894:	80c0030b 	ldhu	r3,12(r16)
   82898:	00800234 	movhi	r2,8
   8289c:	10882204 	addi	r2,r2,8328
   828a0:	88800f15 	stw	r2,60(r17)
   828a4:	18c02014 	ori	r3,r3,128
   828a8:	84800515 	stw	r18,20(r16)
   828ac:	80c0030d 	sth	r3,12(r16)
   828b0:	81000415 	stw	r4,16(r16)
   828b4:	81000015 	stw	r4,0(r16)
   828b8:	dfc01217 	ldw	ra,72(sp)
   828bc:	dc801117 	ldw	r18,68(sp)
   828c0:	dc401017 	ldw	r17,64(sp)
   828c4:	dc000f17 	ldw	r16,60(sp)
   828c8:	dec01304 	addi	sp,sp,76
   828cc:	f800283a 	ret
   828d0:	80c0030b 	ldhu	r3,12(r16)
   828d4:	1880200c 	andi	r2,r3,128
   828d8:	10000426 	beq	r2,zero,828ec <__smakebuf_r+0xfc>
   828dc:	04801004 	movi	r18,64
   828e0:	18820014 	ori	r2,r3,2048
   828e4:	8080030d 	sth	r2,12(r16)
   828e8:	003fe506 	br	82880 <__smakebuf_r+0x90>
   828ec:	04810004 	movi	r18,1024
   828f0:	003ffb06 	br	828e0 <__smakebuf_r+0xf0>
   828f4:	8140038f 	ldh	r5,14(r16)
   828f8:	8809883a 	mov	r4,r17
   828fc:	0082de80 	call	82de8 <_isatty_r>
   82900:	103fde26 	beq	r2,zero,8287c <__smakebuf_r+0x8c>
   82904:	8080030b 	ldhu	r2,12(r16)
   82908:	80c010c4 	addi	r3,r16,67
   8290c:	04810004 	movi	r18,1024
   82910:	10800054 	ori	r2,r2,1
   82914:	8080030d 	sth	r2,12(r16)
   82918:	00800044 	movi	r2,1
   8291c:	80c00415 	stw	r3,16(r16)
   82920:	80800515 	stw	r2,20(r16)
   82924:	80c00015 	stw	r3,0(r16)
   82928:	003fd506 	br	82880 <__smakebuf_r+0x90>
   8292c:	80c00a17 	ldw	r3,40(r16)
   82930:	00800234 	movhi	r2,8
   82934:	108a8904 	addi	r2,r2,10788
   82938:	18bfcb1e 	bne	r3,r2,82868 <__smakebuf_r+0x78>
   8293c:	8080030b 	ldhu	r2,12(r16)
   82940:	00c10004 	movi	r3,1024
   82944:	1825883a 	mov	r18,r3
   82948:	10c4b03a 	or	r2,r2,r3
   8294c:	8080030d 	sth	r2,12(r16)
   82950:	80c01315 	stw	r3,76(r16)
   82954:	003fca06 	br	82880 <__smakebuf_r+0x90>
   82958:	8100030b 	ldhu	r4,12(r16)
   8295c:	2080800c 	andi	r2,r4,512
   82960:	103fb21e 	bne	r2,zero,8282c <__smakebuf_r+0x3c>
   82964:	80c010c4 	addi	r3,r16,67
   82968:	21000094 	ori	r4,r4,2
   8296c:	00800044 	movi	r2,1
   82970:	80800515 	stw	r2,20(r16)
   82974:	8100030d 	sth	r4,12(r16)
   82978:	80c00415 	stw	r3,16(r16)
   8297c:	80c00015 	stw	r3,0(r16)
   82980:	003faa06 	br	8282c <__smakebuf_r+0x3c>

00082984 <memset>:
   82984:	008000c4 	movi	r2,3
   82988:	29403fcc 	andi	r5,r5,255
   8298c:	2007883a 	mov	r3,r4
   82990:	1180022e 	bgeu	r2,r6,8299c <memset+0x18>
   82994:	2084703a 	and	r2,r4,r2
   82998:	10000826 	beq	r2,zero,829bc <memset+0x38>
   8299c:	30000526 	beq	r6,zero,829b4 <memset+0x30>
   829a0:	2805883a 	mov	r2,r5
   829a4:	30cd883a 	add	r6,r6,r3
   829a8:	18800005 	stb	r2,0(r3)
   829ac:	18c00044 	addi	r3,r3,1
   829b0:	19bffd1e 	bne	r3,r6,829a8 <memset+0x24>
   829b4:	2005883a 	mov	r2,r4
   829b8:	f800283a 	ret
   829bc:	2804923a 	slli	r2,r5,8
   829c0:	020003c4 	movi	r8,15
   829c4:	200f883a 	mov	r7,r4
   829c8:	2884b03a 	or	r2,r5,r2
   829cc:	1006943a 	slli	r3,r2,16
   829d0:	10c6b03a 	or	r3,r2,r3
   829d4:	41800a2e 	bgeu	r8,r6,82a00 <memset+0x7c>
   829d8:	4005883a 	mov	r2,r8
   829dc:	31bffc04 	addi	r6,r6,-16
   829e0:	38c00015 	stw	r3,0(r7)
   829e4:	38c00115 	stw	r3,4(r7)
   829e8:	38c00215 	stw	r3,8(r7)
   829ec:	38c00315 	stw	r3,12(r7)
   829f0:	39c00404 	addi	r7,r7,16
   829f4:	11bff936 	bltu	r2,r6,829dc <memset+0x58>
   829f8:	008000c4 	movi	r2,3
   829fc:	1180052e 	bgeu	r2,r6,82a14 <memset+0x90>
   82a00:	31bfff04 	addi	r6,r6,-4
   82a04:	008000c4 	movi	r2,3
   82a08:	38c00015 	stw	r3,0(r7)
   82a0c:	39c00104 	addi	r7,r7,4
   82a10:	11bffb36 	bltu	r2,r6,82a00 <memset+0x7c>
   82a14:	3807883a 	mov	r3,r7
   82a18:	003fe006 	br	8299c <memset+0x18>

00082a1c <__sclose>:
   82a1c:	2940038f 	ldh	r5,14(r5)
   82a20:	0082be01 	jmpi	82be0 <_close_r>

00082a24 <__sseek>:
   82a24:	defffe04 	addi	sp,sp,-8
   82a28:	dc000015 	stw	r16,0(sp)
   82a2c:	2821883a 	mov	r16,r5
   82a30:	2940038f 	ldh	r5,14(r5)
   82a34:	dfc00115 	stw	ra,4(sp)
   82a38:	0082e580 	call	82e58 <_lseek_r>
   82a3c:	1007883a 	mov	r3,r2
   82a40:	00bfffc4 	movi	r2,-1
   82a44:	18800926 	beq	r3,r2,82a6c <__sseek+0x48>
   82a48:	8080030b 	ldhu	r2,12(r16)
   82a4c:	80c01415 	stw	r3,80(r16)
   82a50:	10840014 	ori	r2,r2,4096
   82a54:	8080030d 	sth	r2,12(r16)
   82a58:	1805883a 	mov	r2,r3
   82a5c:	dfc00117 	ldw	ra,4(sp)
   82a60:	dc000017 	ldw	r16,0(sp)
   82a64:	dec00204 	addi	sp,sp,8
   82a68:	f800283a 	ret
   82a6c:	8080030b 	ldhu	r2,12(r16)
   82a70:	10bbffcc 	andi	r2,r2,61439
   82a74:	8080030d 	sth	r2,12(r16)
   82a78:	1805883a 	mov	r2,r3
   82a7c:	dfc00117 	ldw	ra,4(sp)
   82a80:	dc000017 	ldw	r16,0(sp)
   82a84:	dec00204 	addi	sp,sp,8
   82a88:	f800283a 	ret

00082a8c <__swrite>:
   82a8c:	2880030b 	ldhu	r2,12(r5)
   82a90:	defffb04 	addi	sp,sp,-20
   82a94:	dcc00315 	stw	r19,12(sp)
   82a98:	1080400c 	andi	r2,r2,256
   82a9c:	dc800215 	stw	r18,8(sp)
   82aa0:	dc400115 	stw	r17,4(sp)
   82aa4:	dc000015 	stw	r16,0(sp)
   82aa8:	3027883a 	mov	r19,r6
   82aac:	3825883a 	mov	r18,r7
   82ab0:	dfc00415 	stw	ra,16(sp)
   82ab4:	2821883a 	mov	r16,r5
   82ab8:	000d883a 	mov	r6,zero
   82abc:	01c00084 	movi	r7,2
   82ac0:	2023883a 	mov	r17,r4
   82ac4:	10000226 	beq	r2,zero,82ad0 <__swrite+0x44>
   82ac8:	2940038f 	ldh	r5,14(r5)
   82acc:	0082e580 	call	82e58 <_lseek_r>
   82ad0:	8080030b 	ldhu	r2,12(r16)
   82ad4:	8140038f 	ldh	r5,14(r16)
   82ad8:	8809883a 	mov	r4,r17
   82adc:	10bbffcc 	andi	r2,r2,61439
   82ae0:	980d883a 	mov	r6,r19
   82ae4:	900f883a 	mov	r7,r18
   82ae8:	8080030d 	sth	r2,12(r16)
   82aec:	dfc00417 	ldw	ra,16(sp)
   82af0:	dcc00317 	ldw	r19,12(sp)
   82af4:	dc800217 	ldw	r18,8(sp)
   82af8:	dc400117 	ldw	r17,4(sp)
   82afc:	dc000017 	ldw	r16,0(sp)
   82b00:	dec00504 	addi	sp,sp,20
   82b04:	0082b681 	jmpi	82b68 <_write_r>

00082b08 <__sread>:
   82b08:	defffe04 	addi	sp,sp,-8
   82b0c:	dc000015 	stw	r16,0(sp)
   82b10:	2821883a 	mov	r16,r5
   82b14:	2940038f 	ldh	r5,14(r5)
   82b18:	dfc00115 	stw	ra,4(sp)
   82b1c:	0082ed00 	call	82ed0 <_read_r>
   82b20:	1007883a 	mov	r3,r2
   82b24:	10000816 	blt	r2,zero,82b48 <__sread+0x40>
   82b28:	80801417 	ldw	r2,80(r16)
   82b2c:	10c5883a 	add	r2,r2,r3
   82b30:	80801415 	stw	r2,80(r16)
   82b34:	1805883a 	mov	r2,r3
   82b38:	dfc00117 	ldw	ra,4(sp)
   82b3c:	dc000017 	ldw	r16,0(sp)
   82b40:	dec00204 	addi	sp,sp,8
   82b44:	f800283a 	ret
   82b48:	8080030b 	ldhu	r2,12(r16)
   82b4c:	10bbffcc 	andi	r2,r2,61439
   82b50:	8080030d 	sth	r2,12(r16)
   82b54:	1805883a 	mov	r2,r3
   82b58:	dfc00117 	ldw	ra,4(sp)
   82b5c:	dc000017 	ldw	r16,0(sp)
   82b60:	dec00204 	addi	sp,sp,8
   82b64:	f800283a 	ret

00082b68 <_write_r>:
   82b68:	defffd04 	addi	sp,sp,-12
   82b6c:	dc000015 	stw	r16,0(sp)
   82b70:	04000274 	movhi	r16,9
   82b74:	8423ee04 	addi	r16,r16,-28744
   82b78:	dc400115 	stw	r17,4(sp)
   82b7c:	80000015 	stw	zero,0(r16)
   82b80:	2023883a 	mov	r17,r4
   82b84:	2809883a 	mov	r4,r5
   82b88:	300b883a 	mov	r5,r6
   82b8c:	380d883a 	mov	r6,r7
   82b90:	dfc00215 	stw	ra,8(sp)
   82b94:	0083acc0 	call	83acc <write>
   82b98:	1007883a 	mov	r3,r2
   82b9c:	00bfffc4 	movi	r2,-1
   82ba0:	18800626 	beq	r3,r2,82bbc <_write_r+0x54>
   82ba4:	1805883a 	mov	r2,r3
   82ba8:	dfc00217 	ldw	ra,8(sp)
   82bac:	dc400117 	ldw	r17,4(sp)
   82bb0:	dc000017 	ldw	r16,0(sp)
   82bb4:	dec00304 	addi	sp,sp,12
   82bb8:	f800283a 	ret
   82bbc:	80800017 	ldw	r2,0(r16)
   82bc0:	103ff826 	beq	r2,zero,82ba4 <_write_r+0x3c>
   82bc4:	88800015 	stw	r2,0(r17)
   82bc8:	1805883a 	mov	r2,r3
   82bcc:	dfc00217 	ldw	ra,8(sp)
   82bd0:	dc400117 	ldw	r17,4(sp)
   82bd4:	dc000017 	ldw	r16,0(sp)
   82bd8:	dec00304 	addi	sp,sp,12
   82bdc:	f800283a 	ret

00082be0 <_close_r>:
   82be0:	defffd04 	addi	sp,sp,-12
   82be4:	dc000015 	stw	r16,0(sp)
   82be8:	04000274 	movhi	r16,9
   82bec:	8423ee04 	addi	r16,r16,-28744
   82bf0:	dc400115 	stw	r17,4(sp)
   82bf4:	80000015 	stw	zero,0(r16)
   82bf8:	2023883a 	mov	r17,r4
   82bfc:	2809883a 	mov	r4,r5
   82c00:	dfc00215 	stw	ra,8(sp)
   82c04:	0082f800 	call	82f80 <close>
   82c08:	1007883a 	mov	r3,r2
   82c0c:	00bfffc4 	movi	r2,-1
   82c10:	18800626 	beq	r3,r2,82c2c <_close_r+0x4c>
   82c14:	1805883a 	mov	r2,r3
   82c18:	dfc00217 	ldw	ra,8(sp)
   82c1c:	dc400117 	ldw	r17,4(sp)
   82c20:	dc000017 	ldw	r16,0(sp)
   82c24:	dec00304 	addi	sp,sp,12
   82c28:	f800283a 	ret
   82c2c:	80800017 	ldw	r2,0(r16)
   82c30:	103ff826 	beq	r2,zero,82c14 <_close_r+0x34>
   82c34:	88800015 	stw	r2,0(r17)
   82c38:	1805883a 	mov	r2,r3
   82c3c:	dfc00217 	ldw	ra,8(sp)
   82c40:	dc400117 	ldw	r17,4(sp)
   82c44:	dc000017 	ldw	r16,0(sp)
   82c48:	dec00304 	addi	sp,sp,12
   82c4c:	f800283a 	ret

00082c50 <_fclose_r>:
   82c50:	defffc04 	addi	sp,sp,-16
   82c54:	dc400115 	stw	r17,4(sp)
   82c58:	dc000015 	stw	r16,0(sp)
   82c5c:	dfc00315 	stw	ra,12(sp)
   82c60:	dc800215 	stw	r18,8(sp)
   82c64:	2821883a 	mov	r16,r5
   82c68:	2023883a 	mov	r17,r4
   82c6c:	28002926 	beq	r5,zero,82d14 <_fclose_r+0xc4>
   82c70:	0081f940 	call	81f94 <__sfp_lock_acquire>
   82c74:	88000226 	beq	r17,zero,82c80 <_fclose_r+0x30>
   82c78:	88800e17 	ldw	r2,56(r17)
   82c7c:	10002d26 	beq	r2,zero,82d34 <_fclose_r+0xe4>
   82c80:	8080030f 	ldh	r2,12(r16)
   82c84:	10002226 	beq	r2,zero,82d10 <_fclose_r+0xc0>
   82c88:	8809883a 	mov	r4,r17
   82c8c:	800b883a 	mov	r5,r16
   82c90:	0081d0c0 	call	81d0c <_fflush_r>
   82c94:	1025883a 	mov	r18,r2
   82c98:	80800b17 	ldw	r2,44(r16)
   82c9c:	10000426 	beq	r2,zero,82cb0 <_fclose_r+0x60>
   82ca0:	81400717 	ldw	r5,28(r16)
   82ca4:	8809883a 	mov	r4,r17
   82ca8:	103ee83a 	callr	r2
   82cac:	10002a16 	blt	r2,zero,82d58 <_fclose_r+0x108>
   82cb0:	8080030b 	ldhu	r2,12(r16)
   82cb4:	1080200c 	andi	r2,r2,128
   82cb8:	1000231e 	bne	r2,zero,82d48 <_fclose_r+0xf8>
   82cbc:	81400c17 	ldw	r5,48(r16)
   82cc0:	28000526 	beq	r5,zero,82cd8 <_fclose_r+0x88>
   82cc4:	80801004 	addi	r2,r16,64
   82cc8:	28800226 	beq	r5,r2,82cd4 <_fclose_r+0x84>
   82ccc:	8809883a 	mov	r4,r17
   82cd0:	008235c0 	call	8235c <_free_r>
   82cd4:	80000c15 	stw	zero,48(r16)
   82cd8:	81401117 	ldw	r5,68(r16)
   82cdc:	28000326 	beq	r5,zero,82cec <_fclose_r+0x9c>
   82ce0:	8809883a 	mov	r4,r17
   82ce4:	008235c0 	call	8235c <_free_r>
   82ce8:	80001115 	stw	zero,68(r16)
   82cec:	8000030d 	sth	zero,12(r16)
   82cf0:	0081f980 	call	81f98 <__sfp_lock_release>
   82cf4:	9005883a 	mov	r2,r18
   82cf8:	dfc00317 	ldw	ra,12(sp)
   82cfc:	dc800217 	ldw	r18,8(sp)
   82d00:	dc400117 	ldw	r17,4(sp)
   82d04:	dc000017 	ldw	r16,0(sp)
   82d08:	dec00404 	addi	sp,sp,16
   82d0c:	f800283a 	ret
   82d10:	0081f980 	call	81f98 <__sfp_lock_release>
   82d14:	0025883a 	mov	r18,zero
   82d18:	9005883a 	mov	r2,r18
   82d1c:	dfc00317 	ldw	ra,12(sp)
   82d20:	dc800217 	ldw	r18,8(sp)
   82d24:	dc400117 	ldw	r17,4(sp)
   82d28:	dc000017 	ldw	r16,0(sp)
   82d2c:	dec00404 	addi	sp,sp,16
   82d30:	f800283a 	ret
   82d34:	8809883a 	mov	r4,r17
   82d38:	0081fa40 	call	81fa4 <__sinit>
   82d3c:	8080030f 	ldh	r2,12(r16)
   82d40:	103fd11e 	bne	r2,zero,82c88 <_fclose_r+0x38>
   82d44:	003ff206 	br	82d10 <_fclose_r+0xc0>
   82d48:	81400417 	ldw	r5,16(r16)
   82d4c:	8809883a 	mov	r4,r17
   82d50:	008235c0 	call	8235c <_free_r>
   82d54:	003fd906 	br	82cbc <_fclose_r+0x6c>
   82d58:	04bfffc4 	movi	r18,-1
   82d5c:	003fd406 	br	82cb0 <_fclose_r+0x60>

00082d60 <fclose>:
   82d60:	00800234 	movhi	r2,8
   82d64:	109d3404 	addi	r2,r2,29904
   82d68:	200b883a 	mov	r5,r4
   82d6c:	11000017 	ldw	r4,0(r2)
   82d70:	0082c501 	jmpi	82c50 <_fclose_r>

00082d74 <_fstat_r>:
   82d74:	defffd04 	addi	sp,sp,-12
   82d78:	dc000015 	stw	r16,0(sp)
   82d7c:	04000274 	movhi	r16,9
   82d80:	8423ee04 	addi	r16,r16,-28744
   82d84:	dc400115 	stw	r17,4(sp)
   82d88:	80000015 	stw	zero,0(r16)
   82d8c:	2023883a 	mov	r17,r4
   82d90:	2809883a 	mov	r4,r5
   82d94:	300b883a 	mov	r5,r6
   82d98:	dfc00215 	stw	ra,8(sp)
   82d9c:	008310c0 	call	8310c <fstat>
   82da0:	1007883a 	mov	r3,r2
   82da4:	00bfffc4 	movi	r2,-1
   82da8:	18800626 	beq	r3,r2,82dc4 <_fstat_r+0x50>
   82dac:	1805883a 	mov	r2,r3
   82db0:	dfc00217 	ldw	ra,8(sp)
   82db4:	dc400117 	ldw	r17,4(sp)
   82db8:	dc000017 	ldw	r16,0(sp)
   82dbc:	dec00304 	addi	sp,sp,12
   82dc0:	f800283a 	ret
   82dc4:	80800017 	ldw	r2,0(r16)
   82dc8:	103ff826 	beq	r2,zero,82dac <_fstat_r+0x38>
   82dcc:	88800015 	stw	r2,0(r17)
   82dd0:	1805883a 	mov	r2,r3
   82dd4:	dfc00217 	ldw	ra,8(sp)
   82dd8:	dc400117 	ldw	r17,4(sp)
   82ddc:	dc000017 	ldw	r16,0(sp)
   82de0:	dec00304 	addi	sp,sp,12
   82de4:	f800283a 	ret

00082de8 <_isatty_r>:
   82de8:	defffd04 	addi	sp,sp,-12
   82dec:	dc000015 	stw	r16,0(sp)
   82df0:	04000274 	movhi	r16,9
   82df4:	8423ee04 	addi	r16,r16,-28744
   82df8:	dc400115 	stw	r17,4(sp)
   82dfc:	80000015 	stw	zero,0(r16)
   82e00:	2023883a 	mov	r17,r4
   82e04:	2809883a 	mov	r4,r5
   82e08:	dfc00215 	stw	ra,8(sp)
   82e0c:	00834040 	call	83404 <isatty>
   82e10:	1007883a 	mov	r3,r2
   82e14:	00bfffc4 	movi	r2,-1
   82e18:	18800626 	beq	r3,r2,82e34 <_isatty_r+0x4c>
   82e1c:	1805883a 	mov	r2,r3
   82e20:	dfc00217 	ldw	ra,8(sp)
   82e24:	dc400117 	ldw	r17,4(sp)
   82e28:	dc000017 	ldw	r16,0(sp)
   82e2c:	dec00304 	addi	sp,sp,12
   82e30:	f800283a 	ret
   82e34:	80800017 	ldw	r2,0(r16)
   82e38:	103ff826 	beq	r2,zero,82e1c <_isatty_r+0x34>
   82e3c:	88800015 	stw	r2,0(r17)
   82e40:	1805883a 	mov	r2,r3
   82e44:	dfc00217 	ldw	ra,8(sp)
   82e48:	dc400117 	ldw	r17,4(sp)
   82e4c:	dc000017 	ldw	r16,0(sp)
   82e50:	dec00304 	addi	sp,sp,12
   82e54:	f800283a 	ret

00082e58 <_lseek_r>:
   82e58:	defffd04 	addi	sp,sp,-12
   82e5c:	dc000015 	stw	r16,0(sp)
   82e60:	04000274 	movhi	r16,9
   82e64:	8423ee04 	addi	r16,r16,-28744
   82e68:	dc400115 	stw	r17,4(sp)
   82e6c:	80000015 	stw	zero,0(r16)
   82e70:	2023883a 	mov	r17,r4
   82e74:	2809883a 	mov	r4,r5
   82e78:	300b883a 	mov	r5,r6
   82e7c:	380d883a 	mov	r6,r7
   82e80:	dfc00215 	stw	ra,8(sp)
   82e84:	00836140 	call	83614 <lseek>
   82e88:	1007883a 	mov	r3,r2
   82e8c:	00bfffc4 	movi	r2,-1
   82e90:	18800626 	beq	r3,r2,82eac <_lseek_r+0x54>
   82e94:	1805883a 	mov	r2,r3
   82e98:	dfc00217 	ldw	ra,8(sp)
   82e9c:	dc400117 	ldw	r17,4(sp)
   82ea0:	dc000017 	ldw	r16,0(sp)
   82ea4:	dec00304 	addi	sp,sp,12
   82ea8:	f800283a 	ret
   82eac:	80800017 	ldw	r2,0(r16)
   82eb0:	103ff826 	beq	r2,zero,82e94 <_lseek_r+0x3c>
   82eb4:	88800015 	stw	r2,0(r17)
   82eb8:	1805883a 	mov	r2,r3
   82ebc:	dfc00217 	ldw	ra,8(sp)
   82ec0:	dc400117 	ldw	r17,4(sp)
   82ec4:	dc000017 	ldw	r16,0(sp)
   82ec8:	dec00304 	addi	sp,sp,12
   82ecc:	f800283a 	ret

00082ed0 <_read_r>:
   82ed0:	defffd04 	addi	sp,sp,-12
   82ed4:	dc000015 	stw	r16,0(sp)
   82ed8:	04000274 	movhi	r16,9
   82edc:	8423ee04 	addi	r16,r16,-28744
   82ee0:	dc400115 	stw	r17,4(sp)
   82ee4:	80000015 	stw	zero,0(r16)
   82ee8:	2023883a 	mov	r17,r4
   82eec:	2809883a 	mov	r4,r5
   82ef0:	300b883a 	mov	r5,r6
   82ef4:	380d883a 	mov	r6,r7
   82ef8:	dfc00215 	stw	ra,8(sp)
   82efc:	00838140 	call	83814 <read>
   82f00:	1007883a 	mov	r3,r2
   82f04:	00bfffc4 	movi	r2,-1
   82f08:	18800626 	beq	r3,r2,82f24 <_read_r+0x54>
   82f0c:	1805883a 	mov	r2,r3
   82f10:	dfc00217 	ldw	ra,8(sp)
   82f14:	dc400117 	ldw	r17,4(sp)
   82f18:	dc000017 	ldw	r16,0(sp)
   82f1c:	dec00304 	addi	sp,sp,12
   82f20:	f800283a 	ret
   82f24:	80800017 	ldw	r2,0(r16)
   82f28:	103ff826 	beq	r2,zero,82f0c <_read_r+0x3c>
   82f2c:	88800015 	stw	r2,0(r17)
   82f30:	1805883a 	mov	r2,r3
   82f34:	dfc00217 	ldw	ra,8(sp)
   82f38:	dc400117 	ldw	r17,4(sp)
   82f3c:	dc000017 	ldw	r16,0(sp)
   82f40:	dec00304 	addi	sp,sp,12
   82f44:	f800283a 	ret

00082f48 <__mulsi3>:
   82f48:	20000a26 	beq	r4,zero,82f74 <__mulsi3+0x2c>
   82f4c:	0007883a 	mov	r3,zero
   82f50:	2080004c 	andi	r2,r4,1
   82f54:	1005003a 	cmpeq	r2,r2,zero
   82f58:	2008d07a 	srli	r4,r4,1
   82f5c:	1000011e 	bne	r2,zero,82f64 <__mulsi3+0x1c>
   82f60:	1947883a 	add	r3,r3,r5
   82f64:	294b883a 	add	r5,r5,r5
   82f68:	203ff91e 	bne	r4,zero,82f50 <__mulsi3+0x8>
   82f6c:	1805883a 	mov	r2,r3
   82f70:	f800283a 	ret
   82f74:	0007883a 	mov	r3,zero
   82f78:	1805883a 	mov	r2,r3
   82f7c:	f800283a 	ret

00082f80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   82f80:	defff804 	addi	sp,sp,-32
   82f84:	dfc00715 	stw	ra,28(sp)
   82f88:	df000615 	stw	fp,24(sp)
   82f8c:	df000604 	addi	fp,sp,24
   82f90:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   82f94:	e0bffc17 	ldw	r2,-16(fp)
   82f98:	1004803a 	cmplt	r2,r2,zero
   82f9c:	1000091e 	bne	r2,zero,82fc4 <close+0x44>
   82fa0:	e13ffc17 	ldw	r4,-16(fp)
   82fa4:	01400304 	movi	r5,12
   82fa8:	0082f480 	call	82f48 <__mulsi3>
   82fac:	1007883a 	mov	r3,r2
   82fb0:	00800234 	movhi	r2,8
   82fb4:	1098b904 	addi	r2,r2,25316
   82fb8:	1887883a 	add	r3,r3,r2
   82fbc:	e0ffff15 	stw	r3,-4(fp)
   82fc0:	00000106 	br	82fc8 <close+0x48>
   82fc4:	e03fff15 	stw	zero,-4(fp)
   82fc8:	e0bfff17 	ldw	r2,-4(fp)
   82fcc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   82fd0:	e0bffb17 	ldw	r2,-20(fp)
   82fd4:	1005003a 	cmpeq	r2,r2,zero
   82fd8:	10001d1e 	bne	r2,zero,83050 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   82fdc:	e0bffb17 	ldw	r2,-20(fp)
   82fe0:	10800017 	ldw	r2,0(r2)
   82fe4:	10800417 	ldw	r2,16(r2)
   82fe8:	1005003a 	cmpeq	r2,r2,zero
   82fec:	1000071e 	bne	r2,zero,8300c <close+0x8c>
   82ff0:	e0bffb17 	ldw	r2,-20(fp)
   82ff4:	10800017 	ldw	r2,0(r2)
   82ff8:	10800417 	ldw	r2,16(r2)
   82ffc:	e13ffb17 	ldw	r4,-20(fp)
   83000:	103ee83a 	callr	r2
   83004:	e0bffe15 	stw	r2,-8(fp)
   83008:	00000106 	br	83010 <close+0x90>
   8300c:	e03ffe15 	stw	zero,-8(fp)
   83010:	e0bffe17 	ldw	r2,-8(fp)
   83014:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   83018:	e13ffc17 	ldw	r4,-16(fp)
   8301c:	00839980 	call	83998 <alt_release_fd>
    if (rval < 0)
   83020:	e0bffa17 	ldw	r2,-24(fp)
   83024:	1004403a 	cmpge	r2,r2,zero
   83028:	1000071e 	bne	r2,zero,83048 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8302c:	00830800 	call	83080 <alt_get_errno>
   83030:	e0fffa17 	ldw	r3,-24(fp)
   83034:	00c7c83a 	sub	r3,zero,r3
   83038:	10c00015 	stw	r3,0(r2)
      return -1;
   8303c:	00bfffc4 	movi	r2,-1
   83040:	e0bffd15 	stw	r2,-12(fp)
   83044:	00000806 	br	83068 <close+0xe8>
    }
    return 0;
   83048:	e03ffd15 	stw	zero,-12(fp)
   8304c:	00000606 	br	83068 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   83050:	00830800 	call	83080 <alt_get_errno>
   83054:	1007883a 	mov	r3,r2
   83058:	00801444 	movi	r2,81
   8305c:	18800015 	stw	r2,0(r3)
    return -1;
   83060:	00bfffc4 	movi	r2,-1
   83064:	e0bffd15 	stw	r2,-12(fp)
   83068:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8306c:	e037883a 	mov	sp,fp
   83070:	dfc00117 	ldw	ra,4(sp)
   83074:	df000017 	ldw	fp,0(sp)
   83078:	dec00204 	addi	sp,sp,8
   8307c:	f800283a 	ret

00083080 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83080:	defffd04 	addi	sp,sp,-12
   83084:	dfc00215 	stw	ra,8(sp)
   83088:	df000115 	stw	fp,4(sp)
   8308c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83090:	00800234 	movhi	r2,8
   83094:	109d3d04 	addi	r2,r2,29940
   83098:	10800017 	ldw	r2,0(r2)
   8309c:	1005003a 	cmpeq	r2,r2,zero
   830a0:	1000061e 	bne	r2,zero,830bc <alt_get_errno+0x3c>
   830a4:	00800234 	movhi	r2,8
   830a8:	109d3d04 	addi	r2,r2,29940
   830ac:	10800017 	ldw	r2,0(r2)
   830b0:	103ee83a 	callr	r2
   830b4:	e0bfff15 	stw	r2,-4(fp)
   830b8:	00000306 	br	830c8 <alt_get_errno+0x48>
   830bc:	00800274 	movhi	r2,9
   830c0:	10a3ee04 	addi	r2,r2,-28744
   830c4:	e0bfff15 	stw	r2,-4(fp)
   830c8:	e0bfff17 	ldw	r2,-4(fp)
}
   830cc:	e037883a 	mov	sp,fp
   830d0:	dfc00117 	ldw	ra,4(sp)
   830d4:	df000017 	ldw	fp,0(sp)
   830d8:	dec00204 	addi	sp,sp,8
   830dc:	f800283a 	ret

000830e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   830e0:	defffc04 	addi	sp,sp,-16
   830e4:	df000315 	stw	fp,12(sp)
   830e8:	df000304 	addi	fp,sp,12
   830ec:	e13ffd15 	stw	r4,-12(fp)
   830f0:	e17ffe15 	stw	r5,-8(fp)
   830f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   830f8:	e0bfff17 	ldw	r2,-4(fp)
}
   830fc:	e037883a 	mov	sp,fp
   83100:	df000017 	ldw	fp,0(sp)
   83104:	dec00104 	addi	sp,sp,4
   83108:	f800283a 	ret

0008310c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8310c:	defff904 	addi	sp,sp,-28
   83110:	dfc00615 	stw	ra,24(sp)
   83114:	df000515 	stw	fp,20(sp)
   83118:	df000504 	addi	fp,sp,20
   8311c:	e13ffc15 	stw	r4,-16(fp)
   83120:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83124:	e0bffc17 	ldw	r2,-16(fp)
   83128:	1004803a 	cmplt	r2,r2,zero
   8312c:	1000091e 	bne	r2,zero,83154 <fstat+0x48>
   83130:	e13ffc17 	ldw	r4,-16(fp)
   83134:	01400304 	movi	r5,12
   83138:	0082f480 	call	82f48 <__mulsi3>
   8313c:	1007883a 	mov	r3,r2
   83140:	00800234 	movhi	r2,8
   83144:	1098b904 	addi	r2,r2,25316
   83148:	1887883a 	add	r3,r3,r2
   8314c:	e0ffff15 	stw	r3,-4(fp)
   83150:	00000106 	br	83158 <fstat+0x4c>
   83154:	e03fff15 	stw	zero,-4(fp)
   83158:	e0bfff17 	ldw	r2,-4(fp)
   8315c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   83160:	e0bffb17 	ldw	r2,-20(fp)
   83164:	1005003a 	cmpeq	r2,r2,zero
   83168:	1000121e 	bne	r2,zero,831b4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8316c:	e0bffb17 	ldw	r2,-20(fp)
   83170:	10800017 	ldw	r2,0(r2)
   83174:	10800817 	ldw	r2,32(r2)
   83178:	1005003a 	cmpeq	r2,r2,zero
   8317c:	1000081e 	bne	r2,zero,831a0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   83180:	e0bffb17 	ldw	r2,-20(fp)
   83184:	10800017 	ldw	r2,0(r2)
   83188:	10800817 	ldw	r2,32(r2)
   8318c:	e13ffb17 	ldw	r4,-20(fp)
   83190:	e17ffd17 	ldw	r5,-12(fp)
   83194:	103ee83a 	callr	r2
   83198:	e0bffe15 	stw	r2,-8(fp)
   8319c:	00000b06 	br	831cc <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   831a0:	e0fffd17 	ldw	r3,-12(fp)
   831a4:	00880004 	movi	r2,8192
   831a8:	18800115 	stw	r2,4(r3)
      return 0;
   831ac:	e03ffe15 	stw	zero,-8(fp)
   831b0:	00000606 	br	831cc <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   831b4:	00831e40 	call	831e4 <alt_get_errno>
   831b8:	1007883a 	mov	r3,r2
   831bc:	00801444 	movi	r2,81
   831c0:	18800015 	stw	r2,0(r3)
    return -1;
   831c4:	00bfffc4 	movi	r2,-1
   831c8:	e0bffe15 	stw	r2,-8(fp)
   831cc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   831d0:	e037883a 	mov	sp,fp
   831d4:	dfc00117 	ldw	ra,4(sp)
   831d8:	df000017 	ldw	fp,0(sp)
   831dc:	dec00204 	addi	sp,sp,8
   831e0:	f800283a 	ret

000831e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   831e4:	defffd04 	addi	sp,sp,-12
   831e8:	dfc00215 	stw	ra,8(sp)
   831ec:	df000115 	stw	fp,4(sp)
   831f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   831f4:	00800234 	movhi	r2,8
   831f8:	109d3d04 	addi	r2,r2,29940
   831fc:	10800017 	ldw	r2,0(r2)
   83200:	1005003a 	cmpeq	r2,r2,zero
   83204:	1000061e 	bne	r2,zero,83220 <alt_get_errno+0x3c>
   83208:	00800234 	movhi	r2,8
   8320c:	109d3d04 	addi	r2,r2,29940
   83210:	10800017 	ldw	r2,0(r2)
   83214:	103ee83a 	callr	r2
   83218:	e0bfff15 	stw	r2,-4(fp)
   8321c:	00000306 	br	8322c <alt_get_errno+0x48>
   83220:	00800274 	movhi	r2,9
   83224:	10a3ee04 	addi	r2,r2,-28744
   83228:	e0bfff15 	stw	r2,-4(fp)
   8322c:	e0bfff17 	ldw	r2,-4(fp)
}
   83230:	e037883a 	mov	sp,fp
   83234:	dfc00117 	ldw	ra,4(sp)
   83238:	df000017 	ldw	fp,0(sp)
   8323c:	dec00204 	addi	sp,sp,8
   83240:	f800283a 	ret

00083244 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   83244:	deffef04 	addi	sp,sp,-68
   83248:	df001015 	stw	fp,64(sp)
   8324c:	df001004 	addi	fp,sp,64
   83250:	e13ffc15 	stw	r4,-16(fp)
   83254:	e17ffd15 	stw	r5,-12(fp)
   83258:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   8325c:	00bffa84 	movi	r2,-22
   83260:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   83264:	e0bffc17 	ldw	r2,-16(fp)
   83268:	10800828 	cmpgeui	r2,r2,32
   8326c:	1000601e 	bne	r2,zero,833f0 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83270:	0005303a 	rdctl	r2,status
   83274:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83278:	e0fff917 	ldw	r3,-28(fp)
   8327c:	00bfff84 	movi	r2,-2
   83280:	1884703a 	and	r2,r3,r2
   83284:	1001703a 	wrctl	status,r2
  
  return context;
   83288:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8328c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   83290:	e0bffc17 	ldw	r2,-16(fp)
   83294:	00c00274 	movhi	r3,9
   83298:	18e3ff04 	addi	r3,r3,-28676
   8329c:	100490fa 	slli	r2,r2,3
   832a0:	10c7883a 	add	r3,r2,r3
   832a4:	e0bffe17 	ldw	r2,-8(fp)
   832a8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   832ac:	e0bffc17 	ldw	r2,-16(fp)
   832b0:	00c00274 	movhi	r3,9
   832b4:	18e3ff04 	addi	r3,r3,-28676
   832b8:	100490fa 	slli	r2,r2,3
   832bc:	10c5883a 	add	r2,r2,r3
   832c0:	10c00104 	addi	r3,r2,4
   832c4:	e0bffd17 	ldw	r2,-12(fp)
   832c8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   832cc:	e0bffe17 	ldw	r2,-8(fp)
   832d0:	1005003a 	cmpeq	r2,r2,zero
   832d4:	1000201e 	bne	r2,zero,83358 <alt_irq_register+0x114>
   832d8:	e0bffc17 	ldw	r2,-16(fp)
   832dc:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   832e0:	0005303a 	rdctl	r2,status
   832e4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   832e8:	e0fff617 	ldw	r3,-40(fp)
   832ec:	00bfff84 	movi	r2,-2
   832f0:	1884703a 	and	r2,r3,r2
   832f4:	1001703a 	wrctl	status,r2
  
  return context;
   832f8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   832fc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   83300:	e0fff717 	ldw	r3,-36(fp)
   83304:	00800044 	movi	r2,1
   83308:	10c4983a 	sll	r2,r2,r3
   8330c:	1007883a 	mov	r3,r2
   83310:	00800274 	movhi	r2,9
   83314:	10a3ef04 	addi	r2,r2,-28740
   83318:	10800017 	ldw	r2,0(r2)
   8331c:	1886b03a 	or	r3,r3,r2
   83320:	00800274 	movhi	r2,9
   83324:	10a3ef04 	addi	r2,r2,-28740
   83328:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8332c:	00800274 	movhi	r2,9
   83330:	10a3ef04 	addi	r2,r2,-28740
   83334:	10800017 	ldw	r2,0(r2)
   83338:	100170fa 	wrctl	ienable,r2
   8333c:	e0bff817 	ldw	r2,-32(fp)
   83340:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83344:	e0bff517 	ldw	r2,-44(fp)
   83348:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8334c:	0005883a 	mov	r2,zero
   83350:	e0bfff15 	stw	r2,-4(fp)
   83354:	00002006 	br	833d8 <alt_irq_register+0x194>
   83358:	e0bffc17 	ldw	r2,-16(fp)
   8335c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83360:	0005303a 	rdctl	r2,status
   83364:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83368:	e0fff217 	ldw	r3,-56(fp)
   8336c:	00bfff84 	movi	r2,-2
   83370:	1884703a 	and	r2,r3,r2
   83374:	1001703a 	wrctl	status,r2
  
  return context;
   83378:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8337c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   83380:	e0fff317 	ldw	r3,-52(fp)
   83384:	00800044 	movi	r2,1
   83388:	10c4983a 	sll	r2,r2,r3
   8338c:	0084303a 	nor	r2,zero,r2
   83390:	1007883a 	mov	r3,r2
   83394:	00800274 	movhi	r2,9
   83398:	10a3ef04 	addi	r2,r2,-28740
   8339c:	10800017 	ldw	r2,0(r2)
   833a0:	1886703a 	and	r3,r3,r2
   833a4:	00800274 	movhi	r2,9
   833a8:	10a3ef04 	addi	r2,r2,-28740
   833ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   833b0:	00800274 	movhi	r2,9
   833b4:	10a3ef04 	addi	r2,r2,-28740
   833b8:	10800017 	ldw	r2,0(r2)
   833bc:	100170fa 	wrctl	ienable,r2
   833c0:	e0bff417 	ldw	r2,-48(fp)
   833c4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   833c8:	e0bff117 	ldw	r2,-60(fp)
   833cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   833d0:	0005883a 	mov	r2,zero
   833d4:	e0bfff15 	stw	r2,-4(fp)
   833d8:	e0bfff17 	ldw	r2,-4(fp)
   833dc:	e0bffb15 	stw	r2,-20(fp)
   833e0:	e0bffa17 	ldw	r2,-24(fp)
   833e4:	e0bff015 	stw	r2,-64(fp)
   833e8:	e0bff017 	ldw	r2,-64(fp)
   833ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   833f0:	e0bffb17 	ldw	r2,-20(fp)
}
   833f4:	e037883a 	mov	sp,fp
   833f8:	df000017 	ldw	fp,0(sp)
   833fc:	dec00104 	addi	sp,sp,4
   83400:	f800283a 	ret

00083404 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   83404:	deffeb04 	addi	sp,sp,-84
   83408:	dfc01415 	stw	ra,80(sp)
   8340c:	df001315 	stw	fp,76(sp)
   83410:	df001304 	addi	fp,sp,76
   83414:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83418:	e0bffd17 	ldw	r2,-12(fp)
   8341c:	1004803a 	cmplt	r2,r2,zero
   83420:	1000091e 	bne	r2,zero,83448 <isatty+0x44>
   83424:	e13ffd17 	ldw	r4,-12(fp)
   83428:	01400304 	movi	r5,12
   8342c:	0082f480 	call	82f48 <__mulsi3>
   83430:	1007883a 	mov	r3,r2
   83434:	00800234 	movhi	r2,8
   83438:	1098b904 	addi	r2,r2,25316
   8343c:	1887883a 	add	r3,r3,r2
   83440:	e0ffff15 	stw	r3,-4(fp)
   83444:	00000106 	br	8344c <isatty+0x48>
   83448:	e03fff15 	stw	zero,-4(fp)
   8344c:	e0bfff17 	ldw	r2,-4(fp)
   83450:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   83454:	e0bfed17 	ldw	r2,-76(fp)
   83458:	1005003a 	cmpeq	r2,r2,zero
   8345c:	10000f1e 	bne	r2,zero,8349c <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   83460:	e0bfed17 	ldw	r2,-76(fp)
   83464:	10800017 	ldw	r2,0(r2)
   83468:	10800817 	ldw	r2,32(r2)
   8346c:	1004c03a 	cmpne	r2,r2,zero
   83470:	1000031e 	bne	r2,zero,83480 <isatty+0x7c>
    {
      return 1;
   83474:	00800044 	movi	r2,1
   83478:	e0bffe15 	stw	r2,-8(fp)
   8347c:	00000c06 	br	834b0 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   83480:	e17fee04 	addi	r5,fp,-72
   83484:	e13ffd17 	ldw	r4,-12(fp)
   83488:	008310c0 	call	8310c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8348c:	e0bfef17 	ldw	r2,-68(fp)
   83490:	10880020 	cmpeqi	r2,r2,8192
   83494:	e0bffe15 	stw	r2,-8(fp)
   83498:	00000506 	br	834b0 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8349c:	00834c80 	call	834c8 <alt_get_errno>
   834a0:	1007883a 	mov	r3,r2
   834a4:	00801444 	movi	r2,81
   834a8:	18800015 	stw	r2,0(r3)
    return 0;
   834ac:	e03ffe15 	stw	zero,-8(fp)
   834b0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   834b4:	e037883a 	mov	sp,fp
   834b8:	dfc00117 	ldw	ra,4(sp)
   834bc:	df000017 	ldw	fp,0(sp)
   834c0:	dec00204 	addi	sp,sp,8
   834c4:	f800283a 	ret

000834c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   834c8:	defffd04 	addi	sp,sp,-12
   834cc:	dfc00215 	stw	ra,8(sp)
   834d0:	df000115 	stw	fp,4(sp)
   834d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   834d8:	00800234 	movhi	r2,8
   834dc:	109d3d04 	addi	r2,r2,29940
   834e0:	10800017 	ldw	r2,0(r2)
   834e4:	1005003a 	cmpeq	r2,r2,zero
   834e8:	1000061e 	bne	r2,zero,83504 <alt_get_errno+0x3c>
   834ec:	00800234 	movhi	r2,8
   834f0:	109d3d04 	addi	r2,r2,29940
   834f4:	10800017 	ldw	r2,0(r2)
   834f8:	103ee83a 	callr	r2
   834fc:	e0bfff15 	stw	r2,-4(fp)
   83500:	00000306 	br	83510 <alt_get_errno+0x48>
   83504:	00800274 	movhi	r2,9
   83508:	10a3ee04 	addi	r2,r2,-28744
   8350c:	e0bfff15 	stw	r2,-4(fp)
   83510:	e0bfff17 	ldw	r2,-4(fp)
}
   83514:	e037883a 	mov	sp,fp
   83518:	dfc00117 	ldw	ra,4(sp)
   8351c:	df000017 	ldw	fp,0(sp)
   83520:	dec00204 	addi	sp,sp,8
   83524:	f800283a 	ret

00083528 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   83528:	defffe04 	addi	sp,sp,-8
   8352c:	dfc00115 	stw	ra,4(sp)
   83530:	df000015 	stw	fp,0(sp)
   83534:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   83538:	01000234 	movhi	r4,8
   8353c:	211d4204 	addi	r4,r4,29960
   83540:	01400234 	movhi	r5,8
   83544:	2956ad04 	addi	r5,r5,23220
   83548:	01800234 	movhi	r6,8
   8354c:	319d4204 	addi	r6,r6,29960
   83550:	00835a80 	call	835a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   83554:	01000234 	movhi	r4,8
   83558:	21000804 	addi	r4,r4,32
   8355c:	01400234 	movhi	r5,8
   83560:	29400804 	addi	r5,r5,32
   83564:	01800234 	movhi	r6,8
   83568:	31806d04 	addi	r6,r6,436
   8356c:	00835a80 	call	835a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   83570:	01000234 	movhi	r4,8
   83574:	21169a04 	addi	r4,r4,23144
   83578:	01400234 	movhi	r5,8
   8357c:	29569a04 	addi	r5,r5,23144
   83580:	01800234 	movhi	r6,8
   83584:	3196ad04 	addi	r6,r6,23220
   83588:	00835a80 	call	835a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8358c:	00849000 	call	84900 <alt_dcache_flush_all>
  alt_icache_flush_all();
   83590:	0084af80 	call	84af8 <alt_icache_flush_all>
}
   83594:	e037883a 	mov	sp,fp
   83598:	dfc00117 	ldw	ra,4(sp)
   8359c:	df000017 	ldw	fp,0(sp)
   835a0:	dec00204 	addi	sp,sp,8
   835a4:	f800283a 	ret

000835a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   835a8:	defffc04 	addi	sp,sp,-16
   835ac:	df000315 	stw	fp,12(sp)
   835b0:	df000304 	addi	fp,sp,12
   835b4:	e13ffd15 	stw	r4,-12(fp)
   835b8:	e17ffe15 	stw	r5,-8(fp)
   835bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   835c0:	e0fffe17 	ldw	r3,-8(fp)
   835c4:	e0bffd17 	ldw	r2,-12(fp)
   835c8:	18800e26 	beq	r3,r2,83604 <alt_load_section+0x5c>
  {
    while( to != end )
   835cc:	00000a06 	br	835f8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   835d0:	e0bffd17 	ldw	r2,-12(fp)
   835d4:	10c00017 	ldw	r3,0(r2)
   835d8:	e0bffe17 	ldw	r2,-8(fp)
   835dc:	10c00015 	stw	r3,0(r2)
   835e0:	e0bffe17 	ldw	r2,-8(fp)
   835e4:	10800104 	addi	r2,r2,4
   835e8:	e0bffe15 	stw	r2,-8(fp)
   835ec:	e0bffd17 	ldw	r2,-12(fp)
   835f0:	10800104 	addi	r2,r2,4
   835f4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   835f8:	e0fffe17 	ldw	r3,-8(fp)
   835fc:	e0bfff17 	ldw	r2,-4(fp)
   83600:	18bff31e 	bne	r3,r2,835d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   83604:	e037883a 	mov	sp,fp
   83608:	df000017 	ldw	fp,0(sp)
   8360c:	dec00104 	addi	sp,sp,4
   83610:	f800283a 	ret

00083614 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   83614:	defff804 	addi	sp,sp,-32
   83618:	dfc00715 	stw	ra,28(sp)
   8361c:	df000615 	stw	fp,24(sp)
   83620:	df000604 	addi	fp,sp,24
   83624:	e13ffc15 	stw	r4,-16(fp)
   83628:	e17ffd15 	stw	r5,-12(fp)
   8362c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   83630:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83634:	e0bffc17 	ldw	r2,-16(fp)
   83638:	1004803a 	cmplt	r2,r2,zero
   8363c:	1000091e 	bne	r2,zero,83664 <lseek+0x50>
   83640:	e13ffc17 	ldw	r4,-16(fp)
   83644:	01400304 	movi	r5,12
   83648:	0082f480 	call	82f48 <__mulsi3>
   8364c:	1007883a 	mov	r3,r2
   83650:	00800234 	movhi	r2,8
   83654:	1098b904 	addi	r2,r2,25316
   83658:	1887883a 	add	r3,r3,r2
   8365c:	e0ffff15 	stw	r3,-4(fp)
   83660:	00000106 	br	83668 <lseek+0x54>
   83664:	e03fff15 	stw	zero,-4(fp)
   83668:	e0bfff17 	ldw	r2,-4(fp)
   8366c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   83670:	e0bffb17 	ldw	r2,-20(fp)
   83674:	1005003a 	cmpeq	r2,r2,zero
   83678:	1000111e 	bne	r2,zero,836c0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8367c:	e0bffb17 	ldw	r2,-20(fp)
   83680:	10800017 	ldw	r2,0(r2)
   83684:	10800717 	ldw	r2,28(r2)
   83688:	1005003a 	cmpeq	r2,r2,zero
   8368c:	1000091e 	bne	r2,zero,836b4 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   83690:	e0bffb17 	ldw	r2,-20(fp)
   83694:	10800017 	ldw	r2,0(r2)
   83698:	10800717 	ldw	r2,28(r2)
   8369c:	e13ffb17 	ldw	r4,-20(fp)
   836a0:	e17ffd17 	ldw	r5,-12(fp)
   836a4:	e1bffe17 	ldw	r6,-8(fp)
   836a8:	103ee83a 	callr	r2
   836ac:	e0bffa15 	stw	r2,-24(fp)
   836b0:	00000506 	br	836c8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   836b4:	00bfde84 	movi	r2,-134
   836b8:	e0bffa15 	stw	r2,-24(fp)
   836bc:	00000206 	br	836c8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   836c0:	00bfebc4 	movi	r2,-81
   836c4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   836c8:	e0bffa17 	ldw	r2,-24(fp)
   836cc:	1004403a 	cmpge	r2,r2,zero
   836d0:	1000071e 	bne	r2,zero,836f0 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   836d4:	00837080 	call	83708 <alt_get_errno>
   836d8:	1007883a 	mov	r3,r2
   836dc:	e0bffa17 	ldw	r2,-24(fp)
   836e0:	0085c83a 	sub	r2,zero,r2
   836e4:	18800015 	stw	r2,0(r3)
    rc = -1;
   836e8:	00bfffc4 	movi	r2,-1
   836ec:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   836f0:	e0bffa17 	ldw	r2,-24(fp)
}
   836f4:	e037883a 	mov	sp,fp
   836f8:	dfc00117 	ldw	ra,4(sp)
   836fc:	df000017 	ldw	fp,0(sp)
   83700:	dec00204 	addi	sp,sp,8
   83704:	f800283a 	ret

00083708 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83708:	defffd04 	addi	sp,sp,-12
   8370c:	dfc00215 	stw	ra,8(sp)
   83710:	df000115 	stw	fp,4(sp)
   83714:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83718:	00800234 	movhi	r2,8
   8371c:	109d3d04 	addi	r2,r2,29940
   83720:	10800017 	ldw	r2,0(r2)
   83724:	1005003a 	cmpeq	r2,r2,zero
   83728:	1000061e 	bne	r2,zero,83744 <alt_get_errno+0x3c>
   8372c:	00800234 	movhi	r2,8
   83730:	109d3d04 	addi	r2,r2,29940
   83734:	10800017 	ldw	r2,0(r2)
   83738:	103ee83a 	callr	r2
   8373c:	e0bfff15 	stw	r2,-4(fp)
   83740:	00000306 	br	83750 <alt_get_errno+0x48>
   83744:	00800274 	movhi	r2,9
   83748:	10a3ee04 	addi	r2,r2,-28744
   8374c:	e0bfff15 	stw	r2,-4(fp)
   83750:	e0bfff17 	ldw	r2,-4(fp)
}
   83754:	e037883a 	mov	sp,fp
   83758:	dfc00117 	ldw	ra,4(sp)
   8375c:	df000017 	ldw	fp,0(sp)
   83760:	dec00204 	addi	sp,sp,8
   83764:	f800283a 	ret

00083768 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   83768:	defffd04 	addi	sp,sp,-12
   8376c:	dfc00215 	stw	ra,8(sp)
   83770:	df000115 	stw	fp,4(sp)
   83774:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   83778:	0009883a 	mov	r4,zero
   8377c:	0083c500 	call	83c50 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   83780:	0083c840 	call	83c84 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   83784:	01000234 	movhi	r4,8
   83788:	2116a304 	addi	r4,r4,23180
   8378c:	01400234 	movhi	r5,8
   83790:	2956a304 	addi	r5,r5,23180
   83794:	01800234 	movhi	r6,8
   83798:	3196a304 	addi	r6,r6,23180
   8379c:	0084eb80 	call	84eb8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   837a0:	0084a300 	call	84a30 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   837a4:	01000234 	movhi	r4,8
   837a8:	2112a504 	addi	r4,r4,19092
   837ac:	008565c0 	call	8565c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   837b0:	d126bf17 	ldw	r4,-25860(gp)
   837b4:	d166c017 	ldw	r5,-25856(gp)
   837b8:	d1a6c117 	ldw	r6,-25852(gp)
   837bc:	00805540 	call	80554 <main>
   837c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   837c4:	01000044 	movi	r4,1
   837c8:	0082f800 	call	82f80 <close>
  exit (result);
   837cc:	e13fff17 	ldw	r4,-4(fp)
   837d0:	00856700 	call	85670 <exit>

000837d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   837d4:	defffe04 	addi	sp,sp,-8
   837d8:	df000115 	stw	fp,4(sp)
   837dc:	df000104 	addi	fp,sp,4
   837e0:	e13fff15 	stw	r4,-4(fp)
}
   837e4:	e037883a 	mov	sp,fp
   837e8:	df000017 	ldw	fp,0(sp)
   837ec:	dec00104 	addi	sp,sp,4
   837f0:	f800283a 	ret

000837f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   837f4:	defffe04 	addi	sp,sp,-8
   837f8:	df000115 	stw	fp,4(sp)
   837fc:	df000104 	addi	fp,sp,4
   83800:	e13fff15 	stw	r4,-4(fp)
}
   83804:	e037883a 	mov	sp,fp
   83808:	df000017 	ldw	fp,0(sp)
   8380c:	dec00104 	addi	sp,sp,4
   83810:	f800283a 	ret

00083814 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   83814:	defff704 	addi	sp,sp,-36
   83818:	dfc00815 	stw	ra,32(sp)
   8381c:	df000715 	stw	fp,28(sp)
   83820:	df000704 	addi	fp,sp,28
   83824:	e13ffb15 	stw	r4,-20(fp)
   83828:	e17ffc15 	stw	r5,-16(fp)
   8382c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83830:	e0bffb17 	ldw	r2,-20(fp)
   83834:	1004803a 	cmplt	r2,r2,zero
   83838:	1000091e 	bne	r2,zero,83860 <read+0x4c>
   8383c:	e13ffb17 	ldw	r4,-20(fp)
   83840:	01400304 	movi	r5,12
   83844:	0082f480 	call	82f48 <__mulsi3>
   83848:	1007883a 	mov	r3,r2
   8384c:	00800234 	movhi	r2,8
   83850:	1098b904 	addi	r2,r2,25316
   83854:	1887883a 	add	r3,r3,r2
   83858:	e0ffff15 	stw	r3,-4(fp)
   8385c:	00000106 	br	83864 <read+0x50>
   83860:	e03fff15 	stw	zero,-4(fp)
   83864:	e0bfff17 	ldw	r2,-4(fp)
   83868:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8386c:	e0bffa17 	ldw	r2,-24(fp)
   83870:	1005003a 	cmpeq	r2,r2,zero
   83874:	1000241e 	bne	r2,zero,83908 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   83878:	e0bffa17 	ldw	r2,-24(fp)
   8387c:	10800217 	ldw	r2,8(r2)
   83880:	108000cc 	andi	r2,r2,3
   83884:	10800060 	cmpeqi	r2,r2,1
   83888:	10001a1e 	bne	r2,zero,838f4 <read+0xe0>
   8388c:	e0bffa17 	ldw	r2,-24(fp)
   83890:	10800017 	ldw	r2,0(r2)
   83894:	10800517 	ldw	r2,20(r2)
   83898:	1005003a 	cmpeq	r2,r2,zero
   8389c:	1000151e 	bne	r2,zero,838f4 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   838a0:	e0bffa17 	ldw	r2,-24(fp)
   838a4:	10800017 	ldw	r2,0(r2)
   838a8:	10800517 	ldw	r2,20(r2)
   838ac:	e17ffc17 	ldw	r5,-16(fp)
   838b0:	e1bffd17 	ldw	r6,-12(fp)
   838b4:	e13ffa17 	ldw	r4,-24(fp)
   838b8:	103ee83a 	callr	r2
   838bc:	e0bff915 	stw	r2,-28(fp)
   838c0:	e0bff917 	ldw	r2,-28(fp)
   838c4:	1004403a 	cmpge	r2,r2,zero
   838c8:	1000071e 	bne	r2,zero,838e8 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   838cc:	00839380 	call	83938 <alt_get_errno>
   838d0:	e0fff917 	ldw	r3,-28(fp)
   838d4:	00c7c83a 	sub	r3,zero,r3
   838d8:	10c00015 	stw	r3,0(r2)
          return -1;
   838dc:	00bfffc4 	movi	r2,-1
   838e0:	e0bffe15 	stw	r2,-8(fp)
   838e4:	00000e06 	br	83920 <read+0x10c>
        }
        return rval;
   838e8:	e0bff917 	ldw	r2,-28(fp)
   838ec:	e0bffe15 	stw	r2,-8(fp)
   838f0:	00000b06 	br	83920 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   838f4:	00839380 	call	83938 <alt_get_errno>
   838f8:	1007883a 	mov	r3,r2
   838fc:	00800344 	movi	r2,13
   83900:	18800015 	stw	r2,0(r3)
   83904:	00000406 	br	83918 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   83908:	00839380 	call	83938 <alt_get_errno>
   8390c:	1007883a 	mov	r3,r2
   83910:	00801444 	movi	r2,81
   83914:	18800015 	stw	r2,0(r3)
  }
  return -1;
   83918:	00bfffc4 	movi	r2,-1
   8391c:	e0bffe15 	stw	r2,-8(fp)
   83920:	e0bffe17 	ldw	r2,-8(fp)
}
   83924:	e037883a 	mov	sp,fp
   83928:	dfc00117 	ldw	ra,4(sp)
   8392c:	df000017 	ldw	fp,0(sp)
   83930:	dec00204 	addi	sp,sp,8
   83934:	f800283a 	ret

00083938 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83938:	defffd04 	addi	sp,sp,-12
   8393c:	dfc00215 	stw	ra,8(sp)
   83940:	df000115 	stw	fp,4(sp)
   83944:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83948:	00800234 	movhi	r2,8
   8394c:	109d3d04 	addi	r2,r2,29940
   83950:	10800017 	ldw	r2,0(r2)
   83954:	1005003a 	cmpeq	r2,r2,zero
   83958:	1000061e 	bne	r2,zero,83974 <alt_get_errno+0x3c>
   8395c:	00800234 	movhi	r2,8
   83960:	109d3d04 	addi	r2,r2,29940
   83964:	10800017 	ldw	r2,0(r2)
   83968:	103ee83a 	callr	r2
   8396c:	e0bfff15 	stw	r2,-4(fp)
   83970:	00000306 	br	83980 <alt_get_errno+0x48>
   83974:	00800274 	movhi	r2,9
   83978:	10a3ee04 	addi	r2,r2,-28744
   8397c:	e0bfff15 	stw	r2,-4(fp)
   83980:	e0bfff17 	ldw	r2,-4(fp)
}
   83984:	e037883a 	mov	sp,fp
   83988:	dfc00117 	ldw	ra,4(sp)
   8398c:	df000017 	ldw	fp,0(sp)
   83990:	dec00204 	addi	sp,sp,8
   83994:	f800283a 	ret

00083998 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   83998:	defffc04 	addi	sp,sp,-16
   8399c:	dfc00315 	stw	ra,12(sp)
   839a0:	df000215 	stw	fp,8(sp)
   839a4:	dc000115 	stw	r16,4(sp)
   839a8:	df000104 	addi	fp,sp,4
   839ac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   839b0:	e0bfff17 	ldw	r2,-4(fp)
   839b4:	108000d0 	cmplti	r2,r2,3
   839b8:	10000f1e 	bne	r2,zero,839f8 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   839bc:	e13fff17 	ldw	r4,-4(fp)
   839c0:	04000234 	movhi	r16,8
   839c4:	8418b904 	addi	r16,r16,25316
   839c8:	01400304 	movi	r5,12
   839cc:	0082f480 	call	82f48 <__mulsi3>
   839d0:	1405883a 	add	r2,r2,r16
   839d4:	10800204 	addi	r2,r2,8
   839d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   839dc:	e13fff17 	ldw	r4,-4(fp)
   839e0:	04000234 	movhi	r16,8
   839e4:	8418b904 	addi	r16,r16,25316
   839e8:	01400304 	movi	r5,12
   839ec:	0082f480 	call	82f48 <__mulsi3>
   839f0:	1405883a 	add	r2,r2,r16
   839f4:	10000015 	stw	zero,0(r2)
  }
}
   839f8:	e037883a 	mov	sp,fp
   839fc:	dfc00217 	ldw	ra,8(sp)
   83a00:	df000117 	ldw	fp,4(sp)
   83a04:	dc000017 	ldw	r16,0(sp)
   83a08:	dec00304 	addi	sp,sp,12
   83a0c:	f800283a 	ret

00083a10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   83a10:	defff804 	addi	sp,sp,-32
   83a14:	df000715 	stw	fp,28(sp)
   83a18:	df000704 	addi	fp,sp,28
   83a1c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83a20:	0005303a 	rdctl	r2,status
   83a24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83a28:	e0fffb17 	ldw	r3,-20(fp)
   83a2c:	00bfff84 	movi	r2,-2
   83a30:	1884703a 	and	r2,r3,r2
   83a34:	1001703a 	wrctl	status,r2
  
  return context;
   83a38:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   83a3c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   83a40:	d0a00e17 	ldw	r2,-32712(gp)
   83a44:	10c000c4 	addi	r3,r2,3
   83a48:	00bfff04 	movi	r2,-4
   83a4c:	1884703a 	and	r2,r3,r2
   83a50:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   83a54:	d0e00e17 	ldw	r3,-32712(gp)
   83a58:	e0bffe17 	ldw	r2,-8(fp)
   83a5c:	1887883a 	add	r3,r3,r2
   83a60:	00800434 	movhi	r2,16
   83a64:	10800004 	addi	r2,r2,0
   83a68:	10c0072e 	bgeu	r2,r3,83a88 <sbrk+0x78>
   83a6c:	e0bffd17 	ldw	r2,-12(fp)
   83a70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83a74:	e0bffa17 	ldw	r2,-24(fp)
   83a78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   83a7c:	00bfffc4 	movi	r2,-1
   83a80:	e0bfff15 	stw	r2,-4(fp)
   83a84:	00000c06 	br	83ab8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   83a88:	d0a00e17 	ldw	r2,-32712(gp)
   83a8c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   83a90:	d0e00e17 	ldw	r3,-32712(gp)
   83a94:	e0bffe17 	ldw	r2,-8(fp)
   83a98:	1885883a 	add	r2,r3,r2
   83a9c:	d0a00e15 	stw	r2,-32712(gp)
   83aa0:	e0bffd17 	ldw	r2,-12(fp)
   83aa4:	e0bff915 	stw	r2,-28(fp)
   83aa8:	e0bff917 	ldw	r2,-28(fp)
   83aac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   83ab0:	e0bffc17 	ldw	r2,-16(fp)
   83ab4:	e0bfff15 	stw	r2,-4(fp)
   83ab8:	e0bfff17 	ldw	r2,-4(fp)
} 
   83abc:	e037883a 	mov	sp,fp
   83ac0:	df000017 	ldw	fp,0(sp)
   83ac4:	dec00104 	addi	sp,sp,4
   83ac8:	f800283a 	ret

00083acc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   83acc:	defff704 	addi	sp,sp,-36
   83ad0:	dfc00815 	stw	ra,32(sp)
   83ad4:	df000715 	stw	fp,28(sp)
   83ad8:	df000704 	addi	fp,sp,28
   83adc:	e13ffb15 	stw	r4,-20(fp)
   83ae0:	e17ffc15 	stw	r5,-16(fp)
   83ae4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83ae8:	e0bffb17 	ldw	r2,-20(fp)
   83aec:	1004803a 	cmplt	r2,r2,zero
   83af0:	1000091e 	bne	r2,zero,83b18 <write+0x4c>
   83af4:	e13ffb17 	ldw	r4,-20(fp)
   83af8:	01400304 	movi	r5,12
   83afc:	0082f480 	call	82f48 <__mulsi3>
   83b00:	1007883a 	mov	r3,r2
   83b04:	00800234 	movhi	r2,8
   83b08:	1098b904 	addi	r2,r2,25316
   83b0c:	1887883a 	add	r3,r3,r2
   83b10:	e0ffff15 	stw	r3,-4(fp)
   83b14:	00000106 	br	83b1c <write+0x50>
   83b18:	e03fff15 	stw	zero,-4(fp)
   83b1c:	e0bfff17 	ldw	r2,-4(fp)
   83b20:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   83b24:	e0bffa17 	ldw	r2,-24(fp)
   83b28:	1005003a 	cmpeq	r2,r2,zero
   83b2c:	1000241e 	bne	r2,zero,83bc0 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   83b30:	e0bffa17 	ldw	r2,-24(fp)
   83b34:	10800217 	ldw	r2,8(r2)
   83b38:	108000cc 	andi	r2,r2,3
   83b3c:	1005003a 	cmpeq	r2,r2,zero
   83b40:	10001a1e 	bne	r2,zero,83bac <write+0xe0>
   83b44:	e0bffa17 	ldw	r2,-24(fp)
   83b48:	10800017 	ldw	r2,0(r2)
   83b4c:	10800617 	ldw	r2,24(r2)
   83b50:	1005003a 	cmpeq	r2,r2,zero
   83b54:	1000151e 	bne	r2,zero,83bac <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   83b58:	e0bffa17 	ldw	r2,-24(fp)
   83b5c:	10800017 	ldw	r2,0(r2)
   83b60:	10800617 	ldw	r2,24(r2)
   83b64:	e17ffc17 	ldw	r5,-16(fp)
   83b68:	e1bffd17 	ldw	r6,-12(fp)
   83b6c:	e13ffa17 	ldw	r4,-24(fp)
   83b70:	103ee83a 	callr	r2
   83b74:	e0bff915 	stw	r2,-28(fp)
   83b78:	e0bff917 	ldw	r2,-28(fp)
   83b7c:	1004403a 	cmpge	r2,r2,zero
   83b80:	1000071e 	bne	r2,zero,83ba0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   83b84:	0083bf00 	call	83bf0 <alt_get_errno>
   83b88:	e0fff917 	ldw	r3,-28(fp)
   83b8c:	00c7c83a 	sub	r3,zero,r3
   83b90:	10c00015 	stw	r3,0(r2)
        return -1;
   83b94:	00bfffc4 	movi	r2,-1
   83b98:	e0bffe15 	stw	r2,-8(fp)
   83b9c:	00000e06 	br	83bd8 <write+0x10c>
      }
      return rval;
   83ba0:	e0bff917 	ldw	r2,-28(fp)
   83ba4:	e0bffe15 	stw	r2,-8(fp)
   83ba8:	00000b06 	br	83bd8 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   83bac:	0083bf00 	call	83bf0 <alt_get_errno>
   83bb0:	1007883a 	mov	r3,r2
   83bb4:	00800344 	movi	r2,13
   83bb8:	18800015 	stw	r2,0(r3)
   83bbc:	00000406 	br	83bd0 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   83bc0:	0083bf00 	call	83bf0 <alt_get_errno>
   83bc4:	1007883a 	mov	r3,r2
   83bc8:	00801444 	movi	r2,81
   83bcc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   83bd0:	00bfffc4 	movi	r2,-1
   83bd4:	e0bffe15 	stw	r2,-8(fp)
   83bd8:	e0bffe17 	ldw	r2,-8(fp)
}
   83bdc:	e037883a 	mov	sp,fp
   83be0:	dfc00117 	ldw	ra,4(sp)
   83be4:	df000017 	ldw	fp,0(sp)
   83be8:	dec00204 	addi	sp,sp,8
   83bec:	f800283a 	ret

00083bf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83bf0:	defffd04 	addi	sp,sp,-12
   83bf4:	dfc00215 	stw	ra,8(sp)
   83bf8:	df000115 	stw	fp,4(sp)
   83bfc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83c00:	00800234 	movhi	r2,8
   83c04:	109d3d04 	addi	r2,r2,29940
   83c08:	10800017 	ldw	r2,0(r2)
   83c0c:	1005003a 	cmpeq	r2,r2,zero
   83c10:	1000061e 	bne	r2,zero,83c2c <alt_get_errno+0x3c>
   83c14:	00800234 	movhi	r2,8
   83c18:	109d3d04 	addi	r2,r2,29940
   83c1c:	10800017 	ldw	r2,0(r2)
   83c20:	103ee83a 	callr	r2
   83c24:	e0bfff15 	stw	r2,-4(fp)
   83c28:	00000306 	br	83c38 <alt_get_errno+0x48>
   83c2c:	00800274 	movhi	r2,9
   83c30:	10a3ee04 	addi	r2,r2,-28744
   83c34:	e0bfff15 	stw	r2,-4(fp)
   83c38:	e0bfff17 	ldw	r2,-4(fp)
}
   83c3c:	e037883a 	mov	sp,fp
   83c40:	dfc00117 	ldw	ra,4(sp)
   83c44:	df000017 	ldw	fp,0(sp)
   83c48:	dec00204 	addi	sp,sp,8
   83c4c:	f800283a 	ret

00083c50 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   83c50:	defffd04 	addi	sp,sp,-12
   83c54:	dfc00215 	stw	ra,8(sp)
   83c58:	df000115 	stw	fp,4(sp)
   83c5c:	df000104 	addi	fp,sp,4
   83c60:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   83c64:	00853b80 	call	853b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   83c68:	00800044 	movi	r2,1
   83c6c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   83c70:	e037883a 	mov	sp,fp
   83c74:	dfc00117 	ldw	ra,4(sp)
   83c78:	df000017 	ldw	fp,0(sp)
   83c7c:	dec00204 	addi	sp,sp,8
   83c80:	f800283a 	ret

00083c84 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   83c84:	defffe04 	addi	sp,sp,-8
   83c88:	dfc00115 	stw	ra,4(sp)
   83c8c:	df000015 	stw	fp,0(sp)
   83c90:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   83c94:	01000234 	movhi	r4,8
   83c98:	21192304 	addi	r4,r4,25740
   83c9c:	000b883a 	mov	r5,zero
   83ca0:	000d883a 	mov	r6,zero
   83ca4:	0083e480 	call	83e48 <altera_avalon_jtag_uart_init>
   83ca8:	01000234 	movhi	r4,8
   83cac:	21191904 	addi	r4,r4,25700
   83cb0:	0083cc80 	call	83cc8 <alt_dev_reg>
}
   83cb4:	e037883a 	mov	sp,fp
   83cb8:	dfc00117 	ldw	ra,4(sp)
   83cbc:	df000017 	ldw	fp,0(sp)
   83cc0:	dec00204 	addi	sp,sp,8
   83cc4:	f800283a 	ret

00083cc8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   83cc8:	defffd04 	addi	sp,sp,-12
   83ccc:	dfc00215 	stw	ra,8(sp)
   83cd0:	df000115 	stw	fp,4(sp)
   83cd4:	df000104 	addi	fp,sp,4
   83cd8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   83cdc:	e13fff17 	ldw	r4,-4(fp)
   83ce0:	01400234 	movhi	r5,8
   83ce4:	295d3a04 	addi	r5,r5,29928
   83ce8:	008491c0 	call	8491c <alt_dev_llist_insert>
}
   83cec:	e037883a 	mov	sp,fp
   83cf0:	dfc00117 	ldw	ra,4(sp)
   83cf4:	df000017 	ldw	fp,0(sp)
   83cf8:	dec00204 	addi	sp,sp,8
   83cfc:	f800283a 	ret

00083d00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   83d00:	defffa04 	addi	sp,sp,-24
   83d04:	dfc00515 	stw	ra,20(sp)
   83d08:	df000415 	stw	fp,16(sp)
   83d0c:	df000404 	addi	fp,sp,16
   83d10:	e13ffd15 	stw	r4,-12(fp)
   83d14:	e17ffe15 	stw	r5,-8(fp)
   83d18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83d1c:	e0bffd17 	ldw	r2,-12(fp)
   83d20:	10800017 	ldw	r2,0(r2)
   83d24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83d28:	e0bffc17 	ldw	r2,-16(fp)
   83d2c:	11000a04 	addi	r4,r2,40
   83d30:	e0bffd17 	ldw	r2,-12(fp)
   83d34:	11c00217 	ldw	r7,8(r2)
   83d38:	e17ffe17 	ldw	r5,-8(fp)
   83d3c:	e1bfff17 	ldw	r6,-4(fp)
   83d40:	00843480 	call	84348 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   83d44:	e037883a 	mov	sp,fp
   83d48:	dfc00117 	ldw	ra,4(sp)
   83d4c:	df000017 	ldw	fp,0(sp)
   83d50:	dec00204 	addi	sp,sp,8
   83d54:	f800283a 	ret

00083d58 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   83d58:	defffa04 	addi	sp,sp,-24
   83d5c:	dfc00515 	stw	ra,20(sp)
   83d60:	df000415 	stw	fp,16(sp)
   83d64:	df000404 	addi	fp,sp,16
   83d68:	e13ffd15 	stw	r4,-12(fp)
   83d6c:	e17ffe15 	stw	r5,-8(fp)
   83d70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83d74:	e0bffd17 	ldw	r2,-12(fp)
   83d78:	10800017 	ldw	r2,0(r2)
   83d7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83d80:	e0bffc17 	ldw	r2,-16(fp)
   83d84:	11000a04 	addi	r4,r2,40
   83d88:	e0bffd17 	ldw	r2,-12(fp)
   83d8c:	11c00217 	ldw	r7,8(r2)
   83d90:	e17ffe17 	ldw	r5,-8(fp)
   83d94:	e1bfff17 	ldw	r6,-4(fp)
   83d98:	008456c0 	call	8456c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   83d9c:	e037883a 	mov	sp,fp
   83da0:	dfc00117 	ldw	ra,4(sp)
   83da4:	df000017 	ldw	fp,0(sp)
   83da8:	dec00204 	addi	sp,sp,8
   83dac:	f800283a 	ret

00083db0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   83db0:	defffc04 	addi	sp,sp,-16
   83db4:	dfc00315 	stw	ra,12(sp)
   83db8:	df000215 	stw	fp,8(sp)
   83dbc:	df000204 	addi	fp,sp,8
   83dc0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83dc4:	e0bfff17 	ldw	r2,-4(fp)
   83dc8:	10800017 	ldw	r2,0(r2)
   83dcc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   83dd0:	e0bffe17 	ldw	r2,-8(fp)
   83dd4:	11000a04 	addi	r4,r2,40
   83dd8:	e0bfff17 	ldw	r2,-4(fp)
   83ddc:	11400217 	ldw	r5,8(r2)
   83de0:	00841e00 	call	841e0 <altera_avalon_jtag_uart_close>
}
   83de4:	e037883a 	mov	sp,fp
   83de8:	dfc00117 	ldw	ra,4(sp)
   83dec:	df000017 	ldw	fp,0(sp)
   83df0:	dec00204 	addi	sp,sp,8
   83df4:	f800283a 	ret

00083df8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   83df8:	defffa04 	addi	sp,sp,-24
   83dfc:	dfc00515 	stw	ra,20(sp)
   83e00:	df000415 	stw	fp,16(sp)
   83e04:	df000404 	addi	fp,sp,16
   83e08:	e13ffd15 	stw	r4,-12(fp)
   83e0c:	e17ffe15 	stw	r5,-8(fp)
   83e10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   83e14:	e0bffd17 	ldw	r2,-12(fp)
   83e18:	10800017 	ldw	r2,0(r2)
   83e1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   83e20:	e0bffc17 	ldw	r2,-16(fp)
   83e24:	11000a04 	addi	r4,r2,40
   83e28:	e17ffe17 	ldw	r5,-8(fp)
   83e2c:	e1bfff17 	ldw	r6,-4(fp)
   83e30:	00842540 	call	84254 <altera_avalon_jtag_uart_ioctl>
}
   83e34:	e037883a 	mov	sp,fp
   83e38:	dfc00117 	ldw	ra,4(sp)
   83e3c:	df000017 	ldw	fp,0(sp)
   83e40:	dec00204 	addi	sp,sp,8
   83e44:	f800283a 	ret

00083e48 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   83e48:	defffa04 	addi	sp,sp,-24
   83e4c:	dfc00515 	stw	ra,20(sp)
   83e50:	df000415 	stw	fp,16(sp)
   83e54:	df000404 	addi	fp,sp,16
   83e58:	e13ffd15 	stw	r4,-12(fp)
   83e5c:	e17ffe15 	stw	r5,-8(fp)
   83e60:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83e64:	e0fffd17 	ldw	r3,-12(fp)
   83e68:	00800044 	movi	r2,1
   83e6c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   83e70:	e0bffd17 	ldw	r2,-12(fp)
   83e74:	10800017 	ldw	r2,0(r2)
   83e78:	11000104 	addi	r4,r2,4
   83e7c:	e0bffd17 	ldw	r2,-12(fp)
   83e80:	10800817 	ldw	r2,32(r2)
   83e84:	1007883a 	mov	r3,r2
   83e88:	2005883a 	mov	r2,r4
   83e8c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   83e90:	e13ffe17 	ldw	r4,-8(fp)
   83e94:	e17fff17 	ldw	r5,-4(fp)
   83e98:	d8000015 	stw	zero,0(sp)
   83e9c:	01800234 	movhi	r6,8
   83ea0:	318fc204 	addi	r6,r6,16136
   83ea4:	e1fffd17 	ldw	r7,-12(fp)
   83ea8:	0084b140 	call	84b14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   83eac:	e0bffd17 	ldw	r2,-12(fp)
   83eb0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   83eb4:	e0bffd17 	ldw	r2,-12(fp)
   83eb8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   83ebc:	00800274 	movhi	r2,9
   83ec0:	10a3f304 	addi	r2,r2,-28724
   83ec4:	10800017 	ldw	r2,0(r2)
   83ec8:	100b883a 	mov	r5,r2
   83ecc:	01800234 	movhi	r6,8
   83ed0:	31904c04 	addi	r6,r6,16688
   83ed4:	e1fffd17 	ldw	r7,-12(fp)
   83ed8:	00847ac0 	call	847ac <alt_alarm_start>
   83edc:	1004403a 	cmpge	r2,r2,zero
   83ee0:	1000041e 	bne	r2,zero,83ef4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   83ee4:	e0fffd17 	ldw	r3,-12(fp)
   83ee8:	00a00034 	movhi	r2,32768
   83eec:	10bfffc4 	addi	r2,r2,-1
   83ef0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   83ef4:	e037883a 	mov	sp,fp
   83ef8:	dfc00117 	ldw	ra,4(sp)
   83efc:	df000017 	ldw	fp,0(sp)
   83f00:	dec00204 	addi	sp,sp,8
   83f04:	f800283a 	ret

00083f08 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   83f08:	defff804 	addi	sp,sp,-32
   83f0c:	df000715 	stw	fp,28(sp)
   83f10:	df000704 	addi	fp,sp,28
   83f14:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   83f18:	e0bfff17 	ldw	r2,-4(fp)
   83f1c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   83f20:	e0bffe17 	ldw	r2,-8(fp)
   83f24:	10800017 	ldw	r2,0(r2)
   83f28:	e0bffd15 	stw	r2,-12(fp)
   83f2c:	00000006 	br	83f30 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83f30:	e0bffd17 	ldw	r2,-12(fp)
   83f34:	10800104 	addi	r2,r2,4
   83f38:	10800037 	ldwio	r2,0(r2)
   83f3c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   83f40:	e0bffc17 	ldw	r2,-16(fp)
   83f44:	1080c00c 	andi	r2,r2,768
   83f48:	1005003a 	cmpeq	r2,r2,zero
   83f4c:	1000741e 	bne	r2,zero,84120 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   83f50:	e0bffc17 	ldw	r2,-16(fp)
   83f54:	1080400c 	andi	r2,r2,256
   83f58:	1005003a 	cmpeq	r2,r2,zero
   83f5c:	1000351e 	bne	r2,zero,84034 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   83f60:	00800074 	movhi	r2,1
   83f64:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83f68:	e0bffe17 	ldw	r2,-8(fp)
   83f6c:	10800a17 	ldw	r2,40(r2)
   83f70:	10800044 	addi	r2,r2,1
   83f74:	1081ffcc 	andi	r2,r2,2047
   83f78:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   83f7c:	e0bffe17 	ldw	r2,-8(fp)
   83f80:	10c00b17 	ldw	r3,44(r2)
   83f84:	e0bffa17 	ldw	r2,-24(fp)
   83f88:	18801626 	beq	r3,r2,83fe4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   83f8c:	e0bffd17 	ldw	r2,-12(fp)
   83f90:	10800037 	ldwio	r2,0(r2)
   83f94:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   83f98:	e0bffb17 	ldw	r2,-20(fp)
   83f9c:	10a0000c 	andi	r2,r2,32768
   83fa0:	1005003a 	cmpeq	r2,r2,zero
   83fa4:	10000f1e 	bne	r2,zero,83fe4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   83fa8:	e0bffe17 	ldw	r2,-8(fp)
   83fac:	10c00a17 	ldw	r3,40(r2)
   83fb0:	e0bffb17 	ldw	r2,-20(fp)
   83fb4:	1009883a 	mov	r4,r2
   83fb8:	e0bffe17 	ldw	r2,-8(fp)
   83fbc:	1885883a 	add	r2,r3,r2
   83fc0:	10800e04 	addi	r2,r2,56
   83fc4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83fc8:	e0bffe17 	ldw	r2,-8(fp)
   83fcc:	10800a17 	ldw	r2,40(r2)
   83fd0:	10800044 	addi	r2,r2,1
   83fd4:	10c1ffcc 	andi	r3,r2,2047
   83fd8:	e0bffe17 	ldw	r2,-8(fp)
   83fdc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   83fe0:	003fe106 	br	83f68 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   83fe4:	e0bffb17 	ldw	r2,-20(fp)
   83fe8:	10bfffec 	andhi	r2,r2,65535
   83fec:	1005003a 	cmpeq	r2,r2,zero
   83ff0:	1000101e 	bne	r2,zero,84034 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83ff4:	e0bffe17 	ldw	r2,-8(fp)
   83ff8:	10c00817 	ldw	r3,32(r2)
   83ffc:	00bfff84 	movi	r2,-2
   84000:	1886703a 	and	r3,r3,r2
   84004:	e0bffe17 	ldw	r2,-8(fp)
   84008:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8400c:	e0bffd17 	ldw	r2,-12(fp)
   84010:	11000104 	addi	r4,r2,4
   84014:	e0bffe17 	ldw	r2,-8(fp)
   84018:	10800817 	ldw	r2,32(r2)
   8401c:	1007883a 	mov	r3,r2
   84020:	2005883a 	mov	r2,r4
   84024:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   84028:	e0bffd17 	ldw	r2,-12(fp)
   8402c:	10800104 	addi	r2,r2,4
   84030:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   84034:	e0bffc17 	ldw	r2,-16(fp)
   84038:	1080800c 	andi	r2,r2,512
   8403c:	1005003a 	cmpeq	r2,r2,zero
   84040:	103fbb1e 	bne	r2,zero,83f30 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   84044:	e0bffc17 	ldw	r2,-16(fp)
   84048:	10bfffec 	andhi	r2,r2,65535
   8404c:	1004d43a 	srli	r2,r2,16
   84050:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   84054:	00001506 	br	840ac <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   84058:	e13ffd17 	ldw	r4,-12(fp)
   8405c:	e0bffe17 	ldw	r2,-8(fp)
   84060:	10c00d17 	ldw	r3,52(r2)
   84064:	e0bffe17 	ldw	r2,-8(fp)
   84068:	1885883a 	add	r2,r3,r2
   8406c:	10820e04 	addi	r2,r2,2104
   84070:	10800003 	ldbu	r2,0(r2)
   84074:	10c03fcc 	andi	r3,r2,255
   84078:	18c0201c 	xori	r3,r3,128
   8407c:	18ffe004 	addi	r3,r3,-128
   84080:	2005883a 	mov	r2,r4
   84084:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84088:	e0bffe17 	ldw	r2,-8(fp)
   8408c:	10800d17 	ldw	r2,52(r2)
   84090:	10800044 	addi	r2,r2,1
   84094:	10c1ffcc 	andi	r3,r2,2047
   84098:	e0bffe17 	ldw	r2,-8(fp)
   8409c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   840a0:	e0bff917 	ldw	r2,-28(fp)
   840a4:	10bfffc4 	addi	r2,r2,-1
   840a8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   840ac:	e0bff917 	ldw	r2,-28(fp)
   840b0:	1005003a 	cmpeq	r2,r2,zero
   840b4:	1000051e 	bne	r2,zero,840cc <altera_avalon_jtag_uart_irq+0x1c4>
   840b8:	e0bffe17 	ldw	r2,-8(fp)
   840bc:	10c00d17 	ldw	r3,52(r2)
   840c0:	e0bffe17 	ldw	r2,-8(fp)
   840c4:	10800c17 	ldw	r2,48(r2)
   840c8:	18bfe31e 	bne	r3,r2,84058 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   840cc:	e0bff917 	ldw	r2,-28(fp)
   840d0:	1005003a 	cmpeq	r2,r2,zero
   840d4:	103f961e 	bne	r2,zero,83f30 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   840d8:	e0bffe17 	ldw	r2,-8(fp)
   840dc:	10c00817 	ldw	r3,32(r2)
   840e0:	00bfff44 	movi	r2,-3
   840e4:	1886703a 	and	r3,r3,r2
   840e8:	e0bffe17 	ldw	r2,-8(fp)
   840ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   840f0:	e0bffe17 	ldw	r2,-8(fp)
   840f4:	10800017 	ldw	r2,0(r2)
   840f8:	11000104 	addi	r4,r2,4
   840fc:	e0bffe17 	ldw	r2,-8(fp)
   84100:	10800817 	ldw	r2,32(r2)
   84104:	1007883a 	mov	r3,r2
   84108:	2005883a 	mov	r2,r4
   8410c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   84110:	e0bffd17 	ldw	r2,-12(fp)
   84114:	10800104 	addi	r2,r2,4
   84118:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8411c:	003f8406 	br	83f30 <altera_avalon_jtag_uart_irq+0x28>
}
   84120:	e037883a 	mov	sp,fp
   84124:	df000017 	ldw	fp,0(sp)
   84128:	dec00104 	addi	sp,sp,4
   8412c:	f800283a 	ret

00084130 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   84130:	defffc04 	addi	sp,sp,-16
   84134:	df000315 	stw	fp,12(sp)
   84138:	df000304 	addi	fp,sp,12
   8413c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   84140:	e0bfff17 	ldw	r2,-4(fp)
   84144:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   84148:	e0bffe17 	ldw	r2,-8(fp)
   8414c:	10800017 	ldw	r2,0(r2)
   84150:	10800104 	addi	r2,r2,4
   84154:	10800037 	ldwio	r2,0(r2)
   84158:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8415c:	e0bffd17 	ldw	r2,-12(fp)
   84160:	1081000c 	andi	r2,r2,1024
   84164:	1005003a 	cmpeq	r2,r2,zero
   84168:	10000c1e 	bne	r2,zero,8419c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8416c:	e0bffe17 	ldw	r2,-8(fp)
   84170:	10800017 	ldw	r2,0(r2)
   84174:	11000104 	addi	r4,r2,4
   84178:	e0bffe17 	ldw	r2,-8(fp)
   8417c:	10800817 	ldw	r2,32(r2)
   84180:	10810014 	ori	r2,r2,1024
   84184:	1007883a 	mov	r3,r2
   84188:	2005883a 	mov	r2,r4
   8418c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   84190:	e0bffe17 	ldw	r2,-8(fp)
   84194:	10000915 	stw	zero,36(r2)
   84198:	00000a06 	br	841c4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8419c:	e0bffe17 	ldw	r2,-8(fp)
   841a0:	10c00917 	ldw	r3,36(r2)
   841a4:	00a00034 	movhi	r2,32768
   841a8:	10bfff04 	addi	r2,r2,-4
   841ac:	10c00536 	bltu	r2,r3,841c4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   841b0:	e0bffe17 	ldw	r2,-8(fp)
   841b4:	10800917 	ldw	r2,36(r2)
   841b8:	10c00044 	addi	r3,r2,1
   841bc:	e0bffe17 	ldw	r2,-8(fp)
   841c0:	10c00915 	stw	r3,36(r2)
   841c4:	00800274 	movhi	r2,9
   841c8:	10a3f304 	addi	r2,r2,-28724
   841cc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   841d0:	e037883a 	mov	sp,fp
   841d4:	df000017 	ldw	fp,0(sp)
   841d8:	dec00104 	addi	sp,sp,4
   841dc:	f800283a 	ret

000841e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   841e0:	defffc04 	addi	sp,sp,-16
   841e4:	df000315 	stw	fp,12(sp)
   841e8:	df000304 	addi	fp,sp,12
   841ec:	e13ffd15 	stw	r4,-12(fp)
   841f0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   841f4:	00000706 	br	84214 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   841f8:	e0bffe17 	ldw	r2,-8(fp)
   841fc:	1090000c 	andi	r2,r2,16384
   84200:	1005003a 	cmpeq	r2,r2,zero
   84204:	1000031e 	bne	r2,zero,84214 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   84208:	00bffd44 	movi	r2,-11
   8420c:	e0bfff15 	stw	r2,-4(fp)
   84210:	00000b06 	br	84240 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   84214:	e0bffd17 	ldw	r2,-12(fp)
   84218:	10c00d17 	ldw	r3,52(r2)
   8421c:	e0bffd17 	ldw	r2,-12(fp)
   84220:	10800c17 	ldw	r2,48(r2)
   84224:	18800526 	beq	r3,r2,8423c <altera_avalon_jtag_uart_close+0x5c>
   84228:	e0bffd17 	ldw	r2,-12(fp)
   8422c:	10c00917 	ldw	r3,36(r2)
   84230:	e0bffd17 	ldw	r2,-12(fp)
   84234:	10800117 	ldw	r2,4(r2)
   84238:	18bfef36 	bltu	r3,r2,841f8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8423c:	e03fff15 	stw	zero,-4(fp)
   84240:	e0bfff17 	ldw	r2,-4(fp)
}
   84244:	e037883a 	mov	sp,fp
   84248:	df000017 	ldw	fp,0(sp)
   8424c:	dec00104 	addi	sp,sp,4
   84250:	f800283a 	ret

00084254 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   84254:	defff804 	addi	sp,sp,-32
   84258:	df000715 	stw	fp,28(sp)
   8425c:	df000704 	addi	fp,sp,28
   84260:	e13ffb15 	stw	r4,-20(fp)
   84264:	e17ffc15 	stw	r5,-16(fp)
   84268:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8426c:	00bff9c4 	movi	r2,-25
   84270:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   84274:	e0bffc17 	ldw	r2,-16(fp)
   84278:	e0bfff15 	stw	r2,-4(fp)
   8427c:	e0ffff17 	ldw	r3,-4(fp)
   84280:	189a8060 	cmpeqi	r2,r3,27137
   84284:	1000041e 	bne	r2,zero,84298 <altera_avalon_jtag_uart_ioctl+0x44>
   84288:	e0ffff17 	ldw	r3,-4(fp)
   8428c:	189a80a0 	cmpeqi	r2,r3,27138
   84290:	10001b1e 	bne	r2,zero,84300 <altera_avalon_jtag_uart_ioctl+0xac>
   84294:	00002706 	br	84334 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   84298:	e0bffb17 	ldw	r2,-20(fp)
   8429c:	10c00117 	ldw	r3,4(r2)
   842a0:	00a00034 	movhi	r2,32768
   842a4:	10bfffc4 	addi	r2,r2,-1
   842a8:	18802226 	beq	r3,r2,84334 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   842ac:	e0bffd17 	ldw	r2,-12(fp)
   842b0:	10800017 	ldw	r2,0(r2)
   842b4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   842b8:	e0bff917 	ldw	r2,-28(fp)
   842bc:	10800090 	cmplti	r2,r2,2
   842c0:	1000071e 	bne	r2,zero,842e0 <altera_avalon_jtag_uart_ioctl+0x8c>
   842c4:	e0fff917 	ldw	r3,-28(fp)
   842c8:	00a00034 	movhi	r2,32768
   842cc:	10bfffc4 	addi	r2,r2,-1
   842d0:	18800326 	beq	r3,r2,842e0 <altera_avalon_jtag_uart_ioctl+0x8c>
   842d4:	e0bff917 	ldw	r2,-28(fp)
   842d8:	e0bffe15 	stw	r2,-8(fp)
   842dc:	00000306 	br	842ec <altera_avalon_jtag_uart_ioctl+0x98>
   842e0:	00e00034 	movhi	r3,32768
   842e4:	18ffff84 	addi	r3,r3,-2
   842e8:	e0fffe15 	stw	r3,-8(fp)
   842ec:	e0bffb17 	ldw	r2,-20(fp)
   842f0:	e0fffe17 	ldw	r3,-8(fp)
   842f4:	10c00115 	stw	r3,4(r2)
      rc = 0;
   842f8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   842fc:	00000d06 	br	84334 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   84300:	e0bffb17 	ldw	r2,-20(fp)
   84304:	10c00117 	ldw	r3,4(r2)
   84308:	00a00034 	movhi	r2,32768
   8430c:	10bfffc4 	addi	r2,r2,-1
   84310:	18800826 	beq	r3,r2,84334 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   84314:	e13ffd17 	ldw	r4,-12(fp)
   84318:	e0bffb17 	ldw	r2,-20(fp)
   8431c:	10c00917 	ldw	r3,36(r2)
   84320:	e0bffb17 	ldw	r2,-20(fp)
   84324:	10800117 	ldw	r2,4(r2)
   84328:	1885803a 	cmpltu	r2,r3,r2
   8432c:	20800015 	stw	r2,0(r4)
      rc = 0;
   84330:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   84334:	e0bffa17 	ldw	r2,-24(fp)
}
   84338:	e037883a 	mov	sp,fp
   8433c:	df000017 	ldw	fp,0(sp)
   84340:	dec00104 	addi	sp,sp,4
   84344:	f800283a 	ret

00084348 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   84348:	defff204 	addi	sp,sp,-56
   8434c:	dfc00d15 	stw	ra,52(sp)
   84350:	df000c15 	stw	fp,48(sp)
   84354:	df000c04 	addi	fp,sp,48
   84358:	e13ffb15 	stw	r4,-20(fp)
   8435c:	e17ffc15 	stw	r5,-16(fp)
   84360:	e1bffd15 	stw	r6,-12(fp)
   84364:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   84368:	e0bffc17 	ldw	r2,-16(fp)
   8436c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   84370:	00004806 	br	84494 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   84374:	e0bffb17 	ldw	r2,-20(fp)
   84378:	10800a17 	ldw	r2,40(r2)
   8437c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   84380:	e0bffb17 	ldw	r2,-20(fp)
   84384:	10800b17 	ldw	r2,44(r2)
   84388:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8438c:	e0fff717 	ldw	r3,-36(fp)
   84390:	e0bff617 	ldw	r2,-40(fp)
   84394:	18800536 	bltu	r3,r2,843ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   84398:	e0bff717 	ldw	r2,-36(fp)
   8439c:	e0fff617 	ldw	r3,-40(fp)
   843a0:	10c5c83a 	sub	r2,r2,r3
   843a4:	e0bff815 	stw	r2,-32(fp)
   843a8:	00000406 	br	843bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   843ac:	00820004 	movi	r2,2048
   843b0:	e0fff617 	ldw	r3,-40(fp)
   843b4:	10c5c83a 	sub	r2,r2,r3
   843b8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   843bc:	e0bff817 	ldw	r2,-32(fp)
   843c0:	1005003a 	cmpeq	r2,r2,zero
   843c4:	10001f1e 	bne	r2,zero,84444 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   843c8:	e0fffd17 	ldw	r3,-12(fp)
   843cc:	e0bff817 	ldw	r2,-32(fp)
   843d0:	1880022e 	bgeu	r3,r2,843dc <altera_avalon_jtag_uart_read+0x94>
        n = space;
   843d4:	e0bffd17 	ldw	r2,-12(fp)
   843d8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   843dc:	e0bffb17 	ldw	r2,-20(fp)
   843e0:	10c00e04 	addi	r3,r2,56
   843e4:	e0bff617 	ldw	r2,-40(fp)
   843e8:	1887883a 	add	r3,r3,r2
   843ec:	e0bffa17 	ldw	r2,-24(fp)
   843f0:	1009883a 	mov	r4,r2
   843f4:	180b883a 	mov	r5,r3
   843f8:	e1bff817 	ldw	r6,-32(fp)
   843fc:	00813ec0 	call	813ec <memcpy>
      ptr   += n;
   84400:	e0fff817 	ldw	r3,-32(fp)
   84404:	e0bffa17 	ldw	r2,-24(fp)
   84408:	10c5883a 	add	r2,r2,r3
   8440c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   84410:	e0fffd17 	ldw	r3,-12(fp)
   84414:	e0bff817 	ldw	r2,-32(fp)
   84418:	1885c83a 	sub	r2,r3,r2
   8441c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84420:	e0fff617 	ldw	r3,-40(fp)
   84424:	e0bff817 	ldw	r2,-32(fp)
   84428:	1885883a 	add	r2,r3,r2
   8442c:	10c1ffcc 	andi	r3,r2,2047
   84430:	e0bffb17 	ldw	r2,-20(fp)
   84434:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   84438:	e0bffd17 	ldw	r2,-12(fp)
   8443c:	10800048 	cmpgei	r2,r2,1
   84440:	103fcc1e 	bne	r2,zero,84374 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   84444:	e0fffa17 	ldw	r3,-24(fp)
   84448:	e0bffc17 	ldw	r2,-16(fp)
   8444c:	1880141e 	bne	r3,r2,844a0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   84450:	e0bffe17 	ldw	r2,-8(fp)
   84454:	1090000c 	andi	r2,r2,16384
   84458:	1004c03a 	cmpne	r2,r2,zero
   8445c:	1000101e 	bne	r2,zero,844a0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   84460:	e0bffb17 	ldw	r2,-20(fp)
   84464:	10c00a17 	ldw	r3,40(r2)
   84468:	e0bff717 	ldw	r2,-36(fp)
   8446c:	1880051e 	bne	r3,r2,84484 <altera_avalon_jtag_uart_read+0x13c>
   84470:	e0bffb17 	ldw	r2,-20(fp)
   84474:	10c00917 	ldw	r3,36(r2)
   84478:	e0bffb17 	ldw	r2,-20(fp)
   8447c:	10800117 	ldw	r2,4(r2)
   84480:	18bff736 	bltu	r3,r2,84460 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   84484:	e0bffb17 	ldw	r2,-20(fp)
   84488:	10c00a17 	ldw	r3,40(r2)
   8448c:	e0bff717 	ldw	r2,-36(fp)
   84490:	18800326 	beq	r3,r2,844a0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   84494:	e0bffd17 	ldw	r2,-12(fp)
   84498:	10800048 	cmpgei	r2,r2,1
   8449c:	103fb51e 	bne	r2,zero,84374 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   844a0:	e0fffa17 	ldw	r3,-24(fp)
   844a4:	e0bffc17 	ldw	r2,-16(fp)
   844a8:	18801926 	beq	r3,r2,84510 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   844ac:	0005303a 	rdctl	r2,status
   844b0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   844b4:	e0fff517 	ldw	r3,-44(fp)
   844b8:	00bfff84 	movi	r2,-2
   844bc:	1884703a 	and	r2,r3,r2
   844c0:	1001703a 	wrctl	status,r2
  
  return context;
   844c4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   844c8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   844cc:	e0bffb17 	ldw	r2,-20(fp)
   844d0:	10800817 	ldw	r2,32(r2)
   844d4:	10c00054 	ori	r3,r2,1
   844d8:	e0bffb17 	ldw	r2,-20(fp)
   844dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   844e0:	e0bffb17 	ldw	r2,-20(fp)
   844e4:	10800017 	ldw	r2,0(r2)
   844e8:	11000104 	addi	r4,r2,4
   844ec:	e0bffb17 	ldw	r2,-20(fp)
   844f0:	10800817 	ldw	r2,32(r2)
   844f4:	1007883a 	mov	r3,r2
   844f8:	2005883a 	mov	r2,r4
   844fc:	10c00035 	stwio	r3,0(r2)
   84500:	e0bff917 	ldw	r2,-28(fp)
   84504:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84508:	e0bff417 	ldw	r2,-48(fp)
   8450c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   84510:	e0fffa17 	ldw	r3,-24(fp)
   84514:	e0bffc17 	ldw	r2,-16(fp)
   84518:	18800526 	beq	r3,r2,84530 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8451c:	e0fffa17 	ldw	r3,-24(fp)
   84520:	e0bffc17 	ldw	r2,-16(fp)
   84524:	1887c83a 	sub	r3,r3,r2
   84528:	e0ffff15 	stw	r3,-4(fp)
   8452c:	00000906 	br	84554 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   84530:	e0bffe17 	ldw	r2,-8(fp)
   84534:	1090000c 	andi	r2,r2,16384
   84538:	1005003a 	cmpeq	r2,r2,zero
   8453c:	1000031e 	bne	r2,zero,8454c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   84540:	00bffd44 	movi	r2,-11
   84544:	e0bfff15 	stw	r2,-4(fp)
   84548:	00000206 	br	84554 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8454c:	00bffec4 	movi	r2,-5
   84550:	e0bfff15 	stw	r2,-4(fp)
   84554:	e0bfff17 	ldw	r2,-4(fp)
}
   84558:	e037883a 	mov	sp,fp
   8455c:	dfc00117 	ldw	ra,4(sp)
   84560:	df000017 	ldw	fp,0(sp)
   84564:	dec00204 	addi	sp,sp,8
   84568:	f800283a 	ret

0008456c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8456c:	defff204 	addi	sp,sp,-56
   84570:	dfc00d15 	stw	ra,52(sp)
   84574:	df000c15 	stw	fp,48(sp)
   84578:	df000c04 	addi	fp,sp,48
   8457c:	e13ffb15 	stw	r4,-20(fp)
   84580:	e17ffc15 	stw	r5,-16(fp)
   84584:	e1bffd15 	stw	r6,-12(fp)
   84588:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8458c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   84590:	e0bffc17 	ldw	r2,-16(fp)
   84594:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   84598:	00003a06 	br	84684 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8459c:	e0bffb17 	ldw	r2,-20(fp)
   845a0:	10800c17 	ldw	r2,48(r2)
   845a4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   845a8:	e0bffb17 	ldw	r2,-20(fp)
   845ac:	10800d17 	ldw	r2,52(r2)
   845b0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   845b4:	e0fffa17 	ldw	r3,-24(fp)
   845b8:	e0bff917 	ldw	r2,-28(fp)
   845bc:	1880062e 	bgeu	r3,r2,845d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   845c0:	e0fff917 	ldw	r3,-28(fp)
   845c4:	e0bffa17 	ldw	r2,-24(fp)
   845c8:	1885c83a 	sub	r2,r3,r2
   845cc:	10bfffc4 	addi	r2,r2,-1
   845d0:	e0bff815 	stw	r2,-32(fp)
   845d4:	00000c06 	br	84608 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   845d8:	e0bff917 	ldw	r2,-28(fp)
   845dc:	1005003a 	cmpeq	r2,r2,zero
   845e0:	1000051e 	bne	r2,zero,845f8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   845e4:	00820004 	movi	r2,2048
   845e8:	e0fffa17 	ldw	r3,-24(fp)
   845ec:	10c5c83a 	sub	r2,r2,r3
   845f0:	e0bff815 	stw	r2,-32(fp)
   845f4:	00000406 	br	84608 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   845f8:	0081ffc4 	movi	r2,2047
   845fc:	e0fffa17 	ldw	r3,-24(fp)
   84600:	10c5c83a 	sub	r2,r2,r3
   84604:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   84608:	e0bff817 	ldw	r2,-32(fp)
   8460c:	1005003a 	cmpeq	r2,r2,zero
   84610:	10001f1e 	bne	r2,zero,84690 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   84614:	e0fffd17 	ldw	r3,-12(fp)
   84618:	e0bff817 	ldw	r2,-32(fp)
   8461c:	1880022e 	bgeu	r3,r2,84628 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   84620:	e0bffd17 	ldw	r2,-12(fp)
   84624:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   84628:	e0bffb17 	ldw	r2,-20(fp)
   8462c:	10c20e04 	addi	r3,r2,2104
   84630:	e0bffa17 	ldw	r2,-24(fp)
   84634:	1885883a 	add	r2,r3,r2
   84638:	e0fffc17 	ldw	r3,-16(fp)
   8463c:	1009883a 	mov	r4,r2
   84640:	180b883a 	mov	r5,r3
   84644:	e1bff817 	ldw	r6,-32(fp)
   84648:	00813ec0 	call	813ec <memcpy>
      ptr   += n;
   8464c:	e0fff817 	ldw	r3,-32(fp)
   84650:	e0bffc17 	ldw	r2,-16(fp)
   84654:	10c5883a 	add	r2,r2,r3
   84658:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8465c:	e0fffd17 	ldw	r3,-12(fp)
   84660:	e0bff817 	ldw	r2,-32(fp)
   84664:	1885c83a 	sub	r2,r3,r2
   84668:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8466c:	e0fffa17 	ldw	r3,-24(fp)
   84670:	e0bff817 	ldw	r2,-32(fp)
   84674:	1885883a 	add	r2,r3,r2
   84678:	10c1ffcc 	andi	r3,r2,2047
   8467c:	e0bffb17 	ldw	r2,-20(fp)
   84680:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   84684:	e0bffd17 	ldw	r2,-12(fp)
   84688:	10800048 	cmpgei	r2,r2,1
   8468c:	103fc31e 	bne	r2,zero,8459c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84690:	0005303a 	rdctl	r2,status
   84694:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84698:	e0fff517 	ldw	r3,-44(fp)
   8469c:	00bfff84 	movi	r2,-2
   846a0:	1884703a 	and	r2,r3,r2
   846a4:	1001703a 	wrctl	status,r2
  
  return context;
   846a8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   846ac:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   846b0:	e0bffb17 	ldw	r2,-20(fp)
   846b4:	10800817 	ldw	r2,32(r2)
   846b8:	10c00094 	ori	r3,r2,2
   846bc:	e0bffb17 	ldw	r2,-20(fp)
   846c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   846c4:	e0bffb17 	ldw	r2,-20(fp)
   846c8:	10800017 	ldw	r2,0(r2)
   846cc:	11000104 	addi	r4,r2,4
   846d0:	e0bffb17 	ldw	r2,-20(fp)
   846d4:	10800817 	ldw	r2,32(r2)
   846d8:	1007883a 	mov	r3,r2
   846dc:	2005883a 	mov	r2,r4
   846e0:	10c00035 	stwio	r3,0(r2)
   846e4:	e0bff717 	ldw	r2,-36(fp)
   846e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   846ec:	e0bff417 	ldw	r2,-48(fp)
   846f0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   846f4:	e0bffd17 	ldw	r2,-12(fp)
   846f8:	10800050 	cmplti	r2,r2,1
   846fc:	1000111e 	bne	r2,zero,84744 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   84700:	e0bffe17 	ldw	r2,-8(fp)
   84704:	1090000c 	andi	r2,r2,16384
   84708:	1004c03a 	cmpne	r2,r2,zero
   8470c:	1000101e 	bne	r2,zero,84750 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   84710:	e0bffb17 	ldw	r2,-20(fp)
   84714:	10c00d17 	ldw	r3,52(r2)
   84718:	e0bff917 	ldw	r2,-28(fp)
   8471c:	1880051e 	bne	r3,r2,84734 <altera_avalon_jtag_uart_write+0x1c8>
   84720:	e0bffb17 	ldw	r2,-20(fp)
   84724:	10c00917 	ldw	r3,36(r2)
   84728:	e0bffb17 	ldw	r2,-20(fp)
   8472c:	10800117 	ldw	r2,4(r2)
   84730:	18bff736 	bltu	r3,r2,84710 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   84734:	e0bffb17 	ldw	r2,-20(fp)
   84738:	10c00d17 	ldw	r3,52(r2)
   8473c:	e0bff917 	ldw	r2,-28(fp)
   84740:	18800326 	beq	r3,r2,84750 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   84744:	e0bffd17 	ldw	r2,-12(fp)
   84748:	10800048 	cmpgei	r2,r2,1
   8474c:	103fcd1e 	bne	r2,zero,84684 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   84750:	e0fffc17 	ldw	r3,-16(fp)
   84754:	e0bff617 	ldw	r2,-40(fp)
   84758:	18800526 	beq	r3,r2,84770 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8475c:	e0fffc17 	ldw	r3,-16(fp)
   84760:	e0bff617 	ldw	r2,-40(fp)
   84764:	1887c83a 	sub	r3,r3,r2
   84768:	e0ffff15 	stw	r3,-4(fp)
   8476c:	00000906 	br	84794 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   84770:	e0bffe17 	ldw	r2,-8(fp)
   84774:	1090000c 	andi	r2,r2,16384
   84778:	1005003a 	cmpeq	r2,r2,zero
   8477c:	1000031e 	bne	r2,zero,8478c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   84780:	00bffd44 	movi	r2,-11
   84784:	e0bfff15 	stw	r2,-4(fp)
   84788:	00000206 	br	84794 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   8478c:	00bffec4 	movi	r2,-5
   84790:	e0bfff15 	stw	r2,-4(fp)
   84794:	e0bfff17 	ldw	r2,-4(fp)
}
   84798:	e037883a 	mov	sp,fp
   8479c:	dfc00117 	ldw	ra,4(sp)
   847a0:	df000017 	ldw	fp,0(sp)
   847a4:	dec00204 	addi	sp,sp,8
   847a8:	f800283a 	ret

000847ac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   847ac:	defff404 	addi	sp,sp,-48
   847b0:	df000b15 	stw	fp,44(sp)
   847b4:	df000b04 	addi	fp,sp,44
   847b8:	e13ffb15 	stw	r4,-20(fp)
   847bc:	e17ffc15 	stw	r5,-16(fp)
   847c0:	e1bffd15 	stw	r6,-12(fp)
   847c4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   847c8:	e03ff915 	stw	zero,-28(fp)
   847cc:	00800274 	movhi	r2,9
   847d0:	10a3f304 	addi	r2,r2,-28724
   847d4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   847d8:	1005003a 	cmpeq	r2,r2,zero
   847dc:	1000411e 	bne	r2,zero,848e4 <alt_alarm_start+0x138>
  {
    if (alarm)
   847e0:	e0bffb17 	ldw	r2,-20(fp)
   847e4:	1005003a 	cmpeq	r2,r2,zero
   847e8:	10003b1e 	bne	r2,zero,848d8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   847ec:	e0fffb17 	ldw	r3,-20(fp)
   847f0:	e0bffd17 	ldw	r2,-12(fp)
   847f4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   847f8:	e0fffb17 	ldw	r3,-20(fp)
   847fc:	e0bffe17 	ldw	r2,-8(fp)
   84800:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84804:	0005303a 	rdctl	r2,status
   84808:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8480c:	e0fff817 	ldw	r3,-32(fp)
   84810:	00bfff84 	movi	r2,-2
   84814:	1884703a 	and	r2,r3,r2
   84818:	1001703a 	wrctl	status,r2
  
  return context;
   8481c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   84820:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   84824:	00800274 	movhi	r2,9
   84828:	10a3f404 	addi	r2,r2,-28720
   8482c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   84830:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   84834:	e0fffc17 	ldw	r3,-16(fp)
   84838:	e0bff917 	ldw	r2,-28(fp)
   8483c:	1885883a 	add	r2,r3,r2
   84840:	10c00044 	addi	r3,r2,1
   84844:	e0bffb17 	ldw	r2,-20(fp)
   84848:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8484c:	e0bffb17 	ldw	r2,-20(fp)
   84850:	10c00217 	ldw	r3,8(r2)
   84854:	e0bff917 	ldw	r2,-28(fp)
   84858:	1880042e 	bgeu	r3,r2,8486c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8485c:	e0fffb17 	ldw	r3,-20(fp)
   84860:	00800044 	movi	r2,1
   84864:	18800405 	stb	r2,16(r3)
   84868:	00000206 	br	84874 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8486c:	e0bffb17 	ldw	r2,-20(fp)
   84870:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   84874:	e0fffb17 	ldw	r3,-20(fp)
   84878:	00800234 	movhi	r2,8
   8487c:	109d4004 	addi	r2,r2,29952
   84880:	e0bff615 	stw	r2,-40(fp)
   84884:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   84888:	e0fff717 	ldw	r3,-36(fp)
   8488c:	e0bff617 	ldw	r2,-40(fp)
   84890:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   84894:	e0bff617 	ldw	r2,-40(fp)
   84898:	10c00017 	ldw	r3,0(r2)
   8489c:	e0bff717 	ldw	r2,-36(fp)
   848a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   848a4:	e0bff617 	ldw	r2,-40(fp)
   848a8:	10c00017 	ldw	r3,0(r2)
   848ac:	e0bff717 	ldw	r2,-36(fp)
   848b0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   848b4:	e0fff617 	ldw	r3,-40(fp)
   848b8:	e0bff717 	ldw	r2,-36(fp)
   848bc:	18800015 	stw	r2,0(r3)
   848c0:	e0bffa17 	ldw	r2,-24(fp)
   848c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   848c8:	e0bff517 	ldw	r2,-44(fp)
   848cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   848d0:	e03fff15 	stw	zero,-4(fp)
   848d4:	00000506 	br	848ec <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   848d8:	00bffa84 	movi	r2,-22
   848dc:	e0bfff15 	stw	r2,-4(fp)
   848e0:	00000206 	br	848ec <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   848e4:	00bfde84 	movi	r2,-134
   848e8:	e0bfff15 	stw	r2,-4(fp)
   848ec:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   848f0:	e037883a 	mov	sp,fp
   848f4:	df000017 	ldw	fp,0(sp)
   848f8:	dec00104 	addi	sp,sp,4
   848fc:	f800283a 	ret

00084900 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   84900:	deffff04 	addi	sp,sp,-4
   84904:	df000015 	stw	fp,0(sp)
   84908:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8490c:	e037883a 	mov	sp,fp
   84910:	df000017 	ldw	fp,0(sp)
   84914:	dec00104 	addi	sp,sp,4
   84918:	f800283a 	ret

0008491c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8491c:	defff904 	addi	sp,sp,-28
   84920:	dfc00615 	stw	ra,24(sp)
   84924:	df000515 	stw	fp,20(sp)
   84928:	df000504 	addi	fp,sp,20
   8492c:	e13ffd15 	stw	r4,-12(fp)
   84930:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   84934:	e0bffd17 	ldw	r2,-12(fp)
   84938:	1005003a 	cmpeq	r2,r2,zero
   8493c:	1000041e 	bne	r2,zero,84950 <alt_dev_llist_insert+0x34>
   84940:	e0bffd17 	ldw	r2,-12(fp)
   84944:	10800217 	ldw	r2,8(r2)
   84948:	1004c03a 	cmpne	r2,r2,zero
   8494c:	1000071e 	bne	r2,zero,8496c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   84950:	00849d00 	call	849d0 <alt_get_errno>
   84954:	1007883a 	mov	r3,r2
   84958:	00800584 	movi	r2,22
   8495c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   84960:	00bffa84 	movi	r2,-22
   84964:	e0bfff15 	stw	r2,-4(fp)
   84968:	00001306 	br	849b8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8496c:	e0fffd17 	ldw	r3,-12(fp)
   84970:	e0bffe17 	ldw	r2,-8(fp)
   84974:	e0bffb15 	stw	r2,-20(fp)
   84978:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8497c:	e0fffc17 	ldw	r3,-16(fp)
   84980:	e0bffb17 	ldw	r2,-20(fp)
   84984:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   84988:	e0bffb17 	ldw	r2,-20(fp)
   8498c:	10c00017 	ldw	r3,0(r2)
   84990:	e0bffc17 	ldw	r2,-16(fp)
   84994:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   84998:	e0bffb17 	ldw	r2,-20(fp)
   8499c:	10c00017 	ldw	r3,0(r2)
   849a0:	e0bffc17 	ldw	r2,-16(fp)
   849a4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   849a8:	e0fffb17 	ldw	r3,-20(fp)
   849ac:	e0bffc17 	ldw	r2,-16(fp)
   849b0:	18800015 	stw	r2,0(r3)

  return 0;  
   849b4:	e03fff15 	stw	zero,-4(fp)
   849b8:	e0bfff17 	ldw	r2,-4(fp)
}
   849bc:	e037883a 	mov	sp,fp
   849c0:	dfc00117 	ldw	ra,4(sp)
   849c4:	df000017 	ldw	fp,0(sp)
   849c8:	dec00204 	addi	sp,sp,8
   849cc:	f800283a 	ret

000849d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   849d0:	defffd04 	addi	sp,sp,-12
   849d4:	dfc00215 	stw	ra,8(sp)
   849d8:	df000115 	stw	fp,4(sp)
   849dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   849e0:	00800234 	movhi	r2,8
   849e4:	109d3d04 	addi	r2,r2,29940
   849e8:	10800017 	ldw	r2,0(r2)
   849ec:	1005003a 	cmpeq	r2,r2,zero
   849f0:	1000061e 	bne	r2,zero,84a0c <alt_get_errno+0x3c>
   849f4:	00800234 	movhi	r2,8
   849f8:	109d3d04 	addi	r2,r2,29940
   849fc:	10800017 	ldw	r2,0(r2)
   84a00:	103ee83a 	callr	r2
   84a04:	e0bfff15 	stw	r2,-4(fp)
   84a08:	00000306 	br	84a18 <alt_get_errno+0x48>
   84a0c:	00800274 	movhi	r2,9
   84a10:	10a3ee04 	addi	r2,r2,-28744
   84a14:	e0bfff15 	stw	r2,-4(fp)
   84a18:	e0bfff17 	ldw	r2,-4(fp)
}
   84a1c:	e037883a 	mov	sp,fp
   84a20:	dfc00117 	ldw	ra,4(sp)
   84a24:	df000017 	ldw	fp,0(sp)
   84a28:	dec00204 	addi	sp,sp,8
   84a2c:	f800283a 	ret

00084a30 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   84a30:	defffd04 	addi	sp,sp,-12
   84a34:	dfc00215 	stw	ra,8(sp)
   84a38:	df000115 	stw	fp,4(sp)
   84a3c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84a40:	00bfff04 	movi	r2,-4
   84a44:	00c00234 	movhi	r3,8
   84a48:	18d69a04 	addi	r3,r3,23144
   84a4c:	1885883a 	add	r2,r3,r2
   84a50:	e0bfff15 	stw	r2,-4(fp)
   84a54:	00000606 	br	84a70 <_do_ctors+0x40>
        (*ctor) (); 
   84a58:	e0bfff17 	ldw	r2,-4(fp)
   84a5c:	10800017 	ldw	r2,0(r2)
   84a60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84a64:	e0bfff17 	ldw	r2,-4(fp)
   84a68:	10bfff04 	addi	r2,r2,-4
   84a6c:	e0bfff15 	stw	r2,-4(fp)
   84a70:	e0ffff17 	ldw	r3,-4(fp)
   84a74:	00800234 	movhi	r2,8
   84a78:	10969904 	addi	r2,r2,23140
   84a7c:	18bff62e 	bgeu	r3,r2,84a58 <_do_ctors+0x28>
        (*ctor) (); 
}
   84a80:	e037883a 	mov	sp,fp
   84a84:	dfc00117 	ldw	ra,4(sp)
   84a88:	df000017 	ldw	fp,0(sp)
   84a8c:	dec00204 	addi	sp,sp,8
   84a90:	f800283a 	ret

00084a94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   84a94:	defffd04 	addi	sp,sp,-12
   84a98:	dfc00215 	stw	ra,8(sp)
   84a9c:	df000115 	stw	fp,4(sp)
   84aa0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   84aa4:	00bfff04 	movi	r2,-4
   84aa8:	00c00234 	movhi	r3,8
   84aac:	18d69a04 	addi	r3,r3,23144
   84ab0:	1885883a 	add	r2,r3,r2
   84ab4:	e0bfff15 	stw	r2,-4(fp)
   84ab8:	00000606 	br	84ad4 <_do_dtors+0x40>
        (*dtor) (); 
   84abc:	e0bfff17 	ldw	r2,-4(fp)
   84ac0:	10800017 	ldw	r2,0(r2)
   84ac4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   84ac8:	e0bfff17 	ldw	r2,-4(fp)
   84acc:	10bfff04 	addi	r2,r2,-4
   84ad0:	e0bfff15 	stw	r2,-4(fp)
   84ad4:	e0ffff17 	ldw	r3,-4(fp)
   84ad8:	00800234 	movhi	r2,8
   84adc:	10969a04 	addi	r2,r2,23144
   84ae0:	18bff62e 	bgeu	r3,r2,84abc <_do_dtors+0x28>
        (*dtor) (); 
}
   84ae4:	e037883a 	mov	sp,fp
   84ae8:	dfc00117 	ldw	ra,4(sp)
   84aec:	df000017 	ldw	fp,0(sp)
   84af0:	dec00204 	addi	sp,sp,8
   84af4:	f800283a 	ret

00084af8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   84af8:	deffff04 	addi	sp,sp,-4
   84afc:	df000015 	stw	fp,0(sp)
   84b00:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   84b04:	e037883a 	mov	sp,fp
   84b08:	df000017 	ldw	fp,0(sp)
   84b0c:	dec00104 	addi	sp,sp,4
   84b10:	f800283a 	ret

00084b14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84b14:	defff904 	addi	sp,sp,-28
   84b18:	dfc00615 	stw	ra,24(sp)
   84b1c:	df000515 	stw	fp,20(sp)
   84b20:	df000504 	addi	fp,sp,20
   84b24:	e13ffc15 	stw	r4,-16(fp)
   84b28:	e17ffd15 	stw	r5,-12(fp)
   84b2c:	e1bffe15 	stw	r6,-8(fp)
   84b30:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   84b34:	e0800217 	ldw	r2,8(fp)
   84b38:	d8800015 	stw	r2,0(sp)
   84b3c:	e13ffc17 	ldw	r4,-16(fp)
   84b40:	e17ffd17 	ldw	r5,-12(fp)
   84b44:	e1bffe17 	ldw	r6,-8(fp)
   84b48:	e1ffff17 	ldw	r7,-4(fp)
   84b4c:	0084ce80 	call	84ce8 <alt_iic_isr_register>
}  
   84b50:	e037883a 	mov	sp,fp
   84b54:	dfc00117 	ldw	ra,4(sp)
   84b58:	df000017 	ldw	fp,0(sp)
   84b5c:	dec00204 	addi	sp,sp,8
   84b60:	f800283a 	ret

00084b64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   84b64:	defff904 	addi	sp,sp,-28
   84b68:	df000615 	stw	fp,24(sp)
   84b6c:	df000604 	addi	fp,sp,24
   84b70:	e13ffe15 	stw	r4,-8(fp)
   84b74:	e17fff15 	stw	r5,-4(fp)
   84b78:	e0bfff17 	ldw	r2,-4(fp)
   84b7c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84b80:	0005303a 	rdctl	r2,status
   84b84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84b88:	e0fffb17 	ldw	r3,-20(fp)
   84b8c:	00bfff84 	movi	r2,-2
   84b90:	1884703a 	and	r2,r3,r2
   84b94:	1001703a 	wrctl	status,r2
  
  return context;
   84b98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84b9c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   84ba0:	e0fffc17 	ldw	r3,-16(fp)
   84ba4:	00800044 	movi	r2,1
   84ba8:	10c4983a 	sll	r2,r2,r3
   84bac:	1007883a 	mov	r3,r2
   84bb0:	00800274 	movhi	r2,9
   84bb4:	10a3ef04 	addi	r2,r2,-28740
   84bb8:	10800017 	ldw	r2,0(r2)
   84bbc:	1886b03a 	or	r3,r3,r2
   84bc0:	00800274 	movhi	r2,9
   84bc4:	10a3ef04 	addi	r2,r2,-28740
   84bc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84bcc:	00800274 	movhi	r2,9
   84bd0:	10a3ef04 	addi	r2,r2,-28740
   84bd4:	10800017 	ldw	r2,0(r2)
   84bd8:	100170fa 	wrctl	ienable,r2
   84bdc:	e0bffd17 	ldw	r2,-12(fp)
   84be0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84be4:	e0bffa17 	ldw	r2,-24(fp)
   84be8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84bec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   84bf0:	e037883a 	mov	sp,fp
   84bf4:	df000017 	ldw	fp,0(sp)
   84bf8:	dec00104 	addi	sp,sp,4
   84bfc:	f800283a 	ret

00084c00 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   84c00:	defff904 	addi	sp,sp,-28
   84c04:	df000615 	stw	fp,24(sp)
   84c08:	df000604 	addi	fp,sp,24
   84c0c:	e13ffe15 	stw	r4,-8(fp)
   84c10:	e17fff15 	stw	r5,-4(fp)
   84c14:	e0bfff17 	ldw	r2,-4(fp)
   84c18:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84c1c:	0005303a 	rdctl	r2,status
   84c20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84c24:	e0fffb17 	ldw	r3,-20(fp)
   84c28:	00bfff84 	movi	r2,-2
   84c2c:	1884703a 	and	r2,r3,r2
   84c30:	1001703a 	wrctl	status,r2
  
  return context;
   84c34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84c38:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   84c3c:	e0fffc17 	ldw	r3,-16(fp)
   84c40:	00800044 	movi	r2,1
   84c44:	10c4983a 	sll	r2,r2,r3
   84c48:	0084303a 	nor	r2,zero,r2
   84c4c:	1007883a 	mov	r3,r2
   84c50:	00800274 	movhi	r2,9
   84c54:	10a3ef04 	addi	r2,r2,-28740
   84c58:	10800017 	ldw	r2,0(r2)
   84c5c:	1886703a 	and	r3,r3,r2
   84c60:	00800274 	movhi	r2,9
   84c64:	10a3ef04 	addi	r2,r2,-28740
   84c68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84c6c:	00800274 	movhi	r2,9
   84c70:	10a3ef04 	addi	r2,r2,-28740
   84c74:	10800017 	ldw	r2,0(r2)
   84c78:	100170fa 	wrctl	ienable,r2
   84c7c:	e0bffd17 	ldw	r2,-12(fp)
   84c80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84c84:	e0bffa17 	ldw	r2,-24(fp)
   84c88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84c8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   84c90:	e037883a 	mov	sp,fp
   84c94:	df000017 	ldw	fp,0(sp)
   84c98:	dec00104 	addi	sp,sp,4
   84c9c:	f800283a 	ret

00084ca0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   84ca0:	defffc04 	addi	sp,sp,-16
   84ca4:	df000315 	stw	fp,12(sp)
   84ca8:	df000304 	addi	fp,sp,12
   84cac:	e13ffe15 	stw	r4,-8(fp)
   84cb0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   84cb4:	000530fa 	rdctl	r2,ienable
   84cb8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   84cbc:	e0ffff17 	ldw	r3,-4(fp)
   84cc0:	00800044 	movi	r2,1
   84cc4:	10c4983a 	sll	r2,r2,r3
   84cc8:	1007883a 	mov	r3,r2
   84ccc:	e0bffd17 	ldw	r2,-12(fp)
   84cd0:	1884703a 	and	r2,r3,r2
   84cd4:	1004c03a 	cmpne	r2,r2,zero
}
   84cd8:	e037883a 	mov	sp,fp
   84cdc:	df000017 	ldw	fp,0(sp)
   84ce0:	dec00104 	addi	sp,sp,4
   84ce4:	f800283a 	ret

00084ce8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84ce8:	defff404 	addi	sp,sp,-48
   84cec:	dfc00b15 	stw	ra,44(sp)
   84cf0:	df000a15 	stw	fp,40(sp)
   84cf4:	df000a04 	addi	fp,sp,40
   84cf8:	e13ffb15 	stw	r4,-20(fp)
   84cfc:	e17ffc15 	stw	r5,-16(fp)
   84d00:	e1bffd15 	stw	r6,-12(fp)
   84d04:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   84d08:	00bffa84 	movi	r2,-22
   84d0c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   84d10:	e0bffc17 	ldw	r2,-16(fp)
   84d14:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   84d18:	e0bff917 	ldw	r2,-28(fp)
   84d1c:	10800808 	cmpgei	r2,r2,32
   84d20:	1000291e 	bne	r2,zero,84dc8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84d24:	0005303a 	rdctl	r2,status
   84d28:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84d2c:	e0fff717 	ldw	r3,-36(fp)
   84d30:	00bfff84 	movi	r2,-2
   84d34:	1884703a 	and	r2,r3,r2
   84d38:	1001703a 	wrctl	status,r2
  
  return context;
   84d3c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   84d40:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   84d44:	e0bff917 	ldw	r2,-28(fp)
   84d48:	00c00274 	movhi	r3,9
   84d4c:	18e3ff04 	addi	r3,r3,-28676
   84d50:	100490fa 	slli	r2,r2,3
   84d54:	10c7883a 	add	r3,r2,r3
   84d58:	e0bffd17 	ldw	r2,-12(fp)
   84d5c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   84d60:	e0bff917 	ldw	r2,-28(fp)
   84d64:	00c00274 	movhi	r3,9
   84d68:	18e3ff04 	addi	r3,r3,-28676
   84d6c:	100490fa 	slli	r2,r2,3
   84d70:	10c5883a 	add	r2,r2,r3
   84d74:	10c00104 	addi	r3,r2,4
   84d78:	e0bffe17 	ldw	r2,-8(fp)
   84d7c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   84d80:	e0bffd17 	ldw	r2,-12(fp)
   84d84:	1005003a 	cmpeq	r2,r2,zero
   84d88:	1000051e 	bne	r2,zero,84da0 <alt_iic_isr_register+0xb8>
   84d8c:	e17ff917 	ldw	r5,-28(fp)
   84d90:	e13ffb17 	ldw	r4,-20(fp)
   84d94:	0084b640 	call	84b64 <alt_ic_irq_enable>
   84d98:	e0bfff15 	stw	r2,-4(fp)
   84d9c:	00000406 	br	84db0 <alt_iic_isr_register+0xc8>
   84da0:	e17ff917 	ldw	r5,-28(fp)
   84da4:	e13ffb17 	ldw	r4,-20(fp)
   84da8:	0084c000 	call	84c00 <alt_ic_irq_disable>
   84dac:	e0bfff15 	stw	r2,-4(fp)
   84db0:	e0bfff17 	ldw	r2,-4(fp)
   84db4:	e0bffa15 	stw	r2,-24(fp)
   84db8:	e0bff817 	ldw	r2,-32(fp)
   84dbc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84dc0:	e0bff617 	ldw	r2,-40(fp)
   84dc4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   84dc8:	e0bffa17 	ldw	r2,-24(fp)
}
   84dcc:	e037883a 	mov	sp,fp
   84dd0:	dfc00117 	ldw	ra,4(sp)
   84dd4:	df000017 	ldw	fp,0(sp)
   84dd8:	dec00204 	addi	sp,sp,8
   84ddc:	f800283a 	ret

00084de0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   84de0:	defff804 	addi	sp,sp,-32
   84de4:	dfc00715 	stw	ra,28(sp)
   84de8:	df000615 	stw	fp,24(sp)
   84dec:	dc000515 	stw	r16,20(sp)
   84df0:	df000504 	addi	fp,sp,20
   84df4:	e13ffc15 	stw	r4,-16(fp)
   84df8:	e17ffd15 	stw	r5,-12(fp)
   84dfc:	e1bffe15 	stw	r6,-8(fp)
   84e00:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   84e04:	e13ffd17 	ldw	r4,-12(fp)
   84e08:	e17ffe17 	ldw	r5,-8(fp)
   84e0c:	e1bfff17 	ldw	r6,-4(fp)
   84e10:	00850280 	call	85028 <open>
   84e14:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   84e18:	e0bffb17 	ldw	r2,-20(fp)
   84e1c:	1004803a 	cmplt	r2,r2,zero
   84e20:	10001f1e 	bne	r2,zero,84ea0 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   84e24:	e13ffb17 	ldw	r4,-20(fp)
   84e28:	04000234 	movhi	r16,8
   84e2c:	8418b904 	addi	r16,r16,25316
   84e30:	01400304 	movi	r5,12
   84e34:	0082f480 	call	82f48 <__mulsi3>
   84e38:	1405883a 	add	r2,r2,r16
   84e3c:	10c00017 	ldw	r3,0(r2)
   84e40:	e0bffc17 	ldw	r2,-16(fp)
   84e44:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   84e48:	e13ffb17 	ldw	r4,-20(fp)
   84e4c:	04000234 	movhi	r16,8
   84e50:	8418b904 	addi	r16,r16,25316
   84e54:	01400304 	movi	r5,12
   84e58:	0082f480 	call	82f48 <__mulsi3>
   84e5c:	1405883a 	add	r2,r2,r16
   84e60:	10800104 	addi	r2,r2,4
   84e64:	10c00017 	ldw	r3,0(r2)
   84e68:	e0bffc17 	ldw	r2,-16(fp)
   84e6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   84e70:	e13ffb17 	ldw	r4,-20(fp)
   84e74:	04000234 	movhi	r16,8
   84e78:	8418b904 	addi	r16,r16,25316
   84e7c:	01400304 	movi	r5,12
   84e80:	0082f480 	call	82f48 <__mulsi3>
   84e84:	1405883a 	add	r2,r2,r16
   84e88:	10800204 	addi	r2,r2,8
   84e8c:	10c00017 	ldw	r3,0(r2)
   84e90:	e0bffc17 	ldw	r2,-16(fp)
   84e94:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   84e98:	e13ffb17 	ldw	r4,-20(fp)
   84e9c:	00839980 	call	83998 <alt_release_fd>
  }
} 
   84ea0:	e037883a 	mov	sp,fp
   84ea4:	dfc00217 	ldw	ra,8(sp)
   84ea8:	df000117 	ldw	fp,4(sp)
   84eac:	dc000017 	ldw	r16,0(sp)
   84eb0:	dec00304 	addi	sp,sp,12
   84eb4:	f800283a 	ret

00084eb8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   84eb8:	defffb04 	addi	sp,sp,-20
   84ebc:	dfc00415 	stw	ra,16(sp)
   84ec0:	df000315 	stw	fp,12(sp)
   84ec4:	df000304 	addi	fp,sp,12
   84ec8:	e13ffd15 	stw	r4,-12(fp)
   84ecc:	e17ffe15 	stw	r5,-8(fp)
   84ed0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   84ed4:	01000234 	movhi	r4,8
   84ed8:	2118bc04 	addi	r4,r4,25328
   84edc:	e17ffd17 	ldw	r5,-12(fp)
   84ee0:	01800044 	movi	r6,1
   84ee4:	01c07fc4 	movi	r7,511
   84ee8:	0084de00 	call	84de0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   84eec:	01000234 	movhi	r4,8
   84ef0:	2118b904 	addi	r4,r4,25316
   84ef4:	e17ffe17 	ldw	r5,-8(fp)
   84ef8:	000d883a 	mov	r6,zero
   84efc:	01c07fc4 	movi	r7,511
   84f00:	0084de00 	call	84de0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   84f04:	01000234 	movhi	r4,8
   84f08:	2118bf04 	addi	r4,r4,25340
   84f0c:	e17fff17 	ldw	r5,-4(fp)
   84f10:	01800044 	movi	r6,1
   84f14:	01c07fc4 	movi	r7,511
   84f18:	0084de00 	call	84de0 <alt_open_fd>
}  
   84f1c:	e037883a 	mov	sp,fp
   84f20:	dfc00117 	ldw	ra,4(sp)
   84f24:	df000017 	ldw	fp,0(sp)
   84f28:	dec00204 	addi	sp,sp,8
   84f2c:	f800283a 	ret

00084f30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   84f30:	defffa04 	addi	sp,sp,-24
   84f34:	dfc00515 	stw	ra,20(sp)
   84f38:	df000415 	stw	fp,16(sp)
   84f3c:	dc000315 	stw	r16,12(sp)
   84f40:	df000304 	addi	fp,sp,12
   84f44:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   84f48:	e0bffe17 	ldw	r2,-8(fp)
   84f4c:	10800217 	ldw	r2,8(r2)
   84f50:	10d00034 	orhi	r3,r2,16384
   84f54:	e0bffe17 	ldw	r2,-8(fp)
   84f58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84f5c:	e03ffd15 	stw	zero,-12(fp)
   84f60:	00002306 	br	84ff0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   84f64:	e13ffd17 	ldw	r4,-12(fp)
   84f68:	04000234 	movhi	r16,8
   84f6c:	8418b904 	addi	r16,r16,25316
   84f70:	01400304 	movi	r5,12
   84f74:	0082f480 	call	82f48 <__mulsi3>
   84f78:	1405883a 	add	r2,r2,r16
   84f7c:	10c00017 	ldw	r3,0(r2)
   84f80:	e0bffe17 	ldw	r2,-8(fp)
   84f84:	10800017 	ldw	r2,0(r2)
   84f88:	1880161e 	bne	r3,r2,84fe4 <alt_file_locked+0xb4>
   84f8c:	e13ffd17 	ldw	r4,-12(fp)
   84f90:	04000234 	movhi	r16,8
   84f94:	8418b904 	addi	r16,r16,25316
   84f98:	01400304 	movi	r5,12
   84f9c:	0082f480 	call	82f48 <__mulsi3>
   84fa0:	1405883a 	add	r2,r2,r16
   84fa4:	10800204 	addi	r2,r2,8
   84fa8:	10800017 	ldw	r2,0(r2)
   84fac:	1004403a 	cmpge	r2,r2,zero
   84fb0:	10000c1e 	bne	r2,zero,84fe4 <alt_file_locked+0xb4>
   84fb4:	e13ffd17 	ldw	r4,-12(fp)
   84fb8:	01400304 	movi	r5,12
   84fbc:	0082f480 	call	82f48 <__mulsi3>
   84fc0:	1007883a 	mov	r3,r2
   84fc4:	00800234 	movhi	r2,8
   84fc8:	1098b904 	addi	r2,r2,25316
   84fcc:	1887883a 	add	r3,r3,r2
   84fd0:	e0bffe17 	ldw	r2,-8(fp)
   84fd4:	18800326 	beq	r3,r2,84fe4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   84fd8:	00bffcc4 	movi	r2,-13
   84fdc:	e0bfff15 	stw	r2,-4(fp)
   84fe0:	00000a06 	br	8500c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84fe4:	e0bffd17 	ldw	r2,-12(fp)
   84fe8:	10800044 	addi	r2,r2,1
   84fec:	e0bffd15 	stw	r2,-12(fp)
   84ff0:	00800234 	movhi	r2,8
   84ff4:	109d3c04 	addi	r2,r2,29936
   84ff8:	10800017 	ldw	r2,0(r2)
   84ffc:	1007883a 	mov	r3,r2
   85000:	e0bffd17 	ldw	r2,-12(fp)
   85004:	18bfd72e 	bgeu	r3,r2,84f64 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   85008:	e03fff15 	stw	zero,-4(fp)
   8500c:	e0bfff17 	ldw	r2,-4(fp)
}
   85010:	e037883a 	mov	sp,fp
   85014:	dfc00217 	ldw	ra,8(sp)
   85018:	df000117 	ldw	fp,4(sp)
   8501c:	dc000017 	ldw	r16,0(sp)
   85020:	dec00304 	addi	sp,sp,12
   85024:	f800283a 	ret

00085028 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   85028:	defff404 	addi	sp,sp,-48
   8502c:	dfc00b15 	stw	ra,44(sp)
   85030:	df000a15 	stw	fp,40(sp)
   85034:	df000a04 	addi	fp,sp,40
   85038:	e13ffb15 	stw	r4,-20(fp)
   8503c:	e17ffc15 	stw	r5,-16(fp)
   85040:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   85044:	00bfffc4 	movi	r2,-1
   85048:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8504c:	00bffb44 	movi	r2,-19
   85050:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   85054:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   85058:	e13ffb17 	ldw	r4,-20(fp)
   8505c:	01400234 	movhi	r5,8
   85060:	295d3a04 	addi	r5,r5,29928
   85064:	00853d80 	call	853d8 <alt_find_dev>
   85068:	e0bffa15 	stw	r2,-24(fp)
   8506c:	e0bffa17 	ldw	r2,-24(fp)
   85070:	1004c03a 	cmpne	r2,r2,zero
   85074:	1000051e 	bne	r2,zero,8508c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   85078:	e13ffb17 	ldw	r4,-20(fp)
   8507c:	008546c0 	call	8546c <alt_find_file>
   85080:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   85084:	00800044 	movi	r2,1
   85088:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8508c:	e0bffa17 	ldw	r2,-24(fp)
   85090:	1005003a 	cmpeq	r2,r2,zero
   85094:	1000311e 	bne	r2,zero,8515c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   85098:	e13ffa17 	ldw	r4,-24(fp)
   8509c:	008558c0 	call	8558c <alt_get_fd>
   850a0:	e0bff815 	stw	r2,-32(fp)
   850a4:	e0bff817 	ldw	r2,-32(fp)
   850a8:	1004403a 	cmpge	r2,r2,zero
   850ac:	1000031e 	bne	r2,zero,850bc <open+0x94>
    {
      status = index;
   850b0:	e0bff817 	ldw	r2,-32(fp)
   850b4:	e0bff715 	stw	r2,-36(fp)
   850b8:	00002a06 	br	85164 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   850bc:	e13ff817 	ldw	r4,-32(fp)
   850c0:	01400304 	movi	r5,12
   850c4:	0082f480 	call	82f48 <__mulsi3>
   850c8:	1007883a 	mov	r3,r2
   850cc:	00800234 	movhi	r2,8
   850d0:	1098b904 	addi	r2,r2,25316
   850d4:	1885883a 	add	r2,r3,r2
   850d8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   850dc:	e0fffc17 	ldw	r3,-16(fp)
   850e0:	00900034 	movhi	r2,16384
   850e4:	10bfffc4 	addi	r2,r2,-1
   850e8:	1886703a 	and	r3,r3,r2
   850ec:	e0bff917 	ldw	r2,-28(fp)
   850f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   850f4:	e0bff617 	ldw	r2,-40(fp)
   850f8:	1004c03a 	cmpne	r2,r2,zero
   850fc:	1000061e 	bne	r2,zero,85118 <open+0xf0>
   85100:	e13ff917 	ldw	r4,-28(fp)
   85104:	0084f300 	call	84f30 <alt_file_locked>
   85108:	e0bff715 	stw	r2,-36(fp)
   8510c:	e0bff717 	ldw	r2,-36(fp)
   85110:	1004803a 	cmplt	r2,r2,zero
   85114:	1000131e 	bne	r2,zero,85164 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   85118:	e0bffa17 	ldw	r2,-24(fp)
   8511c:	10800317 	ldw	r2,12(r2)
   85120:	1005003a 	cmpeq	r2,r2,zero
   85124:	1000091e 	bne	r2,zero,8514c <open+0x124>
   85128:	e0bffa17 	ldw	r2,-24(fp)
   8512c:	10800317 	ldw	r2,12(r2)
   85130:	e13ff917 	ldw	r4,-28(fp)
   85134:	e17ffb17 	ldw	r5,-20(fp)
   85138:	e1bffc17 	ldw	r6,-16(fp)
   8513c:	e1fffd17 	ldw	r7,-12(fp)
   85140:	103ee83a 	callr	r2
   85144:	e0bfff15 	stw	r2,-4(fp)
   85148:	00000106 	br	85150 <open+0x128>
   8514c:	e03fff15 	stw	zero,-4(fp)
   85150:	e0bfff17 	ldw	r2,-4(fp)
   85154:	e0bff715 	stw	r2,-36(fp)
   85158:	00000206 	br	85164 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8515c:	00bffb44 	movi	r2,-19
   85160:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   85164:	e0bff717 	ldw	r2,-36(fp)
   85168:	1004403a 	cmpge	r2,r2,zero
   8516c:	1000091e 	bne	r2,zero,85194 <open+0x16c>
  {
    alt_release_fd (index);  
   85170:	e13ff817 	ldw	r4,-32(fp)
   85174:	00839980 	call	83998 <alt_release_fd>
    ALT_ERRNO = -status;
   85178:	00851b40 	call	851b4 <alt_get_errno>
   8517c:	e0fff717 	ldw	r3,-36(fp)
   85180:	00c7c83a 	sub	r3,zero,r3
   85184:	10c00015 	stw	r3,0(r2)
    return -1;
   85188:	00bfffc4 	movi	r2,-1
   8518c:	e0bffe15 	stw	r2,-8(fp)
   85190:	00000206 	br	8519c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   85194:	e0bff817 	ldw	r2,-32(fp)
   85198:	e0bffe15 	stw	r2,-8(fp)
   8519c:	e0bffe17 	ldw	r2,-8(fp)
}
   851a0:	e037883a 	mov	sp,fp
   851a4:	dfc00117 	ldw	ra,4(sp)
   851a8:	df000017 	ldw	fp,0(sp)
   851ac:	dec00204 	addi	sp,sp,8
   851b0:	f800283a 	ret

000851b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   851b4:	defffd04 	addi	sp,sp,-12
   851b8:	dfc00215 	stw	ra,8(sp)
   851bc:	df000115 	stw	fp,4(sp)
   851c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   851c4:	00800234 	movhi	r2,8
   851c8:	109d3d04 	addi	r2,r2,29940
   851cc:	10800017 	ldw	r2,0(r2)
   851d0:	1005003a 	cmpeq	r2,r2,zero
   851d4:	1000061e 	bne	r2,zero,851f0 <alt_get_errno+0x3c>
   851d8:	00800234 	movhi	r2,8
   851dc:	109d3d04 	addi	r2,r2,29940
   851e0:	10800017 	ldw	r2,0(r2)
   851e4:	103ee83a 	callr	r2
   851e8:	e0bfff15 	stw	r2,-4(fp)
   851ec:	00000306 	br	851fc <alt_get_errno+0x48>
   851f0:	00800274 	movhi	r2,9
   851f4:	10a3ee04 	addi	r2,r2,-28744
   851f8:	e0bfff15 	stw	r2,-4(fp)
   851fc:	e0bfff17 	ldw	r2,-4(fp)
}
   85200:	e037883a 	mov	sp,fp
   85204:	dfc00117 	ldw	ra,4(sp)
   85208:	df000017 	ldw	fp,0(sp)
   8520c:	dec00204 	addi	sp,sp,8
   85210:	f800283a 	ret

00085214 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   85214:	defffa04 	addi	sp,sp,-24
   85218:	df000515 	stw	fp,20(sp)
   8521c:	df000504 	addi	fp,sp,20
   85220:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85224:	0005303a 	rdctl	r2,status
   85228:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8522c:	e0fffd17 	ldw	r3,-12(fp)
   85230:	00bfff84 	movi	r2,-2
   85234:	1884703a 	and	r2,r3,r2
   85238:	1001703a 	wrctl	status,r2
  
  return context;
   8523c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   85240:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   85244:	e0bfff17 	ldw	r2,-4(fp)
   85248:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8524c:	e0bffc17 	ldw	r2,-16(fp)
   85250:	10c00017 	ldw	r3,0(r2)
   85254:	e0bffc17 	ldw	r2,-16(fp)
   85258:	10800117 	ldw	r2,4(r2)
   8525c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   85260:	e0bffc17 	ldw	r2,-16(fp)
   85264:	10c00117 	ldw	r3,4(r2)
   85268:	e0bffc17 	ldw	r2,-16(fp)
   8526c:	10800017 	ldw	r2,0(r2)
   85270:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   85274:	e0fffc17 	ldw	r3,-16(fp)
   85278:	e0bffc17 	ldw	r2,-16(fp)
   8527c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   85280:	e0fffc17 	ldw	r3,-16(fp)
   85284:	e0bffc17 	ldw	r2,-16(fp)
   85288:	18800015 	stw	r2,0(r3)
   8528c:	e0bffe17 	ldw	r2,-8(fp)
   85290:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85294:	e0bffb17 	ldw	r2,-20(fp)
   85298:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8529c:	e037883a 	mov	sp,fp
   852a0:	df000017 	ldw	fp,0(sp)
   852a4:	dec00104 	addi	sp,sp,4
   852a8:	f800283a 	ret

000852ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   852ac:	defffb04 	addi	sp,sp,-20
   852b0:	dfc00415 	stw	ra,16(sp)
   852b4:	df000315 	stw	fp,12(sp)
   852b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   852bc:	d0a00f17 	ldw	r2,-32708(gp)
   852c0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   852c4:	d0a6c317 	ldw	r2,-25844(gp)
   852c8:	10800044 	addi	r2,r2,1
   852cc:	d0a6c315 	stw	r2,-25844(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   852d0:	00003106 	br	85398 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   852d4:	e0bffe17 	ldw	r2,-8(fp)
   852d8:	10800017 	ldw	r2,0(r2)
   852dc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   852e0:	e0bffe17 	ldw	r2,-8(fp)
   852e4:	10800403 	ldbu	r2,16(r2)
   852e8:	10803fcc 	andi	r2,r2,255
   852ec:	1005003a 	cmpeq	r2,r2,zero
   852f0:	1000051e 	bne	r2,zero,85308 <alt_tick+0x5c>
   852f4:	d0a6c317 	ldw	r2,-25844(gp)
   852f8:	1004c03a 	cmpne	r2,r2,zero
   852fc:	1000021e 	bne	r2,zero,85308 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   85300:	e0bffe17 	ldw	r2,-8(fp)
   85304:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   85308:	e0bffe17 	ldw	r2,-8(fp)
   8530c:	10c00217 	ldw	r3,8(r2)
   85310:	d0a6c317 	ldw	r2,-25844(gp)
   85314:	10c01e36 	bltu	r2,r3,85390 <alt_tick+0xe4>
   85318:	e0bffe17 	ldw	r2,-8(fp)
   8531c:	10800403 	ldbu	r2,16(r2)
   85320:	10803fcc 	andi	r2,r2,255
   85324:	1004c03a 	cmpne	r2,r2,zero
   85328:	1000191e 	bne	r2,zero,85390 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8532c:	e0bffe17 	ldw	r2,-8(fp)
   85330:	10c00317 	ldw	r3,12(r2)
   85334:	e0bffe17 	ldw	r2,-8(fp)
   85338:	11000517 	ldw	r4,20(r2)
   8533c:	183ee83a 	callr	r3
   85340:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   85344:	e0bffd17 	ldw	r2,-12(fp)
   85348:	1004c03a 	cmpne	r2,r2,zero
   8534c:	1000031e 	bne	r2,zero,8535c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   85350:	e13ffe17 	ldw	r4,-8(fp)
   85354:	00852140 	call	85214 <alt_alarm_stop>
   85358:	00000d06 	br	85390 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8535c:	e0bffe17 	ldw	r2,-8(fp)
   85360:	10c00217 	ldw	r3,8(r2)
   85364:	e0bffd17 	ldw	r2,-12(fp)
   85368:	1887883a 	add	r3,r3,r2
   8536c:	e0bffe17 	ldw	r2,-8(fp)
   85370:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   85374:	e0bffe17 	ldw	r2,-8(fp)
   85378:	10c00217 	ldw	r3,8(r2)
   8537c:	d0a6c317 	ldw	r2,-25844(gp)
   85380:	1880032e 	bgeu	r3,r2,85390 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   85384:	e0fffe17 	ldw	r3,-8(fp)
   85388:	00800044 	movi	r2,1
   8538c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   85390:	e0bfff17 	ldw	r2,-4(fp)
   85394:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   85398:	d0e00f04 	addi	r3,gp,-32708
   8539c:	e0bffe17 	ldw	r2,-8(fp)
   853a0:	10ffcc1e 	bne	r2,r3,852d4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   853a4:	e037883a 	mov	sp,fp
   853a8:	dfc00117 	ldw	ra,4(sp)
   853ac:	df000017 	ldw	fp,0(sp)
   853b0:	dec00204 	addi	sp,sp,8
   853b4:	f800283a 	ret

000853b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   853b8:	deffff04 	addi	sp,sp,-4
   853bc:	df000015 	stw	fp,0(sp)
   853c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   853c4:	000170fa 	wrctl	ienable,zero
}
   853c8:	e037883a 	mov	sp,fp
   853cc:	df000017 	ldw	fp,0(sp)
   853d0:	dec00104 	addi	sp,sp,4
   853d4:	f800283a 	ret

000853d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   853d8:	defff904 	addi	sp,sp,-28
   853dc:	dfc00615 	stw	ra,24(sp)
   853e0:	df000515 	stw	fp,20(sp)
   853e4:	df000504 	addi	fp,sp,20
   853e8:	e13ffd15 	stw	r4,-12(fp)
   853ec:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   853f0:	e0bffe17 	ldw	r2,-8(fp)
   853f4:	10800017 	ldw	r2,0(r2)
   853f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   853fc:	e13ffd17 	ldw	r4,-12(fp)
   85400:	00806b80 	call	806b8 <strlen>
   85404:	10800044 	addi	r2,r2,1
   85408:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8540c:	00000d06 	br	85444 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   85410:	e0bffc17 	ldw	r2,-16(fp)
   85414:	11000217 	ldw	r4,8(r2)
   85418:	e1bffb17 	ldw	r6,-20(fp)
   8541c:	e17ffd17 	ldw	r5,-12(fp)
   85420:	00856a80 	call	856a8 <memcmp>
   85424:	1004c03a 	cmpne	r2,r2,zero
   85428:	1000031e 	bne	r2,zero,85438 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8542c:	e0bffc17 	ldw	r2,-16(fp)
   85430:	e0bfff15 	stw	r2,-4(fp)
   85434:	00000706 	br	85454 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   85438:	e0bffc17 	ldw	r2,-16(fp)
   8543c:	10800017 	ldw	r2,0(r2)
   85440:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   85444:	e0fffe17 	ldw	r3,-8(fp)
   85448:	e0bffc17 	ldw	r2,-16(fp)
   8544c:	10fff01e 	bne	r2,r3,85410 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   85450:	e03fff15 	stw	zero,-4(fp)
   85454:	e0bfff17 	ldw	r2,-4(fp)
}
   85458:	e037883a 	mov	sp,fp
   8545c:	dfc00117 	ldw	ra,4(sp)
   85460:	df000017 	ldw	fp,0(sp)
   85464:	dec00204 	addi	sp,sp,8
   85468:	f800283a 	ret

0008546c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8546c:	defffa04 	addi	sp,sp,-24
   85470:	dfc00515 	stw	ra,20(sp)
   85474:	df000415 	stw	fp,16(sp)
   85478:	df000404 	addi	fp,sp,16
   8547c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   85480:	00800234 	movhi	r2,8
   85484:	109d3804 	addi	r2,r2,29920
   85488:	10800017 	ldw	r2,0(r2)
   8548c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   85490:	00003306 	br	85560 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   85494:	e0bffd17 	ldw	r2,-12(fp)
   85498:	11000217 	ldw	r4,8(r2)
   8549c:	00806b80 	call	806b8 <strlen>
   854a0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   854a4:	e0bffd17 	ldw	r2,-12(fp)
   854a8:	10c00217 	ldw	r3,8(r2)
   854ac:	e0bffc17 	ldw	r2,-16(fp)
   854b0:	1885883a 	add	r2,r3,r2
   854b4:	10bfffc4 	addi	r2,r2,-1
   854b8:	10800003 	ldbu	r2,0(r2)
   854bc:	10803fcc 	andi	r2,r2,255
   854c0:	1080201c 	xori	r2,r2,128
   854c4:	10bfe004 	addi	r2,r2,-128
   854c8:	10800bd8 	cmpnei	r2,r2,47
   854cc:	1000031e 	bne	r2,zero,854dc <alt_find_file+0x70>
    {
      len -= 1;
   854d0:	e0bffc17 	ldw	r2,-16(fp)
   854d4:	10bfffc4 	addi	r2,r2,-1
   854d8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   854dc:	e0bffc17 	ldw	r2,-16(fp)
   854e0:	1007883a 	mov	r3,r2
   854e4:	e0bffe17 	ldw	r2,-8(fp)
   854e8:	1885883a 	add	r2,r3,r2
   854ec:	10800003 	ldbu	r2,0(r2)
   854f0:	10803fcc 	andi	r2,r2,255
   854f4:	1080201c 	xori	r2,r2,128
   854f8:	10bfe004 	addi	r2,r2,-128
   854fc:	10800be0 	cmpeqi	r2,r2,47
   85500:	10000a1e 	bne	r2,zero,8552c <alt_find_file+0xc0>
   85504:	e0bffc17 	ldw	r2,-16(fp)
   85508:	1007883a 	mov	r3,r2
   8550c:	e0bffe17 	ldw	r2,-8(fp)
   85510:	1885883a 	add	r2,r3,r2
   85514:	10800003 	ldbu	r2,0(r2)
   85518:	10803fcc 	andi	r2,r2,255
   8551c:	1080201c 	xori	r2,r2,128
   85520:	10bfe004 	addi	r2,r2,-128
   85524:	1004c03a 	cmpne	r2,r2,zero
   85528:	10000a1e 	bne	r2,zero,85554 <alt_find_file+0xe8>
   8552c:	e0bffd17 	ldw	r2,-12(fp)
   85530:	11000217 	ldw	r4,8(r2)
   85534:	e1bffc17 	ldw	r6,-16(fp)
   85538:	e17ffe17 	ldw	r5,-8(fp)
   8553c:	00856a80 	call	856a8 <memcmp>
   85540:	1004c03a 	cmpne	r2,r2,zero
   85544:	1000031e 	bne	r2,zero,85554 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   85548:	e0bffd17 	ldw	r2,-12(fp)
   8554c:	e0bfff15 	stw	r2,-4(fp)
   85550:	00000806 	br	85574 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   85554:	e0bffd17 	ldw	r2,-12(fp)
   85558:	10800017 	ldw	r2,0(r2)
   8555c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   85560:	00c00234 	movhi	r3,8
   85564:	18dd3804 	addi	r3,r3,29920
   85568:	e0bffd17 	ldw	r2,-12(fp)
   8556c:	10ffc91e 	bne	r2,r3,85494 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   85570:	e03fff15 	stw	zero,-4(fp)
   85574:	e0bfff17 	ldw	r2,-4(fp)
}
   85578:	e037883a 	mov	sp,fp
   8557c:	dfc00117 	ldw	ra,4(sp)
   85580:	df000017 	ldw	fp,0(sp)
   85584:	dec00204 	addi	sp,sp,8
   85588:	f800283a 	ret

0008558c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8558c:	defffa04 	addi	sp,sp,-24
   85590:	dfc00515 	stw	ra,20(sp)
   85594:	df000415 	stw	fp,16(sp)
   85598:	dc000315 	stw	r16,12(sp)
   8559c:	df000304 	addi	fp,sp,12
   855a0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   855a4:	00bffa04 	movi	r2,-24
   855a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   855ac:	e03ffe15 	stw	zero,-8(fp)
   855b0:	00002006 	br	85634 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   855b4:	e13ffe17 	ldw	r4,-8(fp)
   855b8:	04000234 	movhi	r16,8
   855bc:	8418b904 	addi	r16,r16,25316
   855c0:	01400304 	movi	r5,12
   855c4:	0082f480 	call	82f48 <__mulsi3>
   855c8:	1405883a 	add	r2,r2,r16
   855cc:	10800017 	ldw	r2,0(r2)
   855d0:	1004c03a 	cmpne	r2,r2,zero
   855d4:	1000141e 	bne	r2,zero,85628 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   855d8:	e13ffe17 	ldw	r4,-8(fp)
   855dc:	04000234 	movhi	r16,8
   855e0:	8418b904 	addi	r16,r16,25316
   855e4:	01400304 	movi	r5,12
   855e8:	0082f480 	call	82f48 <__mulsi3>
   855ec:	1407883a 	add	r3,r2,r16
   855f0:	e0bfff17 	ldw	r2,-4(fp)
   855f4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   855f8:	00800234 	movhi	r2,8
   855fc:	109d3c04 	addi	r2,r2,29936
   85600:	10c00017 	ldw	r3,0(r2)
   85604:	e0bffe17 	ldw	r2,-8(fp)
   85608:	1880040e 	bge	r3,r2,8561c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   8560c:	00c00234 	movhi	r3,8
   85610:	18dd3c04 	addi	r3,r3,29936
   85614:	e0bffe17 	ldw	r2,-8(fp)
   85618:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8561c:	e0bffe17 	ldw	r2,-8(fp)
   85620:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   85624:	00000606 	br	85640 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   85628:	e0bffe17 	ldw	r2,-8(fp)
   8562c:	10800044 	addi	r2,r2,1
   85630:	e0bffe15 	stw	r2,-8(fp)
   85634:	e0bffe17 	ldw	r2,-8(fp)
   85638:	10800810 	cmplti	r2,r2,32
   8563c:	103fdd1e 	bne	r2,zero,855b4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   85640:	e0bffd17 	ldw	r2,-12(fp)
}
   85644:	e037883a 	mov	sp,fp
   85648:	dfc00217 	ldw	ra,8(sp)
   8564c:	df000117 	ldw	fp,4(sp)
   85650:	dc000017 	ldw	r16,0(sp)
   85654:	dec00304 	addi	sp,sp,12
   85658:	f800283a 	ret

0008565c <atexit>:
   8565c:	200b883a 	mov	r5,r4
   85660:	000d883a 	mov	r6,zero
   85664:	0009883a 	mov	r4,zero
   85668:	000f883a 	mov	r7,zero
   8566c:	008571c1 	jmpi	8571c <__register_exitproc>

00085670 <exit>:
   85670:	defffe04 	addi	sp,sp,-8
   85674:	000b883a 	mov	r5,zero
   85678:	dc000015 	stw	r16,0(sp)
   8567c:	dfc00115 	stw	ra,4(sp)
   85680:	2021883a 	mov	r16,r4
   85684:	00858540 	call	85854 <__call_exitprocs>
   85688:	00800234 	movhi	r2,8
   8568c:	109d3504 	addi	r2,r2,29908
   85690:	11000017 	ldw	r4,0(r2)
   85694:	20800f17 	ldw	r2,60(r4)
   85698:	10000126 	beq	r2,zero,856a0 <exit+0x30>
   8569c:	103ee83a 	callr	r2
   856a0:	8009883a 	mov	r4,r16
   856a4:	0085a440 	call	85a44 <_exit>

000856a8 <memcmp>:
   856a8:	00c000c4 	movi	r3,3
   856ac:	1980032e 	bgeu	r3,r6,856bc <memcmp+0x14>
   856b0:	2144b03a 	or	r2,r4,r5
   856b4:	10c4703a 	and	r2,r2,r3
   856b8:	10000f26 	beq	r2,zero,856f8 <memcmp+0x50>
   856bc:	31ffffc4 	addi	r7,r6,-1
   856c0:	3000061e 	bne	r6,zero,856dc <memcmp+0x34>
   856c4:	00000a06 	br	856f0 <memcmp+0x48>
   856c8:	39ffffc4 	addi	r7,r7,-1
   856cc:	00bfffc4 	movi	r2,-1
   856d0:	21000044 	addi	r4,r4,1
   856d4:	29400044 	addi	r5,r5,1
   856d8:	38800526 	beq	r7,r2,856f0 <memcmp+0x48>
   856dc:	20c00003 	ldbu	r3,0(r4)
   856e0:	28800003 	ldbu	r2,0(r5)
   856e4:	18bff826 	beq	r3,r2,856c8 <memcmp+0x20>
   856e8:	1885c83a 	sub	r2,r3,r2
   856ec:	f800283a 	ret
   856f0:	0005883a 	mov	r2,zero
   856f4:	f800283a 	ret
   856f8:	180f883a 	mov	r7,r3
   856fc:	20c00017 	ldw	r3,0(r4)
   85700:	28800017 	ldw	r2,0(r5)
   85704:	18bfed1e 	bne	r3,r2,856bc <memcmp+0x14>
   85708:	31bfff04 	addi	r6,r6,-4
   8570c:	21000104 	addi	r4,r4,4
   85710:	29400104 	addi	r5,r5,4
   85714:	39bff936 	bltu	r7,r6,856fc <memcmp+0x54>
   85718:	003fe806 	br	856bc <memcmp+0x14>

0008571c <__register_exitproc>:
   8571c:	defffa04 	addi	sp,sp,-24
   85720:	00800234 	movhi	r2,8
   85724:	109d3504 	addi	r2,r2,29908
   85728:	dc000015 	stw	r16,0(sp)
   8572c:	14000017 	ldw	r16,0(r2)
   85730:	dd000415 	stw	r20,16(sp)
   85734:	2829883a 	mov	r20,r5
   85738:	81405217 	ldw	r5,328(r16)
   8573c:	dcc00315 	stw	r19,12(sp)
   85740:	dc800215 	stw	r18,8(sp)
   85744:	dc400115 	stw	r17,4(sp)
   85748:	dfc00515 	stw	ra,20(sp)
   8574c:	2023883a 	mov	r17,r4
   85750:	3027883a 	mov	r19,r6
   85754:	3825883a 	mov	r18,r7
   85758:	28002526 	beq	r5,zero,857f0 <__register_exitproc+0xd4>
   8575c:	29000117 	ldw	r4,4(r5)
   85760:	008007c4 	movi	r2,31
   85764:	11002716 	blt	r2,r4,85804 <__register_exitproc+0xe8>
   85768:	8800101e 	bne	r17,zero,857ac <__register_exitproc+0x90>
   8576c:	2105883a 	add	r2,r4,r4
   85770:	1085883a 	add	r2,r2,r2
   85774:	20c00044 	addi	r3,r4,1
   85778:	1145883a 	add	r2,r2,r5
   8577c:	0009883a 	mov	r4,zero
   85780:	15000215 	stw	r20,8(r2)
   85784:	28c00115 	stw	r3,4(r5)
   85788:	2005883a 	mov	r2,r4
   8578c:	dfc00517 	ldw	ra,20(sp)
   85790:	dd000417 	ldw	r20,16(sp)
   85794:	dcc00317 	ldw	r19,12(sp)
   85798:	dc800217 	ldw	r18,8(sp)
   8579c:	dc400117 	ldw	r17,4(sp)
   857a0:	dc000017 	ldw	r16,0(sp)
   857a4:	dec00604 	addi	sp,sp,24
   857a8:	f800283a 	ret
   857ac:	29802204 	addi	r6,r5,136
   857b0:	00800044 	movi	r2,1
   857b4:	110e983a 	sll	r7,r2,r4
   857b8:	30c04017 	ldw	r3,256(r6)
   857bc:	2105883a 	add	r2,r4,r4
   857c0:	1085883a 	add	r2,r2,r2
   857c4:	1185883a 	add	r2,r2,r6
   857c8:	19c6b03a 	or	r3,r3,r7
   857cc:	14802015 	stw	r18,128(r2)
   857d0:	14c00015 	stw	r19,0(r2)
   857d4:	00800084 	movi	r2,2
   857d8:	30c04015 	stw	r3,256(r6)
   857dc:	88bfe31e 	bne	r17,r2,8576c <__register_exitproc+0x50>
   857e0:	30804117 	ldw	r2,260(r6)
   857e4:	11c4b03a 	or	r2,r2,r7
   857e8:	30804115 	stw	r2,260(r6)
   857ec:	003fdf06 	br	8576c <__register_exitproc+0x50>
   857f0:	00800274 	movhi	r2,9
   857f4:	10a43f04 	addi	r2,r2,-28420
   857f8:	100b883a 	mov	r5,r2
   857fc:	80805215 	stw	r2,328(r16)
   85800:	003fd606 	br	8575c <__register_exitproc+0x40>
   85804:	00800034 	movhi	r2,0
   85808:	10800004 	addi	r2,r2,0
   8580c:	1000021e 	bne	r2,zero,85818 <__register_exitproc+0xfc>
   85810:	013fffc4 	movi	r4,-1
   85814:	003fdc06 	br	85788 <__register_exitproc+0x6c>
   85818:	01006404 	movi	r4,400
   8581c:	103ee83a 	callr	r2
   85820:	1007883a 	mov	r3,r2
   85824:	103ffa26 	beq	r2,zero,85810 <__register_exitproc+0xf4>
   85828:	80805217 	ldw	r2,328(r16)
   8582c:	180b883a 	mov	r5,r3
   85830:	18000115 	stw	zero,4(r3)
   85834:	18800015 	stw	r2,0(r3)
   85838:	80c05215 	stw	r3,328(r16)
   8583c:	18006215 	stw	zero,392(r3)
   85840:	18006315 	stw	zero,396(r3)
   85844:	0009883a 	mov	r4,zero
   85848:	883fc826 	beq	r17,zero,8576c <__register_exitproc+0x50>
   8584c:	003fd706 	br	857ac <__register_exitproc+0x90>

00085850 <register_fini>:
   85850:	f800283a 	ret

00085854 <__call_exitprocs>:
   85854:	00800234 	movhi	r2,8
   85858:	109d3504 	addi	r2,r2,29908
   8585c:	10800017 	ldw	r2,0(r2)
   85860:	defff304 	addi	sp,sp,-52
   85864:	df000b15 	stw	fp,44(sp)
   85868:	d8800115 	stw	r2,4(sp)
   8586c:	00800034 	movhi	r2,0
   85870:	10800004 	addi	r2,r2,0
   85874:	1005003a 	cmpeq	r2,r2,zero
   85878:	d8800215 	stw	r2,8(sp)
   8587c:	d8800117 	ldw	r2,4(sp)
   85880:	dd400815 	stw	r21,32(sp)
   85884:	dd000715 	stw	r20,28(sp)
   85888:	10805204 	addi	r2,r2,328
   8588c:	dfc00c15 	stw	ra,48(sp)
   85890:	ddc00a15 	stw	r23,40(sp)
   85894:	dd800915 	stw	r22,36(sp)
   85898:	dcc00615 	stw	r19,24(sp)
   8589c:	dc800515 	stw	r18,20(sp)
   858a0:	dc400415 	stw	r17,16(sp)
   858a4:	dc000315 	stw	r16,12(sp)
   858a8:	282b883a 	mov	r21,r5
   858ac:	2039883a 	mov	fp,r4
   858b0:	d8800015 	stw	r2,0(sp)
   858b4:	2829003a 	cmpeq	r20,r5,zero
   858b8:	d8800117 	ldw	r2,4(sp)
   858bc:	14405217 	ldw	r17,328(r2)
   858c0:	88001026 	beq	r17,zero,85904 <__call_exitprocs+0xb0>
   858c4:	ddc00017 	ldw	r23,0(sp)
   858c8:	88800117 	ldw	r2,4(r17)
   858cc:	8c802204 	addi	r18,r17,136
   858d0:	143fffc4 	addi	r16,r2,-1
   858d4:	80000916 	blt	r16,zero,858fc <__call_exitprocs+0xa8>
   858d8:	05bfffc4 	movi	r22,-1
   858dc:	a000151e 	bne	r20,zero,85934 <__call_exitprocs+0xe0>
   858e0:	8409883a 	add	r4,r16,r16
   858e4:	2105883a 	add	r2,r4,r4
   858e8:	1485883a 	add	r2,r2,r18
   858ec:	10c02017 	ldw	r3,128(r2)
   858f0:	a8c01126 	beq	r21,r3,85938 <__call_exitprocs+0xe4>
   858f4:	843fffc4 	addi	r16,r16,-1
   858f8:	85bff81e 	bne	r16,r22,858dc <__call_exitprocs+0x88>
   858fc:	d8800217 	ldw	r2,8(sp)
   85900:	10003126 	beq	r2,zero,859c8 <__call_exitprocs+0x174>
   85904:	dfc00c17 	ldw	ra,48(sp)
   85908:	df000b17 	ldw	fp,44(sp)
   8590c:	ddc00a17 	ldw	r23,40(sp)
   85910:	dd800917 	ldw	r22,36(sp)
   85914:	dd400817 	ldw	r21,32(sp)
   85918:	dd000717 	ldw	r20,28(sp)
   8591c:	dcc00617 	ldw	r19,24(sp)
   85920:	dc800517 	ldw	r18,20(sp)
   85924:	dc400417 	ldw	r17,16(sp)
   85928:	dc000317 	ldw	r16,12(sp)
   8592c:	dec00d04 	addi	sp,sp,52
   85930:	f800283a 	ret
   85934:	8409883a 	add	r4,r16,r16
   85938:	88c00117 	ldw	r3,4(r17)
   8593c:	2105883a 	add	r2,r4,r4
   85940:	1445883a 	add	r2,r2,r17
   85944:	18ffffc4 	addi	r3,r3,-1
   85948:	11800217 	ldw	r6,8(r2)
   8594c:	1c001526 	beq	r3,r16,859a4 <__call_exitprocs+0x150>
   85950:	10000215 	stw	zero,8(r2)
   85954:	303fe726 	beq	r6,zero,858f4 <__call_exitprocs+0xa0>
   85958:	00c00044 	movi	r3,1
   8595c:	1c06983a 	sll	r3,r3,r16
   85960:	90804017 	ldw	r2,256(r18)
   85964:	8cc00117 	ldw	r19,4(r17)
   85968:	1884703a 	and	r2,r3,r2
   8596c:	10001426 	beq	r2,zero,859c0 <__call_exitprocs+0x16c>
   85970:	90804117 	ldw	r2,260(r18)
   85974:	1884703a 	and	r2,r3,r2
   85978:	10000c1e 	bne	r2,zero,859ac <__call_exitprocs+0x158>
   8597c:	2105883a 	add	r2,r4,r4
   85980:	1485883a 	add	r2,r2,r18
   85984:	11400017 	ldw	r5,0(r2)
   85988:	e009883a 	mov	r4,fp
   8598c:	303ee83a 	callr	r6
   85990:	88800117 	ldw	r2,4(r17)
   85994:	98bfc81e 	bne	r19,r2,858b8 <__call_exitprocs+0x64>
   85998:	b8800017 	ldw	r2,0(r23)
   8599c:	147fd526 	beq	r2,r17,858f4 <__call_exitprocs+0xa0>
   859a0:	003fc506 	br	858b8 <__call_exitprocs+0x64>
   859a4:	8c000115 	stw	r16,4(r17)
   859a8:	003fea06 	br	85954 <__call_exitprocs+0x100>
   859ac:	2105883a 	add	r2,r4,r4
   859b0:	1485883a 	add	r2,r2,r18
   859b4:	11000017 	ldw	r4,0(r2)
   859b8:	303ee83a 	callr	r6
   859bc:	003ff406 	br	85990 <__call_exitprocs+0x13c>
   859c0:	303ee83a 	callr	r6
   859c4:	003ff206 	br	85990 <__call_exitprocs+0x13c>
   859c8:	88800117 	ldw	r2,4(r17)
   859cc:	1000081e 	bne	r2,zero,859f0 <__call_exitprocs+0x19c>
   859d0:	89000017 	ldw	r4,0(r17)
   859d4:	20000726 	beq	r4,zero,859f4 <__call_exitprocs+0x1a0>
   859d8:	b9000015 	stw	r4,0(r23)
   859dc:	8809883a 	mov	r4,r17
   859e0:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   859e4:	bc400017 	ldw	r17,0(r23)
   859e8:	883fb71e 	bne	r17,zero,858c8 <__call_exitprocs+0x74>
   859ec:	003fc506 	br	85904 <__call_exitprocs+0xb0>
   859f0:	89000017 	ldw	r4,0(r17)
   859f4:	882f883a 	mov	r23,r17
   859f8:	2023883a 	mov	r17,r4
   859fc:	883fb21e 	bne	r17,zero,858c8 <__call_exitprocs+0x74>
   85a00:	003fc006 	br	85904 <__call_exitprocs+0xb0>

00085a04 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   85a04:	defffd04 	addi	sp,sp,-12
   85a08:	df000215 	stw	fp,8(sp)
   85a0c:	df000204 	addi	fp,sp,8
   85a10:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   85a14:	e0bfff17 	ldw	r2,-4(fp)
   85a18:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   85a1c:	e0bffe17 	ldw	r2,-8(fp)
   85a20:	1005003a 	cmpeq	r2,r2,zero
   85a24:	1000021e 	bne	r2,zero,85a30 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   85a28:	002af070 	cmpltui	zero,zero,43969
   85a2c:	00000106 	br	85a34 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   85a30:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   85a34:	e037883a 	mov	sp,fp
   85a38:	df000017 	ldw	fp,0(sp)
   85a3c:	dec00104 	addi	sp,sp,4
   85a40:	f800283a 	ret

00085a44 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   85a44:	defffd04 	addi	sp,sp,-12
   85a48:	dfc00215 	stw	ra,8(sp)
   85a4c:	df000115 	stw	fp,4(sp)
   85a50:	df000104 	addi	fp,sp,4
   85a54:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   85a58:	e13fff17 	ldw	r4,-4(fp)
   85a5c:	0085a040 	call	85a04 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   85a60:	003fff06 	br	85a60 <_exit+0x1c>
   85a64:	00085850 	cmplti	zero,zero,8545
